namespace RogueTraderUnityToolkit.UnityGenerated.Types;

using Core;
using Unity;
using Engine;
using Game;

/* $StreamedResource (3 fields) */
public record class StreamedResource(
    AsciiString m_Source /* NeedsAlign */,
    ulong m_Offset /* NeedsAlign */,
    ulong m_Size /* None */)
{
    public static StreamedResource Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Source */
        AsciiString _m_Source = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Offset */
        ulong _m_Offset = reader.ReadU64();
        ulong _m_Size = reader.ReadU64();
        
        return new(_m_Source,
            _m_Offset,
            _m_Size);
    }
}

/* $Vector4f (4 fields) */
public readonly record struct Vector4f(
    float x /* None */,
    float y /* None */,
    float z /* None */,
    float w /* None */)
{
    public static Vector4f Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _z = reader.ReadF32();
        float _w = reader.ReadF32();
        
        return new(_x,
            _y,
            _z,
            _w);
    }
}

/* $StaticBatchInfo (2 fields) */
public readonly record struct StaticBatchInfo(
    ushort firstSubMesh /* None */,
    ushort subMeshCount /* None */)
{
    public static StaticBatchInfo Read(EndianBinaryReader reader)
    {
        ushort _firstSubMesh = reader.ReadU16();
        ushort _subMeshCount = reader.ReadU16();
        
        return new(_firstSubMesh,
            _subMeshCount);
    }
}

/* $Quaternionf (4 fields) */
public readonly record struct Quaternionf(
    float x /* None */,
    float y /* None */,
    float z /* None */,
    float w /* None */)
{
    public static Quaternionf Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _z = reader.ReadF32();
        float _w = reader.ReadF32();
        
        return new(_x,
            _y,
            _z,
            _w);
    }
}

/* $Vector3f (3 fields) */
public readonly record struct Vector3f(
    float x /* None */,
    float y /* None */,
    float z /* None */)
{
    public static Vector3f Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _z = reader.ReadF32();
        
        return new(_x,
            _y,
            _z);
    }
}

/* $AnimationClipOverride (2 fields) */
public record class AnimationClipOverride(
    PPtr<AnimationClip> m_OriginalClip /* None */,
    PPtr<AnimationClip> m_OverrideClip /* None */)
{
    public static AnimationClipOverride Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClip> _m_OriginalClip = PPtr<AnimationClip>.Read(reader);
        PPtr<AnimationClip> _m_OverrideClip = PPtr<AnimationClip>.Read(reader);
        
        return new(_m_OriginalClip,
            _m_OverrideClip);
    }
}

/* $LODRenderer (1 fields) */
public record class LODRenderer(
    PPtr<Renderer> renderer /* None */)
{
    public static LODRenderer Read(EndianBinaryReader reader)
    {
        PPtr<Renderer> _renderer = PPtr<Renderer>.Read(reader);
        
        return new(_renderer);
    }
}

/* $LOD (3 fields) */
public record class LOD(
    float screenRelativeHeight /* None */,
    float fadeTransitionWidth /* None */,
    LODRenderer[] renderers /* None */)
{
    public static LOD Read(EndianBinaryReader reader)
    {
        float _screenRelativeHeight = reader.ReadF32();
        float _fadeTransitionWidth = reader.ReadF32();
        LODRenderer[] _renderers = BuiltInArray<LODRenderer>.Read(reader);
        
        return new(_screenRelativeHeight,
            _fadeTransitionWidth,
            _renderers);
    }
}

/* $Rectf (4 fields) */
public readonly record struct Rectf(
    float x /* None */,
    float y /* None */,
    float width /* None */,
    float height /* None */)
{
    public static Rectf Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _width = reader.ReadF32();
        float _height = reader.ReadF32();
        
        return new(_x,
            _y,
            _width,
            _height);
    }
}

/* $CharacterInfo (5 fields) */
public record class CharacterInfo(
    uint index /* None */,
    Rectf uv /* None */,
    Rectf vert /* None */,
    float advance /* None */,
    bool flipped /* None */)
{
    public static CharacterInfo Read(EndianBinaryReader reader)
    {
        uint _index = reader.ReadU32();
        Rectf _uv = Rectf.Read(reader);
        Rectf _vert = Rectf.Read(reader);
        float _advance = reader.ReadF32();
        bool _flipped = reader.ReadBool();
        
        return new(_index,
            _uv,
            _vert,
            _advance,
            _flipped);
    }
}

/* $pair (2 fields) */
public readonly record struct pair(
    ushort first /* None */,
    ushort second /* None */)
{
    public static pair Read(EndianBinaryReader reader)
    {
        ushort _first = reader.ReadU16();
        ushort _second = reader.ReadU16();
        
        return new(_first,
            _second);
    }
}

/* $BitField (1 fields) */
public readonly record struct BitField(
    uint m_Bits /* None */)
{
    public static BitField Read(EndianBinaryReader reader)
    {
        uint _m_Bits = reader.ReadU32();
        
        return new(_m_Bits);
    }
}

/* $AABB (2 fields) */
public record class AABB(
    Vector3f m_Center /* None */,
    Vector3f m_Extent /* None */)
{
    public static AABB Read(EndianBinaryReader reader)
    {
        Vector3f _m_Center = Vector3f.Read(reader);
        Vector3f _m_Extent = Vector3f.Read(reader);
        
        return new(_m_Center,
            _m_Extent);
    }
}

/* $SubMesh (7 fields) */
public record class SubMesh(
    uint firstByte /* None */,
    uint indexCount /* None */,
    int topology /* None */,
    uint baseVertex /* None */,
    uint firstVertex /* None */,
    uint vertexCount /* None */,
    AABB localAABB /* None */)
{
    public static SubMesh Read(EndianBinaryReader reader)
    {
        uint _firstByte = reader.ReadU32();
        uint _indexCount = reader.ReadU32();
        int _topology = reader.ReadS32();
        uint _baseVertex = reader.ReadU32();
        uint _firstVertex = reader.ReadU32();
        uint _vertexCount = reader.ReadU32();
        AABB _localAABB = AABB.Read(reader);
        
        return new(_firstByte,
            _indexCount,
            _topology,
            _baseVertex,
            _firstVertex,
            _vertexCount,
            _localAABB);
    }
}

/* $BlendShapeVertex (4 fields) */
public record class BlendShapeVertex(
    Vector3f vertex /* None */,
    Vector3f normal /* None */,
    Vector3f tangent /* None */,
    uint index /* None */)
{
    public static BlendShapeVertex Read(EndianBinaryReader reader)
    {
        Vector3f _vertex = Vector3f.Read(reader);
        Vector3f _normal = Vector3f.Read(reader);
        Vector3f _tangent = Vector3f.Read(reader);
        uint _index = reader.ReadU32();
        
        return new(_vertex,
            _normal,
            _tangent,
            _index);
    }
}

/* $MeshBlendShape (4 fields) */
public readonly record struct MeshBlendShape(
    uint firstVertex /* None */,
    uint vertexCount /* None */,
    bool hasNormals /* None */,
    bool hasTangents /* None */)
{
    public static MeshBlendShape Read(EndianBinaryReader reader)
    {
        uint _firstVertex = reader.ReadU32();
        uint _vertexCount = reader.ReadU32();
        bool _hasNormals = reader.ReadBool();
        bool _hasTangents = reader.ReadBool();
        
        return new(_firstVertex,
            _vertexCount,
            _hasNormals,
            _hasTangents);
    }
}

/* $MeshBlendShapeChannel (4 fields) */
public record class MeshBlendShapeChannel(
    AsciiString name /* None */,
    uint nameHash /* NeedsAlign */,
    int frameIndex /* None */,
    int frameCount /* None */)
{
    public static MeshBlendShapeChannel Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* nameHash */
        uint _nameHash = reader.ReadU32();
        int _frameIndex = reader.ReadS32();
        int _frameCount = reader.ReadS32();
        
        return new(_name,
            _nameHash,
            _frameIndex,
            _frameCount);
    }
}

/* $BlendShapeData (4 fields) */
public record class BlendShapeData(
    BlendShapeVertex[] vertices /* NeedsAlign */,
    MeshBlendShape[] shapes /* NeedsAlign */,
    MeshBlendShapeChannel[] channels /* NeedsAlign */,
    float[] fullWeights /* NeedsAlign */)
{
    public static BlendShapeData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* vertices */
        BlendShapeVertex[] _vertices = BuiltInArray<BlendShapeVertex>.Read(reader);
        reader.AlignTo(4); /* shapes */
        MeshBlendShape[] _shapes = BuiltInArray<MeshBlendShape>.Read(reader);
        reader.AlignTo(4); /* channels */
        MeshBlendShapeChannel[] _channels = BuiltInArray<MeshBlendShapeChannel>.Read(reader);
        reader.AlignTo(4); /* fullWeights */
        float[] _fullWeights = BuiltInArray<float>.Read(reader);
        
        return new(_vertices,
            _shapes,
            _channels,
            _fullWeights);
    }
}

/* $Matrix4x4f (16 fields) */
public readonly record struct Matrix4x4f(
    float e00 /* None */,
    float e01 /* None */,
    float e02 /* None */,
    float e03 /* None */,
    float e10 /* None */,
    float e11 /* None */,
    float e12 /* None */,
    float e13 /* None */,
    float e20 /* None */,
    float e21 /* None */,
    float e22 /* None */,
    float e23 /* None */,
    float e30 /* None */,
    float e31 /* None */,
    float e32 /* None */,
    float e33 /* None */)
{
    public static Matrix4x4f Read(EndianBinaryReader reader)
    {
        float _e00 = reader.ReadF32();
        float _e01 = reader.ReadF32();
        float _e02 = reader.ReadF32();
        float _e03 = reader.ReadF32();
        float _e10 = reader.ReadF32();
        float _e11 = reader.ReadF32();
        float _e12 = reader.ReadF32();
        float _e13 = reader.ReadF32();
        float _e20 = reader.ReadF32();
        float _e21 = reader.ReadF32();
        float _e22 = reader.ReadF32();
        float _e23 = reader.ReadF32();
        float _e30 = reader.ReadF32();
        float _e31 = reader.ReadF32();
        float _e32 = reader.ReadF32();
        float _e33 = reader.ReadF32();
        
        return new(_e00,
            _e01,
            _e02,
            _e03,
            _e10,
            _e11,
            _e12,
            _e13,
            _e20,
            _e21,
            _e22,
            _e23,
            _e30,
            _e31,
            _e32,
            _e33);
    }
}

/* $MinMaxAABB (2 fields) */
public record class MinMaxAABB(
    Vector3f m_Min /* None */,
    Vector3f m_Max /* None */)
{
    public static MinMaxAABB Read(EndianBinaryReader reader)
    {
        Vector3f _m_Min = Vector3f.Read(reader);
        Vector3f _m_Max = Vector3f.Read(reader);
        
        return new(_m_Min,
            _m_Max);
    }
}

/* $VariableBoneCountWeights (1 fields) */
public record class VariableBoneCountWeights(
    uint[] m_Data /* NeedsAlign */)
{
    public static VariableBoneCountWeights Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Data */
        uint[] _m_Data = BuiltInArray<uint>.Read(reader);
        
        return new(_m_Data);
    }
}

/* $ChannelInfo (4 fields) */
public readonly record struct ChannelInfo(
    byte stream /* None */,
    byte offset /* None */,
    byte format /* None */,
    byte dimension /* None */)
{
    public static ChannelInfo Read(EndianBinaryReader reader)
    {
        byte _stream = reader.ReadU8();
        byte _offset = reader.ReadU8();
        byte _format = reader.ReadU8();
        byte _dimension = reader.ReadU8();
        
        return new(_stream,
            _offset,
            _format,
            _dimension);
    }
}

/* $TypelessData (2 fields) */
public readonly record struct TypelessData(
    int size /* NeedsAlign */,
    byte data /* None */)
{
    public static TypelessData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* size */
        int _size = reader.ReadS32();
        byte _data = reader.ReadU8();
        
        return new(_size,
            _data);
    }
}

/* $VertexData (3 fields) */
public record class VertexData(
    uint m_VertexCount /* NeedsAlign */,
    ChannelInfo[] m_Channels /* None */,
    TypelessData m_DataSize /* NeedsAlign */)
{
    public static VertexData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_VertexCount */
        uint _m_VertexCount = reader.ReadU32();
        ChannelInfo[] _m_Channels = BuiltInArray<ChannelInfo>.Read(reader);
        reader.AlignTo(4); /* m_DataSize */
        TypelessData _m_DataSize = TypelessData.Read(reader);
        
        return new(_m_VertexCount,
            _m_Channels,
            _m_DataSize);
    }
}

/* $PackedBitVector (5 fields) */
public record class PackedBitVector(
    uint m_NumItems /* NeedsAlign */,
    float m_Range /* None */,
    float m_Start /* None */,
    byte[] m_Data /* None */,
    byte m_BitSize /* NeedsAlign */)
{
    public static PackedBitVector Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_NumItems */
        uint _m_NumItems = reader.ReadU32();
        float _m_Range = reader.ReadF32();
        float _m_Start = reader.ReadF32();
        byte[] _m_Data = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_BitSize */
        byte _m_BitSize = reader.ReadU8();
        
        return new(_m_NumItems,
            _m_Range,
            _m_Start,
            _m_Data,
            _m_BitSize);
    }
}

/* $CompressedMesh (11 fields) */
public record class CompressedMesh(
    PackedBitVector m_Vertices /* NeedsAlign */,
    PackedBitVector m_UV /* NeedsAlign */,
    PackedBitVector m_Normals /* NeedsAlign */,
    PackedBitVector m_Tangents /* NeedsAlign */,
    PackedBitVector m_Weights /* NeedsAlign */,
    PackedBitVector m_NormalSigns /* NeedsAlign */,
    PackedBitVector m_TangentSigns /* NeedsAlign */,
    PackedBitVector m_FloatColors /* NeedsAlign */,
    PackedBitVector m_BoneIndices /* NeedsAlign */,
    PackedBitVector m_Triangles /* NeedsAlign */,
    uint m_UVInfo /* NeedsAlign */)
{
    public static CompressedMesh Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Vertices */
        PackedBitVector _m_Vertices = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_UV */
        PackedBitVector _m_UV = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Normals */
        PackedBitVector _m_Normals = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Tangents */
        PackedBitVector _m_Tangents = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Weights */
        PackedBitVector _m_Weights = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_NormalSigns */
        PackedBitVector _m_NormalSigns = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_TangentSigns */
        PackedBitVector _m_TangentSigns = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_FloatColors */
        PackedBitVector _m_FloatColors = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_BoneIndices */
        PackedBitVector _m_BoneIndices = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Triangles */
        PackedBitVector _m_Triangles = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_UVInfo */
        uint _m_UVInfo = reader.ReadU32();
        
        return new(_m_Vertices,
            _m_UV,
            _m_Normals,
            _m_Tangents,
            _m_Weights,
            _m_NormalSigns,
            _m_TangentSigns,
            _m_FloatColors,
            _m_BoneIndices,
            _m_Triangles,
            _m_UVInfo);
    }
}

/* $StreamingInfo (3 fields) */
public record class StreamingInfo(
    ulong offset /* NeedsAlign */,
    uint size /* None */,
    AsciiString path /* None */)
{
    public static StreamingInfo Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* offset */
        ulong _offset = reader.ReadU64();
        uint _size = reader.ReadU32();
        AsciiString _path = BuiltInString.Read(reader);
        
        return new(_offset,
            _size,
            _path);
    }
}

/* $Vector2f (2 fields) */
public readonly record struct Vector2f(
    float x /* None */,
    float y /* None */)
{
    public static Vector2f Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        
        return new(_x,
            _y);
    }
}

/* $ColorRGBA (4 fields) */
public readonly record struct ColorRGBA(
    float r /* None */,
    float g /* None */,
    float b /* None */,
    float a /* None */)
{
    public static ColorRGBA Read(EndianBinaryReader reader)
    {
        float _r = reader.ReadF32();
        float _g = reader.ReadF32();
        float _b = reader.ReadF32();
        float _a = reader.ReadF32();
        
        return new(_r,
            _g,
            _b,
            _a);
    }
}

/* $EnlightenRendererInformation (4 fields) */
public record class EnlightenRendererInformation(
    PPtr<Object> renderer /* None */,
    Vector4f dynamicLightmapSTInSystem /* None */,
    int systemId /* None */,
    Hash128 instanceHash /* None */)
{
    public static EnlightenRendererInformation Read(EndianBinaryReader reader)
    {
        PPtr<Object> _renderer = PPtr<Object>.Read(reader);
        Vector4f _dynamicLightmapSTInSystem = Vector4f.Read(reader);
        int _systemId = reader.ReadS32();
        Hash128 _instanceHash = Hash128.Read(reader);
        
        return new(_renderer,
            _dynamicLightmapSTInSystem,
            _systemId,
            _instanceHash);
    }
}

/* $EnlightenSystemInformation (7 fields) */
public record class EnlightenSystemInformation(
    uint rendererIndex /* None */,
    uint rendererSize /* None */,
    int atlasIndex /* None */,
    int atlasOffsetX /* None */,
    int atlasOffsetY /* None */,
    Hash128 inputSystemHash /* None */,
    Hash128 radiositySystemHash /* None */)
{
    public static EnlightenSystemInformation Read(EndianBinaryReader reader)
    {
        uint _rendererIndex = reader.ReadU32();
        uint _rendererSize = reader.ReadU32();
        int _atlasIndex = reader.ReadS32();
        int _atlasOffsetX = reader.ReadS32();
        int _atlasOffsetY = reader.ReadS32();
        Hash128 _inputSystemHash = Hash128.Read(reader);
        Hash128 _radiositySystemHash = Hash128.Read(reader);
        
        return new(_rendererIndex,
            _rendererSize,
            _atlasIndex,
            _atlasOffsetX,
            _atlasOffsetY,
            _inputSystemHash,
            _radiositySystemHash);
    }
}

/* $EnlightenSystemAtlasInformation (3 fields) */
public record class EnlightenSystemAtlasInformation(
    int atlasSize /* None */,
    Hash128 atlasHash /* None */,
    int firstSystemId /* None */)
{
    public static EnlightenSystemAtlasInformation Read(EndianBinaryReader reader)
    {
        int _atlasSize = reader.ReadS32();
        Hash128 _atlasHash = Hash128.Read(reader);
        int _firstSystemId = reader.ReadS32();
        
        return new(_atlasSize,
            _atlasHash,
            _firstSystemId);
    }
}

/* $EnlightenTerrainChunksInformation (3 fields) */
public readonly record struct EnlightenTerrainChunksInformation(
    int firstSystemId /* None */,
    int numChunksInX /* None */,
    int numChunksInY /* None */)
{
    public static EnlightenTerrainChunksInformation Read(EndianBinaryReader reader)
    {
        int _firstSystemId = reader.ReadS32();
        int _numChunksInX = reader.ReadS32();
        int _numChunksInY = reader.ReadS32();
        
        return new(_firstSystemId,
            _numChunksInX,
            _numChunksInY);
    }
}

/* $EnlightenSceneMapping (5 fields) */
public record class EnlightenSceneMapping(
    EnlightenRendererInformation[] m_Renderers /* None */,
    EnlightenSystemInformation[] m_Systems /* NeedsAlign */,
    Hash128[] m_Probesets /* NeedsAlign */,
    EnlightenSystemAtlasInformation[] m_SystemAtlases /* NeedsAlign */,
    EnlightenTerrainChunksInformation[] m_TerrainChunks /* NeedsAlign */)
{
    public static EnlightenSceneMapping Read(EndianBinaryReader reader)
    {
        EnlightenRendererInformation[] _m_Renderers = BuiltInArray<EnlightenRendererInformation>.Read(reader);
        reader.AlignTo(4); /* m_Systems */
        EnlightenSystemInformation[] _m_Systems = BuiltInArray<EnlightenSystemInformation>.Read(reader);
        reader.AlignTo(4); /* m_Probesets */
        Hash128[] _m_Probesets = BuiltInArray<Hash128>.Read(reader);
        reader.AlignTo(4); /* m_SystemAtlases */
        EnlightenSystemAtlasInformation[] _m_SystemAtlases = BuiltInArray<EnlightenSystemAtlasInformation>.Read(reader);
        reader.AlignTo(4); /* m_TerrainChunks */
        EnlightenTerrainChunksInformation[] _m_TerrainChunks = BuiltInArray<EnlightenTerrainChunksInformation>.Read(reader);
        
        return new(_m_Renderers,
            _m_Systems,
            _m_Probesets,
            _m_SystemAtlases,
            _m_TerrainChunks);
    }
}

/* $LightmapData (3 fields) */
public record class LightmapData(
    PPtr<Texture2D> m_Lightmap /* None */,
    PPtr<Texture2D> m_DirLightmap /* None */,
    PPtr<Texture2D> m_ShadowMask /* None */)
{
    public static LightmapData Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> _m_Lightmap = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _m_DirLightmap = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _m_ShadowMask = PPtr<Texture2D>.Read(reader);
        
        return new(_m_Lightmap,
            _m_DirLightmap,
            _m_ShadowMask);
    }
}

/* $GISettings (6 fields) */
public readonly record struct GISettings(
    float m_BounceScale /* NeedsAlign */,
    float m_IndirectOutputScale /* None */,
    float m_AlbedoBoost /* None */,
    uint m_EnvironmentLightingMode /* None */,
    bool m_EnableBakedLightmaps /* None */,
    bool m_EnableRealtimeLightmaps /* None */)
{
    public static GISettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_BounceScale */
        float _m_BounceScale = reader.ReadF32();
        float _m_IndirectOutputScale = reader.ReadF32();
        float _m_AlbedoBoost = reader.ReadF32();
        uint _m_EnvironmentLightingMode = reader.ReadU32();
        bool _m_EnableBakedLightmaps = reader.ReadBool();
        bool _m_EnableRealtimeLightmaps = reader.ReadBool();
        
        return new(_m_BounceScale,
            _m_IndirectOutputScale,
            _m_AlbedoBoost,
            _m_EnvironmentLightingMode,
            _m_EnableBakedLightmaps,
            _m_EnableRealtimeLightmaps);
    }
}

/* $AssetInfo (3 fields) */
public record class AssetInfo(
    int preloadIndex /* NeedsAlign */,
    int preloadSize /* None */,
    PPtr<Object> asset /* None */)
{
    public static AssetInfo Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* preloadIndex */
        int _preloadIndex = reader.ReadS32();
        int _preloadSize = reader.ReadS32();
        PPtr<Object> _asset = PPtr<Object>.Read(reader);
        
        return new(_preloadIndex,
            _preloadSize,
            _asset);
    }
}

/* $VFXEntryExposed (3 fields) */
public record class VFXEntryExposed(
    float m_Value /* None */,
    AsciiString m_Name /* NeedsAlign */,
    bool m_Overridden /* NeedsAlign */)
{
    public static VFXEntryExposed Read(EndianBinaryReader reader)
    {
        float _m_Value = reader.ReadF32();
        reader.AlignTo(4); /* m_Name */
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Overridden */
        bool _m_Overridden = reader.ReadBool();
        
        return new(_m_Value,
            _m_Name,
            _m_Overridden);
    }
}

/* $VFXField (1 fields) */
public record class VFXField(
    VFXEntryExposed[] m_Array /* NeedsAlign */)
{
    public static VFXField Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Array */
        VFXEntryExposed[] _m_Array = BuiltInArray<VFXEntryExposed>.Read(reader);
        
        return new(_m_Array);
    }
}

/* $VFXPropertySheetSerializedBase (11 fields) */
public record class VFXPropertySheetSerializedBase(
    VFXField m_Float /* NeedsAlign */,
    VFXField m_Vector2f /* NeedsAlign */,
    VFXField m_Vector3f /* NeedsAlign */,
    VFXField m_Vector4f /* NeedsAlign */,
    VFXField m_Uint /* NeedsAlign */,
    VFXField m_Int /* NeedsAlign */,
    VFXField m_Matrix4x4f /* NeedsAlign */,
    VFXField m_AnimationCurve /* NeedsAlign */,
    VFXField m_Gradient /* NeedsAlign */,
    VFXField m_NamedObject /* NeedsAlign */,
    VFXField m_Bool /* NeedsAlign */)
{
    public static VFXPropertySheetSerializedBase Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Float */
        VFXField _m_Float = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Vector2f */
        VFXField _m_Vector2f = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Vector3f */
        VFXField _m_Vector3f = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Vector4f */
        VFXField _m_Vector4f = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Uint */
        VFXField _m_Uint = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Int */
        VFXField _m_Int = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Matrix4x4f */
        VFXField _m_Matrix4x4f = VFXField.Read(reader);
        reader.AlignTo(4); /* m_AnimationCurve */
        VFXField _m_AnimationCurve = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Gradient */
        VFXField _m_Gradient = VFXField.Read(reader);
        reader.AlignTo(4); /* m_NamedObject */
        VFXField _m_NamedObject = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Bool */
        VFXField _m_Bool = VFXField.Read(reader);
        
        return new(_m_Float,
            _m_Vector2f,
            _m_Vector3f,
            _m_Vector4f,
            _m_Uint,
            _m_Int,
            _m_Matrix4x4f,
            _m_AnimationCurve,
            _m_Gradient,
            _m_NamedObject,
            _m_Bool);
    }
}

/* $SecondarySpriteTexture (2 fields) */
public record class SecondarySpriteTexture(
    PPtr<Texture2D> texture /* None */,
    AsciiString name /* None */)
{
    public static SecondarySpriteTexture Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> _texture = PPtr<Texture2D>.Read(reader);
        AsciiString _name = BuiltInString.Read(reader);
        
        return new(_texture,
            _name);
    }
}

/* $SpriteAtlasData (9 fields) */
public record class SpriteAtlasData(
    PPtr<Texture2D> texture /* None */,
    PPtr<Texture2D> alphaTexture /* None */,
    Rectf textureRect /* None */,
    Vector2f textureRectOffset /* None */,
    Vector2f atlasRectOffset /* None */,
    Vector4f uvTransform /* None */,
    float downscaleMultiplier /* None */,
    uint settingsRaw /* None */,
    SecondarySpriteTexture[] secondaryTextures /* None */)
{
    public static SpriteAtlasData Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> _texture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _alphaTexture = PPtr<Texture2D>.Read(reader);
        Rectf _textureRect = Rectf.Read(reader);
        Vector2f _textureRectOffset = Vector2f.Read(reader);
        Vector2f _atlasRectOffset = Vector2f.Read(reader);
        Vector4f _uvTransform = Vector4f.Read(reader);
        float _downscaleMultiplier = reader.ReadF32();
        uint _settingsRaw = reader.ReadU32();
        SecondarySpriteTexture[] _secondaryTextures = BuiltInArray<SecondarySpriteTexture>.Read(reader);
        
        return new(_texture,
            _alphaTexture,
            _textureRect,
            _textureRectOffset,
            _atlasRectOffset,
            _uvTransform,
            _downscaleMultiplier,
            _settingsRaw,
            _secondaryTextures);
    }
}

/* $SerializedTextureProperty (2 fields) */
public record class SerializedTextureProperty(
    AsciiString m_DefaultName /* None */,
    int m_TexDim /* NeedsAlign */)
{
    public static SerializedTextureProperty Read(EndianBinaryReader reader)
    {
        AsciiString _m_DefaultName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_TexDim */
        int _m_TexDim = reader.ReadS32();
        
        return new(_m_DefaultName,
            _m_TexDim);
    }
}

/* $SerializedProperty (10 fields) */
public record class SerializedProperty(
    AsciiString m_Name /* None */,
    AsciiString m_Description /* NeedsAlign */,
    AsciiString[] m_Attributes /* NeedsAlign */,
    int m_Type /* NeedsAlign */,
    uint m_Flags /* None */,
    float m_DefValue_0 /* None */,
    float m_DefValue_1 /* None */,
    float m_DefValue_2 /* None */,
    float m_DefValue_3 /* None */,
    SerializedTextureProperty m_DefTexture /* None */)
{
    public static SerializedProperty Read(EndianBinaryReader reader)
    {
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Description */
        AsciiString _m_Description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Attributes */
        AsciiString[] _m_Attributes = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_Type */
        int _m_Type = reader.ReadS32();
        uint _m_Flags = reader.ReadU32();
        float _m_DefValue_0 = reader.ReadF32();
        float _m_DefValue_1 = reader.ReadF32();
        float _m_DefValue_2 = reader.ReadF32();
        float _m_DefValue_3 = reader.ReadF32();
        SerializedTextureProperty _m_DefTexture = SerializedTextureProperty.Read(reader);
        
        return new(_m_Name,
            _m_Description,
            _m_Attributes,
            _m_Type,
            _m_Flags,
            _m_DefValue_0,
            _m_DefValue_1,
            _m_DefValue_2,
            _m_DefValue_3,
            _m_DefTexture);
    }
}

/* $SerializedProperties (1 fields) */
public record class SerializedProperties(
    SerializedProperty[] m_Props /* NeedsAlign */)
{
    public static SerializedProperties Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Props */
        SerializedProperty[] _m_Props = BuiltInArray<SerializedProperty>.Read(reader);
        
        return new(_m_Props);
    }
}

/* $SerializedShaderFloatValue (2 fields) */
public record class SerializedShaderFloatValue(
    float val /* NeedsAlign */,
    AsciiString name /* None */)
{
    public static SerializedShaderFloatValue Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* val */
        float _val = reader.ReadF32();
        AsciiString _name = BuiltInString.Read(reader);
        
        return new(_val,
            _name);
    }
}

/* $SerializedShaderRTBlendState (7 fields) */
public record class SerializedShaderRTBlendState(
    SerializedShaderFloatValue srcBlend /* NeedsAlign */,
    SerializedShaderFloatValue destBlend /* NeedsAlign */,
    SerializedShaderFloatValue srcBlendAlpha /* NeedsAlign */,
    SerializedShaderFloatValue destBlendAlpha /* NeedsAlign */,
    SerializedShaderFloatValue blendOp /* NeedsAlign */,
    SerializedShaderFloatValue blendOpAlpha /* NeedsAlign */,
    SerializedShaderFloatValue colMask /* NeedsAlign */)
{
    public static SerializedShaderRTBlendState Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* srcBlend */
        SerializedShaderFloatValue _srcBlend = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* destBlend */
        SerializedShaderFloatValue _destBlend = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* srcBlendAlpha */
        SerializedShaderFloatValue _srcBlendAlpha = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* destBlendAlpha */
        SerializedShaderFloatValue _destBlendAlpha = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* blendOp */
        SerializedShaderFloatValue _blendOp = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* blendOpAlpha */
        SerializedShaderFloatValue _blendOpAlpha = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* colMask */
        SerializedShaderFloatValue _colMask = SerializedShaderFloatValue.Read(reader);
        
        return new(_srcBlend,
            _destBlend,
            _srcBlendAlpha,
            _destBlendAlpha,
            _blendOp,
            _blendOpAlpha,
            _colMask);
    }
}

/* $SerializedStencilOp (4 fields) */
public record class SerializedStencilOp(
    SerializedShaderFloatValue pass /* NeedsAlign */,
    SerializedShaderFloatValue fail /* NeedsAlign */,
    SerializedShaderFloatValue zFail /* NeedsAlign */,
    SerializedShaderFloatValue comp /* NeedsAlign */)
{
    public static SerializedStencilOp Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* pass */
        SerializedShaderFloatValue _pass = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fail */
        SerializedShaderFloatValue _fail = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zFail */
        SerializedShaderFloatValue _zFail = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* comp */
        SerializedShaderFloatValue _comp = SerializedShaderFloatValue.Read(reader);
        
        return new(_pass,
            _fail,
            _zFail,
            _comp);
    }
}

/* $SerializedShaderVectorValue (5 fields) */
public record class SerializedShaderVectorValue(
    SerializedShaderFloatValue x /* NeedsAlign */,
    SerializedShaderFloatValue y /* NeedsAlign */,
    SerializedShaderFloatValue z /* NeedsAlign */,
    SerializedShaderFloatValue w /* NeedsAlign */,
    AsciiString name /* NeedsAlign */)
{
    public static SerializedShaderVectorValue Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* x */
        SerializedShaderFloatValue _x = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* y */
        SerializedShaderFloatValue _y = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* z */
        SerializedShaderFloatValue _z = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* w */
        SerializedShaderFloatValue _w = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString _name = BuiltInString.Read(reader);
        
        return new(_x,
            _y,
            _z,
            _w,
            _name);
    }
}

/* $SerializedTagMap (1 fields) */
public record class SerializedTagMap(
    Dictionary<AsciiString, AsciiString> tags /* None */)
{
    public static SerializedTagMap Read(EndianBinaryReader reader)
    {
        Dictionary<AsciiString, AsciiString> _tags = BuiltInMap<AsciiString, AsciiString>.Read(reader);
        
        return new(_tags);
    }
}

/* $SerializedShaderState (33 fields) */
public record class SerializedShaderState(
    AsciiString m_Name /* None */,
    SerializedShaderRTBlendState rtBlend0 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend1 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend2 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend3 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend4 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend5 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend6 /* NeedsAlign */,
    SerializedShaderRTBlendState rtBlend7 /* NeedsAlign */,
    bool rtSeparateBlend /* NeedsAlign */,
    SerializedShaderFloatValue zClip /* NeedsAlign */,
    SerializedShaderFloatValue zTest /* NeedsAlign */,
    SerializedShaderFloatValue zWrite /* NeedsAlign */,
    SerializedShaderFloatValue culling /* NeedsAlign */,
    SerializedShaderFloatValue conservative /* NeedsAlign */,
    SerializedShaderFloatValue offsetFactor /* NeedsAlign */,
    SerializedShaderFloatValue offsetUnits /* NeedsAlign */,
    SerializedShaderFloatValue alphaToMask /* NeedsAlign */,
    SerializedStencilOp stencilOp /* NeedsAlign */,
    SerializedStencilOp stencilOpFront /* NeedsAlign */,
    SerializedStencilOp stencilOpBack /* NeedsAlign */,
    SerializedShaderFloatValue stencilReadMask /* NeedsAlign */,
    SerializedShaderFloatValue stencilWriteMask /* NeedsAlign */,
    SerializedShaderFloatValue stencilRef /* NeedsAlign */,
    SerializedShaderFloatValue fogStart /* NeedsAlign */,
    SerializedShaderFloatValue fogEnd /* NeedsAlign */,
    SerializedShaderFloatValue fogDensity /* NeedsAlign */,
    SerializedShaderVectorValue fogColor /* NeedsAlign */,
    int fogMode /* NeedsAlign */,
    int gpuProgramID /* None */,
    SerializedTagMap m_Tags /* None */,
    int m_LOD /* NeedsAlign */,
    bool lighting /* None */)
{
    public static SerializedShaderState Read(EndianBinaryReader reader)
    {
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* rtBlend0 */
        SerializedShaderRTBlendState _rtBlend0 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend1 */
        SerializedShaderRTBlendState _rtBlend1 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend2 */
        SerializedShaderRTBlendState _rtBlend2 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend3 */
        SerializedShaderRTBlendState _rtBlend3 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend4 */
        SerializedShaderRTBlendState _rtBlend4 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend5 */
        SerializedShaderRTBlendState _rtBlend5 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend6 */
        SerializedShaderRTBlendState _rtBlend6 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend7 */
        SerializedShaderRTBlendState _rtBlend7 = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtSeparateBlend */
        bool _rtSeparateBlend = reader.ReadBool();
        reader.AlignTo(4); /* zClip */
        SerializedShaderFloatValue _zClip = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zTest */
        SerializedShaderFloatValue _zTest = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zWrite */
        SerializedShaderFloatValue _zWrite = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* culling */
        SerializedShaderFloatValue _culling = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* conservative */
        SerializedShaderFloatValue _conservative = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* offsetFactor */
        SerializedShaderFloatValue _offsetFactor = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* offsetUnits */
        SerializedShaderFloatValue _offsetUnits = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* alphaToMask */
        SerializedShaderFloatValue _alphaToMask = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* stencilOp */
        SerializedStencilOp _stencilOp = SerializedStencilOp.Read(reader);
        reader.AlignTo(4); /* stencilOpFront */
        SerializedStencilOp _stencilOpFront = SerializedStencilOp.Read(reader);
        reader.AlignTo(4); /* stencilOpBack */
        SerializedStencilOp _stencilOpBack = SerializedStencilOp.Read(reader);
        reader.AlignTo(4); /* stencilReadMask */
        SerializedShaderFloatValue _stencilReadMask = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* stencilWriteMask */
        SerializedShaderFloatValue _stencilWriteMask = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* stencilRef */
        SerializedShaderFloatValue _stencilRef = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogStart */
        SerializedShaderFloatValue _fogStart = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogEnd */
        SerializedShaderFloatValue _fogEnd = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogDensity */
        SerializedShaderFloatValue _fogDensity = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogColor */
        SerializedShaderVectorValue _fogColor = SerializedShaderVectorValue.Read(reader);
        reader.AlignTo(4); /* fogMode */
        int _fogMode = reader.ReadS32();
        int _gpuProgramID = reader.ReadS32();
        SerializedTagMap _m_Tags = SerializedTagMap.Read(reader);
        reader.AlignTo(4); /* m_LOD */
        int _m_LOD = reader.ReadS32();
        bool _lighting = reader.ReadBool();
        
        return new(_m_Name,
            _rtBlend0,
            _rtBlend1,
            _rtBlend2,
            _rtBlend3,
            _rtBlend4,
            _rtBlend5,
            _rtBlend6,
            _rtBlend7,
            _rtSeparateBlend,
            _zClip,
            _zTest,
            _zWrite,
            _culling,
            _conservative,
            _offsetFactor,
            _offsetUnits,
            _alphaToMask,
            _stencilOp,
            _stencilOpFront,
            _stencilOpBack,
            _stencilReadMask,
            _stencilWriteMask,
            _stencilRef,
            _fogStart,
            _fogEnd,
            _fogDensity,
            _fogColor,
            _fogMode,
            _gpuProgramID,
            _m_Tags,
            _m_LOD,
            _lighting);
    }
}

/* $ShaderBindChannel (2 fields) */
public readonly record struct ShaderBindChannel(
    sbyte source /* None */,
    sbyte target /* None */)
{
    public static ShaderBindChannel Read(EndianBinaryReader reader)
    {
        sbyte _source = reader.ReadS8();
        sbyte _target = reader.ReadS8();
        
        return new(_source,
            _target);
    }
}

/* $ParserBindChannels (2 fields) */
public record class ParserBindChannels(
    ShaderBindChannel[] m_Channels /* None */,
    int m_SourceMap /* NeedsAlign */)
{
    public static ParserBindChannels Read(EndianBinaryReader reader)
    {
        ShaderBindChannel[] _m_Channels = BuiltInArray<ShaderBindChannel>.Read(reader);
        reader.AlignTo(4); /* m_SourceMap */
        int _m_SourceMap = reader.ReadS32();
        
        return new(_m_Channels,
            _m_SourceMap);
    }
}

/* $VectorParameter (5 fields) */
public readonly record struct VectorParameter(
    int m_NameIndex /* None */,
    int m_Index /* None */,
    int m_ArraySize /* None */,
    sbyte m_Type /* None */,
    sbyte m_Dim /* None */)
{
    public static VectorParameter Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        int _m_Index = reader.ReadS32();
        int _m_ArraySize = reader.ReadS32();
        sbyte _m_Type = reader.ReadS8();
        sbyte _m_Dim = reader.ReadS8();
        
        return new(_m_NameIndex,
            _m_Index,
            _m_ArraySize,
            _m_Type,
            _m_Dim);
    }
}

/* $MatrixParameter (5 fields) */
public readonly record struct MatrixParameter(
    int m_NameIndex /* None */,
    int m_Index /* None */,
    int m_ArraySize /* None */,
    sbyte m_Type /* None */,
    sbyte m_RowCount /* None */)
{
    public static MatrixParameter Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        int _m_Index = reader.ReadS32();
        int _m_ArraySize = reader.ReadS32();
        sbyte _m_Type = reader.ReadS8();
        sbyte _m_RowCount = reader.ReadS8();
        
        return new(_m_NameIndex,
            _m_Index,
            _m_ArraySize,
            _m_Type,
            _m_RowCount);
    }
}

/* $TextureParameter (5 fields) */
public readonly record struct TextureParameter(
    int m_NameIndex /* None */,
    int m_Index /* None */,
    int m_SamplerIndex /* None */,
    bool m_MultiSampled /* None */,
    sbyte m_Dim /* None */)
{
    public static TextureParameter Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        int _m_Index = reader.ReadS32();
        int _m_SamplerIndex = reader.ReadS32();
        bool _m_MultiSampled = reader.ReadBool();
        sbyte _m_Dim = reader.ReadS8();
        
        return new(_m_NameIndex,
            _m_Index,
            _m_SamplerIndex,
            _m_MultiSampled,
            _m_Dim);
    }
}

/* $BufferBinding (3 fields) */
public readonly record struct BufferBinding(
    int m_NameIndex /* None */,
    int m_Index /* None */,
    int m_ArraySize /* None */)
{
    public static BufferBinding Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        int _m_Index = reader.ReadS32();
        int _m_ArraySize = reader.ReadS32();
        
        return new(_m_NameIndex,
            _m_Index,
            _m_ArraySize);
    }
}

/* $StructParameter (6 fields) */
public record class StructParameter(
    int m_NameIndex /* None */,
    int m_Index /* None */,
    int m_ArraySize /* None */,
    int m_StructSize /* None */,
    VectorParameter[] m_VectorMembers /* None */,
    MatrixParameter[] m_MatrixMembers /* NeedsAlign */)
{
    public static StructParameter Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        int _m_Index = reader.ReadS32();
        int _m_ArraySize = reader.ReadS32();
        int _m_StructSize = reader.ReadS32();
        VectorParameter[] _m_VectorMembers = BuiltInArray<VectorParameter>.Read(reader);
        reader.AlignTo(4); /* m_MatrixMembers */
        MatrixParameter[] _m_MatrixMembers = BuiltInArray<MatrixParameter>.Read(reader);
        
        return new(_m_NameIndex,
            _m_Index,
            _m_ArraySize,
            _m_StructSize,
            _m_VectorMembers,
            _m_MatrixMembers);
    }
}

/* $ConstantBuffer (6 fields) */
public record class ConstantBuffer(
    int m_NameIndex /* None */,
    MatrixParameter[] m_MatrixParams /* None */,
    VectorParameter[] m_VectorParams /* NeedsAlign */,
    StructParameter[] m_StructParams /* NeedsAlign */,
    int m_Size /* NeedsAlign */,
    bool m_IsPartialCB /* None */)
{
    public static ConstantBuffer Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        MatrixParameter[] _m_MatrixParams = BuiltInArray<MatrixParameter>.Read(reader);
        reader.AlignTo(4); /* m_VectorParams */
        VectorParameter[] _m_VectorParams = BuiltInArray<VectorParameter>.Read(reader);
        reader.AlignTo(4); /* m_StructParams */
        StructParameter[] _m_StructParams = BuiltInArray<StructParameter>.Read(reader);
        reader.AlignTo(4); /* m_Size */
        int _m_Size = reader.ReadS32();
        bool _m_IsPartialCB = reader.ReadBool();
        
        return new(_m_NameIndex,
            _m_MatrixParams,
            _m_VectorParams,
            _m_StructParams,
            _m_Size,
            _m_IsPartialCB);
    }
}

/* $UAVParameter (3 fields) */
public readonly record struct UAVParameter(
    int m_NameIndex /* None */,
    int m_Index /* None */,
    int m_OriginalIndex /* None */)
{
    public static UAVParameter Read(EndianBinaryReader reader)
    {
        int _m_NameIndex = reader.ReadS32();
        int _m_Index = reader.ReadS32();
        int _m_OriginalIndex = reader.ReadS32();
        
        return new(_m_NameIndex,
            _m_Index,
            _m_OriginalIndex);
    }
}

/* $SamplerParameter (2 fields) */
public readonly record struct SamplerParameter(
    uint sampler /* None */,
    int bindPoint /* None */)
{
    public static SamplerParameter Read(EndianBinaryReader reader)
    {
        uint _sampler = reader.ReadU32();
        int _bindPoint = reader.ReadS32();
        
        return new(_sampler,
            _bindPoint);
    }
}

/* $SerializedProgramParameters (8 fields) */
public record class SerializedProgramParameters(
    VectorParameter[] m_VectorParams /* NeedsAlign */,
    MatrixParameter[] m_MatrixParams /* NeedsAlign */,
    TextureParameter[] m_TextureParams /* NeedsAlign */,
    BufferBinding[] m_BufferParams /* NeedsAlign */,
    ConstantBuffer[] m_ConstantBuffers /* NeedsAlign */,
    BufferBinding[] m_ConstantBufferBindings /* NeedsAlign */,
    UAVParameter[] m_UAVParams /* NeedsAlign */,
    SamplerParameter[] m_Samplers /* NeedsAlign */)
{
    public static SerializedProgramParameters Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_VectorParams */
        VectorParameter[] _m_VectorParams = BuiltInArray<VectorParameter>.Read(reader);
        reader.AlignTo(4); /* m_MatrixParams */
        MatrixParameter[] _m_MatrixParams = BuiltInArray<MatrixParameter>.Read(reader);
        reader.AlignTo(4); /* m_TextureParams */
        TextureParameter[] _m_TextureParams = BuiltInArray<TextureParameter>.Read(reader);
        reader.AlignTo(4); /* m_BufferParams */
        BufferBinding[] _m_BufferParams = BuiltInArray<BufferBinding>.Read(reader);
        reader.AlignTo(4); /* m_ConstantBuffers */
        ConstantBuffer[] _m_ConstantBuffers = BuiltInArray<ConstantBuffer>.Read(reader);
        reader.AlignTo(4); /* m_ConstantBufferBindings */
        BufferBinding[] _m_ConstantBufferBindings = BuiltInArray<BufferBinding>.Read(reader);
        reader.AlignTo(4); /* m_UAVParams */
        UAVParameter[] _m_UAVParams = BuiltInArray<UAVParameter>.Read(reader);
        reader.AlignTo(4); /* m_Samplers */
        SamplerParameter[] _m_Samplers = BuiltInArray<SamplerParameter>.Read(reader);
        
        return new(_m_VectorParams,
            _m_MatrixParams,
            _m_TextureParams,
            _m_BufferParams,
            _m_ConstantBuffers,
            _m_ConstantBufferBindings,
            _m_UAVParams,
            _m_Samplers);
    }
}

/* $SerializedSubProgram (7 fields) */
public record class SerializedSubProgram(
    uint m_BlobIndex /* None */,
    ParserBindChannels m_Channels /* None */,
    ushort[] m_KeywordIndices /* NeedsAlign */,
    sbyte m_ShaderHardwareTier /* NeedsAlign */,
    sbyte m_GpuProgramType /* None */,
    SerializedProgramParameters m_Parameters /* NeedsAlign */,
    long m_ShaderRequirements /* NeedsAlign */)
{
    public static SerializedSubProgram Read(EndianBinaryReader reader)
    {
        uint _m_BlobIndex = reader.ReadU32();
        ParserBindChannels _m_Channels = ParserBindChannels.Read(reader);
        reader.AlignTo(4); /* m_KeywordIndices */
        ushort[] _m_KeywordIndices = BuiltInArray<ushort>.Read(reader);
        reader.AlignTo(4); /* m_ShaderHardwareTier */
        sbyte _m_ShaderHardwareTier = reader.ReadS8();
        sbyte _m_GpuProgramType = reader.ReadS8();
        reader.AlignTo(4); /* m_Parameters */
        SerializedProgramParameters _m_Parameters = SerializedProgramParameters.Read(reader);
        reader.AlignTo(4); /* m_ShaderRequirements */
        long _m_ShaderRequirements = reader.ReadS64();
        
        return new(_m_BlobIndex,
            _m_Channels,
            _m_KeywordIndices,
            _m_ShaderHardwareTier,
            _m_GpuProgramType,
            _m_Parameters,
            _m_ShaderRequirements);
    }
}

/* $SerializedPlayerSubProgram (4 fields) */
public record class SerializedPlayerSubProgram(
    uint m_BlobIndex /* None */,
    ushort[] m_KeywordIndices /* None */,
    long m_ShaderRequirements /* NeedsAlign */,
    sbyte m_GpuProgramType /* None */)
{
    public static SerializedPlayerSubProgram Read(EndianBinaryReader reader)
    {
        uint _m_BlobIndex = reader.ReadU32();
        ushort[] _m_KeywordIndices = BuiltInArray<ushort>.Read(reader);
        reader.AlignTo(4); /* m_ShaderRequirements */
        long _m_ShaderRequirements = reader.ReadS64();
        sbyte _m_GpuProgramType = reader.ReadS8();
        
        return new(_m_BlobIndex,
            _m_KeywordIndices,
            _m_ShaderRequirements,
            _m_GpuProgramType);
    }
}

/* $SerializedProgram (5 fields) */
public record class SerializedProgram(
    SerializedSubProgram[] m_SubPrograms /* None */,
    SerializedPlayerSubProgram[][] m_PlayerSubPrograms /* NeedsAlign */,
    uint[][] m_ParameterBlobIndices /* NeedsAlign */,
    SerializedProgramParameters m_CommonParameters /* NeedsAlign */,
    ushort[] m_SerializedKeywordStateMask /* NeedsAlign */)
{
    public static SerializedProgram Read(EndianBinaryReader reader)
    {
        SerializedSubProgram[] _m_SubPrograms = BuiltInArray<SerializedSubProgram>.Read(reader);
        reader.AlignTo(4); /* m_PlayerSubPrograms */
        SerializedPlayerSubProgram[][] _m_PlayerSubPrograms = BuiltInArray<SerializedPlayerSubProgram[]>.Read(reader);
        reader.AlignTo(4); /* m_ParameterBlobIndices */
        uint[][] _m_ParameterBlobIndices = BuiltInArray<uint[]>.Read(reader);
        reader.AlignTo(4); /* m_CommonParameters */
        SerializedProgramParameters _m_CommonParameters = SerializedProgramParameters.Read(reader);
        reader.AlignTo(4); /* m_SerializedKeywordStateMask */
        ushort[] _m_SerializedKeywordStateMask = BuiltInArray<ushort>.Read(reader);
        
        return new(_m_SubPrograms,
            _m_PlayerSubPrograms,
            _m_ParameterBlobIndices,
            _m_CommonParameters,
            _m_SerializedKeywordStateMask);
    }
}

/* $SerializedPass (18 fields) */
public record class SerializedPass(
    Hash128[] m_EditorDataHash /* None */,
    byte[] m_Platforms /* NeedsAlign */,
    Dictionary<AsciiString, int> m_NameIndices /* NeedsAlign */,
    int m_Type /* NeedsAlign */,
    SerializedShaderState m_State /* None */,
    uint m_ProgramMask /* NeedsAlign */,
    SerializedProgram progVertex /* None */,
    SerializedProgram progFragment /* NeedsAlign */,
    SerializedProgram progGeometry /* NeedsAlign */,
    SerializedProgram progHull /* NeedsAlign */,
    SerializedProgram progDomain /* NeedsAlign */,
    SerializedProgram progRayTracing /* NeedsAlign */,
    bool m_HasInstancingVariant /* NeedsAlign */,
    bool m_HasProceduralInstancingVariant /* None */,
    AsciiString m_UseName /* NeedsAlign */,
    AsciiString m_Name /* NeedsAlign */,
    AsciiString m_TextureName /* NeedsAlign */,
    SerializedTagMap m_Tags /* NeedsAlign */)
{
    public static SerializedPass Read(EndianBinaryReader reader)
    {
        Hash128[] _m_EditorDataHash = BuiltInArray<Hash128>.Read(reader);
        reader.AlignTo(4); /* m_Platforms */
        byte[] _m_Platforms = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_NameIndices */
        Dictionary<AsciiString, int> _m_NameIndices = BuiltInMap<AsciiString, int>.Read(reader);
        reader.AlignTo(4); /* m_Type */
        int _m_Type = reader.ReadS32();
        SerializedShaderState _m_State = SerializedShaderState.Read(reader);
        reader.AlignTo(4); /* m_ProgramMask */
        uint _m_ProgramMask = reader.ReadU32();
        SerializedProgram _progVertex = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progFragment */
        SerializedProgram _progFragment = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progGeometry */
        SerializedProgram _progGeometry = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progHull */
        SerializedProgram _progHull = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progDomain */
        SerializedProgram _progDomain = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progRayTracing */
        SerializedProgram _progRayTracing = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* m_HasInstancingVariant */
        bool _m_HasInstancingVariant = reader.ReadBool();
        bool _m_HasProceduralInstancingVariant = reader.ReadBool();
        reader.AlignTo(4); /* m_UseName */
        AsciiString _m_UseName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_TextureName */
        AsciiString _m_TextureName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Tags */
        SerializedTagMap _m_Tags = SerializedTagMap.Read(reader);
        
        return new(_m_EditorDataHash,
            _m_Platforms,
            _m_NameIndices,
            _m_Type,
            _m_State,
            _m_ProgramMask,
            _progVertex,
            _progFragment,
            _progGeometry,
            _progHull,
            _progDomain,
            _progRayTracing,
            _m_HasInstancingVariant,
            _m_HasProceduralInstancingVariant,
            _m_UseName,
            _m_Name,
            _m_TextureName,
            _m_Tags);
    }
}

/* $SerializedSubShader (3 fields) */
public record class SerializedSubShader(
    SerializedPass[] m_Passes /* None */,
    SerializedTagMap m_Tags /* NeedsAlign */,
    int m_LOD /* NeedsAlign */)
{
    public static SerializedSubShader Read(EndianBinaryReader reader)
    {
        SerializedPass[] _m_Passes = BuiltInArray<SerializedPass>.Read(reader);
        reader.AlignTo(4); /* m_Tags */
        SerializedTagMap _m_Tags = SerializedTagMap.Read(reader);
        reader.AlignTo(4); /* m_LOD */
        int _m_LOD = reader.ReadS32();
        
        return new(_m_Passes,
            _m_Tags,
            _m_LOD);
    }
}

/* $SerializedShaderDependency (2 fields) */
public record class SerializedShaderDependency(
    AsciiString @from /* None */,
    AsciiString to /* NeedsAlign */)
{
    public static SerializedShaderDependency Read(EndianBinaryReader reader)
    {
        AsciiString _from = BuiltInString.Read(reader);
        reader.AlignTo(4); /* to */
        AsciiString _to = BuiltInString.Read(reader);
        
        return new(_from,
            _to);
    }
}

/* $SerializedCustomEditorForRenderPipeline (2 fields) */
public record class SerializedCustomEditorForRenderPipeline(
    AsciiString customEditorName /* None */,
    AsciiString renderPipelineType /* NeedsAlign */)
{
    public static SerializedCustomEditorForRenderPipeline Read(EndianBinaryReader reader)
    {
        AsciiString _customEditorName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* renderPipelineType */
        AsciiString _renderPipelineType = BuiltInString.Read(reader);
        
        return new(_customEditorName,
            _renderPipelineType);
    }
}

/* $SerializedShader (10 fields) */
public record class SerializedShader(
    SerializedProperties m_PropInfo /* NeedsAlign */,
    SerializedSubShader[] m_SubShaders /* NeedsAlign */,
    AsciiString[] m_KeywordNames /* NeedsAlign */,
    byte[] m_KeywordFlags /* NeedsAlign */,
    AsciiString m_Name /* NeedsAlign */,
    AsciiString m_CustomEditorName /* NeedsAlign */,
    AsciiString m_FallbackName /* NeedsAlign */,
    SerializedShaderDependency[] m_Dependencies /* NeedsAlign */,
    SerializedCustomEditorForRenderPipeline[] m_CustomEditorForRenderPipelines /* NeedsAlign */,
    bool m_DisableNoSubshadersMessage /* NeedsAlign */)
{
    public static SerializedShader Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PropInfo */
        SerializedProperties _m_PropInfo = SerializedProperties.Read(reader);
        reader.AlignTo(4); /* m_SubShaders */
        SerializedSubShader[] _m_SubShaders = BuiltInArray<SerializedSubShader>.Read(reader);
        reader.AlignTo(4); /* m_KeywordNames */
        AsciiString[] _m_KeywordNames = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_KeywordFlags */
        byte[] _m_KeywordFlags = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_CustomEditorName */
        AsciiString _m_CustomEditorName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_FallbackName */
        AsciiString _m_FallbackName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Dependencies */
        SerializedShaderDependency[] _m_Dependencies = BuiltInArray<SerializedShaderDependency>.Read(reader);
        reader.AlignTo(4); /* m_CustomEditorForRenderPipelines */
        SerializedCustomEditorForRenderPipeline[] _m_CustomEditorForRenderPipelines = BuiltInArray<SerializedCustomEditorForRenderPipeline>.Read(reader);
        reader.AlignTo(4); /* m_DisableNoSubshadersMessage */
        bool _m_DisableNoSubshadersMessage = reader.ReadBool();
        
        return new(_m_PropInfo,
            _m_SubShaders,
            _m_KeywordNames,
            _m_KeywordFlags,
            _m_Name,
            _m_CustomEditorName,
            _m_FallbackName,
            _m_Dependencies,
            _m_CustomEditorForRenderPipelines,
            _m_DisableNoSubshadersMessage);
    }
}

/* $Matrix3x4f (12 fields) */
public readonly record struct Matrix3x4f(
    float e00 /* None */,
    float e01 /* None */,
    float e02 /* None */,
    float e03 /* None */,
    float e10 /* None */,
    float e11 /* None */,
    float e12 /* None */,
    float e13 /* None */,
    float e20 /* None */,
    float e21 /* None */,
    float e22 /* None */,
    float e23 /* None */)
{
    public static Matrix3x4f Read(EndianBinaryReader reader)
    {
        float _e00 = reader.ReadF32();
        float _e01 = reader.ReadF32();
        float _e02 = reader.ReadF32();
        float _e03 = reader.ReadF32();
        float _e10 = reader.ReadF32();
        float _e11 = reader.ReadF32();
        float _e12 = reader.ReadF32();
        float _e13 = reader.ReadF32();
        float _e20 = reader.ReadF32();
        float _e21 = reader.ReadF32();
        float _e22 = reader.ReadF32();
        float _e23 = reader.ReadF32();
        
        return new(_e00,
            _e01,
            _e02,
            _e03,
            _e10,
            _e11,
            _e12,
            _e13,
            _e20,
            _e21,
            _e22,
            _e23);
    }
}

/* $Tetrahedron (9 fields) */
public record class Tetrahedron(
    int indices_0 /* None */,
    int indices_1 /* None */,
    int indices_2 /* None */,
    int indices_3 /* None */,
    int neighbors_0 /* None */,
    int neighbors_1 /* None */,
    int neighbors_2 /* None */,
    int neighbors_3 /* None */,
    Matrix3x4f matrix /* None */)
{
    public static Tetrahedron Read(EndianBinaryReader reader)
    {
        int _indices_0 = reader.ReadS32();
        int _indices_1 = reader.ReadS32();
        int _indices_2 = reader.ReadS32();
        int _indices_3 = reader.ReadS32();
        int _neighbors_0 = reader.ReadS32();
        int _neighbors_1 = reader.ReadS32();
        int _neighbors_2 = reader.ReadS32();
        int _neighbors_3 = reader.ReadS32();
        Matrix3x4f _matrix = Matrix3x4f.Read(reader);
        
        return new(_indices_0,
            _indices_1,
            _indices_2,
            _indices_3,
            _neighbors_0,
            _neighbors_1,
            _neighbors_2,
            _neighbors_3,
            _matrix);
    }
}

/* $ProbeSetTetrahedralization (2 fields) */
public record class ProbeSetTetrahedralization(
    Tetrahedron[] m_Tetrahedra /* NeedsAlign */,
    Vector3f[] m_HullRays /* NeedsAlign */)
{
    public static ProbeSetTetrahedralization Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Tetrahedra */
        Tetrahedron[] _m_Tetrahedra = BuiltInArray<Tetrahedron>.Read(reader);
        reader.AlignTo(4); /* m_HullRays */
        Vector3f[] _m_HullRays = BuiltInArray<Vector3f>.Read(reader);
        
        return new(_m_Tetrahedra,
            _m_HullRays);
    }
}

/* $ProbeSetIndex (3 fields) */
public record class ProbeSetIndex(
    Hash128 m_Hash /* None */,
    int m_Offset /* None */,
    int m_Size /* None */)
{
    public static ProbeSetIndex Read(EndianBinaryReader reader)
    {
        Hash128 _m_Hash = Hash128.Read(reader);
        int _m_Offset = reader.ReadS32();
        int _m_Size = reader.ReadS32();
        
        return new(_m_Hash,
            _m_Offset,
            _m_Size);
    }
}

/* $LightProbeData (4 fields) */
public record class LightProbeData(
    ProbeSetTetrahedralization m_Tetrahedralization /* NeedsAlign */,
    ProbeSetIndex[] m_ProbeSets /* NeedsAlign */,
    Vector3f[] m_Positions /* NeedsAlign */,
    Dictionary<Hash128, int> m_NonTetrahedralizedProbeSetIndexMap /* NeedsAlign */)
{
    public static LightProbeData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Tetrahedralization */
        ProbeSetTetrahedralization _m_Tetrahedralization = ProbeSetTetrahedralization.Read(reader);
        reader.AlignTo(4); /* m_ProbeSets */
        ProbeSetIndex[] _m_ProbeSets = BuiltInArray<ProbeSetIndex>.Read(reader);
        reader.AlignTo(4); /* m_Positions */
        Vector3f[] _m_Positions = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* m_NonTetrahedralizedProbeSetIndexMap */
        Dictionary<Hash128, int> _m_NonTetrahedralizedProbeSetIndexMap = BuiltInMap<Hash128, int>.Read(reader);
        
        return new(_m_Tetrahedralization,
            _m_ProbeSets,
            _m_Positions,
            _m_NonTetrahedralizedProbeSetIndexMap);
    }
}

/* $SphericalHarmonicsL2 (27 fields) */
public readonly record struct SphericalHarmonicsL2(
    float sh_0 /* None */,
    float sh_1 /* None */,
    float sh_2 /* None */,
    float sh_3 /* None */,
    float sh_4 /* None */,
    float sh_5 /* None */,
    float sh_6 /* None */,
    float sh_7 /* None */,
    float sh_8 /* None */,
    float sh_9 /* None */,
    float sh_10 /* None */,
    float sh_11 /* None */,
    float sh_12 /* None */,
    float sh_13 /* None */,
    float sh_14 /* None */,
    float sh_15 /* None */,
    float sh_16 /* None */,
    float sh_17 /* None */,
    float sh_18 /* None */,
    float sh_19 /* None */,
    float sh_20 /* None */,
    float sh_21 /* None */,
    float sh_22 /* None */,
    float sh_23 /* None */,
    float sh_24 /* None */,
    float sh_25 /* None */,
    float sh_26 /* None */)
{
    public static SphericalHarmonicsL2 Read(EndianBinaryReader reader)
    {
        float _sh_0 = reader.ReadF32();
        float _sh_1 = reader.ReadF32();
        float _sh_2 = reader.ReadF32();
        float _sh_3 = reader.ReadF32();
        float _sh_4 = reader.ReadF32();
        float _sh_5 = reader.ReadF32();
        float _sh_6 = reader.ReadF32();
        float _sh_7 = reader.ReadF32();
        float _sh_8 = reader.ReadF32();
        float _sh_9 = reader.ReadF32();
        float _sh_10 = reader.ReadF32();
        float _sh_11 = reader.ReadF32();
        float _sh_12 = reader.ReadF32();
        float _sh_13 = reader.ReadF32();
        float _sh_14 = reader.ReadF32();
        float _sh_15 = reader.ReadF32();
        float _sh_16 = reader.ReadF32();
        float _sh_17 = reader.ReadF32();
        float _sh_18 = reader.ReadF32();
        float _sh_19 = reader.ReadF32();
        float _sh_20 = reader.ReadF32();
        float _sh_21 = reader.ReadF32();
        float _sh_22 = reader.ReadF32();
        float _sh_23 = reader.ReadF32();
        float _sh_24 = reader.ReadF32();
        float _sh_25 = reader.ReadF32();
        float _sh_26 = reader.ReadF32();
        
        return new(_sh_0,
            _sh_1,
            _sh_2,
            _sh_3,
            _sh_4,
            _sh_5,
            _sh_6,
            _sh_7,
            _sh_8,
            _sh_9,
            _sh_10,
            _sh_11,
            _sh_12,
            _sh_13,
            _sh_14,
            _sh_15,
            _sh_16,
            _sh_17,
            _sh_18,
            _sh_19,
            _sh_20,
            _sh_21,
            _sh_22,
            _sh_23,
            _sh_24,
            _sh_25,
            _sh_26);
    }
}

/* $LightProbeOcclusion (3 fields) */
public record class LightProbeOcclusion(
    int[] m_ProbeOcclusionLightIndex /* None */,
    float[] m_Occlusion /* None */,
    sbyte[] m_OcclusionMaskChannel /* None */)
{
    public static LightProbeOcclusion Read(EndianBinaryReader reader)
    {
        int[] _m_ProbeOcclusionLightIndex = BuiltInArray<int>.Read(reader);
        float[] _m_Occlusion = BuiltInArray<float>.Read(reader);
        sbyte[] _m_OcclusionMaskChannel = BuiltInArray<sbyte>.Read(reader);
        
        return new(_m_ProbeOcclusionLightIndex,
            _m_Occlusion,
            _m_OcclusionMaskChannel);
    }
}

/* $GLTextureSettings (6 fields) */
public readonly record struct GLTextureSettings(
    int m_FilterMode /* None */,
    int m_Aniso /* None */,
    float m_MipBias /* None */,
    int m_WrapU /* None */,
    int m_WrapV /* None */,
    int m_WrapW /* None */)
{
    public static GLTextureSettings Read(EndianBinaryReader reader)
    {
        int _m_FilterMode = reader.ReadS32();
        int _m_Aniso = reader.ReadS32();
        float _m_MipBias = reader.ReadF32();
        int _m_WrapU = reader.ReadS32();
        int _m_WrapV = reader.ReadS32();
        int _m_WrapW = reader.ReadS32();
        
        return new(_m_FilterMode,
            _m_Aniso,
            _m_MipBias,
            _m_WrapU,
            _m_WrapV,
            _m_WrapW);
    }
}

/* $Node (2 fields) */
public readonly record struct Node(
    int m_ParentId /* None */,
    int m_AxesId /* None */)
{
    public static Node Read(EndianBinaryReader reader)
    {
        int _m_ParentId = reader.ReadS32();
        int _m_AxesId = reader.ReadS32();
        
        return new(_m_ParentId,
            _m_AxesId);
    }
}

/* $float4 (4 fields) */
public readonly record struct float4(
    float x /* None */,
    float y /* None */,
    float z /* None */,
    float w /* None */)
{
    public static float4 Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _z = reader.ReadF32();
        float _w = reader.ReadF32();
        
        return new(_x,
            _y,
            _z,
            _w);
    }
}

/* $float3 (3 fields) */
public readonly record struct float3(
    float x /* None */,
    float y /* None */,
    float z /* None */)
{
    public static float3 Read(EndianBinaryReader reader)
    {
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _z = reader.ReadF32();
        
        return new(_x,
            _y,
            _z);
    }
}

/* $Limit (2 fields) */
public record class Limit(
    float3 m_Min /* None */,
    float3 m_Max /* None */)
{
    public static Limit Read(EndianBinaryReader reader)
    {
        float3 _m_Min = float3.Read(reader);
        float3 _m_Max = float3.Read(reader);
        
        return new(_m_Min,
            _m_Max);
    }
}

/* $Axes (6 fields) */
public record class Axes(
    float4 m_PreQ /* None */,
    float4 m_PostQ /* None */,
    float3 m_Sgn /* None */,
    Limit m_Limit /* None */,
    float m_Length /* None */,
    uint m_Type /* None */)
{
    public static Axes Read(EndianBinaryReader reader)
    {
        float4 _m_PreQ = float4.Read(reader);
        float4 _m_PostQ = float4.Read(reader);
        float3 _m_Sgn = float3.Read(reader);
        Limit _m_Limit = Limit.Read(reader);
        float _m_Length = reader.ReadF32();
        uint _m_Type = reader.ReadU32();
        
        return new(_m_PreQ,
            _m_PostQ,
            _m_Sgn,
            _m_Limit,
            _m_Length,
            _m_Type);
    }
}

/* $Skeleton (3 fields) */
public record class Skeleton(
    Node[] m_Node /* None */,
    uint[] m_ID /* None */,
    Axes[] m_AxesArray /* None */)
{
    public static Skeleton Read(EndianBinaryReader reader)
    {
        Node[] _m_Node = BuiltInArray<Node>.Read(reader);
        uint[] _m_ID = BuiltInArray<uint>.Read(reader);
        Axes[] _m_AxesArray = BuiltInArray<Axes>.Read(reader);
        
        return new(_m_Node,
            _m_ID,
            _m_AxesArray);
    }
}

/* $OffsetPtr (1 fields) */
public record class OffsetPtr(
    Skeleton data /* None */)
{
    public static OffsetPtr Read(EndianBinaryReader reader)
    {
        Skeleton _data = Skeleton.Read(reader);
        
        return new(_data);
    }
}

/* $xform (3 fields) */
public record class xform(
    float3 t /* None */,
    float4 q /* None */,
    float3 s /* None */)
{
    public static xform Read(EndianBinaryReader reader)
    {
        float3 _t = float3.Read(reader);
        float4 _q = float4.Read(reader);
        float3 _s = float3.Read(reader);
        
        return new(_t,
            _q,
            _s);
    }
}

/* $AvatarConstant (12 fields) */
public record class AvatarConstant(
    OffsetPtr m_AvatarSkeleton /* None */,
    OffsetPtr m_AvatarSkeletonPose /* None */,
    OffsetPtr m_DefaultPose /* None */,
    uint[] m_SkeletonNameIDArray /* None */,
    OffsetPtr m_Human /* None */,
    int[] m_HumanSkeletonIndexArray /* NeedsAlign */,
    int[] m_HumanSkeletonReverseIndexArray /* None */,
    int m_RootMotionBoneIndex /* None */,
    xform m_RootMotionBoneX /* None */,
    OffsetPtr m_RootMotionSkeleton /* None */,
    OffsetPtr m_RootMotionSkeletonPose /* None */,
    int[] m_RootMotionSkeletonIndexArray /* None */)
{
    public static AvatarConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr _m_AvatarSkeleton = OffsetPtr.Read(reader);
        OffsetPtr _m_AvatarSkeletonPose = OffsetPtr.Read(reader);
        OffsetPtr _m_DefaultPose = OffsetPtr.Read(reader);
        uint[] _m_SkeletonNameIDArray = BuiltInArray<uint>.Read(reader);
        OffsetPtr _m_Human = OffsetPtr.Read(reader);
        reader.AlignTo(4); /* m_HumanSkeletonIndexArray */
        int[] _m_HumanSkeletonIndexArray = BuiltInArray<int>.Read(reader);
        int[] _m_HumanSkeletonReverseIndexArray = BuiltInArray<int>.Read(reader);
        int _m_RootMotionBoneIndex = reader.ReadS32();
        xform _m_RootMotionBoneX = xform.Read(reader);
        OffsetPtr _m_RootMotionSkeleton = OffsetPtr.Read(reader);
        OffsetPtr _m_RootMotionSkeletonPose = OffsetPtr.Read(reader);
        int[] _m_RootMotionSkeletonIndexArray = BuiltInArray<int>.Read(reader);
        
        return new(_m_AvatarSkeleton,
            _m_AvatarSkeletonPose,
            _m_DefaultPose,
            _m_SkeletonNameIDArray,
            _m_Human,
            _m_HumanSkeletonIndexArray,
            _m_HumanSkeletonReverseIndexArray,
            _m_RootMotionBoneIndex,
            _m_RootMotionBoneX,
            _m_RootMotionSkeleton,
            _m_RootMotionSkeletonPose,
            _m_RootMotionSkeletonIndexArray);
    }
}

/* $SkeletonBoneLimit (5 fields) */
public record class SkeletonBoneLimit(
    Vector3f m_Min /* NeedsAlign */,
    Vector3f m_Max /* None */,
    Vector3f m_Value /* None */,
    float m_Length /* None */,
    bool m_Modified /* None */)
{
    public static SkeletonBoneLimit Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Min */
        Vector3f _m_Min = Vector3f.Read(reader);
        Vector3f _m_Max = Vector3f.Read(reader);
        Vector3f _m_Value = Vector3f.Read(reader);
        float _m_Length = reader.ReadF32();
        bool _m_Modified = reader.ReadBool();
        
        return new(_m_Min,
            _m_Max,
            _m_Value,
            _m_Length,
            _m_Modified);
    }
}

/* $HumanBone (3 fields) */
public record class HumanBone(
    AsciiString m_BoneName /* None */,
    AsciiString m_HumanName /* NeedsAlign */,
    SkeletonBoneLimit m_Limit /* NeedsAlign */)
{
    public static HumanBone Read(EndianBinaryReader reader)
    {
        AsciiString _m_BoneName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HumanName */
        AsciiString _m_HumanName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Limit */
        SkeletonBoneLimit _m_Limit = SkeletonBoneLimit.Read(reader);
        
        return new(_m_BoneName,
            _m_HumanName,
            _m_Limit);
    }
}

/* $SkeletonBone (5 fields) */
public record class SkeletonBone(
    AsciiString m_Name /* None */,
    AsciiString m_ParentName /* NeedsAlign */,
    Vector3f m_Position /* NeedsAlign */,
    Quaternionf m_Rotation /* None */,
    Vector3f m_Scale /* None */)
{
    public static SkeletonBone Read(EndianBinaryReader reader)
    {
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ParentName */
        AsciiString _m_ParentName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Position */
        Vector3f _m_Position = Vector3f.Read(reader);
        Quaternionf _m_Rotation = Quaternionf.Read(reader);
        Vector3f _m_Scale = Vector3f.Read(reader);
        
        return new(_m_Name,
            _m_ParentName,
            _m_Position,
            _m_Rotation,
            _m_Scale);
    }
}

/* $HumanDescription (14 fields) */
public record class HumanDescription(
    HumanBone[] m_Human /* NeedsAlign */,
    SkeletonBone[] m_Skeleton /* NeedsAlign */,
    float m_ArmTwist /* NeedsAlign */,
    float m_ForeArmTwist /* None */,
    float m_UpperLegTwist /* None */,
    float m_LegTwist /* None */,
    float m_ArmStretch /* None */,
    float m_LegStretch /* None */,
    float m_FeetSpacing /* None */,
    float m_GlobalScale /* None */,
    AsciiString m_RootMotionBoneName /* None */,
    bool m_HasTranslationDoF /* NeedsAlign */,
    bool m_HasExtraRoot /* None */,
    bool m_SkeletonHasParents /* None */)
{
    public static HumanDescription Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Human */
        HumanBone[] _m_Human = BuiltInArray<HumanBone>.Read(reader);
        reader.AlignTo(4); /* m_Skeleton */
        SkeletonBone[] _m_Skeleton = BuiltInArray<SkeletonBone>.Read(reader);
        reader.AlignTo(4); /* m_ArmTwist */
        float _m_ArmTwist = reader.ReadF32();
        float _m_ForeArmTwist = reader.ReadF32();
        float _m_UpperLegTwist = reader.ReadF32();
        float _m_LegTwist = reader.ReadF32();
        float _m_ArmStretch = reader.ReadF32();
        float _m_LegStretch = reader.ReadF32();
        float _m_FeetSpacing = reader.ReadF32();
        float _m_GlobalScale = reader.ReadF32();
        AsciiString _m_RootMotionBoneName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HasTranslationDoF */
        bool _m_HasTranslationDoF = reader.ReadBool();
        bool _m_HasExtraRoot = reader.ReadBool();
        bool _m_SkeletonHasParents = reader.ReadBool();
        
        return new(_m_Human,
            _m_Skeleton,
            _m_ArmTwist,
            _m_ForeArmTwist,
            _m_UpperLegTwist,
            _m_LegTwist,
            _m_ArmStretch,
            _m_LegStretch,
            _m_FeetSpacing,
            _m_GlobalScale,
            _m_RootMotionBoneName,
            _m_HasTranslationDoF,
            _m_HasExtraRoot,
            _m_SkeletonHasParents);
    }
}

/* $SoftJointLimitSpring (2 fields) */
public readonly record struct SoftJointLimitSpring(
    float spring /* None */,
    float damper /* None */)
{
    public static SoftJointLimitSpring Read(EndianBinaryReader reader)
    {
        float _spring = reader.ReadF32();
        float _damper = reader.ReadF32();
        
        return new(_spring,
            _damper);
    }
}

/* $SoftJointLimit (3 fields) */
public readonly record struct SoftJointLimit(
    float limit /* None */,
    float bounciness /* None */,
    float contactDistance /* None */)
{
    public static SoftJointLimit Read(EndianBinaryReader reader)
    {
        float _limit = reader.ReadF32();
        float _bounciness = reader.ReadF32();
        float _contactDistance = reader.ReadF32();
        
        return new(_limit,
            _bounciness,
            _contactDistance);
    }
}

/* $ControllerConstant (4 fields) */
public record class ControllerConstant(
    OffsetPtr[] m_LayerArray /* None */,
    OffsetPtr[] m_StateMachineArray /* NeedsAlign */,
    OffsetPtr m_Values /* NeedsAlign */,
    OffsetPtr m_DefaultValues /* None */)
{
    public static ControllerConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr[] _m_LayerArray = BuiltInArray<OffsetPtr>.Read(reader);
        reader.AlignTo(4); /* m_StateMachineArray */
        OffsetPtr[] _m_StateMachineArray = BuiltInArray<OffsetPtr>.Read(reader);
        reader.AlignTo(4); /* m_Values */
        OffsetPtr _m_Values = OffsetPtr.Read(reader);
        OffsetPtr _m_DefaultValues = OffsetPtr.Read(reader);
        
        return new(_m_LayerArray,
            _m_StateMachineArray,
            _m_Values,
            _m_DefaultValues);
    }
}

/* $StateKey (2 fields) */
public readonly record struct StateKey(
    uint m_StateID /* None */,
    int m_LayerIndex /* None */)
{
    public static StateKey Read(EndianBinaryReader reader)
    {
        uint _m_StateID = reader.ReadU32();
        int _m_LayerIndex = reader.ReadS32();
        
        return new(_m_StateID,
            _m_LayerIndex);
    }
}

/* $StateRange (2 fields) */
public readonly record struct StateRange(
    uint m_StartIndex /* None */,
    uint m_Count /* None */)
{
    public static StateRange Read(EndianBinaryReader reader)
    {
        uint _m_StartIndex = reader.ReadU32();
        uint _m_Count = reader.ReadU32();
        
        return new(_m_StartIndex,
            _m_Count);
    }
}

/* $StateMachineBehaviourVectorDescription (2 fields) */
public record class StateMachineBehaviourVectorDescription(
    Dictionary<StateKey, StateRange> m_StateMachineBehaviourRanges /* NeedsAlign */,
    uint[] m_StateMachineBehaviourIndices /* None */)
{
    public static StateMachineBehaviourVectorDescription Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_StateMachineBehaviourRanges */
        Dictionary<StateKey, StateRange> _m_StateMachineBehaviourRanges = BuiltInMap<StateKey, StateRange>.Read(reader);
        uint[] _m_StateMachineBehaviourIndices = BuiltInArray<uint>.Read(reader);
        
        return new(_m_StateMachineBehaviourRanges,
            _m_StateMachineBehaviourIndices);
    }
}

/* $TransformMaskElement (2 fields) */
public record class TransformMaskElement(
    AsciiString m_Path /* None */,
    float m_Weight /* NeedsAlign */)
{
    public static TransformMaskElement Read(EndianBinaryReader reader)
    {
        AsciiString _m_Path = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Weight */
        float _m_Weight = reader.ReadF32();
        
        return new(_m_Path,
            _m_Weight);
    }
}

/* $VFXRendererSettings (5 fields) */
public readonly record struct VFXRendererSettings(
    int motionVectorGenerationMode /* NeedsAlign */,
    int shadowCastingMode /* None */,
    bool receiveShadows /* None */,
    int reflectionProbeUsage /* NeedsAlign */,
    int lightProbeUsage /* None */)
{
    public static VFXRendererSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* motionVectorGenerationMode */
        int _motionVectorGenerationMode = reader.ReadS32();
        int _shadowCastingMode = reader.ReadS32();
        bool _receiveShadows = reader.ReadBool();
        reader.AlignTo(4); /* reflectionProbeUsage */
        int _reflectionProbeUsage = reader.ReadS32();
        int _lightProbeUsage = reader.ReadS32();
        
        return new(_motionVectorGenerationMode,
            _shadowCastingMode,
            _receiveShadows,
            _reflectionProbeUsage,
            _lightProbeUsage);
    }
}

/* $Expression (6 fields) */
public readonly record struct Expression(
    int op /* None */,
    int valueIndex /* None */,
    int data_0 /* None */,
    int data_1 /* None */,
    int data_2 /* None */,
    int data_3 /* None */)
{
    public static Expression Read(EndianBinaryReader reader)
    {
        int _op = reader.ReadS32();
        int _valueIndex = reader.ReadS32();
        int _data_0 = reader.ReadS32();
        int _data_1 = reader.ReadS32();
        int _data_2 = reader.ReadS32();
        int _data_3 = reader.ReadS32();
        
        return new(_op,
            _valueIndex,
            _data_0,
            _data_1,
            _data_2,
            _data_3);
    }
}

/* $VFXExpressionContainer (10 fields) */
public record class VFXExpressionContainer(
    Expression[] m_Expressions /* None */,
    uint m_MaxCommonExpressionsIndex /* NeedsAlign */,
    uint m_ConstantBakeCurveCount /* None */,
    uint m_ConstantBakeGradientCount /* None */,
    uint m_DynamicBakeCurveCount /* None */,
    uint m_DynamicBakeGradientCount /* None */,
    bool m_NeedsLocalToWorld /* None */,
    bool m_NeedsWorldToLocal /* None */,
    bool m_NeedsMainCamera /* None */,
    int m_NeededMainCameraBuffers /* NeedsAlign */)
{
    public static VFXExpressionContainer Read(EndianBinaryReader reader)
    {
        Expression[] _m_Expressions = BuiltInArray<Expression>.Read(reader);
        reader.AlignTo(4); /* m_MaxCommonExpressionsIndex */
        uint _m_MaxCommonExpressionsIndex = reader.ReadU32();
        uint _m_ConstantBakeCurveCount = reader.ReadU32();
        uint _m_ConstantBakeGradientCount = reader.ReadU32();
        uint _m_DynamicBakeCurveCount = reader.ReadU32();
        uint _m_DynamicBakeGradientCount = reader.ReadU32();
        bool _m_NeedsLocalToWorld = reader.ReadBool();
        bool _m_NeedsWorldToLocal = reader.ReadBool();
        bool _m_NeedsMainCamera = reader.ReadBool();
        reader.AlignTo(4); /* m_NeededMainCameraBuffers */
        int _m_NeededMainCameraBuffers = reader.ReadS32();
        
        return new(_m_Expressions,
            _m_MaxCommonExpressionsIndex,
            _m_ConstantBakeCurveCount,
            _m_ConstantBakeGradientCount,
            _m_DynamicBakeCurveCount,
            _m_DynamicBakeGradientCount,
            _m_NeedsLocalToWorld,
            _m_NeedsWorldToLocal,
            _m_NeedsMainCamera,
            _m_NeededMainCameraBuffers);
    }
}

/* $VFXMapping (2 fields) */
public record class VFXMapping(
    AsciiString nameId /* None */,
    int index /* NeedsAlign */)
{
    public static VFXMapping Read(EndianBinaryReader reader)
    {
        AsciiString _nameId = BuiltInString.Read(reader);
        reader.AlignTo(4); /* index */
        int _index = reader.ReadS32();
        
        return new(_nameId,
            _index);
    }
}

/* $VFXLayoutOffset (3 fields) */
public readonly record struct VFXLayoutOffset(
    uint bucket /* None */,
    uint structure /* None */,
    uint element /* None */)
{
    public static VFXLayoutOffset Read(EndianBinaryReader reader)
    {
        uint _bucket = reader.ReadU32();
        uint _structure = reader.ReadU32();
        uint _element = reader.ReadU32();
        
        return new(_bucket,
            _structure,
            _element);
    }
}

/* $VFXLayoutElementDesc (3 fields) */
public record class VFXLayoutElementDesc(
    AsciiString name /* None */,
    int type /* NeedsAlign */,
    VFXLayoutOffset offset /* None */)
{
    public static VFXLayoutElementDesc Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* type */
        int _type = reader.ReadS32();
        VFXLayoutOffset _offset = VFXLayoutOffset.Read(reader);
        
        return new(_name,
            _type,
            _offset);
    }
}

/* $VFXGPUBufferDesc (5 fields) */
public record class VFXGPUBufferDesc(
    int type /* None */,
    uint size /* None */,
    VFXLayoutElementDesc[] layout /* None */,
    uint capacity /* NeedsAlign */,
    uint stride /* None */)
{
    public static VFXGPUBufferDesc Read(EndianBinaryReader reader)
    {
        int _type = reader.ReadS32();
        uint _size = reader.ReadU32();
        VFXLayoutElementDesc[] _layout = BuiltInArray<VFXLayoutElementDesc>.Read(reader);
        reader.AlignTo(4); /* capacity */
        uint _capacity = reader.ReadU32();
        uint _stride = reader.ReadU32();
        
        return new(_type,
            _size,
            _layout,
            _capacity,
            _stride);
    }
}

/* $VFXTemporaryGPUBufferDesc (2 fields) */
public record class VFXTemporaryGPUBufferDesc(
    VFXGPUBufferDesc desc /* None */,
    uint frameCount /* NeedsAlign */)
{
    public static VFXTemporaryGPUBufferDesc Read(EndianBinaryReader reader)
    {
        VFXGPUBufferDesc _desc = VFXGPUBufferDesc.Read(reader);
        reader.AlignTo(4); /* frameCount */
        uint _frameCount = reader.ReadU32();
        
        return new(_desc,
            _frameCount);
    }
}

/* $VFXCPUBufferData (1 fields) */
public record class VFXCPUBufferData(
    uint[] data /* NeedsAlign */)
{
    public static VFXCPUBufferData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* data */
        uint[] _data = BuiltInArray<uint>.Read(reader);
        
        return new(_data);
    }
}

/* $VFXCPUBufferDesc (4 fields) */
public record class VFXCPUBufferDesc(
    uint capacity /* None */,
    uint stride /* None */,
    VFXLayoutElementDesc[] layout /* None */,
    VFXCPUBufferData initialData /* NeedsAlign */)
{
    public static VFXCPUBufferDesc Read(EndianBinaryReader reader)
    {
        uint _capacity = reader.ReadU32();
        uint _stride = reader.ReadU32();
        VFXLayoutElementDesc[] _layout = BuiltInArray<VFXLayoutElementDesc>.Read(reader);
        reader.AlignTo(4); /* initialData */
        VFXCPUBufferData _initialData = VFXCPUBufferData.Read(reader);
        
        return new(_capacity,
            _stride,
            _layout,
            _initialData);
    }
}

/* $VFXEventDesc (4 fields) */
public record class VFXEventDesc(
    AsciiString name /* None */,
    uint[] playSystems /* NeedsAlign */,
    uint[] stopSystems /* NeedsAlign */,
    uint[] initSystems /* NeedsAlign */)
{
    public static VFXEventDesc Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* playSystems */
        uint[] _playSystems = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* stopSystems */
        uint[] _stopSystems = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* initSystems */
        uint[] _initSystems = BuiltInArray<uint>.Read(reader);
        
        return new(_name,
            _playSystems,
            _stopSystems,
            _initSystems);
    }
}

/* $VisualEffectInfo (18 fields) */
public record class VisualEffectInfo(
    VFXRendererSettings m_RendererSettings /* NeedsAlign */,
    int m_CullingFlags /* NeedsAlign */,
    int m_UpdateMode /* None */,
    float m_PreWarmDeltaTime /* None */,
    uint m_PreWarmStepCount /* None */,
    AsciiString m_InitialEventName /* None */,
    int m_InstancingMode /* NeedsAlign */,
    uint m_InstancingCapacity /* None */,
    VFXExpressionContainer m_Expressions /* None */,
    VFXPropertySheetSerializedBase m_PropertySheet /* NeedsAlign */,
    VFXMapping[] m_ExposedExpressions /* NeedsAlign */,
    VFXGPUBufferDesc[] m_Buffers /* NeedsAlign */,
    VFXTemporaryGPUBufferDesc[] m_TemporaryBuffers /* NeedsAlign */,
    VFXCPUBufferDesc[] m_CPUBuffers /* NeedsAlign */,
    VFXEventDesc[] m_Events /* NeedsAlign */,
    int m_InstancingDisabledReason /* NeedsAlign */,
    uint m_RuntimeVersion /* None */,
    uint m_CompilationVersion /* None */)
{
    public static VisualEffectInfo Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_RendererSettings */
        VFXRendererSettings _m_RendererSettings = VFXRendererSettings.Read(reader);
        reader.AlignTo(4); /* m_CullingFlags */
        int _m_CullingFlags = reader.ReadS32();
        int _m_UpdateMode = reader.ReadS32();
        float _m_PreWarmDeltaTime = reader.ReadF32();
        uint _m_PreWarmStepCount = reader.ReadU32();
        AsciiString _m_InitialEventName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_InstancingMode */
        int _m_InstancingMode = reader.ReadS32();
        uint _m_InstancingCapacity = reader.ReadU32();
        VFXExpressionContainer _m_Expressions = VFXExpressionContainer.Read(reader);
        reader.AlignTo(4); /* m_PropertySheet */
        VFXPropertySheetSerializedBase _m_PropertySheet = VFXPropertySheetSerializedBase.Read(reader);
        reader.AlignTo(4); /* m_ExposedExpressions */
        VFXMapping[] _m_ExposedExpressions = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* m_Buffers */
        VFXGPUBufferDesc[] _m_Buffers = BuiltInArray<VFXGPUBufferDesc>.Read(reader);
        reader.AlignTo(4); /* m_TemporaryBuffers */
        VFXTemporaryGPUBufferDesc[] _m_TemporaryBuffers = BuiltInArray<VFXTemporaryGPUBufferDesc>.Read(reader);
        reader.AlignTo(4); /* m_CPUBuffers */
        VFXCPUBufferDesc[] _m_CPUBuffers = BuiltInArray<VFXCPUBufferDesc>.Read(reader);
        reader.AlignTo(4); /* m_Events */
        VFXEventDesc[] _m_Events = BuiltInArray<VFXEventDesc>.Read(reader);
        reader.AlignTo(4); /* m_InstancingDisabledReason */
        int _m_InstancingDisabledReason = reader.ReadS32();
        uint _m_RuntimeVersion = reader.ReadU32();
        uint _m_CompilationVersion = reader.ReadU32();
        
        return new(_m_RendererSettings,
            _m_CullingFlags,
            _m_UpdateMode,
            _m_PreWarmDeltaTime,
            _m_PreWarmStepCount,
            _m_InitialEventName,
            _m_InstancingMode,
            _m_InstancingCapacity,
            _m_Expressions,
            _m_PropertySheet,
            _m_ExposedExpressions,
            _m_Buffers,
            _m_TemporaryBuffers,
            _m_CPUBuffers,
            _m_Events,
            _m_InstancingDisabledReason,
            _m_RuntimeVersion,
            _m_CompilationVersion);
    }
}

/* $VFXMappingTemporary (3 fields) */
public record class VFXMappingTemporary(
    VFXMapping mapping /* None */,
    uint pastFrameIndex /* NeedsAlign */,
    bool perCameraBuffer /* None */)
{
    public static VFXMappingTemporary Read(EndianBinaryReader reader)
    {
        VFXMapping _mapping = VFXMapping.Read(reader);
        reader.AlignTo(4); /* pastFrameIndex */
        uint _pastFrameIndex = reader.ReadU32();
        bool _perCameraBuffer = reader.ReadBool();
        
        return new(_mapping,
            _pastFrameIndex,
            _perCameraBuffer);
    }
}

/* $VFXTaskDesc (7 fields) */
public record class VFXTaskDesc(
    int type /* None */,
    VFXMapping[] buffers /* None */,
    VFXMappingTemporary[] temporaryBuffers /* NeedsAlign */,
    VFXMapping[] values /* NeedsAlign */,
    VFXMapping[] @params /* NeedsAlign */,
    PPtr<NamedObject> processor /* NeedsAlign */,
    uint instanceSplitIndex /* None */)
{
    public static VFXTaskDesc Read(EndianBinaryReader reader)
    {
        int _type = reader.ReadS32();
        VFXMapping[] _buffers = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* temporaryBuffers */
        VFXMappingTemporary[] _temporaryBuffers = BuiltInArray<VFXMappingTemporary>.Read(reader);
        reader.AlignTo(4); /* values */
        VFXMapping[] _values = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* @params */
        VFXMapping[] _params = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* processor */
        PPtr<NamedObject> _processor = PPtr<NamedObject>.Read(reader);
        uint _instanceSplitIndex = reader.ReadU32();
        
        return new(_type,
            _buffers,
            _temporaryBuffers,
            _values,
            _params,
            _processor,
            _instanceSplitIndex);
    }
}

/* $VFXInstanceSplitDesc (1 fields) */
public record class VFXInstanceSplitDesc(
    uint[] values /* None */)
{
    public static VFXInstanceSplitDesc Read(EndianBinaryReader reader)
    {
        uint[] _values = BuiltInArray<uint>.Read(reader);
        
        return new(_values);
    }
}

/* $VFXSystemDesc (9 fields) */
public record class VFXSystemDesc(
    int type /* None */,
    int flags /* None */,
    uint capacity /* None */,
    uint layer /* None */,
    AsciiString name /* None */,
    VFXMapping[] buffers /* NeedsAlign */,
    VFXMapping[] values /* NeedsAlign */,
    VFXTaskDesc[] tasks /* NeedsAlign */,
    VFXInstanceSplitDesc[] instanceSplitDescs /* NeedsAlign */)
{
    public static VFXSystemDesc Read(EndianBinaryReader reader)
    {
        int _type = reader.ReadS32();
        int _flags = reader.ReadS32();
        uint _capacity = reader.ReadU32();
        uint _layer = reader.ReadU32();
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* buffers */
        VFXMapping[] _buffers = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* values */
        VFXMapping[] _values = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* tasks */
        VFXTaskDesc[] _tasks = BuiltInArray<VFXTaskDesc>.Read(reader);
        reader.AlignTo(4); /* instanceSplitDescs */
        VFXInstanceSplitDesc[] _instanceSplitDescs = BuiltInArray<VFXInstanceSplitDesc>.Read(reader);
        
        return new(_type,
            _flags,
            _capacity,
            _layer,
            _name,
            _buffers,
            _values,
            _tasks,
            _instanceSplitDescs);
    }
}

/* $Keyframe (7 fields) */
public readonly record struct Keyframe(
    float time /* None */,
    float @value /* None */,
    float inSlope /* None */,
    float outSlope /* None */,
    int weightedMode /* None */,
    float inWeight /* None */,
    float outWeight /* None */)
{
    public static Keyframe Read(EndianBinaryReader reader)
    {
        float _time = reader.ReadF32();
        float _value = reader.ReadF32();
        float _inSlope = reader.ReadF32();
        float _outSlope = reader.ReadF32();
        int _weightedMode = reader.ReadS32();
        float _inWeight = reader.ReadF32();
        float _outWeight = reader.ReadF32();
        
        return new(_time,
            _value,
            _inSlope,
            _outSlope,
            _weightedMode,
            _inWeight,
            _outWeight);
    }
}

/* $AnimationCurve (4 fields) */
public record class AnimationCurve(
    Keyframe[] m_Curve /* None */,
    int m_PreInfinity /* NeedsAlign */,
    int m_PostInfinity /* None */,
    int m_RotationOrder /* None */)
{
    public static AnimationCurve Read(EndianBinaryReader reader)
    {
        Keyframe[] _m_Curve = BuiltInArray<Keyframe>.Read(reader);
        reader.AlignTo(4); /* m_PreInfinity */
        int _m_PreInfinity = reader.ReadS32();
        int _m_PostInfinity = reader.ReadS32();
        int _m_RotationOrder = reader.ReadS32();
        
        return new(_m_Curve,
            _m_PreInfinity,
            _m_PostInfinity,
            _m_RotationOrder);
    }
}

/* $Gradient (28 fields) */
public record class Gradient(
    ColorRGBA key0 /* NeedsAlign */,
    ColorRGBA key1 /* None */,
    ColorRGBA key2 /* None */,
    ColorRGBA key3 /* None */,
    ColorRGBA key4 /* None */,
    ColorRGBA key5 /* None */,
    ColorRGBA key6 /* None */,
    ColorRGBA key7 /* None */,
    ushort ctime0 /* None */,
    ushort ctime1 /* None */,
    ushort ctime2 /* None */,
    ushort ctime3 /* None */,
    ushort ctime4 /* None */,
    ushort ctime5 /* None */,
    ushort ctime6 /* None */,
    ushort ctime7 /* None */,
    ushort atime0 /* None */,
    ushort atime1 /* None */,
    ushort atime2 /* None */,
    ushort atime3 /* None */,
    ushort atime4 /* None */,
    ushort atime5 /* None */,
    ushort atime6 /* None */,
    ushort atime7 /* None */,
    byte m_Mode /* None */,
    sbyte m_ColorSpace /* None */,
    byte m_NumColorKeys /* None */,
    byte m_NumAlphaKeys /* None */)
{
    public static Gradient Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* key0 */
        ColorRGBA _key0 = ColorRGBA.Read(reader);
        ColorRGBA _key1 = ColorRGBA.Read(reader);
        ColorRGBA _key2 = ColorRGBA.Read(reader);
        ColorRGBA _key3 = ColorRGBA.Read(reader);
        ColorRGBA _key4 = ColorRGBA.Read(reader);
        ColorRGBA _key5 = ColorRGBA.Read(reader);
        ColorRGBA _key6 = ColorRGBA.Read(reader);
        ColorRGBA _key7 = ColorRGBA.Read(reader);
        ushort _ctime0 = reader.ReadU16();
        ushort _ctime1 = reader.ReadU16();
        ushort _ctime2 = reader.ReadU16();
        ushort _ctime3 = reader.ReadU16();
        ushort _ctime4 = reader.ReadU16();
        ushort _ctime5 = reader.ReadU16();
        ushort _ctime6 = reader.ReadU16();
        ushort _ctime7 = reader.ReadU16();
        ushort _atime0 = reader.ReadU16();
        ushort _atime1 = reader.ReadU16();
        ushort _atime2 = reader.ReadU16();
        ushort _atime3 = reader.ReadU16();
        ushort _atime4 = reader.ReadU16();
        ushort _atime5 = reader.ReadU16();
        ushort _atime6 = reader.ReadU16();
        ushort _atime7 = reader.ReadU16();
        byte _m_Mode = reader.ReadU8();
        sbyte _m_ColorSpace = reader.ReadS8();
        byte _m_NumColorKeys = reader.ReadU8();
        byte _m_NumAlphaKeys = reader.ReadU8();
        
        return new(_key0,
            _key1,
            _key2,
            _key3,
            _key4,
            _key5,
            _key6,
            _key7,
            _ctime0,
            _ctime1,
            _ctime2,
            _ctime3,
            _ctime4,
            _ctime5,
            _ctime6,
            _ctime7,
            _atime0,
            _atime1,
            _atime2,
            _atime3,
            _atime4,
            _atime5,
            _atime6,
            _atime7,
            _m_Mode,
            _m_ColorSpace,
            _m_NumColorKeys,
            _m_NumAlphaKeys);
    }
}

/* $LineParameters (10 fields) */
public record class LineParameters(
    float widthMultiplier /* NeedsAlign */,
    AnimationCurve widthCurve /* None */,
    Gradient colorGradient /* NeedsAlign */,
    int numCornerVertices /* NeedsAlign */,
    int numCapVertices /* None */,
    int alignment /* None */,
    int textureMode /* None */,
    Vector2f textureScale /* None */,
    float shadowBias /* None */,
    bool generateLightingData /* None */)
{
    public static LineParameters Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* widthMultiplier */
        float _widthMultiplier = reader.ReadF32();
        AnimationCurve _widthCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* colorGradient */
        Gradient _colorGradient = Gradient.Read(reader);
        reader.AlignTo(4); /* numCornerVertices */
        int _numCornerVertices = reader.ReadS32();
        int _numCapVertices = reader.ReadS32();
        int _alignment = reader.ReadS32();
        int _textureMode = reader.ReadS32();
        Vector2f _textureScale = Vector2f.Read(reader);
        float _shadowBias = reader.ReadF32();
        bool _generateLightingData = reader.ReadBool();
        
        return new(_widthMultiplier,
            _widthCurve,
            _colorGradient,
            _numCornerVertices,
            _numCapVertices,
            _alignment,
            _textureMode,
            _textureScale,
            _shadowBias,
            _generateLightingData);
    }
}

/* $ComputeShaderResource (5 fields) */
public record class ComputeShaderResource(
    AsciiString name /* None */,
    AsciiString generatedName /* NeedsAlign */,
    int bindPoint /* NeedsAlign */,
    int samplerBindPoint /* None */,
    int texDimension /* None */)
{
    public static ComputeShaderResource Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* generatedName */
        AsciiString _generatedName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* bindPoint */
        int _bindPoint = reader.ReadS32();
        int _samplerBindPoint = reader.ReadS32();
        int _texDimension = reader.ReadS32();
        
        return new(_name,
            _generatedName,
            _bindPoint,
            _samplerBindPoint,
            _texDimension);
    }
}

/* $ComputeShaderBuiltinSampler (2 fields) */
public readonly record struct ComputeShaderBuiltinSampler(
    uint sampler /* None */,
    int bindPoint /* None */)
{
    public static ComputeShaderBuiltinSampler Read(EndianBinaryReader reader)
    {
        uint _sampler = reader.ReadU32();
        int _bindPoint = reader.ReadS32();
        
        return new(_sampler,
            _bindPoint);
    }
}

/* $ComputeShaderKernel (9 fields) */
public record class ComputeShaderKernel(
    uint[] cbVariantIndices /* None */,
    ComputeShaderResource[] cbs /* NeedsAlign */,
    ComputeShaderResource[] textures /* NeedsAlign */,
    ComputeShaderBuiltinSampler[] builtinSamplers /* NeedsAlign */,
    ComputeShaderResource[] inBuffers /* NeedsAlign */,
    ComputeShaderResource[] outBuffers /* NeedsAlign */,
    byte[] code /* NeedsAlign */,
    uint[] threadGroupSize /* NeedsAlign */,
    long requirements /* None */)
{
    public static ComputeShaderKernel Read(EndianBinaryReader reader)
    {
        uint[] _cbVariantIndices = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* cbs */
        ComputeShaderResource[] _cbs = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* textures */
        ComputeShaderResource[] _textures = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* builtinSamplers */
        ComputeShaderBuiltinSampler[] _builtinSamplers = BuiltInArray<ComputeShaderBuiltinSampler>.Read(reader);
        reader.AlignTo(4); /* inBuffers */
        ComputeShaderResource[] _inBuffers = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* outBuffers */
        ComputeShaderResource[] _outBuffers = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* code */
        byte[] _code = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* threadGroupSize */
        uint[] _threadGroupSize = BuiltInArray<uint>.Read(reader);
        long _requirements = reader.ReadS64();
        
        return new(_cbVariantIndices,
            _cbs,
            _textures,
            _builtinSamplers,
            _inBuffers,
            _outBuffers,
            _code,
            _threadGroupSize,
            _requirements);
    }
}

/* $ComputeShaderKernelParent (6 fields) */
public record class ComputeShaderKernelParent(
    AsciiString name /* None */,
    ComputeShaderKernel[] uniqueVariants /* NeedsAlign */,
    pair[] variantIndices /* NeedsAlign */,
    AsciiString[] globalKeywords /* NeedsAlign */,
    AsciiString[] localKeywords /* NeedsAlign */,
    AsciiString[] dynamicKeywords /* NeedsAlign */)
{
    public static ComputeShaderKernelParent Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* uniqueVariants */
        ComputeShaderKernel[] _uniqueVariants = BuiltInArray<ComputeShaderKernel>.Read(reader);
        reader.AlignTo(4); /* variantIndices */
        pair[] _variantIndices = BuiltInArray<pair>.Read(reader);
        reader.AlignTo(4); /* globalKeywords */
        AsciiString[] _globalKeywords = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* localKeywords */
        AsciiString[] _localKeywords = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* dynamicKeywords */
        AsciiString[] _dynamicKeywords = BuiltInArray<AsciiString>.Read(reader);
        
        return new(_name,
            _uniqueVariants,
            _variantIndices,
            _globalKeywords,
            _localKeywords,
            _dynamicKeywords);
    }
}

/* $ComputeShaderParam (6 fields) */
public record class ComputeShaderParam(
    AsciiString name /* None */,
    int type /* NeedsAlign */,
    uint offset /* None */,
    uint arraySize /* None */,
    uint rowCount /* None */,
    uint colCount /* None */)
{
    public static ComputeShaderParam Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* type */
        int _type = reader.ReadS32();
        uint _offset = reader.ReadU32();
        uint _arraySize = reader.ReadU32();
        uint _rowCount = reader.ReadU32();
        uint _colCount = reader.ReadU32();
        
        return new(_name,
            _type,
            _offset,
            _arraySize,
            _rowCount,
            _colCount);
    }
}

/* $ComputeShaderCB (3 fields) */
public record class ComputeShaderCB(
    AsciiString name /* None */,
    int byteSize /* NeedsAlign */,
    ComputeShaderParam[] @params /* None */)
{
    public static ComputeShaderCB Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* byteSize */
        int _byteSize = reader.ReadS32();
        ComputeShaderParam[] _params = BuiltInArray<ComputeShaderParam>.Read(reader);
        
        return new(_name,
            _byteSize,
            _params);
    }
}

/* $ComputeShaderPlatformVariant (5 fields) */
public record class ComputeShaderPlatformVariant(
    int targetRenderer /* None */,
    int targetLevel /* None */,
    ComputeShaderKernelParent[] kernels /* None */,
    ComputeShaderCB[] constantBuffers /* NeedsAlign */,
    bool resourcesResolved /* NeedsAlign */)
{
    public static ComputeShaderPlatformVariant Read(EndianBinaryReader reader)
    {
        int _targetRenderer = reader.ReadS32();
        int _targetLevel = reader.ReadS32();
        ComputeShaderKernelParent[] _kernels = BuiltInArray<ComputeShaderKernelParent>.Read(reader);
        reader.AlignTo(4); /* constantBuffers */
        ComputeShaderCB[] _constantBuffers = BuiltInArray<ComputeShaderCB>.Read(reader);
        reader.AlignTo(4); /* resourcesResolved */
        bool _resourcesResolved = reader.ReadBool();
        
        return new(_targetRenderer,
            _targetLevel,
            _kernels,
            _constantBuffers,
            _resourcesResolved);
    }
}

/* $UnityTexEnv (3 fields) */
public record class UnityTexEnv(
    PPtr<Texture> m_Texture /* NeedsAlign */,
    Vector2f m_Scale /* None */,
    Vector2f m_Offset /* None */)
{
    public static UnityTexEnv Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Texture */
        PPtr<Texture> _m_Texture = PPtr<Texture>.Read(reader);
        Vector2f _m_Scale = Vector2f.Read(reader);
        Vector2f _m_Offset = Vector2f.Read(reader);
        
        return new(_m_Texture,
            _m_Scale,
            _m_Offset);
    }
}

/* $UnityPropertySheet (4 fields) */
public record class UnityPropertySheet(
    Dictionary<AsciiString, UnityTexEnv> m_TexEnvs /* NeedsAlign */,
    Dictionary<AsciiString, int> m_Ints /* NeedsAlign */,
    Dictionary<AsciiString, float> m_Floats /* NeedsAlign */,
    Dictionary<AsciiString, ColorRGBA> m_Colors /* NeedsAlign */)
{
    public static UnityPropertySheet Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_TexEnvs */
        Dictionary<AsciiString, UnityTexEnv> _m_TexEnvs = BuiltInMap<AsciiString, UnityTexEnv>.Read(reader);
        reader.AlignTo(4); /* m_Ints */
        Dictionary<AsciiString, int> _m_Ints = BuiltInMap<AsciiString, int>.Read(reader);
        reader.AlignTo(4); /* m_Floats */
        Dictionary<AsciiString, float> _m_Floats = BuiltInMap<AsciiString, float>.Read(reader);
        reader.AlignTo(4); /* m_Colors */
        Dictionary<AsciiString, ColorRGBA> _m_Colors = BuiltInMap<AsciiString, ColorRGBA>.Read(reader);
        
        return new(_m_TexEnvs,
            _m_Ints,
            _m_Floats,
            _m_Colors);
    }
}

/* $BuildTextureStackReference (2 fields) */
public record class BuildTextureStackReference(
    AsciiString groupName /* None */,
    AsciiString itemName /* NeedsAlign */)
{
    public static BuildTextureStackReference Read(EndianBinaryReader reader)
    {
        AsciiString _groupName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* itemName */
        AsciiString _itemName = BuiltInString.Read(reader);
        
        return new(_groupName,
            _itemName);
    }
}

/* $ComponentPair (1 fields) */
public record class ComponentPair(
    PPtr<Component> component /* None */)
{
    public static ComponentPair Read(EndianBinaryReader reader)
    {
        PPtr<Component> _component = PPtr<Component>.Read(reader);
        
        return new(_component);
    }
}

/* $ShadowSettings (9 fields) */
public record class ShadowSettings(
    int m_Type /* None */,
    int m_Resolution /* None */,
    int m_CustomResolution /* None */,
    float m_Strength /* None */,
    float m_Bias /* None */,
    float m_NormalBias /* None */,
    float m_NearPlane /* None */,
    Matrix4x4f m_CullingMatrixOverride /* None */,
    bool m_UseCullingMatrixOverride /* None */)
{
    public static ShadowSettings Read(EndianBinaryReader reader)
    {
        int _m_Type = reader.ReadS32();
        int _m_Resolution = reader.ReadS32();
        int _m_CustomResolution = reader.ReadS32();
        float _m_Strength = reader.ReadF32();
        float _m_Bias = reader.ReadF32();
        float _m_NormalBias = reader.ReadF32();
        float _m_NearPlane = reader.ReadF32();
        Matrix4x4f _m_CullingMatrixOverride = Matrix4x4f.Read(reader);
        bool _m_UseCullingMatrixOverride = reader.ReadBool();
        
        return new(_m_Type,
            _m_Resolution,
            _m_CustomResolution,
            _m_Strength,
            _m_Bias,
            _m_NormalBias,
            _m_NearPlane,
            _m_CullingMatrixOverride,
            _m_UseCullingMatrixOverride);
    }
}

/* $LightmapBakeMode (2 fields) */
public readonly record struct LightmapBakeMode(
    int lightmapBakeType /* None */,
    int mixedLightingMode /* None */)
{
    public static LightmapBakeMode Read(EndianBinaryReader reader)
    {
        int _lightmapBakeType = reader.ReadS32();
        int _mixedLightingMode = reader.ReadS32();
        
        return new(_lightmapBakeType,
            _mixedLightingMode);
    }
}

/* $LightBakingOutput (4 fields) */
public record class LightBakingOutput(
    int probeOcclusionLightIndex /* NeedsAlign */,
    int occlusionMaskChannel /* None */,
    LightmapBakeMode lightmapBakeMode /* None */,
    bool isBaked /* None */)
{
    public static LightBakingOutput Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* probeOcclusionLightIndex */
        int _probeOcclusionLightIndex = reader.ReadS32();
        int _occlusionMaskChannel = reader.ReadS32();
        LightmapBakeMode _lightmapBakeMode = LightmapBakeMode.Read(reader);
        bool _isBaked = reader.ReadBool();
        
        return new(_probeOcclusionLightIndex,
            _occlusionMaskChannel,
            _lightmapBakeMode,
            _isBaked);
    }
}

/* $QuaternionCurve (2 fields) */
public record class QuaternionCurve(
    AnimationCurve curve /* None */,
    AsciiString path /* NeedsAlign */)
{
    public static QuaternionCurve Read(EndianBinaryReader reader)
    {
        AnimationCurve _curve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* path */
        AsciiString _path = BuiltInString.Read(reader);
        
        return new(_curve,
            _path);
    }
}

/* $CompressedAnimationCurve (6 fields) */
public record class CompressedAnimationCurve(
    AsciiString m_Path /* None */,
    PackedBitVector m_Times /* NeedsAlign */,
    PackedBitVector m_Values /* NeedsAlign */,
    PackedBitVector m_Slopes /* NeedsAlign */,
    int m_PreInfinity /* NeedsAlign */,
    int m_PostInfinity /* None */)
{
    public static CompressedAnimationCurve Read(EndianBinaryReader reader)
    {
        AsciiString _m_Path = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Times */
        PackedBitVector _m_Times = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Values */
        PackedBitVector _m_Values = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Slopes */
        PackedBitVector _m_Slopes = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_PreInfinity */
        int _m_PreInfinity = reader.ReadS32();
        int _m_PostInfinity = reader.ReadS32();
        
        return new(_m_Path,
            _m_Times,
            _m_Values,
            _m_Slopes,
            _m_PreInfinity,
            _m_PostInfinity);
    }
}

/* $Vector3Curve (2 fields) */
public record class Vector3Curve(
    AnimationCurve curve /* None */,
    AsciiString path /* NeedsAlign */)
{
    public static Vector3Curve Read(EndianBinaryReader reader)
    {
        AnimationCurve _curve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* path */
        AsciiString _path = BuiltInString.Read(reader);
        
        return new(_curve,
            _path);
    }
}

/* $FloatCurve (6 fields) */
public record class FloatCurve(
    AnimationCurve curve /* None */,
    AsciiString attribute /* NeedsAlign */,
    AsciiString path /* NeedsAlign */,
    int classID /* NeedsAlign */,
    PPtr<MonoScript> script /* None */,
    int flags /* None */)
{
    public static FloatCurve Read(EndianBinaryReader reader)
    {
        AnimationCurve _curve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* attribute */
        AsciiString _attribute = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        AsciiString _path = BuiltInString.Read(reader);
        reader.AlignTo(4); /* classID */
        int _classID = reader.ReadS32();
        PPtr<MonoScript> _script = PPtr<MonoScript>.Read(reader);
        int _flags = reader.ReadS32();
        
        return new(_curve,
            _attribute,
            _path,
            _classID,
            _script,
            _flags);
    }
}

/* $PPtrKeyframe (2 fields) */
public record class PPtrKeyframe(
    float time /* None */,
    PPtr<Object> @value /* None */)
{
    public static PPtrKeyframe Read(EndianBinaryReader reader)
    {
        float _time = reader.ReadF32();
        PPtr<Object> _value = PPtr<Object>.Read(reader);
        
        return new(_time,
            _value);
    }
}

/* $PPtrCurve (6 fields) */
public record class PPtrCurve(
    PPtrKeyframe[] curve /* None */,
    AsciiString attribute /* NeedsAlign */,
    AsciiString path /* NeedsAlign */,
    int classID /* NeedsAlign */,
    PPtr<MonoScript> script /* None */,
    int flags /* None */)
{
    public static PPtrCurve Read(EndianBinaryReader reader)
    {
        PPtrKeyframe[] _curve = BuiltInArray<PPtrKeyframe>.Read(reader);
        reader.AlignTo(4); /* attribute */
        AsciiString _attribute = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        AsciiString _path = BuiltInString.Read(reader);
        reader.AlignTo(4); /* classID */
        int _classID = reader.ReadS32();
        PPtr<MonoScript> _script = PPtr<MonoScript>.Read(reader);
        int _flags = reader.ReadS32();
        
        return new(_curve,
            _attribute,
            _path,
            _classID,
            _script,
            _flags);
    }
}

/* $HumanGoal (5 fields) */
public record class HumanGoal(
    xform m_X /* None */,
    float m_WeightT /* None */,
    float m_WeightR /* None */,
    float3 m_HintT /* None */,
    float m_HintWeightT /* None */)
{
    public static HumanGoal Read(EndianBinaryReader reader)
    {
        xform _m_X = xform.Read(reader);
        float _m_WeightT = reader.ReadF32();
        float _m_WeightR = reader.ReadF32();
        float3 _m_HintT = float3.Read(reader);
        float _m_HintWeightT = reader.ReadF32();
        
        return new(_m_X,
            _m_WeightT,
            _m_WeightR,
            _m_HintT,
            _m_HintWeightT);
    }
}

/* $HandPose (6 fields) */
public record class HandPose(
    xform m_GrabX /* None */,
    float[] m_DoFArray /* None */,
    float m_Override /* None */,
    float m_CloseOpen /* None */,
    float m_InOut /* None */,
    float m_Grab /* None */)
{
    public static HandPose Read(EndianBinaryReader reader)
    {
        xform _m_GrabX = xform.Read(reader);
        float[] _m_DoFArray = BuiltInArray<float>.Read(reader);
        float _m_Override = reader.ReadF32();
        float _m_CloseOpen = reader.ReadF32();
        float _m_InOut = reader.ReadF32();
        float _m_Grab = reader.ReadF32();
        
        return new(_m_GrabX,
            _m_DoFArray,
            _m_Override,
            _m_CloseOpen,
            _m_InOut,
            _m_Grab);
    }
}

/* $HumanPose (8 fields) */
public record class HumanPose(
    xform m_RootX /* None */,
    float3 m_LookAtPosition /* None */,
    float4 m_LookAtWeight /* None */,
    HumanGoal[] m_GoalArray /* None */,
    HandPose m_LeftHandPose /* None */,
    HandPose m_RightHandPose /* None */,
    float[] m_DoFArray /* None */,
    float3[] m_TDoFArray /* None */)
{
    public static HumanPose Read(EndianBinaryReader reader)
    {
        xform _m_RootX = xform.Read(reader);
        float3 _m_LookAtPosition = float3.Read(reader);
        float4 _m_LookAtWeight = float4.Read(reader);
        HumanGoal[] _m_GoalArray = BuiltInArray<HumanGoal>.Read(reader);
        HandPose _m_LeftHandPose = HandPose.Read(reader);
        HandPose _m_RightHandPose = HandPose.Read(reader);
        float[] _m_DoFArray = BuiltInArray<float>.Read(reader);
        float3[] _m_TDoFArray = BuiltInArray<float3>.Read(reader);
        
        return new(_m_RootX,
            _m_LookAtPosition,
            _m_LookAtWeight,
            _m_GoalArray,
            _m_LeftHandPose,
            _m_RightHandPose,
            _m_DoFArray,
            _m_TDoFArray);
    }
}

/* $ValueDelta (2 fields) */
public readonly record struct ValueDelta(
    float m_Start /* None */,
    float m_Stop /* None */)
{
    public static ValueDelta Read(EndianBinaryReader reader)
    {
        float _m_Start = reader.ReadF32();
        float _m_Stop = reader.ReadF32();
        
        return new(_m_Start,
            _m_Stop);
    }
}

/* $ClipMuscleConstant (27 fields) */
public record class ClipMuscleConstant(
    HumanPose m_DeltaPose /* None */,
    xform m_StartX /* None */,
    xform m_StopX /* None */,
    xform m_LeftFootStartX /* None */,
    xform m_RightFootStartX /* None */,
    float3 m_AverageSpeed /* None */,
    OffsetPtr m_Clip /* None */,
    float m_StartTime /* None */,
    float m_StopTime /* None */,
    float m_OrientationOffsetY /* None */,
    float m_Level /* None */,
    float m_CycleOffset /* None */,
    float m_AverageAngularSpeed /* None */,
    int[] m_IndexArray /* None */,
    ValueDelta[] m_ValueArrayDelta /* None */,
    float[] m_ValueArrayReferencePose /* None */,
    bool m_Mirror /* None */,
    bool m_LoopTime /* None */,
    bool m_LoopBlend /* None */,
    bool m_LoopBlendOrientation /* None */,
    bool m_LoopBlendPositionY /* None */,
    bool m_LoopBlendPositionXZ /* None */,
    bool m_StartAtOrigin /* None */,
    bool m_KeepOriginalOrientation /* None */,
    bool m_KeepOriginalPositionY /* None */,
    bool m_KeepOriginalPositionXZ /* None */,
    bool m_HeightFromFeet /* None */)
{
    public static ClipMuscleConstant Read(EndianBinaryReader reader)
    {
        HumanPose _m_DeltaPose = HumanPose.Read(reader);
        xform _m_StartX = xform.Read(reader);
        xform _m_StopX = xform.Read(reader);
        xform _m_LeftFootStartX = xform.Read(reader);
        xform _m_RightFootStartX = xform.Read(reader);
        float3 _m_AverageSpeed = float3.Read(reader);
        OffsetPtr _m_Clip = OffsetPtr.Read(reader);
        float _m_StartTime = reader.ReadF32();
        float _m_StopTime = reader.ReadF32();
        float _m_OrientationOffsetY = reader.ReadF32();
        float _m_Level = reader.ReadF32();
        float _m_CycleOffset = reader.ReadF32();
        float _m_AverageAngularSpeed = reader.ReadF32();
        int[] _m_IndexArray = BuiltInArray<int>.Read(reader);
        ValueDelta[] _m_ValueArrayDelta = BuiltInArray<ValueDelta>.Read(reader);
        float[] _m_ValueArrayReferencePose = BuiltInArray<float>.Read(reader);
        bool _m_Mirror = reader.ReadBool();
        bool _m_LoopTime = reader.ReadBool();
        bool _m_LoopBlend = reader.ReadBool();
        bool _m_LoopBlendOrientation = reader.ReadBool();
        bool _m_LoopBlendPositionY = reader.ReadBool();
        bool _m_LoopBlendPositionXZ = reader.ReadBool();
        bool _m_StartAtOrigin = reader.ReadBool();
        bool _m_KeepOriginalOrientation = reader.ReadBool();
        bool _m_KeepOriginalPositionY = reader.ReadBool();
        bool _m_KeepOriginalPositionXZ = reader.ReadBool();
        bool _m_HeightFromFeet = reader.ReadBool();
        
        return new(_m_DeltaPose,
            _m_StartX,
            _m_StopX,
            _m_LeftFootStartX,
            _m_RightFootStartX,
            _m_AverageSpeed,
            _m_Clip,
            _m_StartTime,
            _m_StopTime,
            _m_OrientationOffsetY,
            _m_Level,
            _m_CycleOffset,
            _m_AverageAngularSpeed,
            _m_IndexArray,
            _m_ValueArrayDelta,
            _m_ValueArrayReferencePose,
            _m_Mirror,
            _m_LoopTime,
            _m_LoopBlend,
            _m_LoopBlendOrientation,
            _m_LoopBlendPositionY,
            _m_LoopBlendPositionXZ,
            _m_StartAtOrigin,
            _m_KeepOriginalOrientation,
            _m_KeepOriginalPositionY,
            _m_KeepOriginalPositionXZ,
            _m_HeightFromFeet);
    }
}

/* $GenericBinding (8 fields) */
public record class GenericBinding(
    uint path /* None */,
    uint attribute /* None */,
    PPtr<Object> script /* None */,
    int typeID /* None */,
    byte customType /* None */,
    byte isPPtrCurve /* None */,
    byte isIntCurve /* None */,
    byte isSerializeReferenceCurve /* None */)
{
    public static GenericBinding Read(EndianBinaryReader reader)
    {
        uint _path = reader.ReadU32();
        uint _attribute = reader.ReadU32();
        PPtr<Object> _script = PPtr<Object>.Read(reader);
        int _typeID = reader.ReadS32();
        byte _customType = reader.ReadU8();
        byte _isPPtrCurve = reader.ReadU8();
        byte _isIntCurve = reader.ReadU8();
        byte _isSerializeReferenceCurve = reader.ReadU8();
        
        return new(_path,
            _attribute,
            _script,
            _typeID,
            _customType,
            _isPPtrCurve,
            _isIntCurve,
            _isSerializeReferenceCurve);
    }
}

/* $AnimationClipBindingConstant (2 fields) */
public record class AnimationClipBindingConstant(
    GenericBinding[] genericBindings /* NeedsAlign */,
    PPtr<Object>[] pptrCurveMapping /* NeedsAlign */)
{
    public static AnimationClipBindingConstant Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* genericBindings */
        GenericBinding[] _genericBindings = BuiltInArray<GenericBinding>.Read(reader);
        reader.AlignTo(4); /* pptrCurveMapping */
        PPtr<Object>[] _pptrCurveMapping = BuiltInArray<PPtr<Object>>.Read(reader);
        
        return new(_genericBindings,
            _pptrCurveMapping);
    }
}

/* $AnimationEvent (7 fields) */
public record class AnimationEvent(
    float time /* None */,
    AsciiString functionName /* None */,
    AsciiString data /* NeedsAlign */,
    PPtr<Object> objectReferenceParameter /* NeedsAlign */,
    float floatParameter /* None */,
    int intParameter /* None */,
    int messageOptions /* None */)
{
    public static AnimationEvent Read(EndianBinaryReader reader)
    {
        float _time = reader.ReadF32();
        AsciiString _functionName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* data */
        AsciiString _data = BuiltInString.Read(reader);
        reader.AlignTo(4); /* objectReferenceParameter */
        PPtr<Object> _objectReferenceParameter = PPtr<Object>.Read(reader);
        float _floatParameter = reader.ReadF32();
        int _intParameter = reader.ReadS32();
        int _messageOptions = reader.ReadS32();
        
        return new(_time,
            _functionName,
            _data,
            _objectReferenceParameter,
            _floatParameter,
            _intParameter,
            _messageOptions);
    }
}

/* $DirectorGenericBinding (2 fields) */
public record class DirectorGenericBinding(
    PPtr<Object> key /* None */,
    PPtr<Object> @value /* None */)
{
    public static DirectorGenericBinding Read(EndianBinaryReader reader)
    {
        PPtr<Object> _key = PPtr<Object>.Read(reader);
        PPtr<Object> _value = PPtr<Object>.Read(reader);
        
        return new(_key,
            _value);
    }
}

/* $ExposedReferenceTable (1 fields) */
public record class ExposedReferenceTable(
    Dictionary<AsciiString, PPtr<Object>> m_References /* NeedsAlign */)
{
    public static ExposedReferenceTable Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_References */
        Dictionary<AsciiString, PPtr<Object>> _m_References = BuiltInMap<AsciiString, PPtr<Object>>.Read(reader);
        
        return new(_m_References);
    }
}

/* $SpriteRenderData (13 fields) */
public record class SpriteRenderData(
    PPtr<Texture2D> texture /* NeedsAlign */,
    PPtr<Texture2D> alphaTexture /* None */,
    SecondarySpriteTexture[] secondaryTextures /* None */,
    SubMesh[] m_SubMeshes /* NeedsAlign */,
    byte[] m_IndexBuffer /* NeedsAlign */,
    VertexData m_VertexData /* NeedsAlign */,
    Matrix4x4f[] m_Bindpose /* NeedsAlign */,
    Rectf textureRect /* NeedsAlign */,
    Vector2f textureRectOffset /* None */,
    Vector2f atlasRectOffset /* None */,
    uint settingsRaw /* None */,
    Vector4f uvTransform /* None */,
    float downscaleMultiplier /* None */)
{
    public static SpriteRenderData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* texture */
        PPtr<Texture2D> _texture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _alphaTexture = PPtr<Texture2D>.Read(reader);
        SecondarySpriteTexture[] _secondaryTextures = BuiltInArray<SecondarySpriteTexture>.Read(reader);
        reader.AlignTo(4); /* m_SubMeshes */
        SubMesh[] _m_SubMeshes = BuiltInArray<SubMesh>.Read(reader);
        reader.AlignTo(4); /* m_IndexBuffer */
        byte[] _m_IndexBuffer = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_VertexData */
        VertexData _m_VertexData = VertexData.Read(reader);
        reader.AlignTo(4); /* m_Bindpose */
        Matrix4x4f[] _m_Bindpose = BuiltInArray<Matrix4x4f>.Read(reader);
        reader.AlignTo(4); /* textureRect */
        Rectf _textureRect = Rectf.Read(reader);
        Vector2f _textureRectOffset = Vector2f.Read(reader);
        Vector2f _atlasRectOffset = Vector2f.Read(reader);
        uint _settingsRaw = reader.ReadU32();
        Vector4f _uvTransform = Vector4f.Read(reader);
        float _downscaleMultiplier = reader.ReadF32();
        
        return new(_texture,
            _alphaTexture,
            _secondaryTextures,
            _m_SubMeshes,
            _m_IndexBuffer,
            _m_VertexData,
            _m_Bindpose,
            _textureRect,
            _textureRectOffset,
            _atlasRectOffset,
            _settingsRaw,
            _uvTransform,
            _downscaleMultiplier);
    }
}

/* $SpriteBone (7 fields) */
public record class SpriteBone(
    AsciiString name /* None */,
    AsciiString guid /* NeedsAlign */,
    Vector3f position /* NeedsAlign */,
    Quaternionf rotation /* None */,
    float length /* None */,
    int parentId /* None */,
    ColorRGBA color /* None */)
{
    public static SpriteBone Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        reader.AlignTo(4); /* position */
        Vector3f _position = Vector3f.Read(reader);
        Quaternionf _rotation = Quaternionf.Read(reader);
        float _length = reader.ReadF32();
        int _parentId = reader.ReadS32();
        ColorRGBA _color = ColorRGBA.Read(reader);
        
        return new(_name,
            _guid,
            _position,
            _rotation,
            _length,
            _parentId,
            _color);
    }
}

/* $SplatDatabase (4 fields) */
public record class SplatDatabase(
    PPtr<TerrainLayer>[] m_TerrainLayers /* NeedsAlign */,
    PPtr<Texture2D>[] m_AlphaTextures /* NeedsAlign */,
    int m_AlphamapResolution /* NeedsAlign */,
    int m_BaseMapResolution /* None */)
{
    public static SplatDatabase Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_TerrainLayers */
        PPtr<TerrainLayer>[] _m_TerrainLayers = BuiltInArray<PPtr<TerrainLayer>>.Read(reader);
        reader.AlignTo(4); /* m_AlphaTextures */
        PPtr<Texture2D>[] _m_AlphaTextures = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* m_AlphamapResolution */
        int _m_AlphamapResolution = reader.ReadS32();
        int _m_BaseMapResolution = reader.ReadS32();
        
        return new(_m_TerrainLayers,
            _m_AlphaTextures,
            _m_AlphamapResolution,
            _m_BaseMapResolution);
    }
}

/* $DetailPatch (2 fields) */
public record class DetailPatch(
    byte[] layerIndices /* None */,
    byte[] coverage /* NeedsAlign */)
{
    public static DetailPatch Read(EndianBinaryReader reader)
    {
        byte[] _layerIndices = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* coverage */
        byte[] _coverage = BuiltInArray<byte>.Read(reader);
        
        return new(_layerIndices,
            _coverage);
    }
}

/* $DetailPrototype (19 fields) */
public record class DetailPrototype(
    PPtr<GameObject> prototype /* None */,
    PPtr<Texture2D> prototypeTexture /* None */,
    float minWidth /* None */,
    float maxWidth /* None */,
    float minHeight /* None */,
    float maxHeight /* None */,
    int noiseSeed /* None */,
    float noiseSpread /* None */,
    float holeTestRadius /* None */,
    float density /* None */,
    ColorRGBA healthyColor /* None */,
    ColorRGBA dryColor /* None */,
    int renderMode /* None */,
    int usePrototypeMesh /* None */,
    int useInstancing /* None */,
    int useDensityScaling /* None */,
    float alignToGround /* None */,
    float positionJitter /* None */,
    float targetCoverage /* None */)
{
    public static DetailPrototype Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _prototype = PPtr<GameObject>.Read(reader);
        PPtr<Texture2D> _prototypeTexture = PPtr<Texture2D>.Read(reader);
        float _minWidth = reader.ReadF32();
        float _maxWidth = reader.ReadF32();
        float _minHeight = reader.ReadF32();
        float _maxHeight = reader.ReadF32();
        int _noiseSeed = reader.ReadS32();
        float _noiseSpread = reader.ReadF32();
        float _holeTestRadius = reader.ReadF32();
        float _density = reader.ReadF32();
        ColorRGBA _healthyColor = ColorRGBA.Read(reader);
        ColorRGBA _dryColor = ColorRGBA.Read(reader);
        int _renderMode = reader.ReadS32();
        int _usePrototypeMesh = reader.ReadS32();
        int _useInstancing = reader.ReadS32();
        int _useDensityScaling = reader.ReadS32();
        float _alignToGround = reader.ReadF32();
        float _positionJitter = reader.ReadF32();
        float _targetCoverage = reader.ReadF32();
        
        return new(_prototype,
            _prototypeTexture,
            _minWidth,
            _maxWidth,
            _minHeight,
            _maxHeight,
            _noiseSeed,
            _noiseSpread,
            _holeTestRadius,
            _density,
            _healthyColor,
            _dryColor,
            _renderMode,
            _usePrototypeMesh,
            _useInstancing,
            _useDensityScaling,
            _alignToGround,
            _positionJitter,
            _targetCoverage);
    }
}

/* $TreeInstance (7 fields) */
public record class TreeInstance(
    Vector3f position /* None */,
    float widthScale /* None */,
    float heightScale /* None */,
    float rotation /* None */,
    ColorRGBA color /* None */,
    ColorRGBA lightmapColor /* None */,
    int index /* None */)
{
    public static TreeInstance Read(EndianBinaryReader reader)
    {
        Vector3f _position = Vector3f.Read(reader);
        float _widthScale = reader.ReadF32();
        float _heightScale = reader.ReadF32();
        float _rotation = reader.ReadF32();
        ColorRGBA _color = ColorRGBA.Read(reader);
        ColorRGBA _lightmapColor = ColorRGBA.Read(reader);
        int _index = reader.ReadS32();
        
        return new(_position,
            _widthScale,
            _heightScale,
            _rotation,
            _color,
            _lightmapColor,
            _index);
    }
}

/* $TreePrototype (3 fields) */
public record class TreePrototype(
    PPtr<GameObject> prefab /* None */,
    float bendFactor /* None */,
    int navMeshLod /* None */)
{
    public static TreePrototype Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _prefab = PPtr<GameObject>.Read(reader);
        float _bendFactor = reader.ReadF32();
        int _navMeshLod = reader.ReadS32();
        
        return new(_prefab,
            _bendFactor,
            _navMeshLod);
    }
}

/* $DetailDatabase (15 fields) */
public record class DetailDatabase(
    DetailPatch[] m_Patches /* NeedsAlign */,
    DetailPrototype[] m_DetailPrototypes /* NeedsAlign */,
    int m_PatchCount /* NeedsAlign */,
    int m_PatchSamples /* None */,
    ColorRGBA WavingGrassTint /* None */,
    float m_WavingGrassStrength /* None */,
    float m_WavingGrassAmount /* None */,
    float m_WavingGrassSpeed /* None */,
    int m_DetailScatterMode /* None */,
    TreeInstance[] m_TreeInstances /* None */,
    TreePrototype[] m_TreePrototypes /* NeedsAlign */,
    PPtr<Texture2D>[] m_PreloadTextureAtlasData /* NeedsAlign */,
    PPtr<Shader> m_DefaultShaders_0 /* NeedsAlign */,
    PPtr<Shader> m_DefaultShaders_1 /* None */,
    PPtr<Shader> m_DefaultShaders_2 /* None */)
{
    public static DetailDatabase Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Patches */
        DetailPatch[] _m_Patches = BuiltInArray<DetailPatch>.Read(reader);
        reader.AlignTo(4); /* m_DetailPrototypes */
        DetailPrototype[] _m_DetailPrototypes = BuiltInArray<DetailPrototype>.Read(reader);
        reader.AlignTo(4); /* m_PatchCount */
        int _m_PatchCount = reader.ReadS32();
        int _m_PatchSamples = reader.ReadS32();
        ColorRGBA _WavingGrassTint = ColorRGBA.Read(reader);
        float _m_WavingGrassStrength = reader.ReadF32();
        float _m_WavingGrassAmount = reader.ReadF32();
        float _m_WavingGrassSpeed = reader.ReadF32();
        int _m_DetailScatterMode = reader.ReadS32();
        TreeInstance[] _m_TreeInstances = BuiltInArray<TreeInstance>.Read(reader);
        reader.AlignTo(4); /* m_TreePrototypes */
        TreePrototype[] _m_TreePrototypes = BuiltInArray<TreePrototype>.Read(reader);
        reader.AlignTo(4); /* m_PreloadTextureAtlasData */
        PPtr<Texture2D>[] _m_PreloadTextureAtlasData = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* m_DefaultShaders_0 */
        PPtr<Shader> _m_DefaultShaders_0 = PPtr<Shader>.Read(reader);
        PPtr<Shader> _m_DefaultShaders_1 = PPtr<Shader>.Read(reader);
        PPtr<Shader> _m_DefaultShaders_2 = PPtr<Shader>.Read(reader);
        
        return new(_m_Patches,
            _m_DetailPrototypes,
            _m_PatchCount,
            _m_PatchSamples,
            _WavingGrassTint,
            _m_WavingGrassStrength,
            _m_WavingGrassAmount,
            _m_WavingGrassSpeed,
            _m_DetailScatterMode,
            _m_TreeInstances,
            _m_TreePrototypes,
            _m_PreloadTextureAtlasData,
            _m_DefaultShaders_0,
            _m_DefaultShaders_1,
            _m_DefaultShaders_2);
    }
}

/* $Heightmap (9 fields) */
public record class Heightmap(
    short[] m_Heights /* NeedsAlign */,
    byte[] m_Holes /* NeedsAlign */,
    byte[] m_HolesLOD /* NeedsAlign */,
    bool m_EnableHolesTextureCompression /* NeedsAlign */,
    float[] m_PrecomputedError /* NeedsAlign */,
    float[] m_MinMaxPatchHeights /* NeedsAlign */,
    int m_Resolution /* NeedsAlign */,
    int m_Levels /* None */,
    Vector3f m_Scale /* None */)
{
    public static Heightmap Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Heights */
        short[] _m_Heights = BuiltInArray<short>.Read(reader);
        reader.AlignTo(4); /* m_Holes */
        byte[] _m_Holes = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_HolesLOD */
        byte[] _m_HolesLOD = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_EnableHolesTextureCompression */
        bool _m_EnableHolesTextureCompression = reader.ReadBool();
        reader.AlignTo(4); /* m_PrecomputedError */
        float[] _m_PrecomputedError = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* m_MinMaxPatchHeights */
        float[] _m_MinMaxPatchHeights = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* m_Resolution */
        int _m_Resolution = reader.ReadS32();
        int _m_Levels = reader.ReadS32();
        Vector3f _m_Scale = Vector3f.Read(reader);
        
        return new(_m_Heights,
            _m_Holes,
            _m_HolesLOD,
            _m_EnableHolesTextureCompression,
            _m_PrecomputedError,
            _m_MinMaxPatchHeights,
            _m_Resolution,
            _m_Levels,
            _m_Scale);
    }
}

/* $MinMaxCurve (5 fields) */
public record class MinMaxCurve(
    ushort minMaxState /* NeedsAlign */,
    float scalar /* NeedsAlign */,
    float minScalar /* None */,
    AnimationCurve maxCurve /* None */,
    AnimationCurve minCurve /* NeedsAlign */)
{
    public static MinMaxCurve Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* minMaxState */
        ushort _minMaxState = reader.ReadU16();
        reader.AlignTo(4); /* scalar */
        float _scalar = reader.ReadF32();
        float _minScalar = reader.ReadF32();
        AnimationCurve _maxCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* minCurve */
        AnimationCurve _minCurve = AnimationCurve.Read(reader);
        
        return new(_minMaxState,
            _scalar,
            _minScalar,
            _maxCurve,
            _minCurve);
    }
}

/* $MinMaxGradient (5 fields) */
public record class MinMaxGradient(
    ushort minMaxState /* NeedsAlign */,
    ColorRGBA minColor /* NeedsAlign */,
    ColorRGBA maxColor /* None */,
    Gradient maxGradient /* None */,
    Gradient minGradient /* NeedsAlign */)
{
    public static MinMaxGradient Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* minMaxState */
        ushort _minMaxState = reader.ReadU16();
        reader.AlignTo(4); /* minColor */
        ColorRGBA _minColor = ColorRGBA.Read(reader);
        ColorRGBA _maxColor = ColorRGBA.Read(reader);
        Gradient _maxGradient = Gradient.Read(reader);
        reader.AlignTo(4); /* minGradient */
        Gradient _minGradient = Gradient.Read(reader);
        
        return new(_minMaxState,
            _minColor,
            _maxColor,
            _maxGradient,
            _minGradient);
    }
}

/* $InitialModule (17 fields) */
public record class InitialModule(
    bool enabled /* None */,
    MinMaxCurve startLifetime /* NeedsAlign */,
    MinMaxCurve startSpeed /* NeedsAlign */,
    MinMaxGradient startColor /* NeedsAlign */,
    MinMaxCurve startSize /* NeedsAlign */,
    MinMaxCurve startSizeY /* NeedsAlign */,
    MinMaxCurve startSizeZ /* NeedsAlign */,
    MinMaxCurve startRotationX /* NeedsAlign */,
    MinMaxCurve startRotationY /* NeedsAlign */,
    MinMaxCurve startRotation /* NeedsAlign */,
    float randomizeRotationDirection /* NeedsAlign */,
    int gravitySource /* None */,
    int maxNumParticles /* None */,
    Vector3f customEmitterVelocity /* None */,
    bool size3D /* None */,
    bool rotation3D /* None */,
    MinMaxCurve gravityModifier /* NeedsAlign */)
{
    public static InitialModule Read(EndianBinaryReader reader)
    {
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* startLifetime */
        MinMaxCurve _startLifetime = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSpeed */
        MinMaxCurve _startSpeed = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startColor */
        MinMaxGradient _startColor = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* startSize */
        MinMaxCurve _startSize = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSizeY */
        MinMaxCurve _startSizeY = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSizeZ */
        MinMaxCurve _startSizeZ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startRotationX */
        MinMaxCurve _startRotationX = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startRotationY */
        MinMaxCurve _startRotationY = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startRotation */
        MinMaxCurve _startRotation = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* randomizeRotationDirection */
        float _randomizeRotationDirection = reader.ReadF32();
        int _gravitySource = reader.ReadS32();
        int _maxNumParticles = reader.ReadS32();
        Vector3f _customEmitterVelocity = Vector3f.Read(reader);
        bool _size3D = reader.ReadBool();
        bool _rotation3D = reader.ReadBool();
        reader.AlignTo(4); /* gravityModifier */
        MinMaxCurve _gravityModifier = MinMaxCurve.Read(reader);
        
        return new(_enabled,
            _startLifetime,
            _startSpeed,
            _startColor,
            _startSize,
            _startSizeY,
            _startSizeZ,
            _startRotationX,
            _startRotationY,
            _startRotation,
            _randomizeRotationDirection,
            _gravitySource,
            _maxNumParticles,
            _customEmitterVelocity,
            _size3D,
            _rotation3D,
            _gravityModifier);
    }
}

/* $MultiModeParameter (3 fields) */
public record class MultiModeParameter(
    int mode /* None */,
    float spread /* None */,
    MinMaxCurve speed /* None */)
{
    public static MultiModeParameter Read(EndianBinaryReader reader)
    {
        int _mode = reader.ReadS32();
        float _spread = reader.ReadF32();
        MinMaxCurve _speed = MinMaxCurve.Read(reader);
        
        return new(_mode,
            _spread,
            _speed);
    }
}

/* $ShapeModule (34 fields) */
public record class ShapeModule(
    bool enabled /* NeedsAlign */,
    int type /* NeedsAlign */,
    float angle /* None */,
    float length /* None */,
    Vector3f boxThickness /* None */,
    float radiusThickness /* None */,
    float donutRadius /* None */,
    Vector3f m_Position /* None */,
    Vector3f m_Rotation /* None */,
    Vector3f m_Scale /* None */,
    int placementMode /* None */,
    int m_MeshMaterialIndex /* None */,
    float m_MeshNormalOffset /* None */,
    MultiModeParameter m_MeshSpawn /* None */,
    PPtr<Mesh> m_Mesh /* NeedsAlign */,
    PPtr<MeshRenderer> m_MeshRenderer /* None */,
    PPtr<SkinnedMeshRenderer> m_SkinnedMeshRenderer /* None */,
    PPtr<Sprite> m_Sprite /* None */,
    PPtr<SpriteRenderer> m_SpriteRenderer /* None */,
    bool m_UseMeshMaterialIndex /* None */,
    bool m_UseMeshColors /* None */,
    bool alignToDirection /* None */,
    PPtr<Texture2D> m_Texture /* NeedsAlign */,
    int m_TextureClipChannel /* None */,
    float m_TextureClipThreshold /* None */,
    int m_TextureUVChannel /* None */,
    bool m_TextureColorAffectsParticles /* None */,
    bool m_TextureAlphaAffectsParticles /* None */,
    bool m_TextureBilinearFiltering /* None */,
    float randomDirectionAmount /* NeedsAlign */,
    float sphericalDirectionAmount /* None */,
    float randomPositionAmount /* None */,
    MultiModeParameter radius /* None */,
    MultiModeParameter arc /* NeedsAlign */)
{
    public static ShapeModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* type */
        int _type = reader.ReadS32();
        float _angle = reader.ReadF32();
        float _length = reader.ReadF32();
        Vector3f _boxThickness = Vector3f.Read(reader);
        float _radiusThickness = reader.ReadF32();
        float _donutRadius = reader.ReadF32();
        Vector3f _m_Position = Vector3f.Read(reader);
        Vector3f _m_Rotation = Vector3f.Read(reader);
        Vector3f _m_Scale = Vector3f.Read(reader);
        int _placementMode = reader.ReadS32();
        int _m_MeshMaterialIndex = reader.ReadS32();
        float _m_MeshNormalOffset = reader.ReadF32();
        MultiModeParameter _m_MeshSpawn = MultiModeParameter.Read(reader);
        reader.AlignTo(4); /* m_Mesh */
        PPtr<Mesh> _m_Mesh = PPtr<Mesh>.Read(reader);
        PPtr<MeshRenderer> _m_MeshRenderer = PPtr<MeshRenderer>.Read(reader);
        PPtr<SkinnedMeshRenderer> _m_SkinnedMeshRenderer = PPtr<SkinnedMeshRenderer>.Read(reader);
        PPtr<Sprite> _m_Sprite = PPtr<Sprite>.Read(reader);
        PPtr<SpriteRenderer> _m_SpriteRenderer = PPtr<SpriteRenderer>.Read(reader);
        bool _m_UseMeshMaterialIndex = reader.ReadBool();
        bool _m_UseMeshColors = reader.ReadBool();
        bool _alignToDirection = reader.ReadBool();
        reader.AlignTo(4); /* m_Texture */
        PPtr<Texture2D> _m_Texture = PPtr<Texture2D>.Read(reader);
        int _m_TextureClipChannel = reader.ReadS32();
        float _m_TextureClipThreshold = reader.ReadF32();
        int _m_TextureUVChannel = reader.ReadS32();
        bool _m_TextureColorAffectsParticles = reader.ReadBool();
        bool _m_TextureAlphaAffectsParticles = reader.ReadBool();
        bool _m_TextureBilinearFiltering = reader.ReadBool();
        reader.AlignTo(4); /* randomDirectionAmount */
        float _randomDirectionAmount = reader.ReadF32();
        float _sphericalDirectionAmount = reader.ReadF32();
        float _randomPositionAmount = reader.ReadF32();
        MultiModeParameter _radius = MultiModeParameter.Read(reader);
        reader.AlignTo(4); /* arc */
        MultiModeParameter _arc = MultiModeParameter.Read(reader);
        
        return new(_enabled,
            _type,
            _angle,
            _length,
            _boxThickness,
            _radiusThickness,
            _donutRadius,
            _m_Position,
            _m_Rotation,
            _m_Scale,
            _placementMode,
            _m_MeshMaterialIndex,
            _m_MeshNormalOffset,
            _m_MeshSpawn,
            _m_Mesh,
            _m_MeshRenderer,
            _m_SkinnedMeshRenderer,
            _m_Sprite,
            _m_SpriteRenderer,
            _m_UseMeshMaterialIndex,
            _m_UseMeshColors,
            _alignToDirection,
            _m_Texture,
            _m_TextureClipChannel,
            _m_TextureClipThreshold,
            _m_TextureUVChannel,
            _m_TextureColorAffectsParticles,
            _m_TextureAlphaAffectsParticles,
            _m_TextureBilinearFiltering,
            _randomDirectionAmount,
            _sphericalDirectionAmount,
            _randomPositionAmount,
            _radius,
            _arc);
    }
}

/* $ParticleSystemEmissionBurst (5 fields) */
public record class ParticleSystemEmissionBurst(
    float time /* None */,
    MinMaxCurve countCurve /* None */,
    int cycleCount /* NeedsAlign */,
    float repeatInterval /* None */,
    float probability /* None */)
{
    public static ParticleSystemEmissionBurst Read(EndianBinaryReader reader)
    {
        float _time = reader.ReadF32();
        MinMaxCurve _countCurve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* cycleCount */
        int _cycleCount = reader.ReadS32();
        float _repeatInterval = reader.ReadF32();
        float _probability = reader.ReadF32();
        
        return new(_time,
            _countCurve,
            _cycleCount,
            _repeatInterval,
            _probability);
    }
}

/* $EmissionModule (5 fields) */
public record class EmissionModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve rateOverTime /* NeedsAlign */,
    MinMaxCurve rateOverDistance /* NeedsAlign */,
    int m_BurstCount /* NeedsAlign */,
    ParticleSystemEmissionBurst[] m_Bursts /* NeedsAlign */)
{
    public static EmissionModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* rateOverTime */
        MinMaxCurve _rateOverTime = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* rateOverDistance */
        MinMaxCurve _rateOverDistance = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_BurstCount */
        int _m_BurstCount = reader.ReadS32();
        reader.AlignTo(4); /* m_Bursts */
        ParticleSystemEmissionBurst[] _m_Bursts = BuiltInArray<ParticleSystemEmissionBurst>.Read(reader);
        
        return new(_enabled,
            _rateOverTime,
            _rateOverDistance,
            _m_BurstCount,
            _m_Bursts);
    }
}

/* $SizeModule (5 fields) */
public record class SizeModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve curve /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve z /* NeedsAlign */,
    bool separateAxes /* NeedsAlign */)
{
    public static SizeModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* curve */
        MinMaxCurve _curve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve _z = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* separateAxes */
        bool _separateAxes = reader.ReadBool();
        
        return new(_enabled,
            _curve,
            _y,
            _z,
            _separateAxes);
    }
}

/* $RotationModule (5 fields) */
public record class RotationModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve x /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve curve /* NeedsAlign */,
    bool separateAxes /* NeedsAlign */)
{
    public static RotationModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* x */
        MinMaxCurve _x = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        MinMaxCurve _curve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* separateAxes */
        bool _separateAxes = reader.ReadBool();
        
        return new(_enabled,
            _x,
            _y,
            _curve,
            _separateAxes);
    }
}

/* $ColorModule (2 fields) */
public record class ColorModule(
    bool enabled /* NeedsAlign */,
    MinMaxGradient gradient /* NeedsAlign */)
{
    public static ColorModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* gradient */
        MinMaxGradient _gradient = MinMaxGradient.Read(reader);
        
        return new(_enabled,
            _gradient);
    }
}

/* $SpriteData (1 fields) */
public record class SpriteData(
    PPtr<Object> sprite /* None */)
{
    public static SpriteData Read(EndianBinaryReader reader)
    {
        PPtr<Object> _sprite = PPtr<Object>.Read(reader);
        
        return new(_sprite);
    }
}

/* $UVModule (17 fields) */
public record class UVModule(
    bool enabled /* NeedsAlign */,
    int mode /* NeedsAlign */,
    int timeMode /* None */,
    float fps /* None */,
    MinMaxCurve frameOverTime /* None */,
    MinMaxCurve startFrame /* NeedsAlign */,
    Vector2f speedRange /* NeedsAlign */,
    int tilesX /* None */,
    int tilesY /* None */,
    int animationType /* None */,
    int rowIndex /* None */,
    float cycles /* None */,
    int uvChannelMask /* None */,
    int rowMode /* None */,
    SpriteData[] sprites /* None */,
    float flipU /* NeedsAlign */,
    float flipV /* None */)
{
    public static UVModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* mode */
        int _mode = reader.ReadS32();
        int _timeMode = reader.ReadS32();
        float _fps = reader.ReadF32();
        MinMaxCurve _frameOverTime = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startFrame */
        MinMaxCurve _startFrame = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* speedRange */
        Vector2f _speedRange = Vector2f.Read(reader);
        int _tilesX = reader.ReadS32();
        int _tilesY = reader.ReadS32();
        int _animationType = reader.ReadS32();
        int _rowIndex = reader.ReadS32();
        float _cycles = reader.ReadF32();
        int _uvChannelMask = reader.ReadS32();
        int _rowMode = reader.ReadS32();
        SpriteData[] _sprites = BuiltInArray<SpriteData>.Read(reader);
        reader.AlignTo(4); /* flipU */
        float _flipU = reader.ReadF32();
        float _flipV = reader.ReadF32();
        
        return new(_enabled,
            _mode,
            _timeMode,
            _fps,
            _frameOverTime,
            _startFrame,
            _speedRange,
            _tilesX,
            _tilesY,
            _animationType,
            _rowIndex,
            _cycles,
            _uvChannelMask,
            _rowMode,
            _sprites,
            _flipU,
            _flipV);
    }
}

/* $VelocityModule (13 fields) */
public record class VelocityModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve x /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve z /* NeedsAlign */,
    MinMaxCurve orbitalX /* NeedsAlign */,
    MinMaxCurve orbitalY /* NeedsAlign */,
    MinMaxCurve orbitalZ /* NeedsAlign */,
    MinMaxCurve orbitalOffsetX /* NeedsAlign */,
    MinMaxCurve orbitalOffsetY /* NeedsAlign */,
    MinMaxCurve orbitalOffsetZ /* NeedsAlign */,
    MinMaxCurve radial /* NeedsAlign */,
    MinMaxCurve speedModifier /* NeedsAlign */,
    bool inWorldSpace /* NeedsAlign */)
{
    public static VelocityModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* x */
        MinMaxCurve _x = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve _z = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalX */
        MinMaxCurve _orbitalX = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalY */
        MinMaxCurve _orbitalY = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalZ */
        MinMaxCurve _orbitalZ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalOffsetX */
        MinMaxCurve _orbitalOffsetX = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalOffsetY */
        MinMaxCurve _orbitalOffsetY = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalOffsetZ */
        MinMaxCurve _orbitalOffsetZ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* radial */
        MinMaxCurve _radial = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* speedModifier */
        MinMaxCurve _speedModifier = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* inWorldSpace */
        bool _inWorldSpace = reader.ReadBool();
        
        return new(_enabled,
            _x,
            _y,
            _z,
            _orbitalX,
            _orbitalY,
            _orbitalZ,
            _orbitalOffsetX,
            _orbitalOffsetY,
            _orbitalOffsetZ,
            _radial,
            _speedModifier,
            _inWorldSpace);
    }
}

/* $InheritVelocityModule (3 fields) */
public record class InheritVelocityModule(
    bool enabled /* NeedsAlign */,
    int m_Mode /* NeedsAlign */,
    MinMaxCurve m_Curve /* None */)
{
    public static InheritVelocityModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* m_Mode */
        int _m_Mode = reader.ReadS32();
        MinMaxCurve _m_Curve = MinMaxCurve.Read(reader);
        
        return new(_enabled,
            _m_Mode,
            _m_Curve);
    }
}

/* $LifetimeByEmitterSpeedModule (3 fields) */
public record class LifetimeByEmitterSpeedModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve m_Curve /* NeedsAlign */,
    Vector2f m_Range /* NeedsAlign */)
{
    public static LifetimeByEmitterSpeedModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* m_Curve */
        MinMaxCurve _m_Curve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_Range */
        Vector2f _m_Range = Vector2f.Read(reader);
        
        return new(_enabled,
            _m_Curve,
            _m_Range);
    }
}

/* $ForceModule (6 fields) */
public record class ForceModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve x /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve z /* NeedsAlign */,
    bool inWorldSpace /* NeedsAlign */,
    bool randomizePerFrame /* None */)
{
    public static ForceModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* x */
        MinMaxCurve _x = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve _z = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* inWorldSpace */
        bool _inWorldSpace = reader.ReadBool();
        bool _randomizePerFrame = reader.ReadBool();
        
        return new(_enabled,
            _x,
            _y,
            _z,
            _inWorldSpace,
            _randomizePerFrame);
    }
}

/* $ExternalForcesModule (5 fields) */
public record class ExternalForcesModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve multiplierCurve /* NeedsAlign */,
    int influenceFilter /* NeedsAlign */,
    BitField influenceMask /* None */,
    PPtr<ParticleSystemForceField>[] influenceList /* None */)
{
    public static ExternalForcesModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* multiplierCurve */
        MinMaxCurve _multiplierCurve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* influenceFilter */
        int _influenceFilter = reader.ReadS32();
        BitField _influenceMask = BitField.Read(reader);
        PPtr<ParticleSystemForceField>[] _influenceList = BuiltInArray<PPtr<ParticleSystemForceField>>.Read(reader);
        
        return new(_enabled,
            _multiplierCurve,
            _influenceFilter,
            _influenceMask,
            _influenceList);
    }
}

/* $ClampVelocityModule (11 fields) */
public record class ClampVelocityModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve x /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve z /* NeedsAlign */,
    MinMaxCurve magnitude /* NeedsAlign */,
    bool separateAxis /* NeedsAlign */,
    bool inWorldSpace /* None */,
    bool multiplyDragByParticleSize /* None */,
    bool multiplyDragByParticleVelocity /* None */,
    float dampen /* NeedsAlign */,
    MinMaxCurve drag /* None */)
{
    public static ClampVelocityModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* x */
        MinMaxCurve _x = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve _z = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* magnitude */
        MinMaxCurve _magnitude = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* separateAxis */
        bool _separateAxis = reader.ReadBool();
        bool _inWorldSpace = reader.ReadBool();
        bool _multiplyDragByParticleSize = reader.ReadBool();
        bool _multiplyDragByParticleVelocity = reader.ReadBool();
        reader.AlignTo(4); /* dampen */
        float _dampen = reader.ReadF32();
        MinMaxCurve _drag = MinMaxCurve.Read(reader);
        
        return new(_enabled,
            _x,
            _y,
            _z,
            _magnitude,
            _separateAxis,
            _inWorldSpace,
            _multiplyDragByParticleSize,
            _multiplyDragByParticleVelocity,
            _dampen,
            _drag);
    }
}

/* $NoiseModule (19 fields) */
public record class NoiseModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve strength /* NeedsAlign */,
    MinMaxCurve strengthY /* NeedsAlign */,
    MinMaxCurve strengthZ /* NeedsAlign */,
    bool separateAxes /* NeedsAlign */,
    float frequency /* NeedsAlign */,
    bool damping /* None */,
    int octaves /* NeedsAlign */,
    float octaveMultiplier /* None */,
    float octaveScale /* None */,
    int quality /* None */,
    MinMaxCurve scrollSpeed /* None */,
    MinMaxCurve remap /* NeedsAlign */,
    MinMaxCurve remapY /* NeedsAlign */,
    MinMaxCurve remapZ /* NeedsAlign */,
    bool remapEnabled /* NeedsAlign */,
    MinMaxCurve positionAmount /* NeedsAlign */,
    MinMaxCurve rotationAmount /* NeedsAlign */,
    MinMaxCurve sizeAmount /* NeedsAlign */)
{
    public static NoiseModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* strength */
        MinMaxCurve _strength = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* strengthY */
        MinMaxCurve _strengthY = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* strengthZ */
        MinMaxCurve _strengthZ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* separateAxes */
        bool _separateAxes = reader.ReadBool();
        reader.AlignTo(4); /* frequency */
        float _frequency = reader.ReadF32();
        bool _damping = reader.ReadBool();
        reader.AlignTo(4); /* octaves */
        int _octaves = reader.ReadS32();
        float _octaveMultiplier = reader.ReadF32();
        float _octaveScale = reader.ReadF32();
        int _quality = reader.ReadS32();
        MinMaxCurve _scrollSpeed = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remap */
        MinMaxCurve _remap = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remapY */
        MinMaxCurve _remapY = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remapZ */
        MinMaxCurve _remapZ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remapEnabled */
        bool _remapEnabled = reader.ReadBool();
        reader.AlignTo(4); /* positionAmount */
        MinMaxCurve _positionAmount = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* rotationAmount */
        MinMaxCurve _rotationAmount = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* sizeAmount */
        MinMaxCurve _sizeAmount = MinMaxCurve.Read(reader);
        
        return new(_enabled,
            _strength,
            _strengthY,
            _strengthZ,
            _separateAxes,
            _frequency,
            _damping,
            _octaves,
            _octaveMultiplier,
            _octaveScale,
            _quality,
            _scrollSpeed,
            _remap,
            _remapY,
            _remapZ,
            _remapEnabled,
            _positionAmount,
            _rotationAmount,
            _sizeAmount);
    }
}

/* $SizeBySpeedModule (6 fields) */
public record class SizeBySpeedModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve curve /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve z /* NeedsAlign */,
    Vector2f range /* NeedsAlign */,
    bool separateAxes /* None */)
{
    public static SizeBySpeedModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* curve */
        MinMaxCurve _curve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve _z = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* range */
        Vector2f _range = Vector2f.Read(reader);
        bool _separateAxes = reader.ReadBool();
        
        return new(_enabled,
            _curve,
            _y,
            _z,
            _range,
            _separateAxes);
    }
}

/* $RotationBySpeedModule (6 fields) */
public record class RotationBySpeedModule(
    bool enabled /* NeedsAlign */,
    MinMaxCurve x /* NeedsAlign */,
    MinMaxCurve y /* NeedsAlign */,
    MinMaxCurve curve /* NeedsAlign */,
    bool separateAxes /* NeedsAlign */,
    Vector2f range /* NeedsAlign */)
{
    public static RotationBySpeedModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* x */
        MinMaxCurve _x = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve _y = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        MinMaxCurve _curve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* separateAxes */
        bool _separateAxes = reader.ReadBool();
        reader.AlignTo(4); /* range */
        Vector2f _range = Vector2f.Read(reader);
        
        return new(_enabled,
            _x,
            _y,
            _curve,
            _separateAxes,
            _range);
    }
}

/* $ColorBySpeedModule (3 fields) */
public record class ColorBySpeedModule(
    bool enabled /* NeedsAlign */,
    MinMaxGradient gradient /* NeedsAlign */,
    Vector2f range /* NeedsAlign */)
{
    public static ColorBySpeedModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* gradient */
        MinMaxGradient _gradient = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* range */
        Vector2f _range = Vector2f.Read(reader);
        
        return new(_enabled,
            _gradient,
            _range);
    }
}

/* $CollisionModule (21 fields) */
public record class CollisionModule(
    bool enabled /* NeedsAlign */,
    int type /* NeedsAlign */,
    int collisionMode /* None */,
    float colliderForce /* None */,
    bool multiplyColliderForceByParticleSize /* None */,
    bool multiplyColliderForceByParticleSpeed /* None */,
    bool multiplyColliderForceByCollisionAngle /* None */,
    PPtr<Transform>[] m_Planes /* NeedsAlign */,
    MinMaxCurve m_Dampen /* NeedsAlign */,
    MinMaxCurve m_Bounce /* NeedsAlign */,
    MinMaxCurve m_EnergyLossOnCollision /* NeedsAlign */,
    float minKillSpeed /* NeedsAlign */,
    float maxKillSpeed /* None */,
    float radiusScale /* None */,
    BitField collidesWith /* None */,
    int maxCollisionShapes /* None */,
    int quality /* None */,
    float voxelSize /* None */,
    bool collisionMessages /* None */,
    bool collidesWithDynamic /* None */,
    bool interiorCollisions /* None */)
{
    public static CollisionModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* type */
        int _type = reader.ReadS32();
        int _collisionMode = reader.ReadS32();
        float _colliderForce = reader.ReadF32();
        bool _multiplyColliderForceByParticleSize = reader.ReadBool();
        bool _multiplyColliderForceByParticleSpeed = reader.ReadBool();
        bool _multiplyColliderForceByCollisionAngle = reader.ReadBool();
        reader.AlignTo(4); /* m_Planes */
        PPtr<Transform>[] _m_Planes = BuiltInArray<PPtr<Transform>>.Read(reader);
        reader.AlignTo(4); /* m_Dampen */
        MinMaxCurve _m_Dampen = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_Bounce */
        MinMaxCurve _m_Bounce = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_EnergyLossOnCollision */
        MinMaxCurve _m_EnergyLossOnCollision = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* minKillSpeed */
        float _minKillSpeed = reader.ReadF32();
        float _maxKillSpeed = reader.ReadF32();
        float _radiusScale = reader.ReadF32();
        BitField _collidesWith = BitField.Read(reader);
        int _maxCollisionShapes = reader.ReadS32();
        int _quality = reader.ReadS32();
        float _voxelSize = reader.ReadF32();
        bool _collisionMessages = reader.ReadBool();
        bool _collidesWithDynamic = reader.ReadBool();
        bool _interiorCollisions = reader.ReadBool();
        
        return new(_enabled,
            _type,
            _collisionMode,
            _colliderForce,
            _multiplyColliderForceByParticleSize,
            _multiplyColliderForceByParticleSpeed,
            _multiplyColliderForceByCollisionAngle,
            _m_Planes,
            _m_Dampen,
            _m_Bounce,
            _m_EnergyLossOnCollision,
            _minKillSpeed,
            _maxKillSpeed,
            _radiusScale,
            _collidesWith,
            _maxCollisionShapes,
            _quality,
            _voxelSize,
            _collisionMessages,
            _collidesWithDynamic,
            _interiorCollisions);
    }
}

/* $TriggerModule (8 fields) */
public record class TriggerModule(
    bool enabled /* NeedsAlign */,
    int inside /* NeedsAlign */,
    int outside /* None */,
    int enter /* None */,
    int exit /* None */,
    int colliderQueryMode /* None */,
    float radiusScale /* None */,
    PPtr<Component>[] primitives /* None */)
{
    public static TriggerModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* inside */
        int _inside = reader.ReadS32();
        int _outside = reader.ReadS32();
        int _enter = reader.ReadS32();
        int _exit = reader.ReadS32();
        int _colliderQueryMode = reader.ReadS32();
        float _radiusScale = reader.ReadF32();
        PPtr<Component>[] _primitives = BuiltInArray<PPtr<Component>>.Read(reader);
        
        return new(_enabled,
            _inside,
            _outside,
            _enter,
            _exit,
            _colliderQueryMode,
            _radiusScale,
            _primitives);
    }
}

/* $SubEmitterData (4 fields) */
public record class SubEmitterData(
    PPtr<ParticleSystem> emitter /* None */,
    int type /* None */,
    int properties /* None */,
    float emitProbability /* None */)
{
    public static SubEmitterData Read(EndianBinaryReader reader)
    {
        PPtr<ParticleSystem> _emitter = PPtr<ParticleSystem>.Read(reader);
        int _type = reader.ReadS32();
        int _properties = reader.ReadS32();
        float _emitProbability = reader.ReadF32();
        
        return new(_emitter,
            _type,
            _properties,
            _emitProbability);
    }
}

/* $SubModule (2 fields) */
public record class SubModule(
    bool enabled /* NeedsAlign */,
    SubEmitterData[] subEmitters /* NeedsAlign */)
{
    public static SubModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* subEmitters */
        SubEmitterData[] _subEmitters = BuiltInArray<SubEmitterData>.Read(reader);
        
        return new(_enabled,
            _subEmitters);
    }
}

/* $LightsModule (10 fields) */
public record class LightsModule(
    bool enabled /* NeedsAlign */,
    float ratio /* NeedsAlign */,
    PPtr<Light> light /* None */,
    bool randomDistribution /* None */,
    bool color /* None */,
    bool range /* None */,
    bool intensity /* None */,
    MinMaxCurve rangeCurve /* None */,
    MinMaxCurve intensityCurve /* NeedsAlign */,
    int maxLights /* NeedsAlign */)
{
    public static LightsModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* ratio */
        float _ratio = reader.ReadF32();
        PPtr<Light> _light = PPtr<Light>.Read(reader);
        bool _randomDistribution = reader.ReadBool();
        bool _color = reader.ReadBool();
        bool _range = reader.ReadBool();
        bool _intensity = reader.ReadBool();
        MinMaxCurve _rangeCurve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* intensityCurve */
        MinMaxCurve _intensityCurve = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* maxLights */
        int _maxLights = reader.ReadS32();
        
        return new(_enabled,
            _ratio,
            _light,
            _randomDistribution,
            _color,
            _range,
            _intensity,
            _rangeCurve,
            _intensityCurve,
            _maxLights);
    }
}

/* $TrailModule (20 fields) */
public record class TrailModule(
    bool enabled /* NeedsAlign */,
    int mode /* NeedsAlign */,
    float ratio /* None */,
    MinMaxCurve lifetime /* None */,
    float minVertexDistance /* NeedsAlign */,
    int textureMode /* None */,
    Vector2f textureScale /* None */,
    int ribbonCount /* None */,
    float shadowBias /* None */,
    bool worldSpace /* None */,
    bool dieWithParticles /* None */,
    bool sizeAffectsWidth /* None */,
    bool sizeAffectsLifetime /* None */,
    bool inheritParticleColor /* None */,
    bool generateLightingData /* None */,
    bool splitSubEmitterRibbons /* None */,
    bool attachRibbonsToTransform /* None */,
    MinMaxGradient colorOverLifetime /* NeedsAlign */,
    MinMaxCurve widthOverTrail /* NeedsAlign */,
    MinMaxGradient colorOverTrail /* NeedsAlign */)
{
    public static TrailModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* mode */
        int _mode = reader.ReadS32();
        float _ratio = reader.ReadF32();
        MinMaxCurve _lifetime = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* minVertexDistance */
        float _minVertexDistance = reader.ReadF32();
        int _textureMode = reader.ReadS32();
        Vector2f _textureScale = Vector2f.Read(reader);
        int _ribbonCount = reader.ReadS32();
        float _shadowBias = reader.ReadF32();
        bool _worldSpace = reader.ReadBool();
        bool _dieWithParticles = reader.ReadBool();
        bool _sizeAffectsWidth = reader.ReadBool();
        bool _sizeAffectsLifetime = reader.ReadBool();
        bool _inheritParticleColor = reader.ReadBool();
        bool _generateLightingData = reader.ReadBool();
        bool _splitSubEmitterRibbons = reader.ReadBool();
        bool _attachRibbonsToTransform = reader.ReadBool();
        reader.AlignTo(4); /* colorOverLifetime */
        MinMaxGradient _colorOverLifetime = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* widthOverTrail */
        MinMaxCurve _widthOverTrail = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* colorOverTrail */
        MinMaxGradient _colorOverTrail = MinMaxGradient.Read(reader);
        
        return new(_enabled,
            _mode,
            _ratio,
            _lifetime,
            _minVertexDistance,
            _textureMode,
            _textureScale,
            _ribbonCount,
            _shadowBias,
            _worldSpace,
            _dieWithParticles,
            _sizeAffectsWidth,
            _sizeAffectsLifetime,
            _inheritParticleColor,
            _generateLightingData,
            _splitSubEmitterRibbons,
            _attachRibbonsToTransform,
            _colorOverLifetime,
            _widthOverTrail,
            _colorOverTrail);
    }
}

/* $CustomDataModule (15 fields) */
public record class CustomDataModule(
    bool enabled /* NeedsAlign */,
    int mode0 /* NeedsAlign */,
    int vectorComponentCount0 /* None */,
    MinMaxGradient color0 /* None */,
    MinMaxCurve vector0_0 /* NeedsAlign */,
    MinMaxCurve vector0_1 /* NeedsAlign */,
    MinMaxCurve vector0_2 /* NeedsAlign */,
    MinMaxCurve vector0_3 /* NeedsAlign */,
    int mode1 /* NeedsAlign */,
    int vectorComponentCount1 /* None */,
    MinMaxGradient color1 /* None */,
    MinMaxCurve vector1_0 /* NeedsAlign */,
    MinMaxCurve vector1_1 /* NeedsAlign */,
    MinMaxCurve vector1_2 /* NeedsAlign */,
    MinMaxCurve vector1_3 /* NeedsAlign */)
{
    public static CustomDataModule Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* enabled */
        bool _enabled = reader.ReadBool();
        reader.AlignTo(4); /* mode0 */
        int _mode0 = reader.ReadS32();
        int _vectorComponentCount0 = reader.ReadS32();
        MinMaxGradient _color0 = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* vector0_0 */
        MinMaxCurve _vector0_0 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_1 */
        MinMaxCurve _vector0_1 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_2 */
        MinMaxCurve _vector0_2 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_3 */
        MinMaxCurve _vector0_3 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* mode1 */
        int _mode1 = reader.ReadS32();
        int _vectorComponentCount1 = reader.ReadS32();
        MinMaxGradient _color1 = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* vector1_0 */
        MinMaxCurve _vector1_0 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_1 */
        MinMaxCurve _vector1_1 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_2 */
        MinMaxCurve _vector1_2 = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_3 */
        MinMaxCurve _vector1_3 = MinMaxCurve.Read(reader);
        
        return new(_enabled,
            _mode0,
            _vectorComponentCount0,
            _color0,
            _vector0_0,
            _vector0_1,
            _vector0_2,
            _vector0_3,
            _mode1,
            _vectorComponentCount1,
            _color1,
            _vector1_0,
            _vector1_1,
            _vector1_2,
            _vector1_3);
    }
}

/* $DamageColorSet (3 fields) */
public record class DamageColorSet(
    ColorRGBA NormalColor /* None */,
    ColorRGBA DamageColor /* None */,
    ColorRGBA NearDeathColor /* None */)
{
    public static DamageColorSet Read(EndianBinaryReader reader)
    {
        ColorRGBA _NormalColor = ColorRGBA.Read(reader);
        ColorRGBA _DamageColor = ColorRGBA.Read(reader);
        ColorRGBA _NearDeathColor = ColorRGBA.Read(reader);
        
        return new(_NormalColor,
            _DamageColor,
            _NearDeathColor);
    }
}

/* $ColonyProjectsNavigationBlock (3 fields) */
public record class ColonyProjectsNavigationBlock(
    PPtr<GameObject> Container /* None */,
    PPtr<WidgetListMVVM> WidgetList /* None */,
    int Rank /* None */)
{
    public static ColonyProjectsNavigationBlock Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _Container = PPtr<GameObject>.Read(reader);
        PPtr<WidgetListMVVM> _WidgetList = PPtr<WidgetListMVVM>.Read(reader);
        int _Rank = reader.ReadS32();
        
        return new(_Container,
            _WidgetList,
            _Rank);
    }
}

/* $LocalizedString (2 fields) */
public record class LocalizedString(
    AsciiString m_Key /* None */,
    PPtr<SharedStringAsset> Shared /* NeedsAlign */)
{
    public static LocalizedString Read(EndianBinaryReader reader)
    {
        AsciiString _m_Key = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Shared */
        PPtr<SharedStringAsset> _Shared = PPtr<SharedStringAsset>.Read(reader);
        
        return new(_m_Key,
            _Shared);
    }
}

/* $CategoryPlatformHints (3 fields) */
public record class CategoryPlatformHints(
    LocalizedString[] GlobalHints /* NeedsAlign */,
    LocalizedString PCHints /* NeedsAlign */,
    LocalizedString ConsoleHints /* NeedsAlign */)
{
    public static CategoryPlatformHints Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* GlobalHints */
        LocalizedString[] _GlobalHints = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* PCHints */
        LocalizedString _PCHints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleHints */
        LocalizedString _ConsoleHints = LocalizedString.Read(reader);
        
        return new(_GlobalHints,
            _PCHints,
            _ConsoleHints);
    }
}

/* $ArgumentCache (6 fields) */
public record class ArgumentCache(
    PPtr<Object> m_ObjectArgument /* None */,
    AsciiString m_ObjectArgumentAssemblyTypeName /* None */,
    int m_IntArgument /* NeedsAlign */,
    float m_FloatArgument /* None */,
    AsciiString m_StringArgument /* None */,
    byte m_BoolArgument /* NeedsAlign */)
{
    public static ArgumentCache Read(EndianBinaryReader reader)
    {
        PPtr<Object> _m_ObjectArgument = PPtr<Object>.Read(reader);
        AsciiString _m_ObjectArgumentAssemblyTypeName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_IntArgument */
        int _m_IntArgument = reader.ReadS32();
        float _m_FloatArgument = reader.ReadF32();
        AsciiString _m_StringArgument = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_BoolArgument */
        byte _m_BoolArgument = reader.ReadU8();
        
        return new(_m_ObjectArgument,
            _m_ObjectArgumentAssemblyTypeName,
            _m_IntArgument,
            _m_FloatArgument,
            _m_StringArgument,
            _m_BoolArgument);
    }
}

/* $PersistentCall (6 fields) */
public record class PersistentCall(
    PPtr<Object> m_Target /* None */,
    AsciiString m_TargetAssemblyTypeName /* None */,
    AsciiString m_MethodName /* NeedsAlign */,
    int m_Mode /* NeedsAlign */,
    ArgumentCache m_Arguments /* None */,
    int m_CallState /* NeedsAlign */)
{
    public static PersistentCall Read(EndianBinaryReader reader)
    {
        PPtr<Object> _m_Target = PPtr<Object>.Read(reader);
        AsciiString _m_TargetAssemblyTypeName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_MethodName */
        AsciiString _m_MethodName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Mode */
        int _m_Mode = reader.ReadS32();
        ArgumentCache _m_Arguments = ArgumentCache.Read(reader);
        reader.AlignTo(4); /* m_CallState */
        int _m_CallState = reader.ReadS32();
        
        return new(_m_Target,
            _m_TargetAssemblyTypeName,
            _m_MethodName,
            _m_Mode,
            _m_Arguments,
            _m_CallState);
    }
}

/* $PersistentCallGroup (1 fields) */
public record class PersistentCallGroup(
    PersistentCall[] m_Calls /* NeedsAlign */)
{
    public static PersistentCallGroup Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Calls */
        PersistentCall[] _m_Calls = BuiltInArray<PersistentCall>.Read(reader);
        
        return new(_m_Calls);
    }
}

/* $CullStateChangedEvent (1 fields) */
public record class CullStateChangedEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static CullStateChangedEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $SorterTypeEntry (2 fields) */
public record class SorterTypeEntry(
    int SorterType /* None */,
    LocalizedString Text /* None */)
{
    public static SorterTypeEntry Read(EndianBinaryReader reader)
    {
        int _SorterType = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_SorterType,
            _Text);
    }
}

/* $FilterTypeEntry (2 fields) */
public record class FilterTypeEntry(
    int FilterType /* None */,
    LocalizedString Text /* None */)
{
    public static FilterTypeEntry Read(EndianBinaryReader reader)
    {
        int _FilterType = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_FilterType,
            _Text);
    }
}

/* $BlueprintAbilityAreaEffectReference (1 fields) */
public record class BlueprintAbilityAreaEffectReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintAbilityAreaEffectReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintUnitReference (1 fields) */
public record class BlueprintUnitReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintUnitReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $RimLightingAnimationSettings (8 fields) */
public record class RimLightingAnimationSettings(
    float Delay /* NeedsAlign */,
    float Lifetime /* None */,
    Gradient ColorOverLifetime /* None */,
    AnimationCurve IntensityOverLifetime /* NeedsAlign */,
    float IntensityScale /* NeedsAlign */,
    AnimationCurve PowerOverLifetime /* None */,
    byte LoopAnimation /* NeedsAlign */,
    byte UnscaledTime /* NeedsAlign */)
{
    public static RimLightingAnimationSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Delay */
        float _Delay = reader.ReadF32();
        float _Lifetime = reader.ReadF32();
        Gradient _ColorOverLifetime = Gradient.Read(reader);
        reader.AlignTo(4); /* IntensityOverLifetime */
        AnimationCurve _IntensityOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* IntensityScale */
        float _IntensityScale = reader.ReadF32();
        AnimationCurve _PowerOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LoopAnimation */
        byte _LoopAnimation = reader.ReadU8();
        reader.AlignTo(4); /* UnscaledTime */
        byte _UnscaledTime = reader.ReadU8();
        
        return new(_Delay,
            _Lifetime,
            _ColorOverLifetime,
            _IntensityOverLifetime,
            _IntensityScale,
            _PowerOverLifetime,
            _LoopAnimation,
            _UnscaledTime);
    }
}

/* $NavigationParameters (9 fields) */
public readonly record struct NavigationParameters(
    byte ConsiderHistory /* None */,
    float m_AngleWeight /* NeedsAlign */,
    float m_DistanceWeight /* None */,
    float m_NeighboursWeight /* None */,
    int ConsideredEntitiesByDistanceCount /* None */,
    float m_MaxAngleInRange /* None */,
    int m_DistanceFunction /* None */,
    int m_AngleFunction /* None */,
    float m_AxesAngleOffset /* None */)
{
    public static NavigationParameters Read(EndianBinaryReader reader)
    {
        byte _ConsiderHistory = reader.ReadU8();
        reader.AlignTo(4); /* m_AngleWeight */
        float _m_AngleWeight = reader.ReadF32();
        float _m_DistanceWeight = reader.ReadF32();
        float _m_NeighboursWeight = reader.ReadF32();
        int _ConsideredEntitiesByDistanceCount = reader.ReadS32();
        float _m_MaxAngleInRange = reader.ReadF32();
        int _m_DistanceFunction = reader.ReadS32();
        int _m_AngleFunction = reader.ReadS32();
        float _m_AxesAngleOffset = reader.ReadF32();
        
        return new(_ConsiderHistory,
            _m_AngleWeight,
            _m_DistanceWeight,
            _m_NeighboursWeight,
            _ConsideredEntitiesByDistanceCount,
            _m_MaxAngleInRange,
            _m_DistanceFunction,
            _m_AngleFunction,
            _m_AxesAngleOffset);
    }
}

/* $NavigationBlockHighlight (2 fields) */
public record class NavigationBlockHighlight(
    int NavigationBlock /* None */,
    PPtr<Image> HighlightImage /* None */)
{
    public static NavigationBlockHighlight Read(EndianBinaryReader reader)
    {
        int _NavigationBlock = reader.ReadS32();
        PPtr<Image> _HighlightImage = PPtr<Image>.Read(reader);
        
        return new(_NavigationBlock,
            _HighlightImage);
    }
}

/* $UIViewLink`2 (2 fields) */
public record class UIViewLink_2(
    AsciiString AssetId /* None */,
    PPtr<Transform> Target /* NeedsAlign */)
{
    public static UIViewLink_2 Read(EndianBinaryReader reader)
    {
        AsciiString _AssetId = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Target */
        PPtr<Transform> _Target = PPtr<Transform>.Read(reader);
        
        return new(_AssetId,
            _Target);
    }
}

/* $GlossaryEntry (3 fields) */
public record class GlossaryEntry(
    AsciiString Key /* None */,
    LocalizedString Name /* NeedsAlign */,
    LocalizedString Description /* NeedsAlign */)
{
    public static GlossaryEntry Read(EndianBinaryReader reader)
    {
        AsciiString _Key = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        LocalizedString _Name = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString _Description = LocalizedString.Read(reader);
        
        return new(_Key,
            _Name,
            _Description);
    }
}

/* $VirtualListLayoutPadding (4 fields) */
public readonly record struct VirtualListLayoutPadding(
    float Top /* None */,
    float Bottom /* None */,
    float Left /* None */,
    float Right /* None */)
{
    public static VirtualListLayoutPadding Read(EndianBinaryReader reader)
    {
        float _Top = reader.ReadF32();
        float _Bottom = reader.ReadF32();
        float _Left = reader.ReadF32();
        float _Right = reader.ReadF32();
        
        return new(_Top,
            _Bottom,
            _Left,
            _Right);
    }
}

/* $VirtualListLayoutElementSettings (6 fields) */
public record class VirtualListLayoutElementSettings(
    int m_OverrideType /* None */,
    VirtualListLayoutPadding m_Padding /* None */,
    byte m_OverrideWidth /* None */,
    float m_Width /* NeedsAlign */,
    byte m_OverrideHeight /* None */,
    float m_Height /* NeedsAlign */)
{
    public static VirtualListLayoutElementSettings Read(EndianBinaryReader reader)
    {
        int _m_OverrideType = reader.ReadS32();
        VirtualListLayoutPadding _m_Padding = VirtualListLayoutPadding.Read(reader);
        byte _m_OverrideWidth = reader.ReadU8();
        reader.AlignTo(4); /* m_Width */
        float _m_Width = reader.ReadF32();
        byte _m_OverrideHeight = reader.ReadU8();
        reader.AlignTo(4); /* m_Height */
        float _m_Height = reader.ReadF32();
        
        return new(_m_OverrideType,
            _m_Padding,
            _m_OverrideWidth,
            _m_Width,
            _m_OverrideHeight,
            _m_Height);
    }
}

/* $TMP_Style (8 fields) */
public record class TMP_Style(
    AsciiString m_Name /* None */,
    int m_HashCode /* NeedsAlign */,
    AsciiString m_OpeningDefinition /* None */,
    AsciiString m_ClosingDefinition /* NeedsAlign */,
    int[] m_OpeningTagArray /* NeedsAlign */,
    int[] m_ClosingTagArray /* NeedsAlign */,
    uint[] m_OpeningTagUnicodeArray /* NeedsAlign */,
    uint[] m_ClosingTagUnicodeArray /* NeedsAlign */)
{
    public static TMP_Style Read(EndianBinaryReader reader)
    {
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HashCode */
        int _m_HashCode = reader.ReadS32();
        AsciiString _m_OpeningDefinition = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ClosingDefinition */
        AsciiString _m_ClosingDefinition = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_OpeningTagArray */
        int[] _m_OpeningTagArray = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_ClosingTagArray */
        int[] _m_ClosingTagArray = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_OpeningTagUnicodeArray */
        uint[] _m_OpeningTagUnicodeArray = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* m_ClosingTagUnicodeArray */
        uint[] _m_ClosingTagUnicodeArray = BuiltInArray<uint>.Read(reader);
        
        return new(_m_Name,
            _m_HashCode,
            _m_OpeningDefinition,
            _m_ClosingDefinition,
            _m_OpeningTagArray,
            _m_ClosingTagArray,
            _m_OpeningTagUnicodeArray,
            _m_ClosingTagUnicodeArray);
    }
}

/* $ObjectSelectionRenderSettingsView (6 fields) */
public record class ObjectSelectionRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSelectionRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $TimedProbabilityCurve (3 fields) */
public readonly record struct TimedProbabilityCurve(
    float m_Integral /* None */,
    float m_MinTime /* None */,
    float m_MaxTime /* None */)
{
    public static TimedProbabilityCurve Read(EndianBinaryReader reader)
    {
        float _m_Integral = reader.ReadF32();
        float _m_MinTime = reader.ReadF32();
        float _m_MaxTime = reader.ReadF32();
        
        return new(_m_Integral,
            _m_MinTime,
            _m_MaxTime);
    }
}

/* $BlueprintCharacterClassReference (1 fields) */
public record class BlueprintCharacterClassReference(
    AsciiString guid /* None */)
{
    public static BlueprintCharacterClassReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $ClassOverrideData (3 fields) */
public record class ClassOverrideData(
    BlueprintCharacterClassReference m_Class /* None */,
    float Chance /* NeedsAlign */,
    PPtr<AnimationClipWrapper>[] ClipWrappers /* None */)
{
    public static ClassOverrideData Read(EndianBinaryReader reader)
    {
        BlueprintCharacterClassReference _m_Class = BlueprintCharacterClassReference.Read(reader);
        reader.AlignTo(4); /* Chance */
        float _Chance = reader.ReadF32();
        PPtr<AnimationClipWrapper>[] _ClipWrappers = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(_m_Class,
            _Chance,
            _ClipWrappers);
    }
}

/* $BlueprintRaceReference (1 fields) */
public record class BlueprintRaceReference(
    AsciiString guid /* None */)
{
    public static BlueprintRaceReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $RaceOverrideData (3 fields) */
public record class RaceOverrideData(
    BlueprintRaceReference m_Race /* None */,
    float Chance /* NeedsAlign */,
    PPtr<AnimationClipWrapper>[] ClipWrappers /* None */)
{
    public static RaceOverrideData Read(EndianBinaryReader reader)
    {
        BlueprintRaceReference _m_Race = BlueprintRaceReference.Read(reader);
        reader.AlignTo(4); /* Chance */
        float _Chance = reader.ReadF32();
        PPtr<AnimationClipWrapper>[] _ClipWrappers = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(_m_Race,
            _Chance,
            _ClipWrappers);
    }
}

/* $PrefabCategoryPrefabScrollView (7 fields) */
public record class PrefabCategoryPrefabScrollView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<PrefabCategoryPrefabScrollViewData> _viewData /* NeedsAlign */)
{
    public static PrefabCategoryPrefabScrollView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<PrefabCategoryPrefabScrollViewData> __viewData = PPtr<PrefabCategoryPrefabScrollViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $ActivePrefabCategoryView (8 fields) */
public record class ActivePrefabCategoryView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<ActivePrefabCategoryViewData> _viewData /* NeedsAlign */,
    PrefabCategoryPrefabScrollView _prefabScrollView /* None */)
{
    public static ActivePrefabCategoryView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<ActivePrefabCategoryViewData> __viewData = PPtr<ActivePrefabCategoryViewData>.Read(reader);
        PrefabCategoryPrefabScrollView __prefabScrollView = PrefabCategoryPrefabScrollView.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData,
            __prefabScrollView);
    }
}

/* $ActivePrefabView (6 fields) */
public record class ActivePrefabView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ActivePrefabView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BlueprintEncyclopediaPageReference (1 fields) */
public record class BlueprintEncyclopediaPageReference(
    AsciiString guid /* None */)
{
    public static BlueprintEncyclopediaPageReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $TrapObjectViewSettings (7 fields) */
public record class TrapObjectViewSettings(
    PPtr<FxDecal> FxDecal /* None */,
    PPtr<Transform> ActorPosition /* None */,
    PPtr<Transform> TargetPoint /* None */,
    PPtr<ScriptZone> ScriptZoneTrigger /* None */,
    AsciiString TriggerSound /* None */,
    AsciiString DisabledSound /* NeedsAlign */,
    AsciiString DisableFailSound /* NeedsAlign */)
{
    public static TrapObjectViewSettings Read(EndianBinaryReader reader)
    {
        PPtr<FxDecal> _FxDecal = PPtr<FxDecal>.Read(reader);
        PPtr<Transform> _ActorPosition = PPtr<Transform>.Read(reader);
        PPtr<Transform> _TargetPoint = PPtr<Transform>.Read(reader);
        PPtr<ScriptZone> _ScriptZoneTrigger = PPtr<ScriptZone>.Read(reader);
        AsciiString _TriggerSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* DisabledSound */
        AsciiString _DisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* DisableFailSound */
        AsciiString _DisableFailSound = BuiltInString.Read(reader);
        
        return new(_FxDecal,
            _ActorPosition,
            _TargetPoint,
            _ScriptZoneTrigger,
            _TriggerSound,
            _DisabledSound,
            _DisableFailSound);
    }
}

/* $ActionsReference (1 fields) */
public record class ActionsReference(
    AsciiString guid /* NeedsAlign */)
{
    public static ActionsReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $Reference (1 fields) */
public record class Reference(
    AsciiString guid /* None */)
{
    public static Reference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintAbilityReference (1 fields) */
public record class BlueprintAbilityReference(
    AsciiString guid /* None */)
{
    public static BlueprintAbilityReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintItemWeaponReference (1 fields) */
public record class BlueprintItemWeaponReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintItemWeaponReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $SimpleTrapObjectInfo (13 fields) */
public record class SimpleTrapObjectInfo(
    int m_Type /* NeedsAlign */,
    byte OverridePerceptionRadius /* None */,
    float PerceptionRadius /* NeedsAlign */,
    BlueprintAbilityReference BlueprintSpell /* None */,
    BlueprintItemWeaponReference BlueprintWeapon /* NeedsAlign */,
    int WeaponAbilityType /* NeedsAlign */,
    float SecondsBetweenAbilityActions /* None */,
    int SpellAnchor /* None */,
    int AdditionalCR /* None */,
    LocalizedString TrapTriggeredText /* None */,
    int DisableDifficulty /* NeedsAlign */,
    byte DoNotHideWhenInactive /* None */,
    int DisarmSkill /* NeedsAlign */)
{
    public static SimpleTrapObjectInfo Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Type */
        int _m_Type = reader.ReadS32();
        byte _OverridePerceptionRadius = reader.ReadU8();
        reader.AlignTo(4); /* PerceptionRadius */
        float _PerceptionRadius = reader.ReadF32();
        BlueprintAbilityReference _BlueprintSpell = BlueprintAbilityReference.Read(reader);
        reader.AlignTo(4); /* BlueprintWeapon */
        BlueprintItemWeaponReference _BlueprintWeapon = BlueprintItemWeaponReference.Read(reader);
        reader.AlignTo(4); /* WeaponAbilityType */
        int _WeaponAbilityType = reader.ReadS32();
        float _SecondsBetweenAbilityActions = reader.ReadF32();
        int _SpellAnchor = reader.ReadS32();
        int _AdditionalCR = reader.ReadS32();
        LocalizedString _TrapTriggeredText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisableDifficulty */
        int _DisableDifficulty = reader.ReadS32();
        byte _DoNotHideWhenInactive = reader.ReadU8();
        reader.AlignTo(4); /* DisarmSkill */
        int _DisarmSkill = reader.ReadS32();
        
        return new(_m_Type,
            _OverridePerceptionRadius,
            _PerceptionRadius,
            _BlueprintSpell,
            _BlueprintWeapon,
            _WeaponAbilityType,
            _SecondsBetweenAbilityActions,
            _SpellAnchor,
            _AdditionalCR,
            _TrapTriggeredText,
            _DisableDifficulty,
            _DoNotHideWhenInactive,
            _DisarmSkill);
    }
}

/* $UnitViewLink (1 fields) */
public record class UnitViewLink(
    AsciiString AssetId /* NeedsAlign */)
{
    public static UnitViewLink Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AssetId */
        AsciiString _AssetId = BuiltInString.Read(reader);
        
        return new(_AssetId);
    }
}

/* $UnitBinding (3 fields) */
public record class UnitBinding(
    AsciiString Name /* None */,
    UnitViewLink PreviewPrefab /* NeedsAlign */,
    PPtr<UnitSpawnerBase> DefaultSpawner /* NeedsAlign */)
{
    public static UnitBinding Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* PreviewPrefab */
        UnitViewLink _PreviewPrefab = UnitViewLink.Read(reader);
        reader.AlignTo(4); /* DefaultSpawner */
        PPtr<UnitSpawnerBase> _DefaultSpawner = PPtr<UnitSpawnerBase>.Read(reader);
        
        return new(_Name,
            _PreviewPrefab,
            _DefaultSpawner);
    }
}

/* $TrackBinding (3 fields) */
public record class TrackBinding(
    AsciiString TrackName /* None */,
    AsciiString UnitName /* NeedsAlign */,
    int Type /* NeedsAlign */)
{
    public static TrackBinding Read(EndianBinaryReader reader)
    {
        AsciiString _TrackName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* UnitName */
        AsciiString _UnitName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Type */
        int _Type = reader.ReadS32();
        
        return new(_TrackName,
            _UnitName,
            _Type);
    }
}

/* $ShaderPropertyDescriptor (14 fields) */
public record class ShaderPropertyDescriptor(
    PPtr<Shader> Shader /* None */,
    int Index /* None */,
    AsciiString Name /* None */,
    AsciiString Description /* NeedsAlign */,
    int Type /* NeedsAlign */,
    int Flags /* None */,
    AsciiString[] Attibutes /* None */,
    float FloatValue /* NeedsAlign */,
    Vector2f RangeLimits /* None */,
    int IntValue /* None */,
    Vector4f VectorValue /* None */,
    ColorRGBA ColorValue /* None */,
    AsciiString DefaultTextureNameValue /* None */,
    PPtr<Texture> TextureValue /* NeedsAlign */)
{
    public static ShaderPropertyDescriptor Read(EndianBinaryReader reader)
    {
        PPtr<Shader> _Shader = PPtr<Shader>.Read(reader);
        int _Index = reader.ReadS32();
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Description */
        AsciiString _Description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Type */
        int _Type = reader.ReadS32();
        int _Flags = reader.ReadS32();
        AsciiString[] _Attibutes = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* FloatValue */
        float _FloatValue = reader.ReadF32();
        Vector2f _RangeLimits = Vector2f.Read(reader);
        int _IntValue = reader.ReadS32();
        Vector4f _VectorValue = Vector4f.Read(reader);
        ColorRGBA _ColorValue = ColorRGBA.Read(reader);
        AsciiString _DefaultTextureNameValue = BuiltInString.Read(reader);
        reader.AlignTo(4); /* TextureValue */
        PPtr<Texture> _TextureValue = PPtr<Texture>.Read(reader);
        
        return new(_Shader,
            _Index,
            _Name,
            _Description,
            _Type,
            _Flags,
            _Attibutes,
            _FloatValue,
            _RangeLimits,
            _IntValue,
            _VectorValue,
            _ColorValue,
            _DefaultTextureNameValue,
            _TextureValue);
    }
}

/* $CustomPostProcessEffectPass (3 fields) */
public record class CustomPostProcessEffectPass(
    AsciiString Name /* None */,
    PPtr<Shader> Shader /* NeedsAlign */,
    ShaderPropertyDescriptor[] Properties /* None */)
{
    public static CustomPostProcessEffectPass Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Shader */
        PPtr<Shader> _Shader = PPtr<Shader>.Read(reader);
        ShaderPropertyDescriptor[] _Properties = BuiltInArray<ShaderPropertyDescriptor>.Read(reader);
        
        return new(_Name,
            _Shader,
            _Properties);
    }
}

/* $ClampedFloatParameter (2 fields) */
public readonly record struct ClampedFloatParameter(
    byte m_OverrideState /* NeedsAlign */,
    float m_Value /* NeedsAlign */)
{
    public static ClampedFloatParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        float _m_Value = reader.ReadF32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $RendererFeatureFlag (2 fields) */
public record class RendererFeatureFlag(
    AsciiString FeatureIdentifier /* None */,
    byte Enabled /* NeedsAlign */)
{
    public static RendererFeatureFlag Read(EndianBinaryReader reader)
    {
        AsciiString _FeatureIdentifier = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Enabled */
        byte _Enabled = reader.ReadU8();
        
        return new(_FeatureIdentifier,
            _Enabled);
    }
}

/* $BoolReactiveProperty (1 fields) */
public readonly record struct BoolReactiveProperty(
    byte @value /* None */)
{
    public static BoolReactiveProperty Read(EndianBinaryReader reader)
    {
        byte _value = reader.ReadU8();
        
        return new(_value);
    }
}

/* $PlatformVars_WindowsStandalone (5 fields) */
public readonly record struct PlatformVars_WindowsStandalone(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte useNativeKeyboard /* NeedsAlign */,
    int joystickRefreshRate /* NeedsAlign */)
{
    public static PlatformVars_WindowsStandalone Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* useNativeKeyboard */
        byte _useNativeKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* joystickRefreshRate */
        int _joystickRefreshRate = reader.ReadS32();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _useNativeKeyboard,
            _joystickRefreshRate);
    }
}

/* $PlatformVars (3 fields) */
public readonly record struct PlatformVars(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */)
{
    public static PlatformVars Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus);
    }
}

/* $PlatformVars_OSXStandalone (5 fields) */
public readonly record struct PlatformVars_OSXStandalone(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte useAppleGameController /* NeedsAlign */,
    byte assignJoysticksByUserId /* NeedsAlign */)
{
    public static PlatformVars_OSXStandalone Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* useAppleGameController */
        byte _useAppleGameController = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByUserId */
        byte _assignJoysticksByUserId = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _useAppleGameController,
            _assignJoysticksByUserId);
    }
}

/* $PlatformVars_WindowsUWP (5 fields) */
public readonly record struct PlatformVars_WindowsUWP(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte useGamepadAPI /* NeedsAlign */,
    byte useHIDAPI /* NeedsAlign */)
{
    public static PlatformVars_WindowsUWP Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* useGamepadAPI */
        byte _useGamepadAPI = reader.ReadU8();
        reader.AlignTo(4); /* useHIDAPI */
        byte _useHIDAPI = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _useGamepadAPI,
            _useHIDAPI);
    }
}

/* $PlatformVars_PS5 (4 fields) */
public readonly record struct PlatformVars_PS5(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte assignJoysticksByPS5JoyId /* NeedsAlign */)
{
    public static PlatformVars_PS5 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByPS5JoyId */
        byte _assignJoysticksByPS5JoyId = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _assignJoysticksByPS5JoyId);
    }
}

/* $PlatformVars_GameCoreXboxOne (4 fields) */
public readonly record struct PlatformVars_GameCoreXboxOne(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte assignJoysticksByUserId /* NeedsAlign */)
{
    public static PlatformVars_GameCoreXboxOne Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByUserId */
        byte _assignJoysticksByUserId = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _assignJoysticksByUserId);
    }
}

/* $PlatformVars_GameCoreScarlett (4 fields) */
public readonly record struct PlatformVars_GameCoreScarlett(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte assignJoysticksByUserId /* NeedsAlign */)
{
    public static PlatformVars_GameCoreScarlett Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByUserId */
        byte _assignJoysticksByUserId = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _assignJoysticksByUserId);
    }
}

/* $PlatformVars_Stadia (5 fields) */
public readonly record struct PlatformVars_Stadia(
    byte disableKeyboard /* NeedsAlign */,
    byte disableMouse /* NeedsAlign */,
    byte ignoreInputWhenAppNotInFocus /* NeedsAlign */,
    byte useNativeKeyboard /* NeedsAlign */,
    byte useNativeMouse /* NeedsAlign */)
{
    public static PlatformVars_Stadia Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* disableKeyboard */
        byte _disableKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte _disableMouse = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte _ignoreInputWhenAppNotInFocus = reader.ReadU8();
        reader.AlignTo(4); /* useNativeKeyboard */
        byte _useNativeKeyboard = reader.ReadU8();
        reader.AlignTo(4); /* useNativeMouse */
        byte _useNativeMouse = reader.ReadU8();
        
        return new(_disableKeyboard,
            _disableMouse,
            _ignoreInputWhenAppNotInFocus,
            _useNativeKeyboard,
            _useNativeMouse);
    }
}

/* $EditorVars (25 fields) */
public record class EditorVars(
    byte exportConsts_useParentClass /* None */,
    AsciiString exportConsts_parentClassName /* NeedsAlign */,
    byte exportConsts_useNamespace /* NeedsAlign */,
    AsciiString exportConsts_namespace /* NeedsAlign */,
    byte exportConsts_actions /* NeedsAlign */,
    AsciiString exportConsts_actionsClassName /* NeedsAlign */,
    byte exportConsts_actionsIncludeActionCategory /* NeedsAlign */,
    byte exportConsts_actionsCreateClassesForActionCategories /* NeedsAlign */,
    byte exportConsts_mapCategories /* NeedsAlign */,
    AsciiString exportConsts_mapCategoriesClassName /* NeedsAlign */,
    byte exportConsts_layouts /* NeedsAlign */,
    AsciiString exportConsts_layoutsClassName /* NeedsAlign */,
    byte exportConsts_players /* NeedsAlign */,
    AsciiString exportConsts_playersClassName /* NeedsAlign */,
    byte exportConsts_inputBehaviors /* NeedsAlign */,
    AsciiString exportConsts_inputBehaviorsClassName /* NeedsAlign */,
    byte exportConsts_customControllers /* NeedsAlign */,
    AsciiString exportConsts_customControllersClassName /* NeedsAlign */,
    AsciiString exportConsts_customControllersAxesClassName /* NeedsAlign */,
    AsciiString exportConsts_customControllersButtonsClassName /* NeedsAlign */,
    byte exportConsts_layoutManagerRuleSets /* NeedsAlign */,
    AsciiString exportConsts_layoutManagerRuleSetsClassName /* NeedsAlign */,
    byte exportConsts_mapEnablerRuleSets /* NeedsAlign */,
    AsciiString exportConsts_mapEnablerRuleSetsClassName /* NeedsAlign */,
    byte exportConsts_allCapsConstantNames /* NeedsAlign */)
{
    public static EditorVars Read(EndianBinaryReader reader)
    {
        byte _exportConsts_useParentClass = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_parentClassName */
        AsciiString _exportConsts_parentClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_useNamespace */
        byte _exportConsts_useNamespace = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_namespace */
        AsciiString _exportConsts_namespace = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_actions */
        byte _exportConsts_actions = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_actionsClassName */
        AsciiString _exportConsts_actionsClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_actionsIncludeActionCategory */
        byte _exportConsts_actionsIncludeActionCategory = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_actionsCreateClassesForActionCategories */
        byte _exportConsts_actionsCreateClassesForActionCategories = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_mapCategories */
        byte _exportConsts_mapCategories = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_mapCategoriesClassName */
        AsciiString _exportConsts_mapCategoriesClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_layouts */
        byte _exportConsts_layouts = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_layoutsClassName */
        AsciiString _exportConsts_layoutsClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_players */
        byte _exportConsts_players = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_playersClassName */
        AsciiString _exportConsts_playersClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_inputBehaviors */
        byte _exportConsts_inputBehaviors = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_inputBehaviorsClassName */
        AsciiString _exportConsts_inputBehaviorsClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_customControllers */
        byte _exportConsts_customControllers = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_customControllersClassName */
        AsciiString _exportConsts_customControllersClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_customControllersAxesClassName */
        AsciiString _exportConsts_customControllersAxesClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_customControllersButtonsClassName */
        AsciiString _exportConsts_customControllersButtonsClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_layoutManagerRuleSets */
        byte _exportConsts_layoutManagerRuleSets = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_layoutManagerRuleSetsClassName */
        AsciiString _exportConsts_layoutManagerRuleSetsClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_mapEnablerRuleSets */
        byte _exportConsts_mapEnablerRuleSets = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_mapEnablerRuleSetsClassName */
        AsciiString _exportConsts_mapEnablerRuleSetsClassName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_allCapsConstantNames */
        byte _exportConsts_allCapsConstantNames = reader.ReadU8();
        
        return new(_exportConsts_useParentClass,
            _exportConsts_parentClassName,
            _exportConsts_useNamespace,
            _exportConsts_namespace,
            _exportConsts_actions,
            _exportConsts_actionsClassName,
            _exportConsts_actionsIncludeActionCategory,
            _exportConsts_actionsCreateClassesForActionCategories,
            _exportConsts_mapCategories,
            _exportConsts_mapCategoriesClassName,
            _exportConsts_layouts,
            _exportConsts_layoutsClassName,
            _exportConsts_players,
            _exportConsts_playersClassName,
            _exportConsts_inputBehaviors,
            _exportConsts_inputBehaviorsClassName,
            _exportConsts_customControllers,
            _exportConsts_customControllersClassName,
            _exportConsts_customControllersAxesClassName,
            _exportConsts_customControllersButtonsClassName,
            _exportConsts_layoutManagerRuleSets,
            _exportConsts_layoutManagerRuleSetsClassName,
            _exportConsts_mapEnablerRuleSets,
            _exportConsts_mapEnablerRuleSetsClassName,
            _exportConsts_allCapsConstantNames);
    }
}

/* $ConfigVars (54 fields) */
public record class ConfigVars(
    int updateLoop /* NeedsAlign */,
    byte alwaysUseUnityInput /* None */,
    int windowsStandalonePrimaryInputSource /* NeedsAlign */,
    int osx_primaryInputSource /* None */,
    int linux_primaryInputSource /* None */,
    int windowsUWP_primaryInputSource /* None */,
    int xboxOne_primaryInputSource /* None */,
    int gameCoreXboxOne_primaryInputSource /* None */,
    int gameCoreScarlett_primaryInputSource /* None */,
    int ps4_primaryInputSource /* None */,
    int ps5_primaryInputSource /* None */,
    int webGL_primaryInputSource /* None */,
    int stadia_primaryInputSource /* None */,
    byte useXInput /* None */,
    byte useNativeMouse /* NeedsAlign */,
    byte useEnhancedDeviceSupport /* NeedsAlign */,
    byte windowsStandalone_useSteamRawInputControllerWorkaround /* NeedsAlign */,
    byte osxStandalone_useEnhancedDeviceSupport /* NeedsAlign */,
    byte android_supportUnknownGamepads /* NeedsAlign */,
    byte ps4_assignJoysticksByPS4JoyId /* NeedsAlign */,
    byte useSteamControllerSupport /* NeedsAlign */,
    byte logToScreen /* NeedsAlign */,
    byte runInEditMode /* NeedsAlign */,
    byte allowInputInEditorSceneView /* NeedsAlign */,
    PlatformVars_WindowsStandalone platformVars_windowsStandalone /* NeedsAlign */,
    PlatformVars platformVars_linuxStandalone /* NeedsAlign */,
    PlatformVars_OSXStandalone platformVars_osxStandalone /* NeedsAlign */,
    PlatformVars_WindowsUWP platformVars_windowsUWP /* NeedsAlign */,
    PlatformVars platformVars_iOS /* NeedsAlign */,
    PlatformVars platformVars_tvOS /* NeedsAlign */,
    PlatformVars platformVars_android /* NeedsAlign */,
    PlatformVars platformVars_ps4 /* NeedsAlign */,
    PlatformVars_PS5 platformVars_ps5 /* NeedsAlign */,
    PlatformVars platformVars_psVita /* NeedsAlign */,
    PlatformVars platformVars_xboxOne /* NeedsAlign */,
    PlatformVars_GameCoreXboxOne platformVars_gameCoreXboxOne /* NeedsAlign */,
    PlatformVars_GameCoreScarlett platformVars_gameCoreScarlett /* NeedsAlign */,
    PlatformVars platformVars_switch /* NeedsAlign */,
    PlatformVars platformVars_webGL /* NeedsAlign */,
    PlatformVars_Stadia platformVars_stadia /* NeedsAlign */,
    int maxJoysticksPerPlayer /* NeedsAlign */,
    byte autoAssignJoysticks /* None */,
    byte assignJoysticksToPlayingPlayersOnly /* NeedsAlign */,
    byte distributeJoysticksEvenly /* NeedsAlign */,
    byte reassignJoystickToPreviousOwnerOnReconnect /* NeedsAlign */,
    int defaultJoystickAxis2DDeadZoneType /* NeedsAlign */,
    int defaultJoystickAxis2DSensitivityType /* None */,
    int defaultAxisSensitivityType /* None */,
    byte force4WayHats /* None */,
    int throttleCalibrationMode /* NeedsAlign */,
    byte activateActionButtonsOnNegativeValue /* None */,
    byte deferControllerConnectedEventsOnStart /* NeedsAlign */,
    int logLevel /* NeedsAlign */,
    EditorVars editorSettings /* None */)
{
    public static ConfigVars Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* updateLoop */
        int _updateLoop = reader.ReadS32();
        byte _alwaysUseUnityInput = reader.ReadU8();
        reader.AlignTo(4); /* windowsStandalonePrimaryInputSource */
        int _windowsStandalonePrimaryInputSource = reader.ReadS32();
        int _osx_primaryInputSource = reader.ReadS32();
        int _linux_primaryInputSource = reader.ReadS32();
        int _windowsUWP_primaryInputSource = reader.ReadS32();
        int _xboxOne_primaryInputSource = reader.ReadS32();
        int _gameCoreXboxOne_primaryInputSource = reader.ReadS32();
        int _gameCoreScarlett_primaryInputSource = reader.ReadS32();
        int _ps4_primaryInputSource = reader.ReadS32();
        int _ps5_primaryInputSource = reader.ReadS32();
        int _webGL_primaryInputSource = reader.ReadS32();
        int _stadia_primaryInputSource = reader.ReadS32();
        byte _useXInput = reader.ReadU8();
        reader.AlignTo(4); /* useNativeMouse */
        byte _useNativeMouse = reader.ReadU8();
        reader.AlignTo(4); /* useEnhancedDeviceSupport */
        byte _useEnhancedDeviceSupport = reader.ReadU8();
        reader.AlignTo(4); /* windowsStandalone_useSteamRawInputControllerWorkaround */
        byte _windowsStandalone_useSteamRawInputControllerWorkaround = reader.ReadU8();
        reader.AlignTo(4); /* osxStandalone_useEnhancedDeviceSupport */
        byte _osxStandalone_useEnhancedDeviceSupport = reader.ReadU8();
        reader.AlignTo(4); /* android_supportUnknownGamepads */
        byte _android_supportUnknownGamepads = reader.ReadU8();
        reader.AlignTo(4); /* ps4_assignJoysticksByPS4JoyId */
        byte _ps4_assignJoysticksByPS4JoyId = reader.ReadU8();
        reader.AlignTo(4); /* useSteamControllerSupport */
        byte _useSteamControllerSupport = reader.ReadU8();
        reader.AlignTo(4); /* logToScreen */
        byte _logToScreen = reader.ReadU8();
        reader.AlignTo(4); /* runInEditMode */
        byte _runInEditMode = reader.ReadU8();
        reader.AlignTo(4); /* allowInputInEditorSceneView */
        byte _allowInputInEditorSceneView = reader.ReadU8();
        reader.AlignTo(4); /* platformVars_windowsStandalone */
        PlatformVars_WindowsStandalone _platformVars_windowsStandalone = PlatformVars_WindowsStandalone.Read(reader);
        reader.AlignTo(4); /* platformVars_linuxStandalone */
        PlatformVars _platformVars_linuxStandalone = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_osxStandalone */
        PlatformVars_OSXStandalone _platformVars_osxStandalone = PlatformVars_OSXStandalone.Read(reader);
        reader.AlignTo(4); /* platformVars_windowsUWP */
        PlatformVars_WindowsUWP _platformVars_windowsUWP = PlatformVars_WindowsUWP.Read(reader);
        reader.AlignTo(4); /* platformVars_iOS */
        PlatformVars _platformVars_iOS = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_tvOS */
        PlatformVars _platformVars_tvOS = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_android */
        PlatformVars _platformVars_android = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_ps4 */
        PlatformVars _platformVars_ps4 = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_ps5 */
        PlatformVars_PS5 _platformVars_ps5 = PlatformVars_PS5.Read(reader);
        reader.AlignTo(4); /* platformVars_psVita */
        PlatformVars _platformVars_psVita = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_xboxOne */
        PlatformVars _platformVars_xboxOne = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_gameCoreXboxOne */
        PlatformVars_GameCoreXboxOne _platformVars_gameCoreXboxOne = PlatformVars_GameCoreXboxOne.Read(reader);
        reader.AlignTo(4); /* platformVars_gameCoreScarlett */
        PlatformVars_GameCoreScarlett _platformVars_gameCoreScarlett = PlatformVars_GameCoreScarlett.Read(reader);
        reader.AlignTo(4); /* platformVars_switch */
        PlatformVars _platformVars_switch = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_webGL */
        PlatformVars _platformVars_webGL = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_stadia */
        PlatformVars_Stadia _platformVars_stadia = PlatformVars_Stadia.Read(reader);
        reader.AlignTo(4); /* maxJoysticksPerPlayer */
        int _maxJoysticksPerPlayer = reader.ReadS32();
        byte _autoAssignJoysticks = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksToPlayingPlayersOnly */
        byte _assignJoysticksToPlayingPlayersOnly = reader.ReadU8();
        reader.AlignTo(4); /* distributeJoysticksEvenly */
        byte _distributeJoysticksEvenly = reader.ReadU8();
        reader.AlignTo(4); /* reassignJoystickToPreviousOwnerOnReconnect */
        byte _reassignJoystickToPreviousOwnerOnReconnect = reader.ReadU8();
        reader.AlignTo(4); /* defaultJoystickAxis2DDeadZoneType */
        int _defaultJoystickAxis2DDeadZoneType = reader.ReadS32();
        int _defaultJoystickAxis2DSensitivityType = reader.ReadS32();
        int _defaultAxisSensitivityType = reader.ReadS32();
        byte _force4WayHats = reader.ReadU8();
        reader.AlignTo(4); /* throttleCalibrationMode */
        int _throttleCalibrationMode = reader.ReadS32();
        byte _activateActionButtonsOnNegativeValue = reader.ReadU8();
        reader.AlignTo(4); /* deferControllerConnectedEventsOnStart */
        byte _deferControllerConnectedEventsOnStart = reader.ReadU8();
        reader.AlignTo(4); /* logLevel */
        int _logLevel = reader.ReadS32();
        EditorVars _editorSettings = EditorVars.Read(reader);
        
        return new(_updateLoop,
            _alwaysUseUnityInput,
            _windowsStandalonePrimaryInputSource,
            _osx_primaryInputSource,
            _linux_primaryInputSource,
            _windowsUWP_primaryInputSource,
            _xboxOne_primaryInputSource,
            _gameCoreXboxOne_primaryInputSource,
            _gameCoreScarlett_primaryInputSource,
            _ps4_primaryInputSource,
            _ps5_primaryInputSource,
            _webGL_primaryInputSource,
            _stadia_primaryInputSource,
            _useXInput,
            _useNativeMouse,
            _useEnhancedDeviceSupport,
            _windowsStandalone_useSteamRawInputControllerWorkaround,
            _osxStandalone_useEnhancedDeviceSupport,
            _android_supportUnknownGamepads,
            _ps4_assignJoysticksByPS4JoyId,
            _useSteamControllerSupport,
            _logToScreen,
            _runInEditMode,
            _allowInputInEditorSceneView,
            _platformVars_windowsStandalone,
            _platformVars_linuxStandalone,
            _platformVars_osxStandalone,
            _platformVars_windowsUWP,
            _platformVars_iOS,
            _platformVars_tvOS,
            _platformVars_android,
            _platformVars_ps4,
            _platformVars_ps5,
            _platformVars_psVita,
            _platformVars_xboxOne,
            _platformVars_gameCoreXboxOne,
            _platformVars_gameCoreScarlett,
            _platformVars_switch,
            _platformVars_webGL,
            _platformVars_stadia,
            _maxJoysticksPerPlayer,
            _autoAssignJoysticks,
            _assignJoysticksToPlayingPlayersOnly,
            _distributeJoysticksEvenly,
            _reassignJoystickToPreviousOwnerOnReconnect,
            _defaultJoystickAxis2DDeadZoneType,
            _defaultJoystickAxis2DSensitivityType,
            _defaultAxisSensitivityType,
            _force4WayHats,
            _throttleCalibrationMode,
            _activateActionButtonsOnNegativeValue,
            _deferControllerConnectedEventsOnStart,
            _logLevel,
            _editorSettings);
    }
}

/* $Mapping (3 fields) */
public readonly record struct Mapping(
    byte _enabled /* None */,
    int _categoryId /* NeedsAlign */,
    int _layoutId /* None */)
{
    public static Mapping Read(EndianBinaryReader reader)
    {
        byte __enabled = reader.ReadU8();
        reader.AlignTo(4); /* _categoryId */
        int __categoryId = reader.ReadS32();
        int __layoutId = reader.ReadS32();
        
        return new(__enabled,
            __categoryId,
            __layoutId);
    }
}

/* $CreateControllerInfo (2 fields) */
public record class CreateControllerInfo(
    int _sourceId /* None */,
    AsciiString _tag /* None */)
{
    public static CreateControllerInfo Read(EndianBinaryReader reader)
    {
        int __sourceId = reader.ReadS32();
        AsciiString __tag = BuiltInString.Read(reader);
        
        return new(__sourceId,
            __tag);
    }
}

/* $RuleSetMapping (2 fields) */
public readonly record struct RuleSetMapping(
    byte _enabled /* None */,
    int _id /* NeedsAlign */)
{
    public static RuleSetMapping Read(EndianBinaryReader reader)
    {
        byte __enabled = reader.ReadU8();
        reader.AlignTo(4); /* _id */
        int __id = reader.ReadS32();
        
        return new(__enabled,
            __id);
    }
}

/* $ControllerMapLayoutManagerSettings (3 fields) */
public record class ControllerMapLayoutManagerSettings(
    byte _enabled /* NeedsAlign */,
    byte _loadFromUserDataStore /* NeedsAlign */,
    RuleSetMapping[] _ruleSets /* NeedsAlign */)
{
    public static ControllerMapLayoutManagerSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _enabled */
        byte __enabled = reader.ReadU8();
        reader.AlignTo(4); /* _loadFromUserDataStore */
        byte __loadFromUserDataStore = reader.ReadU8();
        reader.AlignTo(4); /* _ruleSets */
        RuleSetMapping[] __ruleSets = BuiltInArray<RuleSetMapping>.Read(reader);
        
        return new(__enabled,
            __loadFromUserDataStore,
            __ruleSets);
    }
}

/* $ControllerMapEnablerSettings (2 fields) */
public record class ControllerMapEnablerSettings(
    byte _enabled /* NeedsAlign */,
    RuleSetMapping _ruleSets /* NeedsAlign */)
{
    public static ControllerMapEnablerSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _enabled */
        byte __enabled = reader.ReadU8();
        reader.AlignTo(4); /* _ruleSets */
        RuleSetMapping __ruleSets = RuleSetMapping.Read(reader);
        
        return new(__enabled,
            __ruleSets);
    }
}

/* $Player_Editor (14 fields) */
public record class Player_Editor(
    int _id /* None */,
    AsciiString _name /* None */,
    AsciiString _descriptiveName /* NeedsAlign */,
    byte _startPlaying /* NeedsAlign */,
    Mapping[] _defaultJoystickMaps /* NeedsAlign */,
    Mapping _defaultMouseMaps /* NeedsAlign */,
    Mapping _defaultKeyboardMaps /* NeedsAlign */,
    Mapping _defaultCustomControllerMaps /* NeedsAlign */,
    CreateControllerInfo[] _startingCustomControllers /* NeedsAlign */,
    byte _assignMouseOnStart /* NeedsAlign */,
    byte _assignKeyboardOnStart /* NeedsAlign */,
    byte _excludeFromControllerAutoAssignment /* NeedsAlign */,
    ControllerMapLayoutManagerSettings _controllerMapLayoutManagerSettings /* NeedsAlign */,
    ControllerMapEnablerSettings _controllerMapEnablerSettings /* NeedsAlign */)
{
    public static Player_Editor Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString __descriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _startPlaying */
        byte __startPlaying = reader.ReadU8();
        reader.AlignTo(4); /* _defaultJoystickMaps */
        Mapping[] __defaultJoystickMaps = BuiltInArray<Mapping>.Read(reader);
        reader.AlignTo(4); /* _defaultMouseMaps */
        Mapping __defaultMouseMaps = Mapping.Read(reader);
        reader.AlignTo(4); /* _defaultKeyboardMaps */
        Mapping __defaultKeyboardMaps = Mapping.Read(reader);
        reader.AlignTo(4); /* _defaultCustomControllerMaps */
        Mapping __defaultCustomControllerMaps = Mapping.Read(reader);
        reader.AlignTo(4); /* _startingCustomControllers */
        CreateControllerInfo[] __startingCustomControllers = BuiltInArray<CreateControllerInfo>.Read(reader);
        reader.AlignTo(4); /* _assignMouseOnStart */
        byte __assignMouseOnStart = reader.ReadU8();
        reader.AlignTo(4); /* _assignKeyboardOnStart */
        byte __assignKeyboardOnStart = reader.ReadU8();
        reader.AlignTo(4); /* _excludeFromControllerAutoAssignment */
        byte __excludeFromControllerAutoAssignment = reader.ReadU8();
        reader.AlignTo(4); /* _controllerMapLayoutManagerSettings */
        ControllerMapLayoutManagerSettings __controllerMapLayoutManagerSettings = ControllerMapLayoutManagerSettings.Read(reader);
        reader.AlignTo(4); /* _controllerMapEnablerSettings */
        ControllerMapEnablerSettings __controllerMapEnablerSettings = ControllerMapEnablerSettings.Read(reader);
        
        return new(__id,
            __name,
            __descriptiveName,
            __startPlaying,
            __defaultJoystickMaps,
            __defaultMouseMaps,
            __defaultKeyboardMaps,
            __defaultCustomControllerMaps,
            __startingCustomControllers,
            __assignMouseOnStart,
            __assignKeyboardOnStart,
            __excludeFromControllerAutoAssignment,
            __controllerMapLayoutManagerSettings,
            __controllerMapEnablerSettings);
    }
}

/* $InputAction (9 fields) */
public record class InputAction(
    int _id /* None */,
    AsciiString _name /* None */,
    int _type /* NeedsAlign */,
    AsciiString _descriptiveName /* None */,
    AsciiString _positiveDescriptiveName /* NeedsAlign */,
    AsciiString _negativeDescriptiveName /* NeedsAlign */,
    int _behaviorId /* NeedsAlign */,
    byte _userAssignable /* None */,
    int _categoryId /* NeedsAlign */)
{
    public static InputAction Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _type */
        int __type = reader.ReadS32();
        AsciiString __descriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _positiveDescriptiveName */
        AsciiString __positiveDescriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _negativeDescriptiveName */
        AsciiString __negativeDescriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _behaviorId */
        int __behaviorId = reader.ReadS32();
        byte __userAssignable = reader.ReadU8();
        reader.AlignTo(4); /* _categoryId */
        int __categoryId = reader.ReadS32();
        
        return new(__id,
            __name,
            __type,
            __descriptiveName,
            __positiveDescriptiveName,
            __negativeDescriptiveName,
            __behaviorId,
            __userAssignable,
            __categoryId);
    }
}

/* $InputCategory (5 fields) */
public record class InputCategory(
    AsciiString _name /* None */,
    AsciiString _descriptiveName /* NeedsAlign */,
    AsciiString _tag /* NeedsAlign */,
    int _id /* NeedsAlign */,
    byte _userAssignable /* None */)
{
    public static InputCategory Read(EndianBinaryReader reader)
    {
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString __descriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        AsciiString __tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _id */
        int __id = reader.ReadS32();
        byte __userAssignable = reader.ReadU8();
        
        return new(__name,
            __descriptiveName,
            __tag,
            __id,
            __userAssignable);
    }
}

/* $Entry (2 fields) */
public record class Entry(
    int categoryId /* None */,
    int[] actionIds /* None */)
{
    public static Entry Read(EndianBinaryReader reader)
    {
        int _categoryId = reader.ReadS32();
        int[] _actionIds = BuiltInArray<int>.Read(reader);
        
        return new(_categoryId,
            _actionIds);
    }
}

/* $ActionCategoryMap (1 fields) */
public record class ActionCategoryMap(
    Entry[] list /* NeedsAlign */)
{
    public static ActionCategoryMap Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* list */
        Entry[] _list = BuiltInArray<Entry>.Read(reader);
        
        return new(_list);
    }
}

/* $InputBehavior (23 fields) */
public record class InputBehavior(
    int _id /* None */,
    AsciiString _name /* None */,
    float _joystickAxisSensitivity /* NeedsAlign */,
    byte _digitalAxisSimulation /* None */,
    byte _digitalAxisSnap /* NeedsAlign */,
    byte _digitalAxisInstantReverse /* NeedsAlign */,
    float _digitalAxisGravity /* NeedsAlign */,
    float _digitalAxisSensitivity /* None */,
    int _mouseXYAxisMode /* None */,
    int _mouseOtherAxisMode /* None */,
    float _mouseXYAxisSensitivity /* None */,
    int _mouseXYAxisDeltaCalc /* None */,
    float _mouseOtherAxisSensitivity /* None */,
    float _customControllerAxisSensitivity /* None */,
    float _buttonDoublePressSpeed /* None */,
    float _buttonShortPressTime /* None */,
    float _buttonShortPressExpiresIn /* None */,
    float _buttonLongPressTime /* None */,
    float _buttonLongPressExpiresIn /* None */,
    float _buttonDeadZone /* None */,
    float _buttonDownBuffer /* None */,
    float _buttonRepeatRate /* None */,
    float _buttonRepeatDelay /* None */)
{
    public static InputBehavior Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _joystickAxisSensitivity */
        float __joystickAxisSensitivity = reader.ReadF32();
        byte __digitalAxisSimulation = reader.ReadU8();
        reader.AlignTo(4); /* _digitalAxisSnap */
        byte __digitalAxisSnap = reader.ReadU8();
        reader.AlignTo(4); /* _digitalAxisInstantReverse */
        byte __digitalAxisInstantReverse = reader.ReadU8();
        reader.AlignTo(4); /* _digitalAxisGravity */
        float __digitalAxisGravity = reader.ReadF32();
        float __digitalAxisSensitivity = reader.ReadF32();
        int __mouseXYAxisMode = reader.ReadS32();
        int __mouseOtherAxisMode = reader.ReadS32();
        float __mouseXYAxisSensitivity = reader.ReadF32();
        int __mouseXYAxisDeltaCalc = reader.ReadS32();
        float __mouseOtherAxisSensitivity = reader.ReadF32();
        float __customControllerAxisSensitivity = reader.ReadF32();
        float __buttonDoublePressSpeed = reader.ReadF32();
        float __buttonShortPressTime = reader.ReadF32();
        float __buttonShortPressExpiresIn = reader.ReadF32();
        float __buttonLongPressTime = reader.ReadF32();
        float __buttonLongPressExpiresIn = reader.ReadF32();
        float __buttonDeadZone = reader.ReadF32();
        float __buttonDownBuffer = reader.ReadF32();
        float __buttonRepeatRate = reader.ReadF32();
        float __buttonRepeatDelay = reader.ReadF32();
        
        return new(__id,
            __name,
            __joystickAxisSensitivity,
            __digitalAxisSimulation,
            __digitalAxisSnap,
            __digitalAxisInstantReverse,
            __digitalAxisGravity,
            __digitalAxisSensitivity,
            __mouseXYAxisMode,
            __mouseOtherAxisMode,
            __mouseXYAxisSensitivity,
            __mouseXYAxisDeltaCalc,
            __mouseOtherAxisSensitivity,
            __customControllerAxisSensitivity,
            __buttonDoublePressSpeed,
            __buttonShortPressTime,
            __buttonShortPressExpiresIn,
            __buttonLongPressTime,
            __buttonLongPressExpiresIn,
            __buttonDeadZone,
            __buttonDownBuffer,
            __buttonRepeatRate,
            __buttonRepeatDelay);
    }
}

/* $InputMapCategory (7 fields) */
public record class InputMapCategory(
    AsciiString _name /* None */,
    AsciiString _descriptiveName /* NeedsAlign */,
    AsciiString _tag /* NeedsAlign */,
    int _id /* NeedsAlign */,
    byte _userAssignable /* None */,
    byte _checkConflictsWithAllCategories /* NeedsAlign */,
    int[] _checkConflictsCategoryIds /* NeedsAlign */)
{
    public static InputMapCategory Read(EndianBinaryReader reader)
    {
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString __descriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        AsciiString __tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _id */
        int __id = reader.ReadS32();
        byte __userAssignable = reader.ReadU8();
        reader.AlignTo(4); /* _checkConflictsWithAllCategories */
        byte __checkConflictsWithAllCategories = reader.ReadU8();
        reader.AlignTo(4); /* _checkConflictsCategoryIds */
        int[] __checkConflictsCategoryIds = BuiltInArray<int>.Read(reader);
        
        return new(__name,
            __descriptiveName,
            __tag,
            __id,
            __userAssignable,
            __checkConflictsWithAllCategories,
            __checkConflictsCategoryIds);
    }
}

/* $InputLayout (3 fields) */
public record class InputLayout(
    AsciiString _name /* None */,
    AsciiString _descriptiveName /* NeedsAlign */,
    int _id /* NeedsAlign */)
{
    public static InputLayout Read(EndianBinaryReader reader)
    {
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString __descriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _id */
        int __id = reader.ReadS32();
        
        return new(__name,
            __descriptiveName,
            __id);
    }
}

/* $ActionElementMap (11 fields) */
public readonly record struct ActionElementMap(
    int _actionCategoryId /* None */,
    int _actionId /* None */,
    int _elementType /* None */,
    int _elementIdentifierId /* None */,
    int _axisRange /* None */,
    byte _invert /* None */,
    int _axisContribution /* NeedsAlign */,
    int _keyboardKeyCode /* None */,
    int _modifierKey1 /* None */,
    int _modifierKey2 /* None */,
    int _modifierKey3 /* None */)
{
    public static ActionElementMap Read(EndianBinaryReader reader)
    {
        int __actionCategoryId = reader.ReadS32();
        int __actionId = reader.ReadS32();
        int __elementType = reader.ReadS32();
        int __elementIdentifierId = reader.ReadS32();
        int __axisRange = reader.ReadS32();
        byte __invert = reader.ReadU8();
        reader.AlignTo(4); /* _axisContribution */
        int __axisContribution = reader.ReadS32();
        int __keyboardKeyCode = reader.ReadS32();
        int __modifierKey1 = reader.ReadS32();
        int __modifierKey2 = reader.ReadS32();
        int __modifierKey3 = reader.ReadS32();
        
        return new(__actionCategoryId,
            __actionId,
            __elementType,
            __elementIdentifierId,
            __axisRange,
            __invert,
            __axisContribution,
            __keyboardKeyCode,
            __modifierKey1,
            __modifierKey2,
            __modifierKey3);
    }
}

/* $ControllerMap_Editor (7 fields) */
public record class ControllerMap_Editor(
    int id /* None */,
    int categoryId /* None */,
    int layoutId /* None */,
    AsciiString name /* None */,
    AsciiString hardwareGuidString /* NeedsAlign */,
    int customControllerUid /* NeedsAlign */,
    ActionElementMap[] actionElementMaps /* None */)
{
    public static ControllerMap_Editor Read(EndianBinaryReader reader)
    {
        int _id = reader.ReadS32();
        int _categoryId = reader.ReadS32();
        int _layoutId = reader.ReadS32();
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* hardwareGuidString */
        AsciiString _hardwareGuidString = BuiltInString.Read(reader);
        reader.AlignTo(4); /* customControllerUid */
        int _customControllerUid = reader.ReadS32();
        ActionElementMap[] _actionElementMaps = BuiltInArray<ActionElementMap>.Read(reader);
        
        return new(_id,
            _categoryId,
            _layoutId,
            _name,
            _hardwareGuidString,
            _customControllerUid,
            _actionElementMaps);
    }
}

/* $ControllerElementIdentifier (6 fields) */
public record class ControllerElementIdentifier(
    int _id /* None */,
    AsciiString _name /* None */,
    AsciiString _positiveName /* NeedsAlign */,
    AsciiString _negativeName /* NeedsAlign */,
    int _elementType /* NeedsAlign */,
    int _compoundElementType /* None */)
{
    public static ControllerElementIdentifier Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _positiveName */
        AsciiString __positiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _negativeName */
        AsciiString __negativeName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _elementType */
        int __elementType = reader.ReadS32();
        int __compoundElementType = reader.ReadS32();
        
        return new(__id,
            __name,
            __positiveName,
            __negativeName,
            __elementType,
            __compoundElementType);
    }
}

/* $HardwareAxisInfo (4 fields) */
public readonly record struct HardwareAxisInfo(
    int _dataFormat /* NeedsAlign */,
    byte _excludeFromPolling /* None */,
    int _specialAxisType /* NeedsAlign */,
    float _pollingDeadZone /* None */)
{
    public static HardwareAxisInfo Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _dataFormat */
        int __dataFormat = reader.ReadS32();
        byte __excludeFromPolling = reader.ReadU8();
        reader.AlignTo(4); /* _specialAxisType */
        int __specialAxisType = reader.ReadS32();
        float __pollingDeadZone = reader.ReadF32();
        
        return new(__dataFormat,
            __excludeFromPolling,
            __specialAxisType,
            __pollingDeadZone);
    }
}

/* $Axis (13 fields) */
public record class Axis(
    int elementIdentifierId /* None */,
    AsciiString name /* None */,
    int range /* NeedsAlign */,
    byte invert /* None */,
    float deadZone /* NeedsAlign */,
    float zero /* None */,
    float min /* None */,
    float max /* None */,
    byte doNotCalibrateRange /* None */,
    int sensitivityType /* NeedsAlign */,
    float sensitivity /* None */,
    AnimationCurve sensitivityCurve /* None */,
    HardwareAxisInfo axisInfo /* NeedsAlign */)
{
    public static Axis Read(EndianBinaryReader reader)
    {
        int _elementIdentifierId = reader.ReadS32();
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* range */
        int _range = reader.ReadS32();
        byte _invert = reader.ReadU8();
        reader.AlignTo(4); /* deadZone */
        float _deadZone = reader.ReadF32();
        float _zero = reader.ReadF32();
        float _min = reader.ReadF32();
        float _max = reader.ReadF32();
        byte _doNotCalibrateRange = reader.ReadU8();
        reader.AlignTo(4); /* sensitivityType */
        int _sensitivityType = reader.ReadS32();
        float _sensitivity = reader.ReadF32();
        AnimationCurve _sensitivityCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        HardwareAxisInfo _axisInfo = HardwareAxisInfo.Read(reader);
        
        return new(_elementIdentifierId,
            _name,
            _range,
            _invert,
            _deadZone,
            _zero,
            _min,
            _max,
            _doNotCalibrateRange,
            _sensitivityType,
            _sensitivity,
            _sensitivityCurve,
            _axisInfo);
    }
}

/* $Button (2 fields) */
public record class Button(
    int elementIdentifierId /* None */,
    AsciiString name /* None */)
{
    public static Button Read(EndianBinaryReader reader)
    {
        int _elementIdentifierId = reader.ReadS32();
        AsciiString _name = BuiltInString.Read(reader);
        
        return new(_elementIdentifierId,
            _name);
    }
}

/* $CustomController_Editor (8 fields) */
public record class CustomController_Editor(
    AsciiString _name /* None */,
    AsciiString _descriptiveName /* NeedsAlign */,
    int _id /* NeedsAlign */,
    AsciiString _typeGuidString /* None */,
    ControllerElementIdentifier[] _elementIdentifiers /* NeedsAlign */,
    Axis[] _axes /* NeedsAlign */,
    Button[] _buttons /* NeedsAlign */,
    int _elementIdentifierIdCounter /* NeedsAlign */)
{
    public static CustomController_Editor Read(EndianBinaryReader reader)
    {
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString __descriptiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _id */
        int __id = reader.ReadS32();
        AsciiString __typeGuidString = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _elementIdentifiers */
        ControllerElementIdentifier[] __elementIdentifiers = BuiltInArray<ControllerElementIdentifier>.Read(reader);
        reader.AlignTo(4); /* _axes */
        Axis[] __axes = BuiltInArray<Axis>.Read(reader);
        reader.AlignTo(4); /* _buttons */
        Button[] __buttons = BuiltInArray<Button>.Read(reader);
        reader.AlignTo(4); /* _elementIdentifierIdCounter */
        int __elementIdentifierIdCounter = reader.ReadS32();
        
        return new(__name,
            __descriptiveName,
            __id,
            __typeGuidString,
            __elementIdentifiers,
            __axes,
            __buttons,
            __elementIdentifierIdCounter);
    }
}

/* $ControllerSetSelector_Editor (8 fields) */
public record class ControllerSetSelector_Editor(
    int _type /* None */,
    int _controllerType /* None */,
    AsciiString _hardwareTypeGuidString /* None */,
    AsciiString _hardwareIdentifier /* NeedsAlign */,
    AsciiString _controllerTemplateTypeGuidString /* NeedsAlign */,
    AsciiString _deviceInstanceGuidString /* NeedsAlign */,
    int _customControllerSourceId /* NeedsAlign */,
    int _controllerId /* None */)
{
    public static ControllerSetSelector_Editor Read(EndianBinaryReader reader)
    {
        int __type = reader.ReadS32();
        int __controllerType = reader.ReadS32();
        AsciiString __hardwareTypeGuidString = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _hardwareIdentifier */
        AsciiString __hardwareIdentifier = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _controllerTemplateTypeGuidString */
        AsciiString __controllerTemplateTypeGuidString = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _deviceInstanceGuidString */
        AsciiString __deviceInstanceGuidString = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _customControllerSourceId */
        int __customControllerSourceId = reader.ReadS32();
        int __controllerId = reader.ReadS32();
        
        return new(__type,
            __controllerType,
            __hardwareTypeGuidString,
            __hardwareIdentifier,
            __controllerTemplateTypeGuidString,
            __deviceInstanceGuidString,
            __customControllerSourceId,
            __controllerId);
    }
}

/* $ControllerMapLayoutManager_Rule_Editor (4 fields) */
public record class ControllerMapLayoutManager_Rule_Editor(
    AsciiString _tag /* None */,
    int[] _categoryIds /* NeedsAlign */,
    int _layoutId /* NeedsAlign */,
    ControllerSetSelector_Editor _controllerSetSelector /* None */)
{
    public static ControllerMapLayoutManager_Rule_Editor Read(EndianBinaryReader reader)
    {
        AsciiString __tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _categoryIds */
        int[] __categoryIds = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _layoutId */
        int __layoutId = reader.ReadS32();
        ControllerSetSelector_Editor __controllerSetSelector = ControllerSetSelector_Editor.Read(reader);
        
        return new(__tag,
            __categoryIds,
            __layoutId,
            __controllerSetSelector);
    }
}

/* $ControllerMapLayoutManager_RuleSet_Editor (4 fields) */
public record class ControllerMapLayoutManager_RuleSet_Editor(
    int _id /* None */,
    AsciiString _name /* None */,
    AsciiString _tag /* NeedsAlign */,
    ControllerMapLayoutManager_Rule_Editor[] _rules /* NeedsAlign */)
{
    public static ControllerMapLayoutManager_RuleSet_Editor Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        AsciiString __tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _rules */
        ControllerMapLayoutManager_Rule_Editor[] __rules = BuiltInArray<ControllerMapLayoutManager_Rule_Editor>.Read(reader);
        
        return new(__id,
            __name,
            __tag,
            __rules);
    }
}

/* $ControllerMapEnabler_Rule_Editor (5 fields) */
public record class ControllerMapEnabler_Rule_Editor(
    AsciiString _tag /* None */,
    byte _enable /* NeedsAlign */,
    int[] _categoryIds /* NeedsAlign */,
    int[] _layoutIds /* NeedsAlign */,
    ControllerSetSelector_Editor _controllerSetSelector /* NeedsAlign */)
{
    public static ControllerMapEnabler_Rule_Editor Read(EndianBinaryReader reader)
    {
        AsciiString __tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _enable */
        byte __enable = reader.ReadU8();
        reader.AlignTo(4); /* _categoryIds */
        int[] __categoryIds = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _layoutIds */
        int[] __layoutIds = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _controllerSetSelector */
        ControllerSetSelector_Editor __controllerSetSelector = ControllerSetSelector_Editor.Read(reader);
        
        return new(__tag,
            __enable,
            __categoryIds,
            __layoutIds,
            __controllerSetSelector);
    }
}

/* $ControllerMapEnabler_RuleSet_Editor (4 fields) */
public record class ControllerMapEnabler_RuleSet_Editor(
    int _id /* None */,
    AsciiString _name /* None */,
    AsciiString _tag /* NeedsAlign */,
    ControllerMapEnabler_Rule_Editor[] _rules /* NeedsAlign */)
{
    public static ControllerMapEnabler_RuleSet_Editor Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        AsciiString __tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _rules */
        ControllerMapEnabler_Rule_Editor[] __rules = BuiltInArray<ControllerMapEnabler_Rule_Editor>.Read(reader);
        
        return new(__id,
            __name,
            __tag,
            __rules);
    }
}

/* $UserData (34 fields) */
public record class UserData(
    ConfigVars configVars /* NeedsAlign */,
    Player_Editor[] players /* NeedsAlign */,
    InputAction[] actions /* NeedsAlign */,
    InputCategory[] actionCategories /* NeedsAlign */,
    ActionCategoryMap actionCategoryMap /* NeedsAlign */,
    InputBehavior[] inputBehaviors /* NeedsAlign */,
    InputMapCategory[] mapCategories /* NeedsAlign */,
    InputLayout[] joystickLayouts /* NeedsAlign */,
    InputLayout keyboardLayouts /* NeedsAlign */,
    InputLayout mouseLayouts /* NeedsAlign */,
    InputLayout customControllerLayouts /* NeedsAlign */,
    ControllerMap_Editor[] joystickMaps /* NeedsAlign */,
    ControllerMap_Editor keyboardMaps /* NeedsAlign */,
    ControllerMap_Editor mouseMaps /* NeedsAlign */,
    ControllerMap_Editor customControllerMaps /* NeedsAlign */,
    CustomController_Editor[] customControllers /* NeedsAlign */,
    ControllerMapLayoutManager_RuleSet_Editor[] controllerMapLayoutManagerRuleSets /* NeedsAlign */,
    ControllerMapEnabler_RuleSet_Editor[] controllerMapEnablerRuleSets /* NeedsAlign */,
    int playerIdCounter /* NeedsAlign */,
    int actionIdCounter /* None */,
    int actionCategoryIdCounter /* None */,
    int inputBehaviorIdCounter /* None */,
    int mapCategoryIdCounter /* None */,
    int joystickLayoutIdCounter /* None */,
    int keyboardLayoutIdCounter /* None */,
    int mouseLayoutIdCounter /* None */,
    int customControllerLayoutIdCounter /* None */,
    int joystickMapIdCounter /* None */,
    int keyboardMapIdCounter /* None */,
    int mouseMapIdCounter /* None */,
    int customControllerMapIdCounter /* None */,
    int customControllerIdCounter /* None */,
    int controllerMapLayoutManagerSetIdCounter /* None */,
    int controllerMapEnablerSetIdCounter /* None */)
{
    public static UserData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* configVars */
        ConfigVars _configVars = ConfigVars.Read(reader);
        reader.AlignTo(4); /* players */
        Player_Editor[] _players = BuiltInArray<Player_Editor>.Read(reader);
        reader.AlignTo(4); /* actions */
        InputAction[] _actions = BuiltInArray<InputAction>.Read(reader);
        reader.AlignTo(4); /* actionCategories */
        InputCategory[] _actionCategories = BuiltInArray<InputCategory>.Read(reader);
        reader.AlignTo(4); /* actionCategoryMap */
        ActionCategoryMap _actionCategoryMap = ActionCategoryMap.Read(reader);
        reader.AlignTo(4); /* inputBehaviors */
        InputBehavior[] _inputBehaviors = BuiltInArray<InputBehavior>.Read(reader);
        reader.AlignTo(4); /* mapCategories */
        InputMapCategory[] _mapCategories = BuiltInArray<InputMapCategory>.Read(reader);
        reader.AlignTo(4); /* joystickLayouts */
        InputLayout[] _joystickLayouts = BuiltInArray<InputLayout>.Read(reader);
        reader.AlignTo(4); /* keyboardLayouts */
        InputLayout _keyboardLayouts = InputLayout.Read(reader);
        reader.AlignTo(4); /* mouseLayouts */
        InputLayout _mouseLayouts = InputLayout.Read(reader);
        reader.AlignTo(4); /* customControllerLayouts */
        InputLayout _customControllerLayouts = InputLayout.Read(reader);
        reader.AlignTo(4); /* joystickMaps */
        ControllerMap_Editor[] _joystickMaps = BuiltInArray<ControllerMap_Editor>.Read(reader);
        reader.AlignTo(4); /* keyboardMaps */
        ControllerMap_Editor _keyboardMaps = ControllerMap_Editor.Read(reader);
        reader.AlignTo(4); /* mouseMaps */
        ControllerMap_Editor _mouseMaps = ControllerMap_Editor.Read(reader);
        reader.AlignTo(4); /* customControllerMaps */
        ControllerMap_Editor _customControllerMaps = ControllerMap_Editor.Read(reader);
        reader.AlignTo(4); /* customControllers */
        CustomController_Editor[] _customControllers = BuiltInArray<CustomController_Editor>.Read(reader);
        reader.AlignTo(4); /* controllerMapLayoutManagerRuleSets */
        ControllerMapLayoutManager_RuleSet_Editor[] _controllerMapLayoutManagerRuleSets = BuiltInArray<ControllerMapLayoutManager_RuleSet_Editor>.Read(reader);
        reader.AlignTo(4); /* controllerMapEnablerRuleSets */
        ControllerMapEnabler_RuleSet_Editor[] _controllerMapEnablerRuleSets = BuiltInArray<ControllerMapEnabler_RuleSet_Editor>.Read(reader);
        reader.AlignTo(4); /* playerIdCounter */
        int _playerIdCounter = reader.ReadS32();
        int _actionIdCounter = reader.ReadS32();
        int _actionCategoryIdCounter = reader.ReadS32();
        int _inputBehaviorIdCounter = reader.ReadS32();
        int _mapCategoryIdCounter = reader.ReadS32();
        int _joystickLayoutIdCounter = reader.ReadS32();
        int _keyboardLayoutIdCounter = reader.ReadS32();
        int _mouseLayoutIdCounter = reader.ReadS32();
        int _customControllerLayoutIdCounter = reader.ReadS32();
        int _joystickMapIdCounter = reader.ReadS32();
        int _keyboardMapIdCounter = reader.ReadS32();
        int _mouseMapIdCounter = reader.ReadS32();
        int _customControllerMapIdCounter = reader.ReadS32();
        int _customControllerIdCounter = reader.ReadS32();
        int _controllerMapLayoutManagerSetIdCounter = reader.ReadS32();
        int _controllerMapEnablerSetIdCounter = reader.ReadS32();
        
        return new(_configVars,
            _players,
            _actions,
            _actionCategories,
            _actionCategoryMap,
            _inputBehaviors,
            _mapCategories,
            _joystickLayouts,
            _keyboardLayouts,
            _mouseLayouts,
            _customControllerLayouts,
            _joystickMaps,
            _keyboardMaps,
            _mouseMaps,
            _customControllerMaps,
            _customControllers,
            _controllerMapLayoutManagerRuleSets,
            _controllerMapEnablerRuleSets,
            _playerIdCounter,
            _actionIdCounter,
            _actionCategoryIdCounter,
            _inputBehaviorIdCounter,
            _mapCategoryIdCounter,
            _joystickLayoutIdCounter,
            _keyboardLayoutIdCounter,
            _mouseLayoutIdCounter,
            _customControllerLayoutIdCounter,
            _joystickMapIdCounter,
            _keyboardMapIdCounter,
            _mouseMapIdCounter,
            _customControllerMapIdCounter,
            _customControllerIdCounter,
            _controllerMapLayoutManagerSetIdCounter,
            _controllerMapEnablerSetIdCounter);
    }
}

/* $TweenData (9 fields) */
public record class TweenData(
    float RubberBandPosition /* NeedsAlign */,
    float RubberBandRotation /* None */,
    float AnimationTime /* None */,
    byte UseEasing /* None */,
    byte SeparateCurves /* NeedsAlign */,
    PPtr<VectorSpline> PositionTrack /* NeedsAlign */,
    AnimationCurve PositionCurve /* None */,
    PPtr<VectorSpline> LootAtTrack /* NeedsAlign */,
    AnimationCurve LookAtCurve /* None */)
{
    public static TweenData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RubberBandPosition */
        float _RubberBandPosition = reader.ReadF32();
        float _RubberBandRotation = reader.ReadF32();
        float _AnimationTime = reader.ReadF32();
        byte _UseEasing = reader.ReadU8();
        reader.AlignTo(4); /* SeparateCurves */
        byte _SeparateCurves = reader.ReadU8();
        reader.AlignTo(4); /* PositionTrack */
        PPtr<VectorSpline> _PositionTrack = PPtr<VectorSpline>.Read(reader);
        AnimationCurve _PositionCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LootAtTrack */
        PPtr<VectorSpline> _LootAtTrack = PPtr<VectorSpline>.Read(reader);
        AnimationCurve _LookAtCurve = AnimationCurve.Read(reader);
        
        return new(_RubberBandPosition,
            _RubberBandRotation,
            _AnimationTime,
            _UseEasing,
            _SeparateCurves,
            _PositionTrack,
            _PositionCurve,
            _LootAtTrack,
            _LookAtCurve);
    }
}

/* $TweenDataWithPrev (10 fields) */
public record class TweenDataWithPrev(
    float RubberBandPosition /* None */,
    float RubberBandRotation /* None */,
    float AnimationTime /* None */,
    byte UseEasing /* None */,
    byte SeparateCurves /* NeedsAlign */,
    PPtr<VectorSpline> PositionTrack /* NeedsAlign */,
    AnimationCurve PositionCurve /* None */,
    PPtr<VectorSpline> LootAtTrack /* NeedsAlign */,
    AnimationCurve LookAtCurve /* None */,
    PPtr<CameraTweenAnchor> PreviousAnchor /* NeedsAlign */)
{
    public static TweenDataWithPrev Read(EndianBinaryReader reader)
    {
        float _RubberBandPosition = reader.ReadF32();
        float _RubberBandRotation = reader.ReadF32();
        float _AnimationTime = reader.ReadF32();
        byte _UseEasing = reader.ReadU8();
        reader.AlignTo(4); /* SeparateCurves */
        byte _SeparateCurves = reader.ReadU8();
        reader.AlignTo(4); /* PositionTrack */
        PPtr<VectorSpline> _PositionTrack = PPtr<VectorSpline>.Read(reader);
        AnimationCurve _PositionCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LootAtTrack */
        PPtr<VectorSpline> _LootAtTrack = PPtr<VectorSpline>.Read(reader);
        AnimationCurve _LookAtCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* PreviousAnchor */
        PPtr<CameraTweenAnchor> _PreviousAnchor = PPtr<CameraTweenAnchor>.Read(reader);
        
        return new(_RubberBandPosition,
            _RubberBandRotation,
            _AnimationTime,
            _UseEasing,
            _SeparateCurves,
            _PositionTrack,
            _PositionCurve,
            _LootAtTrack,
            _LookAtCurve,
            _PreviousAnchor);
    }
}

/* $BoneImpulseMultiplier (2 fields) */
public record class BoneImpulseMultiplier(
    PPtr<Rigidbody> bone /* None */,
    float multiplier /* None */)
{
    public static BoneImpulseMultiplier Read(EndianBinaryReader reader)
    {
        PPtr<Rigidbody> _bone = PPtr<Rigidbody>.Read(reader);
        float _multiplier = reader.ReadF32();
        
        return new(_bone,
            _multiplier);
    }
}

/* $EditorSettings (2 fields) */
public readonly record struct EditorSettings(
    double m_Framerate /* None */,
    byte m_ScenePreview /* None */)
{
    public static EditorSettings Read(EndianBinaryReader reader)
    {
        double _m_Framerate = reader.ReadF64();
        byte _m_ScenePreview = reader.ReadU8();
        
        return new(_m_Framerate,
            _m_ScenePreview);
    }
}

/* $UnitOvertipVisibilitySettings (6 fields) */
public record class UnitOvertipVisibilitySettings(
    int UnitOvertipVisibility /* None */,
    float Alpha /* None */,
    float Scale /* None */,
    float YPosition /* None */,
    Vector2f Size /* None */,
    PPtr<CanvasGroup>[] CanvasGroups /* None */)
{
    public static UnitOvertipVisibilitySettings Read(EndianBinaryReader reader)
    {
        int _UnitOvertipVisibility = reader.ReadS32();
        float _Alpha = reader.ReadF32();
        float _Scale = reader.ReadF32();
        float _YPosition = reader.ReadF32();
        Vector2f _Size = Vector2f.Read(reader);
        PPtr<CanvasGroup>[] _CanvasGroups = BuiltInArray<PPtr<CanvasGroup>>.Read(reader);
        
        return new(_UnitOvertipVisibility,
            _Alpha,
            _Scale,
            _YPosition,
            _Size,
            _CanvasGroups);
    }
}

/* $ElementWithSourceInfo (7 fields) */
public record class ElementWithSourceInfo(
    AsciiString _name /* None */,
    int _elementType /* NeedsAlign */,
    byte _enabled /* None */,
    int _actionId /* NeedsAlign */,
    int _coordinateMode /* None */,
    float _absoluteToRelativeSensitivity /* None */,
    float _repeatRate /* None */)
{
    public static ElementWithSourceInfo Read(EndianBinaryReader reader)
    {
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _elementType */
        int __elementType = reader.ReadS32();
        byte __enabled = reader.ReadU8();
        reader.AlignTo(4); /* _actionId */
        int __actionId = reader.ReadS32();
        int __coordinateMode = reader.ReadS32();
        float __absoluteToRelativeSensitivity = reader.ReadF32();
        float __repeatRate = reader.ReadF32();
        
        return new(__name,
            __elementType,
            __enabled,
            __actionId,
            __coordinateMode,
            __absoluteToRelativeSensitivity,
            __repeatRate);
    }
}

/* $ElementInfo (4 fields) */
public record class ElementInfo(
    AsciiString _name /* None */,
    int _elementType /* NeedsAlign */,
    byte _enabled /* None */,
    ElementWithSourceInfo[] _elements /* NeedsAlign */)
{
    public static ElementInfo Read(EndianBinaryReader reader)
    {
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _elementType */
        int __elementType = reader.ReadS32();
        byte __enabled = reader.ReadU8();
        reader.AlignTo(4); /* _elements */
        ElementWithSourceInfo[] __elements = BuiltInArray<ElementWithSourceInfo>.Read(reader);
        
        return new(__name,
            __elementType,
            __enabled,
            __elements);
    }
}

/* $ButtonStateChangedHandler (1 fields) */
public record class ButtonStateChangedHandler(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static ButtonStateChangedHandler Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $AxisValueChangedHandler (1 fields) */
public record class AxisValueChangedHandler(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static AxisValueChangedHandler Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $EnabledStateChangedHandler (1 fields) */
public record class EnabledStateChangedHandler(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static EnabledStateChangedHandler Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $ScreenPositionChangedHandler (1 fields) */
public record class ScreenPositionChangedHandler(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static ScreenPositionChangedHandler Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $RotationKey (9 fields) */
public record class RotationKey(
    double _featherStart /* None */,
    double _featherEnd /* None */,
    double _centerStart /* None */,
    double _centerEnd /* None */,
    AnimationCurve interpolation /* None */,
    float blend /* NeedsAlign */,
    byte useLookTarget /* None */,
    PPtr<Transform> target /* NeedsAlign */,
    Vector3f rotation /* None */)
{
    public static RotationKey Read(EndianBinaryReader reader)
    {
        double __featherStart = reader.ReadF64();
        double __featherEnd = reader.ReadF64();
        double __centerStart = reader.ReadF64();
        double __centerEnd = reader.ReadF64();
        AnimationCurve _interpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        byte _useLookTarget = reader.ReadU8();
        reader.AlignTo(4); /* target */
        PPtr<Transform> _target = PPtr<Transform>.Read(reader);
        Vector3f _rotation = Vector3f.Read(reader);
        
        return new(__featherStart,
            __featherEnd,
            __centerStart,
            __centerEnd,
            _interpolation,
            _blend,
            _useLookTarget,
            _target,
            _rotation);
    }
}

/* $RotationModifier (3 fields) */
public record class RotationModifier(
    float blend /* NeedsAlign */,
    byte useClippedPercent /* None */,
    RotationKey[] keys /* NeedsAlign */)
{
    public static RotationModifier Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        byte _useClippedPercent = reader.ReadU8();
        reader.AlignTo(4); /* keys */
        RotationKey[] _keys = BuiltInArray<RotationKey>.Read(reader);
        
        return new(_blend,
            _useClippedPercent,
            _keys);
    }
}

/* $OffsetKey (7 fields) */
public record class OffsetKey(
    double _featherStart /* None */,
    double _featherEnd /* None */,
    double _centerStart /* None */,
    double _centerEnd /* None */,
    AnimationCurve interpolation /* None */,
    float blend /* NeedsAlign */,
    Vector2f offset /* None */)
{
    public static OffsetKey Read(EndianBinaryReader reader)
    {
        double __featherStart = reader.ReadF64();
        double __featherEnd = reader.ReadF64();
        double __centerStart = reader.ReadF64();
        double __centerEnd = reader.ReadF64();
        AnimationCurve _interpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        Vector2f _offset = Vector2f.Read(reader);
        
        return new(__featherStart,
            __featherEnd,
            __centerStart,
            __centerEnd,
            _interpolation,
            _blend,
            _offset);
    }
}

/* $OffsetModifier (3 fields) */
public record class OffsetModifier(
    float blend /* NeedsAlign */,
    byte useClippedPercent /* None */,
    OffsetKey[] keys /* NeedsAlign */)
{
    public static OffsetModifier Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        byte _useClippedPercent = reader.ReadU8();
        reader.AlignTo(4); /* keys */
        OffsetKey[] _keys = BuiltInArray<OffsetKey>.Read(reader);
        
        return new(_blend,
            _useClippedPercent,
            _keys);
    }
}

/* $ColorKey (8 fields) */
public record class ColorKey(
    double _featherStart /* None */,
    double _featherEnd /* None */,
    double _centerStart /* None */,
    double _centerEnd /* None */,
    AnimationCurve interpolation /* None */,
    float blend /* NeedsAlign */,
    ColorRGBA color /* None */,
    int blendMode /* None */)
{
    public static ColorKey Read(EndianBinaryReader reader)
    {
        double __featherStart = reader.ReadF64();
        double __featherEnd = reader.ReadF64();
        double __centerStart = reader.ReadF64();
        double __centerEnd = reader.ReadF64();
        AnimationCurve _interpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        ColorRGBA _color = ColorRGBA.Read(reader);
        int _blendMode = reader.ReadS32();
        
        return new(__featherStart,
            __featherEnd,
            __centerStart,
            __centerEnd,
            _interpolation,
            _blend,
            _color,
            _blendMode);
    }
}

/* $ColorModifier (3 fields) */
public record class ColorModifier(
    float blend /* NeedsAlign */,
    byte useClippedPercent /* None */,
    ColorKey[] keys /* NeedsAlign */)
{
    public static ColorModifier Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        byte _useClippedPercent = reader.ReadU8();
        reader.AlignTo(4); /* keys */
        ColorKey[] _keys = BuiltInArray<ColorKey>.Read(reader);
        
        return new(_blend,
            _useClippedPercent,
            _keys);
    }
}

/* $SizeKey (7 fields) */
public record class SizeKey(
    double _featherStart /* None */,
    double _featherEnd /* None */,
    double _centerStart /* None */,
    double _centerEnd /* None */,
    AnimationCurve interpolation /* None */,
    float blend /* NeedsAlign */,
    float size /* None */)
{
    public static SizeKey Read(EndianBinaryReader reader)
    {
        double __featherStart = reader.ReadF64();
        double __featherEnd = reader.ReadF64();
        double __centerStart = reader.ReadF64();
        double __centerEnd = reader.ReadF64();
        AnimationCurve _interpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        float _size = reader.ReadF32();
        
        return new(__featherStart,
            __featherEnd,
            __centerStart,
            __centerEnd,
            _interpolation,
            _blend,
            _size);
    }
}

/* $SizeModifier (3 fields) */
public record class SizeModifier(
    float blend /* NeedsAlign */,
    byte useClippedPercent /* None */,
    SizeKey[] keys /* NeedsAlign */)
{
    public static SizeModifier Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        byte _useClippedPercent = reader.ReadU8();
        reader.AlignTo(4); /* keys */
        SizeKey[] _keys = BuiltInArray<SizeKey>.Read(reader);
        
        return new(_blend,
            _useClippedPercent,
            _keys);
    }
}

/* $SplineSample (6 fields) */
public record class SplineSample(
    Vector3f position /* NeedsAlign */,
    Vector3f up /* None */,
    Vector3f forward /* None */,
    ColorRGBA color /* None */,
    float size /* None */,
    double percent /* None */)
{
    public static SplineSample Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* position */
        Vector3f _position = Vector3f.Read(reader);
        Vector3f _up = Vector3f.Read(reader);
        Vector3f _forward = Vector3f.Read(reader);
        ColorRGBA _color = ColorRGBA.Read(reader);
        float _size = reader.ReadF32();
        double _percent = reader.ReadF64();
        
        return new(_position,
            _up,
            _forward,
            _color,
            _size,
            _percent);
    }
}

/* $Submesh (1 fields) */
public record class Submesh(
    int[] triangles /* None */)
{
    public static Submesh Read(EndianBinaryReader reader)
    {
        int[] _triangles = BuiltInArray<int>.Read(reader);
        
        return new(_triangles);
    }
}

/* $TS_Bounds (5 fields) */
public record class TS_Bounds(
    Vector3f center /* NeedsAlign */,
    Vector3f extents /* None */,
    Vector3f max /* None */,
    Vector3f min /* None */,
    Vector3f size /* None */)
{
    public static TS_Bounds Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* center */
        Vector3f _center = Vector3f.Read(reader);
        Vector3f _extents = Vector3f.Read(reader);
        Vector3f _max = Vector3f.Read(reader);
        Vector3f _min = Vector3f.Read(reader);
        Vector3f _size = Vector3f.Read(reader);
        
        return new(_center,
            _extents,
            _max,
            _min,
            _size);
    }
}

/* $VertexGroup (3 fields) */
public record class VertexGroup(
    float @value /* None */,
    double percent /* None */,
    int[] ids /* None */)
{
    public static VertexGroup Read(EndianBinaryReader reader)
    {
        float _value = reader.ReadF32();
        double _percent = reader.ReadF64();
        int[] _ids = BuiltInArray<int>.Read(reader);
        
        return new(_value,
            _percent,
            _ids);
    }
}

/* $BoundsSpacing (2 fields) */
public readonly record struct BoundsSpacing(
    float front /* None */,
    float back /* None */)
{
    public static BoundsSpacing Read(EndianBinaryReader reader)
    {
        float _front = reader.ReadF32();
        float _back = reader.ReadF32();
        
        return new(_front,
            _back);
    }
}

/* $MeshDefinition (25 fields) */
public record class MeshDefinition(
    Vector3f[] vertices /* None */,
    Vector3f[] normals /* NeedsAlign */,
    Vector4f[] tangents /* NeedsAlign */,
    ColorRGBA[] colors /* NeedsAlign */,
    Vector2f[] uv /* NeedsAlign */,
    Vector2f[] uv2 /* NeedsAlign */,
    Vector2f[] uv3 /* NeedsAlign */,
    Vector2f[] uv4 /* NeedsAlign */,
    int[] triangles /* NeedsAlign */,
    Submesh[] subMeshes /* NeedsAlign */,
    TS_Bounds bounds /* NeedsAlign */,
    VertexGroup[] vertexGroups /* None */,
    PPtr<Mesh> _mesh /* NeedsAlign */,
    Vector3f _rotation /* None */,
    Vector3f _offset /* None */,
    Vector3f _scale /* None */,
    Vector2f _uvScale /* None */,
    Vector2f _uvOffset /* None */,
    float _uvRotation /* None */,
    int _mirror /* None */,
    BoundsSpacing _spacing /* None */,
    float _vertexGroupingMargin /* None */,
    byte _removeInnerFaces /* None */,
    byte _flipFaces /* NeedsAlign */,
    byte _doubleSided /* NeedsAlign */)
{
    public static MeshDefinition Read(EndianBinaryReader reader)
    {
        Vector3f[] _vertices = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* normals */
        Vector3f[] _normals = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* tangents */
        Vector4f[] _tangents = BuiltInArray<Vector4f>.Read(reader);
        reader.AlignTo(4); /* colors */
        ColorRGBA[] _colors = BuiltInArray<ColorRGBA>.Read(reader);
        reader.AlignTo(4); /* uv */
        Vector2f[] _uv = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv2 */
        Vector2f[] _uv2 = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv3 */
        Vector2f[] _uv3 = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv4 */
        Vector2f[] _uv4 = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* triangles */
        int[] _triangles = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* subMeshes */
        Submesh[] _subMeshes = BuiltInArray<Submesh>.Read(reader);
        reader.AlignTo(4); /* bounds */
        TS_Bounds _bounds = TS_Bounds.Read(reader);
        VertexGroup[] _vertexGroups = BuiltInArray<VertexGroup>.Read(reader);
        reader.AlignTo(4); /* _mesh */
        PPtr<Mesh> __mesh = PPtr<Mesh>.Read(reader);
        Vector3f __rotation = Vector3f.Read(reader);
        Vector3f __offset = Vector3f.Read(reader);
        Vector3f __scale = Vector3f.Read(reader);
        Vector2f __uvScale = Vector2f.Read(reader);
        Vector2f __uvOffset = Vector2f.Read(reader);
        float __uvRotation = reader.ReadF32();
        int __mirror = reader.ReadS32();
        BoundsSpacing __spacing = BoundsSpacing.Read(reader);
        float __vertexGroupingMargin = reader.ReadF32();
        byte __removeInnerFaces = reader.ReadU8();
        reader.AlignTo(4); /* _flipFaces */
        byte __flipFaces = reader.ReadU8();
        reader.AlignTo(4); /* _doubleSided */
        byte __doubleSided = reader.ReadU8();
        
        return new(_vertices,
            _normals,
            _tangents,
            _colors,
            _uv,
            _uv2,
            _uv3,
            _uv4,
            _triangles,
            _subMeshes,
            _bounds,
            _vertexGroups,
            __mesh,
            __rotation,
            __offset,
            __scale,
            __uvScale,
            __uvOffset,
            __uvRotation,
            __mirror,
            __spacing,
            __vertexGroupingMargin,
            __removeInnerFaces,
            __flipFaces,
            __doubleSided);
    }
}

/* $ScaleKey (7 fields) */
public record class ScaleKey(
    double _featherStart /* None */,
    double _featherEnd /* None */,
    double _centerStart /* None */,
    double _centerEnd /* None */,
    AnimationCurve interpolation /* None */,
    float blend /* NeedsAlign */,
    Vector3f scale /* None */)
{
    public static ScaleKey Read(EndianBinaryReader reader)
    {
        double __featherStart = reader.ReadF64();
        double __featherEnd = reader.ReadF64();
        double __centerStart = reader.ReadF64();
        double __centerEnd = reader.ReadF64();
        AnimationCurve _interpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        Vector3f _scale = Vector3f.Read(reader);
        
        return new(__featherStart,
            __featherEnd,
            __centerStart,
            __centerEnd,
            _interpolation,
            _blend,
            _scale);
    }
}

/* $MeshScaleModifier (3 fields) */
public record class MeshScaleModifier(
    float blend /* None */,
    byte useClippedPercent /* None */,
    ScaleKey[] keys /* NeedsAlign */)
{
    public static MeshScaleModifier Read(EndianBinaryReader reader)
    {
        float _blend = reader.ReadF32();
        byte _useClippedPercent = reader.ReadU8();
        reader.AlignTo(4); /* keys */
        ScaleKey[] _keys = BuiltInArray<ScaleKey>.Read(reader);
        
        return new(_blend,
            _useClippedPercent,
            _keys);
    }
}

/* $Channel (32 fields) */
public record class Channel(
    AsciiString name /* None */,
    int _iterationSeed /* NeedsAlign */,
    int _offsetSeed /* None */,
    int _rotationSeed /* None */,
    int _scaleSeed /* None */,
    PPtr<SplineMesh> owner /* None */,
    MeshDefinition[] meshes /* None */,
    double _clipFrom /* NeedsAlign */,
    double _clipTo /* None */,
    byte _randomOrder /* None */,
    int _overrideUVs /* NeedsAlign */,
    Vector2f _uvScale /* None */,
    Vector2f _uvOffset /* None */,
    byte _overrideNormal /* None */,
    Vector3f _customNormal /* NeedsAlign */,
    int _type /* None */,
    int _count /* None */,
    byte _autoCount /* None */,
    double _spacing /* NeedsAlign */,
    byte _randomRotation /* None */,
    Vector3f _minRotation /* NeedsAlign */,
    Vector3f _maxRotation /* None */,
    byte _randomOffset /* None */,
    Vector2f _minOffset /* NeedsAlign */,
    Vector2f _maxOffset /* None */,
    byte _randomScale /* None */,
    byte _uniformRandomScale /* NeedsAlign */,
    Vector3f _minScale /* NeedsAlign */,
    Vector3f _maxScale /* None */,
    byte _overrideMaterialID /* None */,
    int _targetMaterialID /* NeedsAlign */,
    MeshScaleModifier _scaleModifier /* None */)
{
    public static Channel Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _iterationSeed */
        int __iterationSeed = reader.ReadS32();
        int __offsetSeed = reader.ReadS32();
        int __rotationSeed = reader.ReadS32();
        int __scaleSeed = reader.ReadS32();
        PPtr<SplineMesh> _owner = PPtr<SplineMesh>.Read(reader);
        MeshDefinition[] _meshes = BuiltInArray<MeshDefinition>.Read(reader);
        reader.AlignTo(4); /* _clipFrom */
        double __clipFrom = reader.ReadF64();
        double __clipTo = reader.ReadF64();
        byte __randomOrder = reader.ReadU8();
        reader.AlignTo(4); /* _overrideUVs */
        int __overrideUVs = reader.ReadS32();
        Vector2f __uvScale = Vector2f.Read(reader);
        Vector2f __uvOffset = Vector2f.Read(reader);
        byte __overrideNormal = reader.ReadU8();
        reader.AlignTo(4); /* _customNormal */
        Vector3f __customNormal = Vector3f.Read(reader);
        int __type = reader.ReadS32();
        int __count = reader.ReadS32();
        byte __autoCount = reader.ReadU8();
        reader.AlignTo(4); /* _spacing */
        double __spacing = reader.ReadF64();
        byte __randomRotation = reader.ReadU8();
        reader.AlignTo(4); /* _minRotation */
        Vector3f __minRotation = Vector3f.Read(reader);
        Vector3f __maxRotation = Vector3f.Read(reader);
        byte __randomOffset = reader.ReadU8();
        reader.AlignTo(4); /* _minOffset */
        Vector2f __minOffset = Vector2f.Read(reader);
        Vector2f __maxOffset = Vector2f.Read(reader);
        byte __randomScale = reader.ReadU8();
        reader.AlignTo(4); /* _uniformRandomScale */
        byte __uniformRandomScale = reader.ReadU8();
        reader.AlignTo(4); /* _minScale */
        Vector3f __minScale = Vector3f.Read(reader);
        Vector3f __maxScale = Vector3f.Read(reader);
        byte __overrideMaterialID = reader.ReadU8();
        reader.AlignTo(4); /* _targetMaterialID */
        int __targetMaterialID = reader.ReadS32();
        MeshScaleModifier __scaleModifier = MeshScaleModifier.Read(reader);
        
        return new(_name,
            __iterationSeed,
            __offsetSeed,
            __rotationSeed,
            __scaleSeed,
            _owner,
            _meshes,
            __clipFrom,
            __clipTo,
            __randomOrder,
            __overrideUVs,
            __uvScale,
            __uvOffset,
            __overrideNormal,
            __customNormal,
            __type,
            __count,
            __autoCount,
            __spacing,
            __randomRotation,
            __minRotation,
            __maxRotation,
            __randomOffset,
            __minOffset,
            __maxOffset,
            __randomScale,
            __uniformRandomScale,
            __minScale,
            __maxScale,
            __overrideMaterialID,
            __targetMaterialID,
            __scaleModifier);
    }
}

/* $AxisMouseRotationSettingsView (6 fields) */
public record class AxisMouseRotationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static AxisMouseRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $FaceInfo (21 fields) */
public record class FaceInfo(
    int m_FaceIndex /* NeedsAlign */,
    AsciiString m_FamilyName /* None */,
    AsciiString m_StyleName /* NeedsAlign */,
    int m_PointSize /* NeedsAlign */,
    float m_Scale /* None */,
    int m_UnitsPerEM /* None */,
    float m_LineHeight /* None */,
    float m_AscentLine /* None */,
    float m_CapLine /* None */,
    float m_MeanLine /* None */,
    float m_Baseline /* None */,
    float m_DescentLine /* None */,
    float m_SuperscriptOffset /* None */,
    float m_SuperscriptSize /* None */,
    float m_SubscriptOffset /* None */,
    float m_SubscriptSize /* None */,
    float m_UnderlineOffset /* None */,
    float m_UnderlineThickness /* None */,
    float m_StrikethroughOffset /* None */,
    float m_StrikethroughThickness /* None */,
    float m_TabWidth /* None */)
{
    public static FaceInfo Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_FaceIndex */
        int _m_FaceIndex = reader.ReadS32();
        AsciiString _m_FamilyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StyleName */
        AsciiString _m_StyleName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PointSize */
        int _m_PointSize = reader.ReadS32();
        float _m_Scale = reader.ReadF32();
        int _m_UnitsPerEM = reader.ReadS32();
        float _m_LineHeight = reader.ReadF32();
        float _m_AscentLine = reader.ReadF32();
        float _m_CapLine = reader.ReadF32();
        float _m_MeanLine = reader.ReadF32();
        float _m_Baseline = reader.ReadF32();
        float _m_DescentLine = reader.ReadF32();
        float _m_SuperscriptOffset = reader.ReadF32();
        float _m_SuperscriptSize = reader.ReadF32();
        float _m_SubscriptOffset = reader.ReadF32();
        float _m_SubscriptSize = reader.ReadF32();
        float _m_UnderlineOffset = reader.ReadF32();
        float _m_UnderlineThickness = reader.ReadF32();
        float _m_StrikethroughOffset = reader.ReadF32();
        float _m_StrikethroughThickness = reader.ReadF32();
        float _m_TabWidth = reader.ReadF32();
        
        return new(_m_FaceIndex,
            _m_FamilyName,
            _m_StyleName,
            _m_PointSize,
            _m_Scale,
            _m_UnitsPerEM,
            _m_LineHeight,
            _m_AscentLine,
            _m_CapLine,
            _m_MeanLine,
            _m_Baseline,
            _m_DescentLine,
            _m_SuperscriptOffset,
            _m_SuperscriptSize,
            _m_SubscriptOffset,
            _m_SubscriptSize,
            _m_UnderlineOffset,
            _m_UnderlineThickness,
            _m_StrikethroughOffset,
            _m_StrikethroughThickness,
            _m_TabWidth);
    }
}

/* $TMP_SpriteCharacter (6 fields) */
public record class TMP_SpriteCharacter(
    byte m_ElementType /* None */,
    uint m_Unicode /* NeedsAlign */,
    uint m_GlyphIndex /* None */,
    float m_Scale /* None */,
    AsciiString m_Name /* None */,
    int m_HashCode /* NeedsAlign */)
{
    public static TMP_SpriteCharacter Read(EndianBinaryReader reader)
    {
        byte _m_ElementType = reader.ReadU8();
        reader.AlignTo(4); /* m_Unicode */
        uint _m_Unicode = reader.ReadU32();
        uint _m_GlyphIndex = reader.ReadU32();
        float _m_Scale = reader.ReadF32();
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HashCode */
        int _m_HashCode = reader.ReadS32();
        
        return new(_m_ElementType,
            _m_Unicode,
            _m_GlyphIndex,
            _m_Scale,
            _m_Name,
            _m_HashCode);
    }
}

/* $GlyphMetrics (5 fields) */
public readonly record struct GlyphMetrics(
    float m_Width /* None */,
    float m_Height /* None */,
    float m_HorizontalBearingX /* None */,
    float m_HorizontalBearingY /* None */,
    float m_HorizontalAdvance /* None */)
{
    public static GlyphMetrics Read(EndianBinaryReader reader)
    {
        float _m_Width = reader.ReadF32();
        float _m_Height = reader.ReadF32();
        float _m_HorizontalBearingX = reader.ReadF32();
        float _m_HorizontalBearingY = reader.ReadF32();
        float _m_HorizontalAdvance = reader.ReadF32();
        
        return new(_m_Width,
            _m_Height,
            _m_HorizontalBearingX,
            _m_HorizontalBearingY,
            _m_HorizontalAdvance);
    }
}

/* $GlyphRect (4 fields) */
public readonly record struct GlyphRect(
    int m_X /* None */,
    int m_Y /* None */,
    int m_Width /* None */,
    int m_Height /* None */)
{
    public static GlyphRect Read(EndianBinaryReader reader)
    {
        int _m_X = reader.ReadS32();
        int _m_Y = reader.ReadS32();
        int _m_Width = reader.ReadS32();
        int _m_Height = reader.ReadS32();
        
        return new(_m_X,
            _m_Y,
            _m_Width,
            _m_Height);
    }
}

/* $TMP_SpriteGlyph (7 fields) */
public record class TMP_SpriteGlyph(
    uint m_Index /* None */,
    GlyphMetrics m_Metrics /* None */,
    GlyphRect m_GlyphRect /* None */,
    float m_Scale /* None */,
    int m_AtlasIndex /* None */,
    int m_ClassDefinitionType /* None */,
    PPtr<Sprite> sprite /* None */)
{
    public static TMP_SpriteGlyph Read(EndianBinaryReader reader)
    {
        uint _m_Index = reader.ReadU32();
        GlyphMetrics _m_Metrics = GlyphMetrics.Read(reader);
        GlyphRect _m_GlyphRect = GlyphRect.Read(reader);
        float _m_Scale = reader.ReadF32();
        int _m_AtlasIndex = reader.ReadS32();
        int _m_ClassDefinitionType = reader.ReadS32();
        PPtr<Sprite> _sprite = PPtr<Sprite>.Read(reader);
        
        return new(_m_Index,
            _m_Metrics,
            _m_GlyphRect,
            _m_Scale,
            _m_AtlasIndex,
            _m_ClassDefinitionType,
            _sprite);
    }
}

/* $TMP_Sprite (14 fields) */
public record class TMP_Sprite(
    int id /* None */,
    float x /* None */,
    float y /* None */,
    float width /* None */,
    float height /* None */,
    float xOffset /* None */,
    float yOffset /* None */,
    float xAdvance /* None */,
    float scale /* None */,
    AsciiString name /* None */,
    int hashCode /* NeedsAlign */,
    int unicode /* None */,
    Vector2f pivot /* None */,
    PPtr<Sprite> sprite /* None */)
{
    public static TMP_Sprite Read(EndianBinaryReader reader)
    {
        int _id = reader.ReadS32();
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _width = reader.ReadF32();
        float _height = reader.ReadF32();
        float _xOffset = reader.ReadF32();
        float _yOffset = reader.ReadF32();
        float _xAdvance = reader.ReadF32();
        float _scale = reader.ReadF32();
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* hashCode */
        int _hashCode = reader.ReadS32();
        int _unicode = reader.ReadS32();
        Vector2f _pivot = Vector2f.Read(reader);
        PPtr<Sprite> _sprite = PPtr<Sprite>.Read(reader);
        
        return new(_id,
            _x,
            _y,
            _width,
            _height,
            _xOffset,
            _yOffset,
            _xAdvance,
            _scale,
            _name,
            _hashCode,
            _unicode,
            _pivot,
            _sprite);
    }
}

/* $SettingsViews (5 fields) */
public record class SettingsViews(
    PPtr<SettingsEntityHeaderView> m_SettingsEntityHeaderViewPrefab /* None */,
    PPtr<SettingsEntityBoolPCView> m_SettingsEntityBoolViewPrefab /* None */,
    PPtr<SettingsEntityDropdownPCView> m_SettingsEntityDropdownViewPrefab /* None */,
    PPtr<SettingsEntitySliderPCView> m_SettingsEntitySliderViewPrefab /* None */,
    PPtr<SettingsEntityDropdownGameDifficultyPCView> m_SettingsEntityDropdownGameDifficultyViewPrefab /* None */)
{
    public static SettingsViews Read(EndianBinaryReader reader)
    {
        PPtr<SettingsEntityHeaderView> _m_SettingsEntityHeaderViewPrefab = PPtr<SettingsEntityHeaderView>.Read(reader);
        PPtr<SettingsEntityBoolPCView> _m_SettingsEntityBoolViewPrefab = PPtr<SettingsEntityBoolPCView>.Read(reader);
        PPtr<SettingsEntityDropdownPCView> _m_SettingsEntityDropdownViewPrefab = PPtr<SettingsEntityDropdownPCView>.Read(reader);
        PPtr<SettingsEntitySliderPCView> _m_SettingsEntitySliderViewPrefab = PPtr<SettingsEntitySliderPCView>.Read(reader);
        PPtr<SettingsEntityDropdownGameDifficultyPCView> _m_SettingsEntityDropdownGameDifficultyViewPrefab = PPtr<SettingsEntityDropdownGameDifficultyPCView>.Read(reader);
        
        return new(_m_SettingsEntityHeaderViewPrefab,
            _m_SettingsEntityBoolViewPrefab,
            _m_SettingsEntityDropdownViewPrefab,
            _m_SettingsEntitySliderViewPrefab,
            _m_SettingsEntityDropdownGameDifficultyViewPrefab);
    }
}

/* $CompoundElement (3 fields) */
public record class CompoundElement(
    int type /* None */,
    int elementIdentifier /* None */,
    int[] componentElementIdentifiers /* None */)
{
    public static CompoundElement Read(EndianBinaryReader reader)
    {
        int _type = reader.ReadS32();
        int _elementIdentifier = reader.ReadS32();
        int[] _componentElementIdentifiers = BuiltInArray<int>.Read(reader);
        
        return new(_type,
            _elementIdentifier,
            _componentElementIdentifiers);
    }
}

/* $ElementCount (3 fields) */
public readonly record struct ElementCount(
    int axisCount /* None */,
    int buttonCount /* None */,
    int hatCount /* None */)
{
    public static ElementCount Read(EndianBinaryReader reader)
    {
        int _axisCount = reader.ReadS32();
        int _buttonCount = reader.ReadS32();
        int _hatCount = reader.ReadS32();
        
        return new(_axisCount,
            _buttonCount,
            _hatCount);
    }
}

/* $MatchingCriteria (11 fields) */
public record class MatchingCriteria(
    int axisCount /* NeedsAlign */,
    int buttonCount /* None */,
    byte disabled /* None */,
    AsciiString tag /* NeedsAlign */,
    int hatCount /* NeedsAlign */,
    ElementCount[] alternateElementCounts /* None */,
    byte productName_useRegex /* None */,
    AsciiString[] productName /* NeedsAlign */,
    AsciiString[] productGUID /* NeedsAlign */,
    int[] productId /* NeedsAlign */,
    int deviceType /* NeedsAlign */)
{
    public static MatchingCriteria Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* axisCount */
        int _axisCount = reader.ReadS32();
        int _buttonCount = reader.ReadS32();
        byte _disabled = reader.ReadU8();
        reader.AlignTo(4); /* tag */
        AsciiString _tag = BuiltInString.Read(reader);
        reader.AlignTo(4); /* hatCount */
        int _hatCount = reader.ReadS32();
        ElementCount[] _alternateElementCounts = BuiltInArray<ElementCount>.Read(reader);
        byte _productName_useRegex = reader.ReadU8();
        reader.AlignTo(4); /* productName */
        AsciiString[] _productName = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productGUID */
        AsciiString[] _productGUID = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productId */
        int[] _productId = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* deviceType */
        int _deviceType = reader.ReadS32();
        
        return new(_axisCount,
            _buttonCount,
            _disabled,
            _tag,
            _hatCount,
            _alternateElementCounts,
            _productName_useRegex,
            _productName,
            _productGUID,
            _productId,
            _deviceType);
    }
}

/* $Elements (2 fields) */
public record class Elements(
    Axis axes /* NeedsAlign */,
    Button buttons /* NeedsAlign */)
{
    public static Elements Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* axes */
        Axis _axes = Axis.Read(reader);
        reader.AlignTo(4); /* buttons */
        Button _buttons = Button.Read(reader);
        
        return new(_axes,
            _buttons);
    }
}

/* $Platform_DirectInput_Base (3 fields) */
public record class Platform_DirectInput_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_DirectInput_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_DirectInput (4 fields) */
public record class Platform_DirectInput(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_DirectInput_Base[] variants /* NeedsAlign */)
{
    public static Platform_DirectInput Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_DirectInput_Base[] _variants = BuiltInArray<Platform_DirectInput_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_RawInput_Base (3 fields) */
public record class Platform_RawInput_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_RawInput_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_RawInput (4 fields) */
public record class Platform_RawInput(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_RawInput_Base[] variants /* NeedsAlign */)
{
    public static Platform_RawInput Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_RawInput_Base[] _variants = BuiltInArray<Platform_RawInput_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_XInput_Base (3 fields) */
public record class Platform_XInput_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_XInput_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_XInput (4 fields) */
public record class Platform_XInput(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_XInput_Base[] variants /* NeedsAlign */)
{
    public static Platform_XInput Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_XInput_Base[] _variants = BuiltInArray<Platform_XInput_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_OSX_Base (3 fields) */
public record class Platform_OSX_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_OSX_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_OSX (4 fields) */
public record class Platform_OSX(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_OSX_Base[] variants /* NeedsAlign */)
{
    public static Platform_OSX Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_OSX_Base[] _variants = BuiltInArray<Platform_OSX_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_Linux_Base (3 fields) */
public record class Platform_Linux_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_Linux_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_Linux (4 fields) */
public record class Platform_Linux(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_Linux_Base[] variants /* NeedsAlign */)
{
    public static Platform_Linux Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_Linux_Base[] _variants = BuiltInArray<Platform_Linux_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_WindowsUWP_Base (3 fields) */
public record class Platform_WindowsUWP_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_WindowsUWP_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_WindowsUWP (4 fields) */
public record class Platform_WindowsUWP(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_WindowsUWP_Base[] variants /* NeedsAlign */)
{
    public static Platform_WindowsUWP Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_WindowsUWP_Base[] _variants = BuiltInArray<Platform_WindowsUWP_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_Fallback_Base (3 fields) */
public record class Platform_Fallback_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_Fallback_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_Fallback (4 fields) */
public record class Platform_Fallback(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_Fallback_Base[] variants /* NeedsAlign */)
{
    public static Platform_Fallback Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_Fallback_Base[] _variants = BuiltInArray<Platform_Fallback_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_PS5_Base (4 fields) */
public record class Platform_PS5_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */)
{
    public static Platform_PS5_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName);
    }
}

/* $Platform_PS5 (5 fields) */
public record class Platform_PS5(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */,
    Platform_PS5_Base[] variants /* NeedsAlign */)
{
    public static Platform_PS5 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_PS5_Base[] _variants = BuiltInArray<Platform_PS5_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName,
            _variants);
    }
}

/* $Platform_WebGL_Base (3 fields) */
public record class Platform_WebGL_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_WebGL_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_WebGL (4 fields) */
public record class Platform_WebGL(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_WebGL_Base[] variants /* NeedsAlign */)
{
    public static Platform_WebGL Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_WebGL_Base[] _variants = BuiltInArray<Platform_WebGL_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_XboxOne_Base (3 fields) */
public record class Platform_XboxOne_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_XboxOne_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_XboxOne (4 fields) */
public record class Platform_XboxOne(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_XboxOne_Base[] variants /* NeedsAlign */)
{
    public static Platform_XboxOne Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_XboxOne_Base[] _variants = BuiltInArray<Platform_XboxOne_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_GameCore_Base (4 fields) */
public record class Platform_GameCore_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */)
{
    public static Platform_GameCore_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName);
    }
}

/* $Platform_GameCore (5 fields) */
public record class Platform_GameCore(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */,
    Platform_GameCore_Base[] variants /* NeedsAlign */)
{
    public static Platform_GameCore Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_GameCore_Base[] _variants = BuiltInArray<Platform_GameCore_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName,
            _variants);
    }
}

/* $Platform_PS4_Base (3 fields) */
public record class Platform_PS4_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_PS4_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_PS4 (4 fields) */
public record class Platform_PS4(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_PS4_Base[] variants /* NeedsAlign */)
{
    public static Platform_PS4 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_PS4_Base[] _variants = BuiltInArray<Platform_PS4_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_NintendoSwitch_Base (3 fields) */
public record class Platform_NintendoSwitch_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_NintendoSwitch_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_NintendoSwitch (4 fields) */
public record class Platform_NintendoSwitch(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_NintendoSwitch_Base[] variants /* NeedsAlign */)
{
    public static Platform_NintendoSwitch Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_NintendoSwitch_Base[] _variants = BuiltInArray<Platform_NintendoSwitch_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_Stadia_Base (4 fields) */
public record class Platform_Stadia_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */)
{
    public static Platform_Stadia_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName);
    }
}

/* $Platform_Stadia (5 fields) */
public record class Platform_Stadia(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */,
    Platform_Stadia_Base[] variants /* NeedsAlign */)
{
    public static Platform_Stadia Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_Stadia_Base[] _variants = BuiltInArray<Platform_Stadia_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName,
            _variants);
    }
}

/* $Platform_InternalDriver_Base (3 fields) */
public record class Platform_InternalDriver_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_InternalDriver_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_InternalDriver (4 fields) */
public record class Platform_InternalDriver(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_InternalDriver_Base[] variants /* NeedsAlign */)
{
    public static Platform_InternalDriver Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_InternalDriver_Base[] _variants = BuiltInArray<Platform_InternalDriver_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_SDL2_Base (3 fields) */
public record class Platform_SDL2_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */)
{
    public static Platform_SDL2_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements);
    }
}

/* $Platform_SDL2 (4 fields) */
public record class Platform_SDL2(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    Platform_SDL2_Base[] variants /* NeedsAlign */)
{
    public static Platform_SDL2 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_SDL2_Base[] _variants = BuiltInArray<Platform_SDL2_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _variants);
    }
}

/* $Platform_AppleGCController_Base (4 fields) */
public record class Platform_AppleGCController_Base(
    AsciiString description /* None */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */)
{
    public static Platform_AppleGCController_Base Read(EndianBinaryReader reader)
    {
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName);
    }
}

/* $Platform_AppleGCController (5 fields) */
public record class Platform_AppleGCController(
    AsciiString description /* NeedsAlign */,
    MatchingCriteria matchingCriteria /* NeedsAlign */,
    Elements elements /* NeedsAlign */,
    AsciiString controllerName /* NeedsAlign */,
    Platform_AppleGCController_Base[] variants /* NeedsAlign */)
{
    public static Platform_AppleGCController Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* description */
        AsciiString _description = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        MatchingCriteria _matchingCriteria = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* elements */
        Elements _elements = Elements.Read(reader);
        reader.AlignTo(4); /* controllerName */
        AsciiString _controllerName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* variants */
        Platform_AppleGCController_Base[] _variants = BuiltInArray<Platform_AppleGCController_Base>.Read(reader);
        
        return new(_description,
            _matchingCriteria,
            _elements,
            _controllerName,
            _variants);
    }
}

/* $DestructionStageSettings (2 fields) */
public record class DestructionStageSettings(
    int Type /* None */,
    PPtr<GridNavmeshModifier> NavmeshModifier /* None */)
{
    public static DestructionStageSettings Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<GridNavmeshModifier> _NavmeshModifier = PPtr<GridNavmeshModifier>.Read(reader);
        
        return new(_Type,
            _NavmeshModifier);
    }
}

/* forward decl ?ReactiveProperty`1 (no type info) */
public record struct ReactiveProperty_1;
/* $SpriteLink (1 fields) */
public record class SpriteLink(
    AsciiString AssetId /* None */)
{
    public static SpriteLink Read(EndianBinaryReader reader)
    {
        AsciiString _AssetId = BuiltInString.Read(reader);
        
        return new(_AssetId);
    }
}

/* $LoadingScreenImage (2 fields) */
public record class LoadingScreenImage(
    SpriteLink Main /* None */,
    SpriteLink Glitch /* NeedsAlign */)
{
    public static LoadingScreenImage Read(EndianBinaryReader reader)
    {
        SpriteLink _Main = SpriteLink.Read(reader);
        reader.AlignTo(4); /* Glitch */
        SpriteLink _Glitch = SpriteLink.Read(reader);
        
        return new(_Main,
            _Glitch);
    }
}

/* $SettingTypeScreens (2 fields) */
public record class SettingTypeScreens(
    int Type /* None */,
    LoadingScreenImage Sprites /* None */)
{
    public static SettingTypeScreens Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        LoadingScreenImage _Sprites = LoadingScreenImage.Read(reader);
        
        return new(_Type,
            _Sprites);
    }
}

/* $PointsVariant (2 fields) */
public record class PointsVariant(
    PPtr<ExplorationPointOfInterestPCView>[] PointsOfInterest /* None */,
    PPtr<ExplorationResourcePointPCView>[] ResourcePoints /* None */)
{
    public static PointsVariant Read(EndianBinaryReader reader)
    {
        PPtr<ExplorationPointOfInterestPCView>[] _PointsOfInterest = BuiltInArray<PPtr<ExplorationPointOfInterestPCView>>.Read(reader);
        PPtr<ExplorationResourcePointPCView>[] _ResourcePoints = BuiltInArray<PPtr<ExplorationResourcePointPCView>>.Read(reader);
        
        return new(_PointsOfInterest,
            _ResourcePoints);
    }
}

/* $ClipSettings (1 fields) */
public record class ClipSettings(
    PPtr<AnimationClipWrapper> ClipWrapper /* None */)
{
    public static ClipSettings Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> _ClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_ClipWrapper);
    }
}

/* $AttackVariantSettings (3 fields) */
public record class AttackVariantSettings(
    ClipSettings[] Ready /* None */,
    ClipSettings Unready /* None */,
    ClipSettings Attack /* None */)
{
    public static AttackVariantSettings Read(EndianBinaryReader reader)
    {
        ClipSettings[] _Ready = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings _Unready = ClipSettings.Read(reader);
        ClipSettings _Attack = ClipSettings.Read(reader);
        
        return new(_Ready,
            _Unready,
            _Attack);
    }
}

/* $WeaponStyleSettings (3 fields) */
public record class WeaponStyleSettings(
    int Style /* NeedsAlign */,
    AttackVariantSettings Single /* None */,
    AttackVariantSettings Burst /* None */)
{
    public static WeaponStyleSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Style */
        int _Style = reader.ReadS32();
        AttackVariantSettings _Single = AttackVariantSettings.Read(reader);
        AttackVariantSettings _Burst = AttackVariantSettings.Read(reader);
        
        return new(_Style,
            _Single,
            _Burst);
    }
}

/* $AnimationStyleEntry (4 fields) */
public record class AnimationStyleEntry(
    int Style /* None */,
    byte IsOffHand /* None */,
    WeaponStyleSettings Default /* NeedsAlign */,
    WeaponStyleSettings WeaponStyleSettings /* None */)
{
    public static AnimationStyleEntry Read(EndianBinaryReader reader)
    {
        int _Style = reader.ReadS32();
        byte _IsOffHand = reader.ReadU8();
        reader.AlignTo(4); /* Default */
        WeaponStyleSettings _Default = WeaponStyleSettings.Read(reader);
        WeaponStyleSettings _WeaponStyleSettings = WeaponStyleSettings.Read(reader);
        
        return new(_Style,
            _IsOffHand,
            _Default,
            _WeaponStyleSettings);
    }
}

/* $FilterView (2 fields) */
public record class FilterView(
    PPtr<OwlcatToggle> Toggle /* None */,
    PPtr<Image> Icon /* None */)
{
    public static FilterView Read(EndianBinaryReader reader)
    {
        PPtr<OwlcatToggle> _Toggle = PPtr<OwlcatToggle>.Read(reader);
        PPtr<Image> _Icon = PPtr<Image>.Read(reader);
        
        return new(_Toggle,
            _Icon);
    }
}

/* $ObjectMouseRotationSettingsView (6 fields) */
public record class ObjectMouseRotationSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectMouseRotationSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ShieldsDecalMaterialSet (3 fields) */
public record class ShieldsDecalMaterialSet(
    PPtr<Material> HighShieldsMaterial /* None */,
    PPtr<Material> MediumShieldsMaterial /* None */,
    PPtr<Material> LowShieldsMaterial /* None */)
{
    public static ShieldsDecalMaterialSet Read(EndianBinaryReader reader)
    {
        PPtr<Material> _HighShieldsMaterial = PPtr<Material>.Read(reader);
        PPtr<Material> _MediumShieldsMaterial = PPtr<Material>.Read(reader);
        PPtr<Material> _LowShieldsMaterial = PPtr<Material>.Read(reader);
        
        return new(_HighShieldsMaterial,
            _MediumShieldsMaterial,
            _LowShieldsMaterial);
    }
}

/* $CustomAxisKeyboardRotationSettingsView (6 fields) */
public record class CustomAxisKeyboardRotationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static CustomAxisKeyboardRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ClipList (2 fields) */
public record class ClipList(
    int Weapon /* None */,
    PPtr<AnimationClipWrapper>[] ClipWrappers /* None */)
{
    public static ClipList Read(EndianBinaryReader reader)
    {
        int _Weapon = reader.ReadS32();
        PPtr<AnimationClipWrapper>[] _ClipWrappers = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(_Weapon,
            _ClipWrappers);
    }
}

/* $MaskedClipList (4 fields) */
public record class MaskedClipList(
    int MainWeapon /* None */,
    int OffWeapon /* None */,
    PPtr<AvatarMask> Mask /* None */,
    PPtr<AnimationClipWrapper>[] ClipWrappers /* None */)
{
    public static MaskedClipList Read(EndianBinaryReader reader)
    {
        int _MainWeapon = reader.ReadS32();
        int _OffWeapon = reader.ReadS32();
        PPtr<AvatarMask> _Mask = PPtr<AvatarMask>.Read(reader);
        PPtr<AnimationClipWrapper>[] _ClipWrappers = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(_MainWeapon,
            _OffWeapon,
            _Mask,
            _ClipWrappers);
    }
}

/* $LockAxisSettings (3 fields) */
public record class LockAxisSettings(
    byte Enabled /* None */,
    Vector3f Axis /* NeedsAlign */,
    int Space /* None */)
{
    public static LockAxisSettings Read(EndianBinaryReader reader)
    {
        byte _Enabled = reader.ReadU8();
        reader.AlignTo(4); /* Axis */
        Vector3f _Axis = Vector3f.Read(reader);
        int _Space = reader.ReadS32();
        
        return new(_Enabled,
            _Axis,
            _Space);
    }
}

/* $LocalMapMarkerSet (3 fields) */
public record class LocalMapMarkerSet(
    int Type /* None */,
    PPtr<LocalMapMarkerPCView> View /* None */,
    PPtr<RectTransform> Container /* None */)
{
    public static LocalMapMarkerSet Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<LocalMapMarkerPCView> _View = PPtr<LocalMapMarkerPCView>.Read(reader);
        PPtr<RectTransform> _Container = PPtr<RectTransform>.Read(reader);
        
        return new(_Type,
            _View,
            _Container);
    }
}

/* $TextureCurve (5 fields) */
public record class TextureCurve(
    int __length__k__BackingField /* NeedsAlign */,
    byte m_Loop /* None */,
    float m_ZeroValue /* NeedsAlign */,
    float m_Range /* None */,
    AnimationCurve m_Curve /* None */)
{
    public static TextureCurve Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* __length__k__BackingField */
        int ___length__k__BackingField = reader.ReadS32();
        byte _m_Loop = reader.ReadU8();
        reader.AlignTo(4); /* m_ZeroValue */
        float _m_ZeroValue = reader.ReadF32();
        float _m_Range = reader.ReadF32();
        AnimationCurve _m_Curve = AnimationCurve.Read(reader);
        
        return new(___length__k__BackingField,
            _m_Loop,
            _m_ZeroValue,
            _m_Range,
            _m_Curve);
    }
}

/* $TextureCurveParameter (2 fields) */
public record class TextureCurveParameter(
    byte m_OverrideState /* NeedsAlign */,
    TextureCurve m_Value /* NeedsAlign */)
{
    public static TextureCurveParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        TextureCurve _m_Value = TextureCurve.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $BlueprintProjectileTrajectoryReference (1 fields) */
public record class BlueprintProjectileTrajectoryReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintProjectileTrajectoryReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $MyEntry (3 fields) */
public record class MyEntry(
    int Value /* None */,
    LocalizedString Text /* None */,
    LocalizedString Description /* NeedsAlign */)
{
    public static MyEntry Read(EndianBinaryReader reader)
    {
        int _Value = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString _Description = LocalizedString.Read(reader);
        
        return new(_Value,
            _Text,
            _Description);
    }
}

/* $RequiredSlotVariant (1 fields) */
public readonly record struct RequiredSlotVariant(
    int SlotType /* None */)
{
    public static RequiredSlotVariant Read(EndianBinaryReader reader)
    {
        int _SlotType = reader.ReadS32();
        
        return new(_SlotType);
    }
}

/* $StarshipSlotDescription (3 fields) */
public record class StarshipSlotDescription(
    int Priority /* None */,
    PPtr<GameObject> Prefab /* None */,
    RequiredSlotVariant[] RequiredSlots /* None */)
{
    public static StarshipSlotDescription Read(EndianBinaryReader reader)
    {
        int _Priority = reader.ReadS32();
        PPtr<GameObject> _Prefab = PPtr<GameObject>.Read(reader);
        RequiredSlotVariant[] _RequiredSlots = BuiltInArray<RequiredSlotVariant>.Read(reader);
        
        return new(_Priority,
            _Prefab,
            _RequiredSlots);
    }
}

/* $ColorTintAnimationSettings (4 fields) */
public record class ColorTintAnimationSettings(
    float Delay /* None */,
    float Lifetime /* None */,
    Gradient ColorOverLifetime /* None */,
    byte LoopAnimation /* NeedsAlign */)
{
    public static ColorTintAnimationSettings Read(EndianBinaryReader reader)
    {
        float _Delay = reader.ReadF32();
        float _Lifetime = reader.ReadF32();
        Gradient _ColorOverLifetime = Gradient.Read(reader);
        reader.AlignTo(4); /* LoopAnimation */
        byte _LoopAnimation = reader.ReadU8();
        
        return new(_Delay,
            _Lifetime,
            _ColorOverLifetime,
            _LoopAnimation);
    }
}

/* $ColorTintAnimationController (1 fields) */
public record class ColorTintAnimationController(
    ColorTintAnimationSettings[] Animations /* NeedsAlign */)
{
    public static ColorTintAnimationController Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Animations */
        ColorTintAnimationSettings[] _Animations = BuiltInArray<ColorTintAnimationSettings>.Read(reader);
        
        return new(_Animations);
    }
}

/* $RimLightingAnimationController (1 fields) */
public record class RimLightingAnimationController(
    RimLightingAnimationSettings Animations /* NeedsAlign */)
{
    public static RimLightingAnimationController Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Animations */
        RimLightingAnimationSettings _Animations = RimLightingAnimationSettings.Read(reader);
        
        return new(_Animations);
    }
}

/* $DissolveSettings (15 fields) */
public record class DissolveSettings(
    PPtr<Texture2D> Texture /* None */,
    Vector2f TilingScale /* None */,
    byte TilingOverride /* None */,
    Vector2f OffsetSpeed /* NeedsAlign */,
    float Delay /* None */,
    float Lifetime /* None */,
    AnimationCurve DissolveOverLifetime /* None */,
    AnimationCurve DissolveWidthOverLifetime /* NeedsAlign */,
    float DissolveWidthScale /* NeedsAlign */,
    Gradient ColorOverLifetime /* None */,
    float HdrColorScale /* NeedsAlign */,
    byte LoopAnimation /* None */,
    byte DissolveCutout /* NeedsAlign */,
    byte DissolveEmission /* NeedsAlign */,
    int Layer /* NeedsAlign */)
{
    public static DissolveSettings Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> _Texture = PPtr<Texture2D>.Read(reader);
        Vector2f _TilingScale = Vector2f.Read(reader);
        byte _TilingOverride = reader.ReadU8();
        reader.AlignTo(4); /* OffsetSpeed */
        Vector2f _OffsetSpeed = Vector2f.Read(reader);
        float _Delay = reader.ReadF32();
        float _Lifetime = reader.ReadF32();
        AnimationCurve _DissolveOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* DissolveWidthOverLifetime */
        AnimationCurve _DissolveWidthOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* DissolveWidthScale */
        float _DissolveWidthScale = reader.ReadF32();
        Gradient _ColorOverLifetime = Gradient.Read(reader);
        reader.AlignTo(4); /* HdrColorScale */
        float _HdrColorScale = reader.ReadF32();
        byte _LoopAnimation = reader.ReadU8();
        reader.AlignTo(4); /* DissolveCutout */
        byte _DissolveCutout = reader.ReadU8();
        reader.AlignTo(4); /* DissolveEmission */
        byte _DissolveEmission = reader.ReadU8();
        reader.AlignTo(4); /* Layer */
        int _Layer = reader.ReadS32();
        
        return new(_Texture,
            _TilingScale,
            _TilingOverride,
            _OffsetSpeed,
            _Delay,
            _Lifetime,
            _DissolveOverLifetime,
            _DissolveWidthOverLifetime,
            _DissolveWidthScale,
            _ColorOverLifetime,
            _HdrColorScale,
            _LoopAnimation,
            _DissolveCutout,
            _DissolveEmission,
            _Layer);
    }
}

/* $DissolveAnimationController (1 fields) */
public record class DissolveAnimationController(
    DissolveSettings[] Animations /* NeedsAlign */)
{
    public static DissolveAnimationController Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Animations */
        DissolveSettings[] _Animations = BuiltInArray<DissolveSettings>.Read(reader);
        
        return new(_Animations);
    }
}

/* $AdditionalAlbedoSettings (11 fields) */
public record class AdditionalAlbedoSettings(
    PPtr<Texture2D> Texture /* None */,
    Vector2f TilingScale /* None */,
    byte TilingOverride /* None */,
    Vector2f OffsetSpeed /* NeedsAlign */,
    float Delay /* None */,
    float Lifetime /* None */,
    AnimationCurve FactorOverLifetime /* None */,
    byte LoopAnimation /* NeedsAlign */,
    ColorRGBA Color /* NeedsAlign */,
    float ColorScale /* None */,
    AnimationCurve AlphaScaleOverLifetime /* None */)
{
    public static AdditionalAlbedoSettings Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> _Texture = PPtr<Texture2D>.Read(reader);
        Vector2f _TilingScale = Vector2f.Read(reader);
        byte _TilingOverride = reader.ReadU8();
        reader.AlignTo(4); /* OffsetSpeed */
        Vector2f _OffsetSpeed = Vector2f.Read(reader);
        float _Delay = reader.ReadF32();
        float _Lifetime = reader.ReadF32();
        AnimationCurve _FactorOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LoopAnimation */
        byte _LoopAnimation = reader.ReadU8();
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        float _ColorScale = reader.ReadF32();
        AnimationCurve _AlphaScaleOverLifetime = AnimationCurve.Read(reader);
        
        return new(_Texture,
            _TilingScale,
            _TilingOverride,
            _OffsetSpeed,
            _Delay,
            _Lifetime,
            _FactorOverLifetime,
            _LoopAnimation,
            _Color,
            _ColorScale,
            _AlphaScaleOverLifetime);
    }
}

/* $AdditionalAlbedoAnimationController (1 fields) */
public record class AdditionalAlbedoAnimationController(
    AdditionalAlbedoSettings[] Animations /* NeedsAlign */)
{
    public static AdditionalAlbedoAnimationController Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Animations */
        AdditionalAlbedoSettings[] _Animations = BuiltInArray<AdditionalAlbedoSettings>.Read(reader);
        
        return new(_Animations);
    }
}

/* $MaterialParametersOverrideSettings (12 fields) */
public record class MaterialParametersOverrideSettings(
    int BumpOverride /* None */,
    int SpecularOverride /* None */,
    float Roughness /* None */,
    byte MetallicOverride /* None */,
    float Metallic /* NeedsAlign */,
    int EmissionOverride /* None */,
    float Emission /* None */,
    PPtr<Texture2D> AlbedoMap /* None */,
    PPtr<Texture2D> Masks /* None */,
    PPtr<Texture2D> BumpMap /* None */,
    int TilingType /* None */,
    Vector2f TilingMultiplier /* None */)
{
    public static MaterialParametersOverrideSettings Read(EndianBinaryReader reader)
    {
        int _BumpOverride = reader.ReadS32();
        int _SpecularOverride = reader.ReadS32();
        float _Roughness = reader.ReadF32();
        byte _MetallicOverride = reader.ReadU8();
        reader.AlignTo(4); /* Metallic */
        float _Metallic = reader.ReadF32();
        int _EmissionOverride = reader.ReadS32();
        float _Emission = reader.ReadF32();
        PPtr<Texture2D> _AlbedoMap = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _Masks = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _BumpMap = PPtr<Texture2D>.Read(reader);
        int _TilingType = reader.ReadS32();
        Vector2f _TilingMultiplier = Vector2f.Read(reader);
        
        return new(_BumpOverride,
            _SpecularOverride,
            _Roughness,
            _MetallicOverride,
            _Metallic,
            _EmissionOverride,
            _Emission,
            _AlbedoMap,
            _Masks,
            _BumpMap,
            _TilingType,
            _TilingMultiplier);
    }
}

/* $MaterialParametersOverrideController (1 fields) */
public record class MaterialParametersOverrideController(
    MaterialParametersOverrideSettings[] Entries /* NeedsAlign */)
{
    public static MaterialParametersOverrideController Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Entries */
        MaterialParametersOverrideSettings[] _Entries = BuiltInArray<MaterialParametersOverrideSettings>.Read(reader);
        
        return new(_Entries);
    }
}

/* $int2 (2 fields) */
public readonly record struct int2(
    int x /* NeedsAlign */,
    int y /* None */)
{
    public static int2 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* x */
        int _x = reader.ReadS32();
        int _y = reader.ReadS32();
        
        return new(_x,
            _y);
    }
}

/* $quaternion (1 fields) */
public record class quaternion(
    float4 @value /* None */)
{
    public static quaternion Read(EndianBinaryReader reader)
    {
        float4 _value = float4.Read(reader);
        
        return new(_value);
    }
}

/* $Particle (10 fields) */
public record class Particle(
    float3 BasePosition /* None */,
    float3 Position /* None */,
    float3 Predicted /* None */,
    float3 Velocity /* None */,
    quaternion Orientation /* None */,
    quaternion PredictedOrientation /* None */,
    float4 AngularVelocity /* None */,
    float Mass /* None */,
    uint Flags /* None */,
    float Radius /* None */)
{
    public static Particle Read(EndianBinaryReader reader)
    {
        float3 _BasePosition = float3.Read(reader);
        float3 _Position = float3.Read(reader);
        float3 _Predicted = float3.Read(reader);
        float3 _Velocity = float3.Read(reader);
        quaternion _Orientation = quaternion.Read(reader);
        quaternion _PredictedOrientation = quaternion.Read(reader);
        float4 _AngularVelocity = float4.Read(reader);
        float _Mass = reader.ReadF32();
        uint _Flags = reader.ReadU32();
        float _Radius = reader.ReadF32();
        
        return new(_BasePosition,
            _Position,
            _Predicted,
            _Velocity,
            _Orientation,
            _PredictedOrientation,
            _AngularVelocity,
            _Mass,
            _Flags,
            _Radius);
    }
}

/* $Constraint (8 fields) */
public record class Constraint(
    int index0 /* None */,
    int index1 /* None */,
    int index2 /* None */,
    int index3 /* None */,
    float4 parameters0 /* None */,
    float4 parameters1 /* None */,
    int type /* None */,
    int id /* None */)
{
    public static Constraint Read(EndianBinaryReader reader)
    {
        int _index0 = reader.ReadS32();
        int _index1 = reader.ReadS32();
        int _index2 = reader.ReadS32();
        int _index3 = reader.ReadS32();
        float4 _parameters0 = float4.Read(reader);
        float4 _parameters1 = float4.Read(reader);
        int _type = reader.ReadS32();
        int _id = reader.ReadS32();
        
        return new(_index0,
            _index1,
            _index2,
            _index3,
            _parameters0,
            _parameters1,
            _type,
            _id);
    }
}

/* $StartEndModifier (8 fields) */
public record class StartEndModifier(
    byte addPoints /* NeedsAlign */,
    byte addStartPoint /* NeedsAlign */,
    byte addEndPoint /* NeedsAlign */,
    int exactStartPoint /* NeedsAlign */,
    int exactEndPoint /* None */,
    byte useRaycasting /* None */,
    BitField mask /* NeedsAlign */,
    byte useGraphRaycasting /* None */)
{
    public static StartEndModifier Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* addPoints */
        byte _addPoints = reader.ReadU8();
        reader.AlignTo(4); /* addStartPoint */
        byte _addStartPoint = reader.ReadU8();
        reader.AlignTo(4); /* addEndPoint */
        byte _addEndPoint = reader.ReadU8();
        reader.AlignTo(4); /* exactStartPoint */
        int _exactStartPoint = reader.ReadS32();
        int _exactEndPoint = reader.ReadS32();
        byte _useRaycasting = reader.ReadU8();
        reader.AlignTo(4); /* mask */
        BitField _mask = BitField.Read(reader);
        byte _useGraphRaycasting = reader.ReadU8();
        
        return new(_addPoints,
            _addStartPoint,
            _addEndPoint,
            _exactStartPoint,
            _exactEndPoint,
            _useRaycasting,
            _mask,
            _useGraphRaycasting);
    }
}

/* $GraphMask (1 fields) */
public readonly record struct GraphMask(
    int @value /* NeedsAlign */)
{
    public static GraphMask Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* @value */
        int _value = reader.ReadS32();
        
        return new(_value);
    }
}

/* $InteractableMirrorSettingsView (6 fields) */
public record class InteractableMirrorSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static InteractableMirrorSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $InspectorGUISelectionToolbar (6 fields) */
public record class InspectorGUISelectionToolbar(
    AsciiString[] _normalStateButtonTexturePaths /* None */,
    AsciiString[] _activeStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _buttonTooltips /* NeedsAlign */,
    float _buttonScale /* NeedsAlign */,
    byte _allowActiveStateForButtons /* None */,
    byte _useBoxStyleForButtons /* NeedsAlign */)
{
    public static InspectorGUISelectionToolbar Read(EndianBinaryReader reader)
    {
        AsciiString[] __normalStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] __activeStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        AsciiString[] __buttonTooltips = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonScale */
        float __buttonScale = reader.ReadF32();
        byte __allowActiveStateForButtons = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        byte __useBoxStyleForButtons = reader.ReadU8();
        
        return new(__normalStateButtonTexturePaths,
            __activeStateButtonTexturePaths,
            __buttonTooltips,
            __buttonScale,
            __allowActiveStateForButtons,
            __useBoxStyleForButtons);
    }
}

/* $DecorPaintObjectPlacementLookAndFeelSettingsView (6 fields) */
public record class DecorPaintObjectPlacementLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static DecorPaintObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $PathObjectPlacementLookAndFeelSettingsView (6 fields) */
public record class PathObjectPlacementLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static PathObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BlockObjectPlacementLookAndFeelSettingsView (6 fields) */
public record class BlockObjectPlacementLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static BlockObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectPlacementLookAndFeelSettingsView (9 fields) */
public record class ObjectPlacementLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    DecorPaintObjectPlacementLookAndFeelSettingsView _decorPaintLookAndFeelSettingsView /* NeedsAlign */,
    PathObjectPlacementLookAndFeelSettingsView _pathObjectPlacementLookAndFeelSettingsView /* NeedsAlign */,
    BlockObjectPlacementLookAndFeelSettingsView _blockObjectPlacementLookAndFeelSettingsView /* NeedsAlign */)
{
    public static ObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _decorPaintLookAndFeelSettingsView */
        DecorPaintObjectPlacementLookAndFeelSettingsView __decorPaintLookAndFeelSettingsView = DecorPaintObjectPlacementLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _pathObjectPlacementLookAndFeelSettingsView */
        PathObjectPlacementLookAndFeelSettingsView __pathObjectPlacementLookAndFeelSettingsView = PathObjectPlacementLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _blockObjectPlacementLookAndFeelSettingsView */
        BlockObjectPlacementLookAndFeelSettingsView __blockObjectPlacementLookAndFeelSettingsView = BlockObjectPlacementLookAndFeelSettingsView.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __decorPaintLookAndFeelSettingsView,
            __pathObjectPlacementLookAndFeelSettingsView,
            __blockObjectPlacementLookAndFeelSettingsView);
    }
}

/* $ObjectPlacementInspectorGUI (1 fields) */
public record class ObjectPlacementInspectorGUI(
    ObjectPlacementLookAndFeelSettingsView _objectPlacementLookAndFeelSettingsView /* NeedsAlign */)
{
    public static ObjectPlacementInspectorGUI Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _objectPlacementLookAndFeelSettingsView */
        ObjectPlacementLookAndFeelSettingsView __objectPlacementLookAndFeelSettingsView = ObjectPlacementLookAndFeelSettingsView.Read(reader);
        
        return new(__objectPlacementLookAndFeelSettingsView);
    }
}

/* $ObjectEraserLookAndFeelSettingsView (6 fields) */
public record class ObjectEraserLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectEraserLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectEraseInspectorGUI (1 fields) */
public record class ObjectEraseInspectorGUI(
    ObjectEraserLookAndFeelSettingsView _lookAndFeelSettingsView /* NeedsAlign */)
{
    public static ObjectEraseInspectorGUI Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _lookAndFeelSettingsView */
        ObjectEraserLookAndFeelSettingsView __lookAndFeelSettingsView = ObjectEraserLookAndFeelSettingsView.Read(reader);
        
        return new(__lookAndFeelSettingsView);
    }
}

/* $ObjectSnappingLookAndFeelSettingsView (6 fields) */
public record class ObjectSnappingLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSnappingLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectSnappingInspectorGUI (1 fields) */
public record class ObjectSnappingInspectorGUI(
    ObjectSnappingLookAndFeelSettingsView _objectSnappingLookAndFeelSettingsView /* NeedsAlign */)
{
    public static ObjectSnappingInspectorGUI Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _objectSnappingLookAndFeelSettingsView */
        ObjectSnappingLookAndFeelSettingsView __objectSnappingLookAndFeelSettingsView = ObjectSnappingLookAndFeelSettingsView.Read(reader);
        
        return new(__objectSnappingLookAndFeelSettingsView);
    }
}

/* $ObjectSelectionTransformGizmoSelectionToolbar (6 fields) */
public record class ObjectSelectionTransformGizmoSelectionToolbar(
    AsciiString[] _normalStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _activeStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _buttonTooltips /* NeedsAlign */,
    float _buttonScale /* NeedsAlign */,
    byte _allowActiveStateForButtons /* None */,
    byte _useBoxStyleForButtons /* NeedsAlign */)
{
    public static ObjectSelectionTransformGizmoSelectionToolbar Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] __normalStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] __activeStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        AsciiString[] __buttonTooltips = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonScale */
        float __buttonScale = reader.ReadF32();
        byte __allowActiveStateForButtons = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        byte __useBoxStyleForButtons = reader.ReadU8();
        
        return new(__normalStateButtonTexturePaths,
            __activeStateButtonTexturePaths,
            __buttonTooltips,
            __buttonScale,
            __allowActiveStateForButtons,
            __useBoxStyleForButtons);
    }
}

/* $ObjectSelectionActionToolbar (6 fields) */
public record class ObjectSelectionActionToolbar(
    AsciiString[] _normalStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _activeStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _buttonTooltips /* NeedsAlign */,
    float _buttonScale /* NeedsAlign */,
    byte _allowActiveStateForButtons /* None */,
    byte _useBoxStyleForButtons /* NeedsAlign */)
{
    public static ObjectSelectionActionToolbar Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] __normalStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] __activeStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        AsciiString[] __buttonTooltips = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonScale */
        float __buttonScale = reader.ReadF32();
        byte __allowActiveStateForButtons = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        byte __useBoxStyleForButtons = reader.ReadU8();
        
        return new(__normalStateButtonTexturePaths,
            __activeStateButtonTexturePaths,
            __buttonTooltips,
            __buttonScale,
            __allowActiveStateForButtons,
            __useBoxStyleForButtons);
    }
}

/* $ObjectSelectionActionsView (7 fields) */
public record class ObjectSelectionActionsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<ObjectSelectionActionsViewData> _viewData /* NeedsAlign */)
{
    public static ObjectSelectionActionsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<ObjectSelectionActionsViewData> __viewData = PPtr<ObjectSelectionActionsViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $ObjectSelectionLookAndFeelSettingsView (6 fields) */
public record class ObjectSelectionLookAndFeelSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSelectionLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectSelectionInspectorGUI (4 fields) */
public record class ObjectSelectionInspectorGUI(
    ObjectSelectionTransformGizmoSelectionToolbar _objectSelectionTransformGizmoSelectionToolbar /* NeedsAlign */,
    ObjectSelectionActionToolbar _objectSelectionActionsToolbar /* NeedsAlign */,
    ObjectSelectionActionsView _objectSelectionActionsView /* NeedsAlign */,
    ObjectSelectionLookAndFeelSettingsView _lookAndFeelSettingsView /* NeedsAlign */)
{
    public static ObjectSelectionInspectorGUI Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _objectSelectionTransformGizmoSelectionToolbar */
        ObjectSelectionTransformGizmoSelectionToolbar __objectSelectionTransformGizmoSelectionToolbar = ObjectSelectionTransformGizmoSelectionToolbar.Read(reader);
        reader.AlignTo(4); /* _objectSelectionActionsToolbar */
        ObjectSelectionActionToolbar __objectSelectionActionsToolbar = ObjectSelectionActionToolbar.Read(reader);
        reader.AlignTo(4); /* _objectSelectionActionsView */
        ObjectSelectionActionsView __objectSelectionActionsView = ObjectSelectionActionsView.Read(reader);
        reader.AlignTo(4); /* _lookAndFeelSettingsView */
        ObjectSelectionLookAndFeelSettingsView __lookAndFeelSettingsView = ObjectSelectionLookAndFeelSettingsView.Read(reader);
        
        return new(__objectSelectionTransformGizmoSelectionToolbar,
            __objectSelectionActionsToolbar,
            __objectSelectionActionsView,
            __lookAndFeelSettingsView);
    }
}

/* $ExposedProperty (1 fields) */
public record class ExposedProperty(
    AsciiString m_Name /* NeedsAlign */)
{
    public static ExposedProperty Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Name */
        AsciiString _m_Name = BuiltInString.Read(reader);
        
        return new(_m_Name);
    }
}

/* $DecorPaintObjectPlacementSettingsView (6 fields) */
public record class DecorPaintObjectPlacementSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static DecorPaintObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $CutsceneReference (1 fields) */
public record class CutsceneReference(
    AsciiString guid /* None */)
{
    public static CutsceneReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $NextWaypointEntry (2 fields) */
public record class NextWaypointEntry(
    PPtr<RoamingWaypointView> Waypoint /* None */,
    float m_Weight /* None */)
{
    public static NextWaypointEntry Read(EndianBinaryReader reader)
    {
        PPtr<RoamingWaypointView> _Waypoint = PPtr<RoamingWaypointView>.Read(reader);
        float _m_Weight = reader.ReadF32();
        
        return new(_Waypoint,
            _m_Weight);
    }
}

/* $SelectionObjectGroupSettings (2 fields) */
public record class SelectionObjectGroupSettings(
    byte _attachToObjectGroup /* None */,
    PPtr<ObjectGroup> _destinationGroup /* NeedsAlign */)
{
    public static SelectionObjectGroupSettings Read(EndianBinaryReader reader)
    {
        byte __attachToObjectGroup = reader.ReadU8();
        reader.AlignTo(4); /* _destinationGroup */
        PPtr<ObjectGroup> __destinationGroup = PPtr<ObjectGroup>.Read(reader);
        
        return new(__attachToObjectGroup,
            __destinationGroup);
    }
}

/* $SelectionObject2ObjectSnapSettings (2 fields) */
public readonly record struct SelectionObject2ObjectSnapSettings(
    float _snapEps /* NeedsAlign */,
    byte _canHoverObjects /* None */)
{
    public static SelectionObject2ObjectSnapSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _snapEps */
        float __snapEps = reader.ReadF32();
        byte __canHoverObjects = reader.ReadU8();
        
        return new(__snapEps,
            __canHoverObjects);
    }
}

/* $ObjectSelectionSettingsView (6 fields) */
public record class ObjectSelectionSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSelectionSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $Bone (5 fields) */
public record class Bone(
    AsciiString Name /* None */,
    Vector3f Scale /* NeedsAlign */,
    Vector3f Offset /* None */,
    byte ApplyOffset /* None */,
    PPtr<EquipmentEntity>[] IgnoreIfCharacterContainsEE /* NeedsAlign */)
{
    public static Bone Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Scale */
        Vector3f _Scale = Vector3f.Read(reader);
        Vector3f _Offset = Vector3f.Read(reader);
        byte _ApplyOffset = reader.ReadU8();
        reader.AlignTo(4); /* IgnoreIfCharacterContainsEE */
        PPtr<EquipmentEntity>[] _IgnoreIfCharacterContainsEE = BuiltInArray<PPtr<EquipmentEntity>>.Read(reader);
        
        return new(_Name,
            _Scale,
            _Offset,
            _ApplyOffset,
            _IgnoreIfCharacterContainsEE);
    }
}

/* $RampMaskDescription (4 fields) */
public record class RampMaskDescription(
    PPtr<Texture2D> PrimaryMask /* NeedsAlign */,
    PPtr<Texture2D> PrimaryRamp /* None */,
    PPtr<Texture2D> SecondaryMask /* None */,
    PPtr<Texture2D> SecondaryRamp /* None */)
{
    public static RampMaskDescription Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* PrimaryMask */
        PPtr<Texture2D> _PrimaryMask = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _PrimaryRamp = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _SecondaryMask = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _SecondaryRamp = PPtr<Texture2D>.Read(reader);
        
        return new(_PrimaryMask,
            _PrimaryRamp,
            _SecondaryMask,
            _SecondaryRamp);
    }
}

/* $CharacterTextureDescription (18 fields) */
public record class CharacterTextureDescription(
    PPtr<Texture2D> ActiveTexture /* None */,
    PPtr<Texture2D> DiffuseTexture /* None */,
    PPtr<Texture2D> NormalTexture /* None */,
    PPtr<Texture2D> MaskTexture /* None */,
    PPtr<Texture2D> RampShadowTexture /* None */,
    PPtr<Texture2D> DefaultMask1 /* None */,
    PPtr<Texture2D> DefaultMask2 /* None */,
    byte DiffuseActive /* None */,
    byte NormalActive /* NeedsAlign */,
    byte MaskActive /* NeedsAlign */,
    byte RampShadowActive /* NeedsAlign */,
    byte UseRamp1Mask /* NeedsAlign */,
    byte UseRamp2Mask /* NeedsAlign */,
    byte UseDefaultMask1 /* NeedsAlign */,
    byte UseDefaultMask2 /* NeedsAlign */,
    byte UseShadowMask /* NeedsAlign */,
    RampMaskDescription Ramps /* NeedsAlign */,
    int Channel /* None */)
{
    public static CharacterTextureDescription Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> _ActiveTexture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _DiffuseTexture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _NormalTexture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _MaskTexture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _RampShadowTexture = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _DefaultMask1 = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> _DefaultMask2 = PPtr<Texture2D>.Read(reader);
        byte _DiffuseActive = reader.ReadU8();
        reader.AlignTo(4); /* NormalActive */
        byte _NormalActive = reader.ReadU8();
        reader.AlignTo(4); /* MaskActive */
        byte _MaskActive = reader.ReadU8();
        reader.AlignTo(4); /* RampShadowActive */
        byte _RampShadowActive = reader.ReadU8();
        reader.AlignTo(4); /* UseRamp1Mask */
        byte _UseRamp1Mask = reader.ReadU8();
        reader.AlignTo(4); /* UseRamp2Mask */
        byte _UseRamp2Mask = reader.ReadU8();
        reader.AlignTo(4); /* UseDefaultMask1 */
        byte _UseDefaultMask1 = reader.ReadU8();
        reader.AlignTo(4); /* UseDefaultMask2 */
        byte _UseDefaultMask2 = reader.ReadU8();
        reader.AlignTo(4); /* UseShadowMask */
        byte _UseShadowMask = reader.ReadU8();
        reader.AlignTo(4); /* Ramps */
        RampMaskDescription _Ramps = RampMaskDescription.Read(reader);
        int _Channel = reader.ReadS32();
        
        return new(_ActiveTexture,
            _DiffuseTexture,
            _NormalTexture,
            _MaskTexture,
            _RampShadowTexture,
            _DefaultMask1,
            _DefaultMask2,
            _DiffuseActive,
            _NormalActive,
            _MaskActive,
            _RampShadowActive,
            _UseRamp1Mask,
            _UseRamp2Mask,
            _UseDefaultMask1,
            _UseDefaultMask2,
            _UseShadowMask,
            _Ramps,
            _Channel);
    }
}

/* $BodyPart (4 fields) */
public record class BodyPart(
    long m_Type /* None */,
    PPtr<GameObject> RendererPrefab /* None */,
    PPtr<Material> Material /* None */,
    CharacterTextureDescription[] Textures /* None */)
{
    public static BodyPart Read(EndianBinaryReader reader)
    {
        long _m_Type = reader.ReadS64();
        PPtr<GameObject> _RendererPrefab = PPtr<GameObject>.Read(reader);
        PPtr<Material> _Material = PPtr<Material>.Read(reader);
        CharacterTextureDescription[] _Textures = BuiltInArray<CharacterTextureDescription>.Read(reader);
        
        return new(_m_Type,
            _RendererPrefab,
            _Material,
            _Textures);
    }
}

/* $OutfitPart (12 fields) */
public record class OutfitPart(
    PPtr<GameObject> m_Prefab /* None */,
    PPtr<Material> m_Material /* None */,
    PPtr<Material> tempMaterial /* None */,
    Vector3f m_Position /* None */,
    Vector3f m_Rotation /* None */,
    Vector3f m_Scale /* None */,
    PPtr<Texture2D> ColorMask /* None */,
    AsciiString m_BoneName /* None */,
    byte m_StaysInPeacefulMode /* NeedsAlign */,
    byte m_OnlyInDollRoom /* NeedsAlign */,
    int m_Special /* NeedsAlign */,
    long OutfitBodyPart /* None */)
{
    public static OutfitPart Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _m_Prefab = PPtr<GameObject>.Read(reader);
        PPtr<Material> _m_Material = PPtr<Material>.Read(reader);
        PPtr<Material> _tempMaterial = PPtr<Material>.Read(reader);
        Vector3f _m_Position = Vector3f.Read(reader);
        Vector3f _m_Rotation = Vector3f.Read(reader);
        Vector3f _m_Scale = Vector3f.Read(reader);
        PPtr<Texture2D> _ColorMask = PPtr<Texture2D>.Read(reader);
        AsciiString _m_BoneName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StaysInPeacefulMode */
        byte _m_StaysInPeacefulMode = reader.ReadU8();
        reader.AlignTo(4); /* m_OnlyInDollRoom */
        byte _m_OnlyInDollRoom = reader.ReadU8();
        reader.AlignTo(4); /* m_Special */
        int _m_Special = reader.ReadS32();
        long _OutfitBodyPart = reader.ReadS64();
        
        return new(_m_Prefab,
            _m_Material,
            _tempMaterial,
            _m_Position,
            _m_Rotation,
            _m_Scale,
            _ColorMask,
            _m_BoneName,
            _m_StaysInPeacefulMode,
            _m_OnlyInDollRoom,
            _m_Special,
            _OutfitBodyPart);
    }
}

/* $int2_storage (2 fields) */
public readonly record struct int2_storage(
    int x /* None */,
    int y /* None */)
{
    public static int2_storage Read(EndianBinaryReader reader)
    {
        int _x = reader.ReadS32();
        int _y = reader.ReadS32();
        
        return new(_x,
            _y);
    }
}

/* $Grounding (18 fields) */
public record class Grounding(
    BitField layers /* None */,
    float maxStep /* None */,
    float heightOffset /* None */,
    float footSpeed /* None */,
    float footRadius /* None */,
    float footCenterOffset /* None */,
    float prediction /* None */,
    float footRotationWeight /* None */,
    float footRotationSpeed /* None */,
    float maxFootRotationAngle /* None */,
    byte rotateSolver /* None */,
    float pelvisSpeed /* NeedsAlign */,
    float pelvisDamper /* None */,
    float lowerPelvisWeight /* None */,
    float liftPelvisWeight /* None */,
    float rootSphereCastRadius /* None */,
    byte overstepFallsDown /* None */,
    int quality /* NeedsAlign */)
{
    public static Grounding Read(EndianBinaryReader reader)
    {
        BitField _layers = BitField.Read(reader);
        float _maxStep = reader.ReadF32();
        float _heightOffset = reader.ReadF32();
        float _footSpeed = reader.ReadF32();
        float _footRadius = reader.ReadF32();
        float _footCenterOffset = reader.ReadF32();
        float _prediction = reader.ReadF32();
        float _footRotationWeight = reader.ReadF32();
        float _footRotationSpeed = reader.ReadF32();
        float _maxFootRotationAngle = reader.ReadF32();
        byte _rotateSolver = reader.ReadU8();
        reader.AlignTo(4); /* pelvisSpeed */
        float _pelvisSpeed = reader.ReadF32();
        float _pelvisDamper = reader.ReadF32();
        float _lowerPelvisWeight = reader.ReadF32();
        float _liftPelvisWeight = reader.ReadF32();
        float _rootSphereCastRadius = reader.ReadF32();
        byte _overstepFallsDown = reader.ReadU8();
        reader.AlignTo(4); /* quality */
        int _quality = reader.ReadS32();
        
        return new(_layers,
            _maxStep,
            _heightOffset,
            _footSpeed,
            _footRadius,
            _footCenterOffset,
            _prediction,
            _footRotationWeight,
            _footRotationSpeed,
            _maxFootRotationAngle,
            _rotateSolver,
            _pelvisSpeed,
            _pelvisDamper,
            _lowerPelvisWeight,
            _liftPelvisWeight,
            _rootSphereCastRadius,
            _overstepFallsDown,
            _quality);
    }
}

/* $ColorBlock (7 fields) */
public record class ColorBlock(
    ColorRGBA m_NormalColor /* None */,
    ColorRGBA m_HighlightedColor /* None */,
    ColorRGBA m_PressedColor /* None */,
    ColorRGBA m_SelectedColor /* None */,
    ColorRGBA m_DisabledColor /* None */,
    float m_ColorMultiplier /* None */,
    float m_FadeDuration /* None */)
{
    public static ColorBlock Read(EndianBinaryReader reader)
    {
        ColorRGBA _m_NormalColor = ColorRGBA.Read(reader);
        ColorRGBA _m_HighlightedColor = ColorRGBA.Read(reader);
        ColorRGBA _m_PressedColor = ColorRGBA.Read(reader);
        ColorRGBA _m_SelectedColor = ColorRGBA.Read(reader);
        ColorRGBA _m_DisabledColor = ColorRGBA.Read(reader);
        float _m_ColorMultiplier = reader.ReadF32();
        float _m_FadeDuration = reader.ReadF32();
        
        return new(_m_NormalColor,
            _m_HighlightedColor,
            _m_PressedColor,
            _m_SelectedColor,
            _m_DisabledColor,
            _m_ColorMultiplier,
            _m_FadeDuration);
    }
}

/* $SpriteState (4 fields) */
public record class SpriteState(
    PPtr<Sprite> m_HighlightedSprite /* None */,
    PPtr<Sprite> m_PressedSprite /* None */,
    PPtr<Sprite> m_SelectedSprite /* None */,
    PPtr<Sprite> m_DisabledSprite /* None */)
{
    public static SpriteState Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> _m_HighlightedSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_PressedSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_SelectedSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_DisabledSprite = PPtr<Sprite>.Read(reader);
        
        return new(_m_HighlightedSprite,
            _m_PressedSprite,
            _m_SelectedSprite,
            _m_DisabledSprite);
    }
}

/* $OwlcatSelectableActiveBlock (5 fields) */
public readonly record struct OwlcatSelectableActiveBlock(
    byte m_NormalState /* None */,
    byte m_HighlightedState /* NeedsAlign */,
    byte m_FocusedState /* NeedsAlign */,
    byte m_PressedState /* NeedsAlign */,
    byte m_DisabledState /* NeedsAlign */)
{
    public static OwlcatSelectableActiveBlock Read(EndianBinaryReader reader)
    {
        byte _m_NormalState = reader.ReadU8();
        reader.AlignTo(4); /* m_HighlightedState */
        byte _m_HighlightedState = reader.ReadU8();
        reader.AlignTo(4); /* m_FocusedState */
        byte _m_FocusedState = reader.ReadU8();
        reader.AlignTo(4); /* m_PressedState */
        byte _m_PressedState = reader.ReadU8();
        reader.AlignTo(4); /* m_DisabledState */
        byte _m_DisabledState = reader.ReadU8();
        
        return new(_m_NormalState,
            _m_HighlightedState,
            _m_FocusedState,
            _m_PressedState,
            _m_DisabledState);
    }
}

/* $OwlcatSelectableCanvasGroupBlock (6 fields) */
public readonly record struct OwlcatSelectableCanvasGroupBlock(
    float m_NormalState /* NeedsAlign */,
    float m_HighlightedState /* None */,
    float m_FocusedState /* None */,
    float m_PressedState /* None */,
    float m_DisabledState /* None */,
    float m_FadeDuration /* None */)
{
    public static OwlcatSelectableCanvasGroupBlock Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_NormalState */
        float _m_NormalState = reader.ReadF32();
        float _m_HighlightedState = reader.ReadF32();
        float _m_FocusedState = reader.ReadF32();
        float _m_PressedState = reader.ReadF32();
        float _m_DisabledState = reader.ReadF32();
        float _m_FadeDuration = reader.ReadF32();
        
        return new(_m_NormalState,
            _m_HighlightedState,
            _m_FocusedState,
            _m_PressedState,
            _m_DisabledState,
            _m_FadeDuration);
    }
}

/* $OwlcatSelectableSpriteSwapBlock (5 fields) */
public record class OwlcatSelectableSpriteSwapBlock(
    PPtr<Sprite> m_NormalSprite /* None */,
    PPtr<Sprite> m_HighlightedSprite /* None */,
    PPtr<Sprite> m_PressedSprite /* None */,
    PPtr<Sprite> m_FocusedSprite /* None */,
    PPtr<Sprite> m_DisabledSprite /* None */)
{
    public static OwlcatSelectableSpriteSwapBlock Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> _m_NormalSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_HighlightedSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_PressedSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_FocusedSprite = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _m_DisabledSprite = PPtr<Sprite>.Read(reader);
        
        return new(_m_NormalSprite,
            _m_HighlightedSprite,
            _m_PressedSprite,
            _m_FocusedSprite,
            _m_DisabledSprite);
    }
}

/* $OwlcatSelectableLayerPart (9 fields) */
public record class OwlcatSelectableLayerPart(
    PPtr<Graphic> m_TargetGraphic /* None */,
    PPtr<GameObject> m_TargetGameObject /* None */,
    PPtr<CanvasGroup> m_TargetCanvasGroup /* None */,
    int m_Transition /* None */,
    ColorBlock m_Colors /* None */,
    SpriteState m_SpriteState /* None */,
    OwlcatSelectableActiveBlock m_ActiveBlock /* None */,
    OwlcatSelectableCanvasGroupBlock m_CanvasGroupBlock /* NeedsAlign */,
    OwlcatSelectableSpriteSwapBlock m_SpriteSwap /* None */)
{
    public static OwlcatSelectableLayerPart Read(EndianBinaryReader reader)
    {
        PPtr<Graphic> _m_TargetGraphic = PPtr<Graphic>.Read(reader);
        PPtr<GameObject> _m_TargetGameObject = PPtr<GameObject>.Read(reader);
        PPtr<CanvasGroup> _m_TargetCanvasGroup = PPtr<CanvasGroup>.Read(reader);
        int _m_Transition = reader.ReadS32();
        ColorBlock _m_Colors = ColorBlock.Read(reader);
        SpriteState _m_SpriteState = SpriteState.Read(reader);
        OwlcatSelectableActiveBlock _m_ActiveBlock = OwlcatSelectableActiveBlock.Read(reader);
        reader.AlignTo(4); /* m_CanvasGroupBlock */
        OwlcatSelectableCanvasGroupBlock _m_CanvasGroupBlock = OwlcatSelectableCanvasGroupBlock.Read(reader);
        OwlcatSelectableSpriteSwapBlock _m_SpriteSwap = OwlcatSelectableSpriteSwapBlock.Read(reader);
        
        return new(_m_TargetGraphic,
            _m_TargetGameObject,
            _m_TargetCanvasGroup,
            _m_Transition,
            _m_Colors,
            _m_SpriteState,
            _m_ActiveBlock,
            _m_CanvasGroupBlock,
            _m_SpriteSwap);
    }
}

/* $ClickEvent (1 fields) */
public record class ClickEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static ClickEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $ButtonClickedEvent (1 fields) */
public record class ButtonClickedEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static ButtonClickedEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $AnimationEntry (5 fields) */
public record class AnimationEntry(
    PPtr<AnimationClipWrapper> LoopWrapper /* None */,
    PPtr<AnimationClipWrapper> EnterWrapper /* None */,
    PPtr<AnimationClipWrapper> ExitWrapper /* None */,
    int Style /* None */,
    byte IsOffHand /* None */)
{
    public static AnimationEntry Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> _LoopWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _EnterWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _ExitWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        int _Style = reader.ReadS32();
        byte _IsOffHand = reader.ReadU8();
        
        return new(_LoopWrapper,
            _EnterWrapper,
            _ExitWrapper,
            _Style,
            _IsOffHand);
    }
}

/* $WeaponCategoryEntry (2 fields) */
public record class WeaponCategoryEntry(
    int Category /* None */,
    LocalizedString Text /* None */)
{
    public static WeaponCategoryEntry Read(EndianBinaryReader reader)
    {
        int _Category = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Category,
            _Text);
    }
}

/* $WeaponFamilyEntry (2 fields) */
public record class WeaponFamilyEntry(
    int Family /* None */,
    LocalizedString Text /* None */)
{
    public static WeaponFamilyEntry Read(EndianBinaryReader reader)
    {
        int _Family = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Family,
            _Text);
    }
}

/* $ArmorEntry (2 fields) */
public record class ArmorEntry(
    int Proficiency /* None */,
    LocalizedString Text /* None */)
{
    public static ArmorEntry Read(EndianBinaryReader reader)
    {
        int _Proficiency = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Proficiency,
            _Text);
    }
}

/* $ArmorCategoryEntry (2 fields) */
public record class ArmorCategoryEntry(
    int Category /* None */,
    LocalizedString Text /* None */)
{
    public static ArmorCategoryEntry Read(EndianBinaryReader reader)
    {
        int _Category = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Category,
            _Text);
    }
}

/* $Offsets (2 fields) */
public record class Offsets(
    Vector3f Position /* NeedsAlign */,
    Vector3f Rotation /* None */)
{
    public static Offsets Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Position */
        Vector3f _Position = Vector3f.Read(reader);
        Vector3f _Rotation = Vector3f.Read(reader);
        
        return new(_Position,
            _Rotation);
    }
}

/* $RaceOffset (2 fields) */
public record class RaceOffset(
    int race /* None */,
    Vector3f OffsetLeftIk /* None */)
{
    public static RaceOffset Read(EndianBinaryReader reader)
    {
        int _race = reader.ReadS32();
        Vector3f _OffsetLeftIk = Vector3f.Read(reader);
        
        return new(_race,
            _OffsetLeftIk);
    }
}

/* $RaceScale (2 fields) */
public readonly record struct RaceScale(
    int race /* None */,
    float WeaponScale /* None */)
{
    public static RaceScale Read(EndianBinaryReader reader)
    {
        int _race = reader.ReadS32();
        float _WeaponScale = reader.ReadF32();
        
        return new(_race,
            _WeaponScale);
    }
}

/* $RankEntrySelectionStateSprites (2 fields) */
public record class RankEntrySelectionStateSprites(
    int FeatureGroup /* None */,
    PPtr<Sprite> Icon /* None */)
{
    public static RankEntrySelectionStateSprites Read(EndianBinaryReader reader)
    {
        int _FeatureGroup = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        
        return new(_FeatureGroup,
            _Icon);
    }
}

/* $managedReference (1 fields) */
public readonly record struct managedReference(
    long rid /* NeedsAlign */)
{
    public static managedReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* rid */
        long _rid = reader.ReadS64();
        
        return new(_rid);
    }
}

/* $Sphere (2 fields) */
public readonly record struct Sphere(
    int m_Subdivisions /* NeedsAlign */,
    byte m_Smooth /* None */)
{
    public static Sphere Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Subdivisions */
        int _m_Subdivisions = reader.ReadS32();
        byte _m_Smooth = reader.ReadU8();
        
        return new(_m_Subdivisions,
            _m_Smooth);
    }
}

/* $UIInteractionTypeSprites (4 fields) */
public record class UIInteractionTypeSprites(
    PPtr<Sprite> Main /* None */,
    PPtr<Sprite> Active /* None */,
    PPtr<Sprite> Hover /* None */,
    PPtr<Sprite> Disabled /* None */)
{
    public static UIInteractionTypeSprites Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> _Main = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _Active = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _Hover = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> _Disabled = PPtr<Sprite>.Read(reader);
        
        return new(_Main,
            _Active,
            _Hover,
            _Disabled);
    }
}

/* $Navigation (6 fields) */
public record class Navigation(
    int m_Mode /* NeedsAlign */,
    byte m_WrapAround /* None */,
    PPtr<Selectable> m_SelectOnUp /* NeedsAlign */,
    PPtr<Selectable> m_SelectOnDown /* None */,
    PPtr<Selectable> m_SelectOnLeft /* None */,
    PPtr<Selectable> m_SelectOnRight /* None */)
{
    public static Navigation Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Mode */
        int _m_Mode = reader.ReadS32();
        byte _m_WrapAround = reader.ReadU8();
        reader.AlignTo(4); /* m_SelectOnUp */
        PPtr<Selectable> _m_SelectOnUp = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> _m_SelectOnDown = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> _m_SelectOnLeft = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> _m_SelectOnRight = PPtr<Selectable>.Read(reader);
        
        return new(_m_Mode,
            _m_WrapAround,
            _m_SelectOnUp,
            _m_SelectOnDown,
            _m_SelectOnLeft,
            _m_SelectOnRight);
    }
}

/* $AnimationTriggers (5 fields) */
public record class AnimationTriggers(
    AsciiString m_NormalTrigger /* None */,
    AsciiString m_HighlightedTrigger /* NeedsAlign */,
    AsciiString m_PressedTrigger /* NeedsAlign */,
    AsciiString m_SelectedTrigger /* NeedsAlign */,
    AsciiString m_DisabledTrigger /* NeedsAlign */)
{
    public static AnimationTriggers Read(EndianBinaryReader reader)
    {
        AsciiString _m_NormalTrigger = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HighlightedTrigger */
        AsciiString _m_HighlightedTrigger = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PressedTrigger */
        AsciiString _m_PressedTrigger = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_SelectedTrigger */
        AsciiString _m_SelectedTrigger = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_DisabledTrigger */
        AsciiString _m_DisabledTrigger = BuiltInString.Read(reader);
        
        return new(_m_NormalTrigger,
            _m_HighlightedTrigger,
            _m_PressedTrigger,
            _m_SelectedTrigger,
            _m_DisabledTrigger);
    }
}

/* $SubmitEvent (1 fields) */
public record class SubmitEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static SubmitEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $SelectionEvent (1 fields) */
public record class SelectionEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static SelectionEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $TextSelectionEvent (1 fields) */
public record class TextSelectionEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static TextSelectionEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $OnChangeEvent (1 fields) */
public record class OnChangeEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static OnChangeEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $TouchScreenKeyboardEvent (1 fields) */
public record class TouchScreenKeyboardEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static TouchScreenKeyboardEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $WarningTextElement (2 fields) */
public record class WarningTextElement(
    PPtr<TextMeshProUGUI> m_Label /* NeedsAlign */,
    PPtr<CanvasGroup> m_Container /* None */)
{
    public static WarningTextElement Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Label */
        PPtr<TextMeshProUGUI> _m_Label = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<CanvasGroup> _m_Container = PPtr<CanvasGroup>.Read(reader);
        
        return new(_m_Label,
            _m_Container);
    }
}

/* $WarningTextWithCountElement (3 fields) */
public record class WarningTextWithCountElement(
    PPtr<TextMeshProUGUI> m_Label /* None */,
    PPtr<CanvasGroup> m_Container /* None */,
    PPtr<TextMeshProUGUI> m_Count /* None */)
{
    public static WarningTextWithCountElement Read(EndianBinaryReader reader)
    {
        PPtr<TextMeshProUGUI> _m_Label = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<CanvasGroup> _m_Container = PPtr<CanvasGroup>.Read(reader);
        PPtr<TextMeshProUGUI> _m_Count = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(_m_Label,
            _m_Container,
            _m_Count);
    }
}

/* $BorderSettings (3 fields) */
public readonly record struct BorderSettings(
    byte Enabled /* NeedsAlign */,
    float Width /* NeedsAlign */,
    float Offset /* None */)
{
    public static BorderSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Enabled */
        byte _Enabled = reader.ReadU8();
        reader.AlignTo(4); /* Width */
        float _Width = reader.ReadF32();
        float _Offset = reader.ReadF32();
        
        return new(_Enabled,
            _Width,
            _Offset);
    }
}

/* $BlueprintSectorMapPointReference (1 fields) */
public record class BlueprintSectorMapPointReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintSectorMapPointReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $StarSystemPrefab (5 fields) */
public record class StarSystemPrefab(
    PPtr<GameObject> ShipMarker /* None */,
    PPtr<GameObject> UnvisitedAndNoPath /* None */,
    PPtr<GameObject> Unvisited /* None */,
    PPtr<GameObject> Visited /* None */,
    PPtr<GameObject> AllActivitiesFinished /* None */)
{
    public static StarSystemPrefab Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _ShipMarker = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _UnvisitedAndNoPath = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _Unvisited = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _Visited = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _AllActivitiesFinished = PPtr<GameObject>.Read(reader);
        
        return new(_ShipMarker,
            _UnvisitedAndNoPath,
            _Unvisited,
            _Visited,
            _AllActivitiesFinished);
    }
}

/* $managedRefArrayItem (1 fields) */
public readonly record struct managedRefArrayItem(
    long rid /* None */)
{
    public static managedRefArrayItem Read(EndianBinaryReader reader)
    {
        long _rid = reader.ReadS64();
        
        return new(_rid);
    }
}

/* $AnimationClipEventAct (3 fields) */
public readonly record struct AnimationClipEventAct(
    float m_Time /* NeedsAlign */,
    byte m_IsLooped /* None */,
    byte m_IsIstant /* NeedsAlign */)
{
    public static AnimationClipEventAct Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Time */
        float _m_Time = reader.ReadF32();
        byte _m_IsLooped = reader.ReadU8();
        reader.AlignTo(4); /* m_IsIstant */
        byte _m_IsIstant = reader.ReadU8();
        
        return new(_m_Time,
            _m_IsLooped,
            _m_IsIstant);
    }
}

/* $AnimationClipEventSoundUnit (6 fields) */
public readonly record struct AnimationClipEventSoundUnit(
    float m_Time /* NeedsAlign */,
    byte m_IsLooped /* None */,
    byte m_IsIstant /* NeedsAlign */,
    int m_Type /* NeedsAlign */,
    int m_TypeForAbility /* None */,
    int m_TargetType /* None */)
{
    public static AnimationClipEventSoundUnit Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Time */
        float _m_Time = reader.ReadF32();
        byte _m_IsLooped = reader.ReadU8();
        reader.AlignTo(4); /* m_IsIstant */
        byte _m_IsIstant = reader.ReadU8();
        reader.AlignTo(4); /* m_Type */
        int _m_Type = reader.ReadS32();
        int _m_TypeForAbility = reader.ReadS32();
        int _m_TargetType = reader.ReadS32();
        
        return new(_m_Time,
            _m_IsLooped,
            _m_IsIstant,
            _m_Type,
            _m_TypeForAbility,
            _m_TargetType);
    }
}

/* $AnimationClipEventSound (6 fields) */
public record class AnimationClipEventSound(
    float m_Time /* None */,
    byte m_IsLooped /* None */,
    byte m_IsIstant /* NeedsAlign */,
    AsciiString m_Name /* NeedsAlign */,
    AsciiString m_StopName /* NeedsAlign */,
    float m_Volume /* NeedsAlign */)
{
    public static AnimationClipEventSound Read(EndianBinaryReader reader)
    {
        float _m_Time = reader.ReadF32();
        byte _m_IsLooped = reader.ReadU8();
        reader.AlignTo(4); /* m_IsIstant */
        byte _m_IsIstant = reader.ReadU8();
        reader.AlignTo(4); /* m_Name */
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StopName */
        AsciiString _m_StopName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Volume */
        float _m_Volume = reader.ReadF32();
        
        return new(_m_Time,
            _m_IsLooped,
            _m_IsIstant,
            _m_Name,
            _m_StopName,
            _m_Volume);
    }
}

/* $Vector4Parameter (2 fields) */
public record class Vector4Parameter(
    byte m_OverrideState /* NeedsAlign */,
    Vector4f m_Value /* NeedsAlign */)
{
    public static Vector4Parameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        Vector4f _m_Value = Vector4f.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $WeaponStyleStandUp (2 fields) */
public record class WeaponStyleStandUp(
    int Style /* None */,
    PPtr<AnimationClipWrapper> Wrapper /* None */)
{
    public static WeaponStyleStandUp Read(EndianBinaryReader reader)
    {
        int _Style = reader.ReadS32();
        PPtr<AnimationClipWrapper> _Wrapper = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_Style,
            _Wrapper);
    }
}

/* $float2 (2 fields) */
public readonly record struct float2(
    float x /* NeedsAlign */,
    float y /* None */)
{
    public static float2 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* x */
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        
        return new(_x,
            _y);
    }
}

/* $NoiseOctave (3 fields) */
public readonly record struct NoiseOctave(
    float Weight /* None */,
    float Scale /* None */,
    float MoveSpeed /* None */)
{
    public static NoiseOctave Read(EndianBinaryReader reader)
    {
        float _Weight = reader.ReadF32();
        float _Scale = reader.ReadF32();
        float _MoveSpeed = reader.ReadF32();
        
        return new(_Weight,
            _Scale,
            _MoveSpeed);
    }
}

/* $BlueprintAreaEnterPointReference (1 fields) */
public record class BlueprintAreaEnterPointReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintAreaEnterPointReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintAreaTransitionReference (1 fields) */
public record class BlueprintAreaTransitionReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintAreaTransitionReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintUnlockableFlagReference (1 fields) */
public record class BlueprintUnlockableFlagReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintUnlockableFlagReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintEtudeReference (1 fields) */
public record class BlueprintEtudeReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintEtudeReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $AreaTransitionSettings (14 fields) */
public record class AreaTransitionSettings(
    BlueprintAreaEnterPointReference m_AreaEnterPoint /* NeedsAlign */,
    BlueprintAreaTransitionReference m_Blueprint /* NeedsAlign */,
    BlueprintUnlockableFlagReference m_VisibilityFlag /* NeedsAlign */,
    BlueprintEtudeReference m_VisibilityEtude /* NeedsAlign */,
    int TooltipIndex /* NeedsAlign */,
    byte m_OverrideProximityDistance /* None */,
    float m_ProximityDistance /* NeedsAlign */,
    byte ReturnToNearestEnterPoint /* None */,
    byte ReturnToSpecificEnterPoint /* NeedsAlign */,
    BlueprintAreaEnterPointReference m_ReturnToEnterPoint /* NeedsAlign */,
    byte AddMapMarker /* NeedsAlign */,
    int AutoSaveMode /* NeedsAlign */,
    byte SuppressLoot /* None */,
    byte EnableInCombat /* NeedsAlign */)
{
    public static AreaTransitionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_AreaEnterPoint */
        BlueprintAreaEnterPointReference _m_AreaEnterPoint = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* m_Blueprint */
        BlueprintAreaTransitionReference _m_Blueprint = BlueprintAreaTransitionReference.Read(reader);
        reader.AlignTo(4); /* m_VisibilityFlag */
        BlueprintUnlockableFlagReference _m_VisibilityFlag = BlueprintUnlockableFlagReference.Read(reader);
        reader.AlignTo(4); /* m_VisibilityEtude */
        BlueprintEtudeReference _m_VisibilityEtude = BlueprintEtudeReference.Read(reader);
        reader.AlignTo(4); /* TooltipIndex */
        int _TooltipIndex = reader.ReadS32();
        byte _m_OverrideProximityDistance = reader.ReadU8();
        reader.AlignTo(4); /* m_ProximityDistance */
        float _m_ProximityDistance = reader.ReadF32();
        byte _ReturnToNearestEnterPoint = reader.ReadU8();
        reader.AlignTo(4); /* ReturnToSpecificEnterPoint */
        byte _ReturnToSpecificEnterPoint = reader.ReadU8();
        reader.AlignTo(4); /* m_ReturnToEnterPoint */
        BlueprintAreaEnterPointReference _m_ReturnToEnterPoint = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* AddMapMarker */
        byte _AddMapMarker = reader.ReadU8();
        reader.AlignTo(4); /* AutoSaveMode */
        int _AutoSaveMode = reader.ReadS32();
        byte _SuppressLoot = reader.ReadU8();
        reader.AlignTo(4); /* EnableInCombat */
        byte _EnableInCombat = reader.ReadU8();
        
        return new(_m_AreaEnterPoint,
            _m_Blueprint,
            _m_VisibilityFlag,
            _m_VisibilityEtude,
            _TooltipIndex,
            _m_OverrideProximityDistance,
            _m_ProximityDistance,
            _ReturnToNearestEnterPoint,
            _ReturnToSpecificEnterPoint,
            _m_ReturnToEnterPoint,
            _AddMapMarker,
            _AutoSaveMode,
            _SuppressLoot,
            _EnableInCombat);
    }
}

/* $MapObjectFxSettings (3 fields) */
public record class MapObjectFxSettings(
    PPtr<GameObject> FxPrefab /* NeedsAlign */,
    byte StartActive /* None */,
    PPtr<Transform> FxRoot /* NeedsAlign */)
{
    public static MapObjectFxSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* FxPrefab */
        PPtr<GameObject> _FxPrefab = PPtr<GameObject>.Read(reader);
        byte _StartActive = reader.ReadU8();
        reader.AlignTo(4); /* FxRoot */
        PPtr<Transform> _FxRoot = PPtr<Transform>.Read(reader);
        
        return new(_FxPrefab,
            _StartActive,
            _FxRoot);
    }
}

/* $FxBone (7 fields) */
public record class FxBone(
    AsciiString Name /* None */,
    AsciiString[] Aliases /* NeedsAlign */,
    float ParticleSize /* NeedsAlign */,
    Vector3f LocalOffset /* None */,
    byte Rotate /* None */,
    float CameraOffset /* NeedsAlign */,
    int Flags /* None */)
{
    public static FxBone Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Aliases */
        AsciiString[] _Aliases = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* ParticleSize */
        float _ParticleSize = reader.ReadF32();
        Vector3f _LocalOffset = Vector3f.Read(reader);
        byte _Rotate = reader.ReadU8();
        reader.AlignTo(4); /* CameraOffset */
        float _CameraOffset = reader.ReadF32();
        int _Flags = reader.ReadS32();
        
        return new(_Name,
            _Aliases,
            _ParticleSize,
            _LocalOffset,
            _Rotate,
            _CameraOffset,
            _Flags);
    }
}

/* $ScreenSpaceReflectionsQualityParameter (2 fields) */
public readonly record struct ScreenSpaceReflectionsQualityParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static ScreenSpaceReflectionsQualityParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ColorPrecisionParameter (2 fields) */
public readonly record struct ColorPrecisionParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static ColorPrecisionParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $TracingMethodParameter (2 fields) */
public readonly record struct TracingMethodParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static TracingMethodParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ClampedIntParameter (2 fields) */
public readonly record struct ClampedIntParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static ClampedIntParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $BoolParameter (2 fields) */
public readonly record struct BoolParameter(
    byte m_OverrideState /* NeedsAlign */,
    byte m_Value /* NeedsAlign */)
{
    public static BoolParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        byte _m_Value = reader.ReadU8();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $FloatRangeParameter (2 fields) */
public record class FloatRangeParameter(
    byte m_OverrideState /* NeedsAlign */,
    Vector2f m_Value /* NeedsAlign */)
{
    public static FloatRangeParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        Vector2f _m_Value = Vector2f.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $FloatParameter (2 fields) */
public readonly record struct FloatParameter(
    byte m_OverrideState /* NeedsAlign */,
    float m_Value /* NeedsAlign */)
{
    public static FloatParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        float _m_Value = reader.ReadF32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $VisualTransitionSettings (8 fields) */
public record class VisualTransitionSettings(
    float OldPrefabVisibilityTime /* NeedsAlign */,
    PPtr<GameObject> OldPrefabFX /* None */,
    PPtr<GameObject> NewPrefabFX /* None */,
    float ScaleTime /* None */,
    byte ScaleOldPrefab /* None */,
    AnimationCurve OldScaleCurve /* NeedsAlign */,
    byte ScaleNewPrefab /* NeedsAlign */,
    AnimationCurve NewScaleCurve /* NeedsAlign */)
{
    public static VisualTransitionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* OldPrefabVisibilityTime */
        float _OldPrefabVisibilityTime = reader.ReadF32();
        PPtr<GameObject> _OldPrefabFX = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _NewPrefabFX = PPtr<GameObject>.Read(reader);
        float _ScaleTime = reader.ReadF32();
        byte _ScaleOldPrefab = reader.ReadU8();
        reader.AlignTo(4); /* OldScaleCurve */
        AnimationCurve _OldScaleCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleNewPrefab */
        byte _ScaleNewPrefab = reader.ReadU8();
        reader.AlignTo(4); /* NewScaleCurve */
        AnimationCurve _NewScaleCurve = AnimationCurve.Read(reader);
        
        return new(_OldPrefabVisibilityTime,
            _OldPrefabFX,
            _NewPrefabFX,
            _ScaleTime,
            _ScaleOldPrefab,
            _OldScaleCurve,
            _ScaleNewPrefab,
            _NewScaleCurve);
    }
}

/* $PointMarkerRelationParams (5 fields) */
public record class PointMarkerRelationParams(
    int Relation /* None */,
    PPtr<Sprite> Icon /* None */,
    ColorRGBA IconColor /* None */,
    ColorRGBA FrameColor /* None */,
    float Scale /* None */)
{
    public static PointMarkerRelationParams Read(EndianBinaryReader reader)
    {
        int _Relation = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        ColorRGBA _IconColor = ColorRGBA.Read(reader);
        ColorRGBA _FrameColor = ColorRGBA.Read(reader);
        float _Scale = reader.ReadF32();
        
        return new(_Relation,
            _Icon,
            _IconColor,
            _FrameColor,
            _Scale);
    }
}

/* $AkGameObjListenerList (2 fields) */
public record class AkGameObjListenerList(
    PPtr<AkAudioListener>[] initialListenerList /* NeedsAlign */,
    byte useDefaultListeners /* None */)
{
    public static AkGameObjListenerList Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* initialListenerList */
        PPtr<AkAudioListener>[] _initialListenerList = BuiltInArray<PPtr<AkAudioListener>>.Read(reader);
        byte _useDefaultListeners = reader.ReadU8();
        
        return new(_initialListenerList,
            _useDefaultListeners);
    }
}

/* $AkGameObjPositionOffsetData (2 fields) */
public record class AkGameObjPositionOffsetData(
    byte KeepMe /* NeedsAlign */,
    Vector3f positionOffset /* NeedsAlign */)
{
    public static AkGameObjPositionOffsetData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* KeepMe */
        byte _KeepMe = reader.ReadU8();
        reader.AlignTo(4); /* positionOffset */
        Vector3f _positionOffset = Vector3f.Read(reader);
        
        return new(_KeepMe,
            _positionOffset);
    }
}

/* $XZGridRenderSettingsView (6 fields) */
public record class XZGridRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static XZGridRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ColonyProjectsRewardElementVisual (17 fields) */
public record class ColonyProjectsRewardElementVisual(
    int Type /* None */,
    PPtr<GameObject> Container /* None */,
    PPtr<TextMeshProUGUI> Description /* None */,
    PPtr<Image> Icon /* None */,
    byte HasAcronym /* None */,
    PPtr<TextMeshProUGUI> Acronym /* NeedsAlign */,
    byte HasCount /* None */,
    PPtr<TextMeshProUGUI> CountText /* NeedsAlign */,
    byte HasApplyToAllColonies /* None */,
    PPtr<GameObject> ApplyToAllColoniesContainer /* NeedsAlign */,
    PPtr<TextMeshProUGUI> ApplyToAllColoniesLabel /* None */,
    byte HasArrows /* None */,
    PPtr<GameObject> ArrowsContainer /* NeedsAlign */,
    PPtr<GameObject> ArrowUp /* None */,
    PPtr<GameObject> ArrowDown /* None */,
    byte HasRefill /* None */,
    PPtr<TextMeshProUGUI> RefillText /* NeedsAlign */)
{
    public static ColonyProjectsRewardElementVisual Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<GameObject> _Container = PPtr<GameObject>.Read(reader);
        PPtr<TextMeshProUGUI> _Description = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<Image> _Icon = PPtr<Image>.Read(reader);
        byte _HasAcronym = reader.ReadU8();
        reader.AlignTo(4); /* Acronym */
        PPtr<TextMeshProUGUI> _Acronym = PPtr<TextMeshProUGUI>.Read(reader);
        byte _HasCount = reader.ReadU8();
        reader.AlignTo(4); /* CountText */
        PPtr<TextMeshProUGUI> _CountText = PPtr<TextMeshProUGUI>.Read(reader);
        byte _HasApplyToAllColonies = reader.ReadU8();
        reader.AlignTo(4); /* ApplyToAllColoniesContainer */
        PPtr<GameObject> _ApplyToAllColoniesContainer = PPtr<GameObject>.Read(reader);
        PPtr<TextMeshProUGUI> _ApplyToAllColoniesLabel = PPtr<TextMeshProUGUI>.Read(reader);
        byte _HasArrows = reader.ReadU8();
        reader.AlignTo(4); /* ArrowsContainer */
        PPtr<GameObject> _ArrowsContainer = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _ArrowUp = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _ArrowDown = PPtr<GameObject>.Read(reader);
        byte _HasRefill = reader.ReadU8();
        reader.AlignTo(4); /* RefillText */
        PPtr<TextMeshProUGUI> _RefillText = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(_Type,
            _Container,
            _Description,
            _Icon,
            _HasAcronym,
            _Acronym,
            _HasCount,
            _CountText,
            _HasApplyToAllColonies,
            _ApplyToAllColoniesContainer,
            _ApplyToAllColoniesLabel,
            _HasArrows,
            _ArrowsContainer,
            _ArrowUp,
            _ArrowDown,
            _HasRefill,
            _RefillText);
    }
}

/* $ExposedReference`1 (2 fields) */
public record class ExposedReference_1(
    AsciiString exposedName /* NeedsAlign */,
    PPtr<Object> defaultValue /* NeedsAlign */)
{
    public static ExposedReference_1 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* exposedName */
        AsciiString _exposedName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* defaultValue */
        PPtr<Object> _defaultValue = PPtr<Object>.Read(reader);
        
        return new(_exposedName,
            _defaultValue);
    }
}

/* $Ramp (2 fields) */
public record class Ramp(
    byte Enabled /* None */,
    Gradient Gradient /* NeedsAlign */)
{
    public static Ramp Read(EndianBinaryReader reader)
    {
        byte _Enabled = reader.ReadU8();
        reader.AlignTo(4); /* Gradient */
        Gradient _Gradient = Gradient.Read(reader);
        
        return new(_Enabled,
            _Gradient);
    }
}

/* $FxDecalAnimationSettings (10 fields) */
public record class FxDecalAnimationSettings(
    byte IsInitialized /* None */,
    float Lifetime /* NeedsAlign */,
    AnimationCurve ScaleXZ /* None */,
    AnimationCurve ScaleX /* NeedsAlign */,
    AnimationCurve ScaleY /* NeedsAlign */,
    AnimationCurve ScaleZ /* NeedsAlign */,
    Gradient AlbedoColorOverLifetime /* NeedsAlign */,
    Gradient EmissionColorOverLifetime /* NeedsAlign */,
    AnimationCurve SubstractAlphaOverLifetime /* NeedsAlign */,
    byte LoopAnimation /* NeedsAlign */)
{
    public static FxDecalAnimationSettings Read(EndianBinaryReader reader)
    {
        byte _IsInitialized = reader.ReadU8();
        reader.AlignTo(4); /* Lifetime */
        float _Lifetime = reader.ReadF32();
        AnimationCurve _ScaleXZ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleX */
        AnimationCurve _ScaleX = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleY */
        AnimationCurve _ScaleY = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleZ */
        AnimationCurve _ScaleZ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* AlbedoColorOverLifetime */
        Gradient _AlbedoColorOverLifetime = Gradient.Read(reader);
        reader.AlignTo(4); /* EmissionColorOverLifetime */
        Gradient _EmissionColorOverLifetime = Gradient.Read(reader);
        reader.AlignTo(4); /* SubstractAlphaOverLifetime */
        AnimationCurve _SubstractAlphaOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LoopAnimation */
        byte _LoopAnimation = reader.ReadU8();
        
        return new(_IsInitialized,
            _Lifetime,
            _ScaleXZ,
            _ScaleX,
            _ScaleY,
            _ScaleZ,
            _AlbedoColorOverLifetime,
            _EmissionColorOverLifetime,
            _SubstractAlphaOverLifetime,
            _LoopAnimation);
    }
}

/* $OptionData (2 fields) */
public record class OptionData(
    AsciiString m_Text /* None */,
    PPtr<Sprite> m_Image /* NeedsAlign */)
{
    public static OptionData Read(EndianBinaryReader reader)
    {
        AsciiString _m_Text = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Image */
        PPtr<Sprite> _m_Image = PPtr<Sprite>.Read(reader);
        
        return new(_m_Text,
            _m_Image);
    }
}

/* $OptionDataList (1 fields) */
public record class OptionDataList(
    OptionData[] m_Options /* None */)
{
    public static OptionDataList Read(EndianBinaryReader reader)
    {
        OptionData[] _m_Options = BuiltInArray<OptionData>.Read(reader);
        
        return new(_m_Options);
    }
}

/* $DropdownEvent (1 fields) */
public record class DropdownEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static DropdownEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $TonemappingModeParameter (2 fields) */
public readonly record struct TonemappingModeParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static TonemappingModeParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ScaleCurve (3 fields) */
public record class ScaleCurve(
    Vector2f m_KeysTime /* None */,
    float m_Value0 /* None */,
    float m_Value1 /* None */)
{
    public static ScaleCurve Read(EndianBinaryReader reader)
    {
        Vector2f _m_KeysTime = Vector2f.Read(reader);
        float _m_Value0 = reader.ReadF32();
        float _m_Value1 = reader.ReadF32();
        
        return new(_m_KeysTime,
            _m_Value0,
            _m_Value1);
    }
}

/* $EmitterSettings (13 fields) */
public record class EmitterSettings(
    float Delay /* NeedsAlign */,
    float Duration /* None */,
    float RateOverTime /* None */,
    float RateOverDistance /* None */,
    Vector2f Lifetime /* None */,
    Vector2f Size /* None */,
    float RandomizePositionRadius /* None */,
    Vector2f RandomizeRotation /* None */,
    float RadialWeight /* None */,
    Vector2f InOutBalance /* None */,
    Vector2f FrequencyScale /* None */,
    float RandomizePhaseOffset /* None */,
    ScaleCurve ScaleCurve /* None */)
{
    public static EmitterSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Delay */
        float _Delay = reader.ReadF32();
        float _Duration = reader.ReadF32();
        float _RateOverTime = reader.ReadF32();
        float _RateOverDistance = reader.ReadF32();
        Vector2f _Lifetime = Vector2f.Read(reader);
        Vector2f _Size = Vector2f.Read(reader);
        float _RandomizePositionRadius = reader.ReadF32();
        Vector2f _RandomizeRotation = Vector2f.Read(reader);
        float _RadialWeight = reader.ReadF32();
        Vector2f _InOutBalance = Vector2f.Read(reader);
        Vector2f _FrequencyScale = Vector2f.Read(reader);
        float _RandomizePhaseOffset = reader.ReadF32();
        ScaleCurve _ScaleCurve = ScaleCurve.Read(reader);
        
        return new(_Delay,
            _Duration,
            _RateOverTime,
            _RateOverDistance,
            _Lifetime,
            _Size,
            _RandomizePositionRadius,
            _RandomizeRotation,
            _RadialWeight,
            _InOutBalance,
            _FrequencyScale,
            _RandomizePhaseOffset,
            _ScaleCurve);
    }
}

/* $ColorTextString (2 fields) */
public record class ColorTextString(
    LocalizedString String /* None */,
    ColorRGBA Color /* NeedsAlign */)
{
    public static ColorTextString Read(EndianBinaryReader reader)
    {
        LocalizedString _String = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        
        return new(_String,
            _Color);
    }
}

/* $GameLogMessage (4 fields) */
public record class GameLogMessage(
    ColorRGBA Color /* NeedsAlign */,
    int Icon /* None */,
    LocalizedString Message /* None */,
    LocalizedString Tooltip /* NeedsAlign */)
{
    public static GameLogMessage Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        int _Icon = reader.ReadS32();
        LocalizedString _Message = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tooltip */
        LocalizedString _Tooltip = LocalizedString.Read(reader);
        
        return new(_Color,
            _Icon,
            _Message,
            _Tooltip);
    }
}

/* $TooltipBrickAttackResultStrings (8 fields) */
public record class TooltipBrickAttackResultStrings(
    LocalizedString AttackResultUnknown /* NeedsAlign */,
    LocalizedString AttackResultHit /* NeedsAlign */,
    LocalizedString AttackResultCoverHit /* NeedsAlign */,
    LocalizedString AttackResultMiss /* NeedsAlign */,
    LocalizedString AttackResultDodge /* NeedsAlign */,
    LocalizedString AttackResultRighteousFury /* NeedsAlign */,
    LocalizedString AttackResultParried /* NeedsAlign */,
    LocalizedString AttackResultDodgeParried /* NeedsAlign */)
{
    public static TooltipBrickAttackResultStrings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AttackResultUnknown */
        LocalizedString _AttackResultUnknown = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultHit */
        LocalizedString _AttackResultHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultCoverHit */
        LocalizedString _AttackResultCoverHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultMiss */
        LocalizedString _AttackResultMiss = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultDodge */
        LocalizedString _AttackResultDodge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultRighteousFury */
        LocalizedString _AttackResultRighteousFury = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultParried */
        LocalizedString _AttackResultParried = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultDodgeParried */
        LocalizedString _AttackResultDodgeParried = LocalizedString.Read(reader);
        
        return new(_AttackResultUnknown,
            _AttackResultHit,
            _AttackResultCoverHit,
            _AttackResultMiss,
            _AttackResultDodge,
            _AttackResultRighteousFury,
            _AttackResultParried,
            _AttackResultDodgeParried);
    }
}

/* $TooltipBrickStrings (79 fields) */
public record class TooltipBrickStrings(
    LocalizedString TriggersOverpenetration /* NeedsAlign */,
    LocalizedString TriggersPush /* NeedsAlign */,
    LocalizedString HitChance /* NeedsAlign */,
    LocalizedString HitChanceSignature /* NeedsAlign */,
    LocalizedString HitRoll /* NeedsAlign */,
    LocalizedString InitialRoll /* NeedsAlign */,
    LocalizedString CoverHit /* NeedsAlign */,
    LocalizedString Parry /* NeedsAlign */,
    LocalizedString Dodge /* NeedsAlign */,
    LocalizedString Result /* NeedsAlign */,
    LocalizedString CriticalDamageModifier /* NeedsAlign */,
    LocalizedString CriticalHit /* NeedsAlign */,
    LocalizedString Damage /* NeedsAlign */,
    LocalizedString BaseDamage /* NeedsAlign */,
    LocalizedString InitialDamage /* NeedsAlign */,
    LocalizedString AdditionalDamage /* NeedsAlign */,
    LocalizedString ValAdd /* NeedsAlign */,
    LocalizedString PctAdd /* NeedsAlign */,
    LocalizedString PctMul /* NeedsAlign */,
    LocalizedString ValAddExtra /* NeedsAlign */,
    LocalizedString PctMulExtra /* NeedsAlign */,
    LocalizedString DamageDeflection /* NeedsAlign */,
    LocalizedString Armor /* NeedsAlign */,
    LocalizedString Penetration /* NeedsAlign */,
    LocalizedString EffectiveArmour /* NeedsAlign */,
    LocalizedString IncomingDamageNullifier /* NeedsAlign */,
    LocalizedString NullifierResultSuccess /* NeedsAlign */,
    LocalizedString NullifierResultFailed /* NeedsAlign */,
    LocalizedString BaseModifier /* NeedsAlign */,
    LocalizedString DefenderWeaponSkill /* NeedsAlign */,
    LocalizedString AttackerWeaponSkill /* NeedsAlign */,
    LocalizedString WeaponSkillPenalty /* NeedsAlign */,
    LocalizedString Superiority /* NeedsAlign */,
    LocalizedString FeaturesAndEquipmentsModifiers /* NeedsAlign */,
    LocalizedString BaseMultiplier /* NeedsAlign */,
    LocalizedString MinDamage /* NeedsAlign */,
    LocalizedString MaxDamage /* NeedsAlign */,
    LocalizedString Reasons /* NeedsAlign */,
    LocalizedString MinimalAdmissibleDamageHeader /* NeedsAlign */,
    LocalizedString MinimalAdmissibleDamage /* NeedsAlign */,
    LocalizedString MinimalAdmissibleDamageReason /* NeedsAlign */,
    LocalizedString MinimalAdmissibleDamageReasonValue /* NeedsAlign */,
    LocalizedString DamageSource /* NeedsAlign */,
    LocalizedString DamageReason /* NeedsAlign */,
    LocalizedString CheckRoll /* NeedsAlign */,
    LocalizedString Success /* NeedsAlign */,
    LocalizedString Failure /* NeedsAlign */,
    LocalizedString AutoHit /* NeedsAlign */,
    LocalizedString AutoMiss /* NeedsAlign */,
    LocalizedString AutoDodge /* NeedsAlign */,
    LocalizedString AutoParry /* NeedsAlign */,
    LocalizedString AutoHitMelee /* NeedsAlign */,
    LocalizedString AutoHitDestructible /* NeedsAlign */,
    LocalizedString AutoHitScatter /* NeedsAlign */,
    LocalizedString AutoHitGrenade /* NeedsAlign */,
    LocalizedString BallisticSkillPenalty /* NeedsAlign */,
    LocalizedString DistanceFactor /* NeedsAlign */,
    LocalizedString OverpenetrationModifier /* NeedsAlign */,
    LocalizedString Overpenetration /* NeedsAlign */,
    LocalizedString ChanceBorder /* NeedsAlign */,
    LocalizedString MaxValue /* NeedsAlign */,
    LocalizedString ChanceBorderMin /* NeedsAlign */,
    LocalizedString MinValue /* NeedsAlign */,
    LocalizedString TriggeredReroll /* NeedsAlign */,
    LocalizedString ScatterAttackNoTarget /* NeedsAlign */,
    LocalizedString ScatterAttackHit /* NeedsAlign */,
    LocalizedString ScatterAttackMiss /* NeedsAlign */,
    LocalizedString Initiator /* NeedsAlign */,
    LocalizedString HealsWounds /* NeedsAlign */,
    LocalizedString SpaceHitChance /* NeedsAlign */,
    LocalizedString AutoHitAoE /* NeedsAlign */,
    LocalizedString BonusHit /* NeedsAlign */,
    LocalizedString EffectiveEvasion /* NeedsAlign */,
    LocalizedString Evasion /* NeedsAlign */,
    LocalizedString BonusDamage /* NeedsAlign */,
    LocalizedString ExtraDamage /* NeedsAlign */,
    LocalizedString Shield /* NeedsAlign */,
    LocalizedString ResultHit /* NeedsAlign */,
    LocalizedString CriticalResultHit /* NeedsAlign */)
{
    public static TooltipBrickStrings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* TriggersOverpenetration */
        LocalizedString _TriggersOverpenetration = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TriggersPush */
        LocalizedString _TriggersPush = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChance */
        LocalizedString _HitChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChanceSignature */
        LocalizedString _HitChanceSignature = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitRoll */
        LocalizedString _HitRoll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialRoll */
        LocalizedString _InitialRoll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoverHit */
        LocalizedString _CoverHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Parry */
        LocalizedString _Parry = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString _Dodge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Result */
        LocalizedString _Result = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalDamageModifier */
        LocalizedString _CriticalDamageModifier = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalHit */
        LocalizedString _CriticalHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Damage */
        LocalizedString _Damage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseDamage */
        LocalizedString _BaseDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialDamage */
        LocalizedString _InitialDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AdditionalDamage */
        LocalizedString _AdditionalDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ValAdd */
        LocalizedString _ValAdd = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PctAdd */
        LocalizedString _PctAdd = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PctMul */
        LocalizedString _PctMul = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ValAddExtra */
        LocalizedString _ValAddExtra = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PctMulExtra */
        LocalizedString _PctMulExtra = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDeflection */
        LocalizedString _DamageDeflection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armor */
        LocalizedString _Armor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Penetration */
        LocalizedString _Penetration = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectiveArmour */
        LocalizedString _EffectiveArmour = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IncomingDamageNullifier */
        LocalizedString _IncomingDamageNullifier = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NullifierResultSuccess */
        LocalizedString _NullifierResultSuccess = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NullifierResultFailed */
        LocalizedString _NullifierResultFailed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseModifier */
        LocalizedString _BaseModifier = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DefenderWeaponSkill */
        LocalizedString _DefenderWeaponSkill = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackerWeaponSkill */
        LocalizedString _AttackerWeaponSkill = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSkillPenalty */
        LocalizedString _WeaponSkillPenalty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Superiority */
        LocalizedString _Superiority = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturesAndEquipmentsModifiers */
        LocalizedString _FeaturesAndEquipmentsModifiers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseMultiplier */
        LocalizedString _BaseMultiplier = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinDamage */
        LocalizedString _MinDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxDamage */
        LocalizedString _MaxDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Reasons */
        LocalizedString _Reasons = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamageHeader */
        LocalizedString _MinimalAdmissibleDamageHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamage */
        LocalizedString _MinimalAdmissibleDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamageReason */
        LocalizedString _MinimalAdmissibleDamageReason = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamageReasonValue */
        LocalizedString _MinimalAdmissibleDamageReasonValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageSource */
        LocalizedString _DamageSource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageReason */
        LocalizedString _DamageReason = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CheckRoll */
        LocalizedString _CheckRoll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Success */
        LocalizedString _Success = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Failure */
        LocalizedString _Failure = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHit */
        LocalizedString _AutoHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoMiss */
        LocalizedString _AutoMiss = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoDodge */
        LocalizedString _AutoDodge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoParry */
        LocalizedString _AutoParry = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitMelee */
        LocalizedString _AutoHitMelee = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitDestructible */
        LocalizedString _AutoHitDestructible = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitScatter */
        LocalizedString _AutoHitScatter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitGrenade */
        LocalizedString _AutoHitGrenade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BallisticSkillPenalty */
        LocalizedString _BallisticSkillPenalty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DistanceFactor */
        LocalizedString _DistanceFactor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OverpenetrationModifier */
        LocalizedString _OverpenetrationModifier = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Overpenetration */
        LocalizedString _Overpenetration = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChanceBorder */
        LocalizedString _ChanceBorder = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxValue */
        LocalizedString _MaxValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChanceBorderMin */
        LocalizedString _ChanceBorderMin = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinValue */
        LocalizedString _MinValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TriggeredReroll */
        LocalizedString _TriggeredReroll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterAttackNoTarget */
        LocalizedString _ScatterAttackNoTarget = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterAttackHit */
        LocalizedString _ScatterAttackHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterAttackMiss */
        LocalizedString _ScatterAttackMiss = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Initiator */
        LocalizedString _Initiator = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HealsWounds */
        LocalizedString _HealsWounds = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceHitChance */
        LocalizedString _SpaceHitChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitAoE */
        LocalizedString _AutoHitAoE = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusHit */
        LocalizedString _BonusHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectiveEvasion */
        LocalizedString _EffectiveEvasion = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Evasion */
        LocalizedString _Evasion = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusDamage */
        LocalizedString _BonusDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExtraDamage */
        LocalizedString _ExtraDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Shield */
        LocalizedString _Shield = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResultHit */
        LocalizedString _ResultHit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalResultHit */
        LocalizedString _CriticalResultHit = LocalizedString.Read(reader);
        
        return new(_TriggersOverpenetration,
            _TriggersPush,
            _HitChance,
            _HitChanceSignature,
            _HitRoll,
            _InitialRoll,
            _CoverHit,
            _Parry,
            _Dodge,
            _Result,
            _CriticalDamageModifier,
            _CriticalHit,
            _Damage,
            _BaseDamage,
            _InitialDamage,
            _AdditionalDamage,
            _ValAdd,
            _PctAdd,
            _PctMul,
            _ValAddExtra,
            _PctMulExtra,
            _DamageDeflection,
            _Armor,
            _Penetration,
            _EffectiveArmour,
            _IncomingDamageNullifier,
            _NullifierResultSuccess,
            _NullifierResultFailed,
            _BaseModifier,
            _DefenderWeaponSkill,
            _AttackerWeaponSkill,
            _WeaponSkillPenalty,
            _Superiority,
            _FeaturesAndEquipmentsModifiers,
            _BaseMultiplier,
            _MinDamage,
            _MaxDamage,
            _Reasons,
            _MinimalAdmissibleDamageHeader,
            _MinimalAdmissibleDamage,
            _MinimalAdmissibleDamageReason,
            _MinimalAdmissibleDamageReasonValue,
            _DamageSource,
            _DamageReason,
            _CheckRoll,
            _Success,
            _Failure,
            _AutoHit,
            _AutoMiss,
            _AutoDodge,
            _AutoParry,
            _AutoHitMelee,
            _AutoHitDestructible,
            _AutoHitScatter,
            _AutoHitGrenade,
            _BallisticSkillPenalty,
            _DistanceFactor,
            _OverpenetrationModifier,
            _Overpenetration,
            _ChanceBorder,
            _MaxValue,
            _ChanceBorderMin,
            _MinValue,
            _TriggeredReroll,
            _ScatterAttackNoTarget,
            _ScatterAttackHit,
            _ScatterAttackMiss,
            _Initiator,
            _HealsWounds,
            _SpaceHitChance,
            _AutoHitAoE,
            _BonusHit,
            _EffectiveEvasion,
            _Evasion,
            _BonusDamage,
            _ExtraDamage,
            _Shield,
            _ResultHit,
            _CriticalResultHit);
    }
}

/* $SavingThrowMessage (5 fields) */
public record class SavingThrowMessage(
    ColorRGBA Color /* NeedsAlign */,
    int Icon /* None */,
    LocalizedString Message /* None */,
    LocalizedString Effect /* NeedsAlign */,
    LocalizedString Tooltip /* NeedsAlign */)
{
    public static SavingThrowMessage Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        int _Icon = reader.ReadS32();
        LocalizedString _Message = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Effect */
        LocalizedString _Effect = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tooltip */
        LocalizedString _Tooltip = LocalizedString.Read(reader);
        
        return new(_Color,
            _Icon,
            _Message,
            _Effect,
            _Tooltip);
    }
}

/* $DamageLogMessage (10 fields) */
public record class DamageLogMessage(
    ColorRGBA Color /* NeedsAlign */,
    LocalizedString Message /* None */,
    LocalizedString MessageFailedCheck /* NeedsAlign */,
    LocalizedString MessageUnknownSource /* NeedsAlign */,
    LocalizedString MessageCollision /* NeedsAlign */,
    LocalizedString Tooltip /* NeedsAlign */,
    LocalizedString TooltipSource /* NeedsAlign */,
    LocalizedString TooltipSneak /* NeedsAlign */,
    LocalizedString TooltipDifficulty /* NeedsAlign */,
    LocalizedString DamageImmune /* NeedsAlign */)
{
    public static DamageLogMessage Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        LocalizedString _Message = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageFailedCheck */
        LocalizedString _MessageFailedCheck = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageUnknownSource */
        LocalizedString _MessageUnknownSource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageCollision */
        LocalizedString _MessageCollision = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tooltip */
        LocalizedString _Tooltip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipSource */
        LocalizedString _TooltipSource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipSneak */
        LocalizedString _TooltipSneak = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipDifficulty */
        LocalizedString _TooltipDifficulty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageImmune */
        LocalizedString _DamageImmune = LocalizedString.Read(reader);
        
        return new(_Color,
            _Message,
            _MessageFailedCheck,
            _MessageUnknownSource,
            _MessageCollision,
            _Tooltip,
            _TooltipSource,
            _TooltipSneak,
            _TooltipDifficulty,
            _DamageImmune);
    }
}

/* $StatDamageLogMessage (5 fields) */
public record class StatDamageLogMessage(
    ColorRGBA Color /* NeedsAlign */,
    LocalizedString MessageWithSource /* None */,
    LocalizedString MessageWithUnknownSource /* NeedsAlign */,
    LocalizedString TooltipCount /* NeedsAlign */,
    LocalizedString TooltipSource /* NeedsAlign */)
{
    public static StatDamageLogMessage Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        LocalizedString _MessageWithSource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageWithUnknownSource */
        LocalizedString _MessageWithUnknownSource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipCount */
        LocalizedString _TooltipCount = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipSource */
        LocalizedString _TooltipSource = LocalizedString.Read(reader);
        
        return new(_Color,
            _MessageWithSource,
            _MessageWithUnknownSource,
            _TooltipCount,
            _TooltipSource);
    }
}

/* $HealLogMessage (3 fields) */
public record class HealLogMessage(
    ColorRGBA Color /* NeedsAlign */,
    LocalizedString HealMessage /* None */,
    LocalizedString HealSelfMessage /* NeedsAlign */)
{
    public static HealLogMessage Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        LocalizedString _HealMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HealSelfMessage */
        LocalizedString _HealSelfMessage = LocalizedString.Read(reader);
        
        return new(_Color,
            _HealMessage,
            _HealSelfMessage);
    }
}

/* $ObjectVertexSnapSessionRenderSettingsView (6 fields) */
public record class ObjectVertexSnapSessionRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectVertexSnapSessionRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $PrefabView (6 fields) */
public record class PrefabView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static PrefabView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $Prefab (10 fields) */
public record class Prefab(
    PPtr<GameObject> _unityPrefab /* None */,
    Quaternionf _initialWorldRotation /* None */,
    Vector3f _initialWorldScale /* None */,
    PPtr<PrefabInstantiationSettings> _instantiationSettings /* None */,
    PPtr<PrefabActivationSettings> _activationSettings /* None */,
    PPtr<PrefabTagAssociations> _tagAssociations /* None */,
    AsciiString _name /* None */,
    float _offsetFromGridSurface /* NeedsAlign */,
    float _offsetFromObjectSurface /* None */,
    PrefabView _view /* None */)
{
    public static Prefab Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> __unityPrefab = PPtr<GameObject>.Read(reader);
        Quaternionf __initialWorldRotation = Quaternionf.Read(reader);
        Vector3f __initialWorldScale = Vector3f.Read(reader);
        PPtr<PrefabInstantiationSettings> __instantiationSettings = PPtr<PrefabInstantiationSettings>.Read(reader);
        PPtr<PrefabActivationSettings> __activationSettings = PPtr<PrefabActivationSettings>.Read(reader);
        PPtr<PrefabTagAssociations> __tagAssociations = PPtr<PrefabTagAssociations>.Read(reader);
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _offsetFromGridSurface */
        float __offsetFromGridSurface = reader.ReadF32();
        float __offsetFromObjectSurface = reader.ReadF32();
        PrefabView __view = PrefabView.Read(reader);
        
        return new(__unityPrefab,
            __initialWorldRotation,
            __initialWorldScale,
            __instantiationSettings,
            __activationSettings,
            __tagAssociations,
            __name,
            __offsetFromGridSurface,
            __offsetFromObjectSurface,
            __view);
    }
}

/* $ObjectPlacementPathTileConnectionTypeSettingsView (6 fields) */
public record class ObjectPlacementPathTileConnectionTypeSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementPathTileConnectionTypeSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $DifficultyPreset (25 fields) */
public readonly record struct DifficultyPreset(
    int GameDifficulty /* NeedsAlign */,
    byte RespecAllowed /* None */,
    int AutoLevelUp /* NeedsAlign */,
    byte AdditionalAIBehaviors /* None */,
    int CombatEncountersCapacity /* NeedsAlign */,
    int EnemyDodgePercentModifier /* None */,
    int CoverHitBonusHalfModifier /* None */,
    int CoverHitBonusFullModifier /* None */,
    int MinPartyDamage /* None */,
    int MinPartyDamageFraction /* None */,
    int MinPartyStarshipDamage /* None */,
    int MinPartyStarshipDamageFraction /* None */,
    int PartyMomentumPercentModifier /* None */,
    int NPCAttributesBaseValuePercentModifier /* None */,
    int HardCrowdControlOnPartyMaxDurationRounds /* None */,
    int SkillCheckModifier /* None */,
    int EnemyHitPointsPercentModifier /* None */,
    int AllyResolveModifier /* None */,
    int PartyDamageDealtAfterArmorReductionPercentModifier /* None */,
    int WoundDamagePerTurnThresholdHPFraction /* None */,
    int OldWoundDelayRounds /* None */,
    int WoundStacksForTrauma /* None */,
    int MinCRScaling /* None */,
    int MaxCRScaling /* None */,
    int SpaceCombatDifficulty /* None */)
{
    public static DifficultyPreset Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* GameDifficulty */
        int _GameDifficulty = reader.ReadS32();
        byte _RespecAllowed = reader.ReadU8();
        reader.AlignTo(4); /* AutoLevelUp */
        int _AutoLevelUp = reader.ReadS32();
        byte _AdditionalAIBehaviors = reader.ReadU8();
        reader.AlignTo(4); /* CombatEncountersCapacity */
        int _CombatEncountersCapacity = reader.ReadS32();
        int _EnemyDodgePercentModifier = reader.ReadS32();
        int _CoverHitBonusHalfModifier = reader.ReadS32();
        int _CoverHitBonusFullModifier = reader.ReadS32();
        int _MinPartyDamage = reader.ReadS32();
        int _MinPartyDamageFraction = reader.ReadS32();
        int _MinPartyStarshipDamage = reader.ReadS32();
        int _MinPartyStarshipDamageFraction = reader.ReadS32();
        int _PartyMomentumPercentModifier = reader.ReadS32();
        int _NPCAttributesBaseValuePercentModifier = reader.ReadS32();
        int _HardCrowdControlOnPartyMaxDurationRounds = reader.ReadS32();
        int _SkillCheckModifier = reader.ReadS32();
        int _EnemyHitPointsPercentModifier = reader.ReadS32();
        int _AllyResolveModifier = reader.ReadS32();
        int _PartyDamageDealtAfterArmorReductionPercentModifier = reader.ReadS32();
        int _WoundDamagePerTurnThresholdHPFraction = reader.ReadS32();
        int _OldWoundDelayRounds = reader.ReadS32();
        int _WoundStacksForTrauma = reader.ReadS32();
        int _MinCRScaling = reader.ReadS32();
        int _MaxCRScaling = reader.ReadS32();
        int _SpaceCombatDifficulty = reader.ReadS32();
        
        return new(_GameDifficulty,
            _RespecAllowed,
            _AutoLevelUp,
            _AdditionalAIBehaviors,
            _CombatEncountersCapacity,
            _EnemyDodgePercentModifier,
            _CoverHitBonusHalfModifier,
            _CoverHitBonusFullModifier,
            _MinPartyDamage,
            _MinPartyDamageFraction,
            _MinPartyStarshipDamage,
            _MinPartyStarshipDamageFraction,
            _PartyMomentumPercentModifier,
            _NPCAttributesBaseValuePercentModifier,
            _HardCrowdControlOnPartyMaxDurationRounds,
            _SkillCheckModifier,
            _EnemyHitPointsPercentModifier,
            _AllyResolveModifier,
            _PartyDamageDealtAfterArmorReductionPercentModifier,
            _WoundDamagePerTurnThresholdHPFraction,
            _OldWoundDelayRounds,
            _WoundStacksForTrauma,
            _MinCRScaling,
            _MaxCRScaling,
            _SpaceCombatDifficulty);
    }
}

/* $OffsetAnimationSettings (6 fields) */
public record class OffsetAnimationSettings(
    byte Enabled /* NeedsAlign */,
    AnimationCurve OffsetX /* NeedsAlign */,
    AnimationCurve OffsetY /* NeedsAlign */,
    AnimationCurve OffsetZ /* NeedsAlign */,
    byte UseWorldRotation /* NeedsAlign */,
    AsciiString WorldRotationBone /* NeedsAlign */)
{
    public static OffsetAnimationSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Enabled */
        byte _Enabled = reader.ReadU8();
        reader.AlignTo(4); /* OffsetX */
        AnimationCurve _OffsetX = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OffsetY */
        AnimationCurve _OffsetY = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OffsetZ */
        AnimationCurve _OffsetZ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* UseWorldRotation */
        byte _UseWorldRotation = reader.ReadU8();
        reader.AlignTo(4); /* WorldRotationBone */
        AsciiString _WorldRotationBone = BuiltInString.Read(reader);
        
        return new(_Enabled,
            _OffsetX,
            _OffsetY,
            _OffsetZ,
            _UseWorldRotation,
            _WorldRotationBone);
    }
}

/* $MutableFeatureElements (1 fields) */
public record class MutableFeatureElements(
    PPtr<TextMeshProUGUI> Label /* None */)
{
    public static MutableFeatureElements Read(EndianBinaryReader reader)
    {
        PPtr<TextMeshProUGUI> _Label = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(_Label);
    }
}

/* $ShipPostTypeIcon (2 fields) */
public record class ShipPostTypeIcon(
    int Type /* None */,
    PPtr<Sprite> Icon /* None */)
{
    public static ShipPostTypeIcon Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        
        return new(_Type,
            _Icon);
    }
}

/* $CanvasTransformSettings (3 fields) */
public record class CanvasTransformSettings(
    Vector3f Rotation /* None */,
    Vector3f LocalPosition /* None */,
    Vector3f LocalScale /* None */)
{
    public static CanvasTransformSettings Read(EndianBinaryReader reader)
    {
        Vector3f _Rotation = Vector3f.Read(reader);
        Vector3f _LocalPosition = Vector3f.Read(reader);
        Vector3f _LocalScale = Vector3f.Read(reader);
        
        return new(_Rotation,
            _LocalPosition,
            _LocalScale);
    }
}

/* $UnityEvent (1 fields) */
public record class UnityEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static UnityEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $EventKeyValue (2 fields) */
public record class EventKeyValue(
    PPtr<SignalAsset>[] m_Signals /* NeedsAlign */,
    UnityEvent[] m_Events /* None */)
{
    public static EventKeyValue Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Signals */
        PPtr<SignalAsset>[] _m_Signals = BuiltInArray<PPtr<SignalAsset>>.Read(reader);
        UnityEvent[] _m_Events = BuiltInArray<UnityEvent>.Read(reader);
        
        return new(_m_Signals,
            _m_Events);
    }
}

/* $MaterialLink (1 fields) */
public record class MaterialLink(
    AsciiString AssetId /* None */)
{
    public static MaterialLink Read(EndianBinaryReader reader)
    {
        AsciiString _AssetId = BuiltInString.Read(reader);
        
        return new(_AssetId);
    }
}

/* $ObjectScaleRandomizationSettingsView (6 fields) */
public record class ObjectScaleRandomizationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectScaleRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BoneWeight (8 fields) */
public readonly record struct BoneWeight(
    float m_Weight0 /* None */,
    float m_Weight1 /* None */,
    float m_Weight2 /* None */,
    float m_Weight3 /* None */,
    int m_BoneIndex0 /* None */,
    int m_BoneIndex1 /* None */,
    int m_BoneIndex2 /* None */,
    int m_BoneIndex3 /* None */)
{
    public static BoneWeight Read(EndianBinaryReader reader)
    {
        float _m_Weight0 = reader.ReadF32();
        float _m_Weight1 = reader.ReadF32();
        float _m_Weight2 = reader.ReadF32();
        float _m_Weight3 = reader.ReadF32();
        int _m_BoneIndex0 = reader.ReadS32();
        int _m_BoneIndex1 = reader.ReadS32();
        int _m_BoneIndex2 = reader.ReadS32();
        int _m_BoneIndex3 = reader.ReadS32();
        
        return new(_m_Weight0,
            _m_Weight1,
            _m_Weight2,
            _m_Weight3,
            _m_BoneIndex0,
            _m_BoneIndex1,
            _m_BoneIndex2,
            _m_BoneIndex3);
    }
}

/* $EventRelationTypeParams (3 fields) */
public record class EventRelationTypeParams(
    int Type /* None */,
    PPtr<Sprite> Icon /* None */,
    ColorRGBA TypeColor /* None */)
{
    public static EventRelationTypeParams Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        ColorRGBA _TypeColor = ColorRGBA.Read(reader);
        
        return new(_Type,
            _Icon,
            _TypeColor);
    }
}

/* $ColorParameter (2 fields) */
public record class ColorParameter(
    byte m_OverrideState /* NeedsAlign */,
    ColorRGBA m_Value /* NeedsAlign */)
{
    public static ColorParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        ColorRGBA _m_Value = ColorRGBA.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $Vector2Parameter (2 fields) */
public record class Vector2Parameter(
    byte m_OverrideState /* NeedsAlign */,
    Vector2f m_Value /* NeedsAlign */)
{
    public static Vector2Parameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        Vector2f _m_Value = Vector2f.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ObjectPlacementBlockRenderSettingsView (6 fields) */
public record class ObjectPlacementBlockRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementBlockRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ConditionsReference (1 fields) */
public record class ConditionsReference(
    AsciiString guid /* NeedsAlign */)
{
    public static ConditionsReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $EntityReference (3 fields) */
public record class EntityReference(
    AsciiString EntityNameInEditor /* NeedsAlign */,
    AsciiString UniqueId /* NeedsAlign */,
    AsciiString SceneAssetGuid /* NeedsAlign */)
{
    public static EntityReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* EntityNameInEditor */
        AsciiString _EntityNameInEditor = BuiltInString.Read(reader);
        reader.AlignTo(4); /* UniqueId */
        AsciiString _UniqueId = BuiltInString.Read(reader);
        reader.AlignTo(4); /* SceneAssetGuid */
        AsciiString _SceneAssetGuid = BuiltInString.Read(reader);
        
        return new(_EntityNameInEditor,
            _UniqueId,
            _SceneAssetGuid);
    }
}

/* $UnitFromSpawner (2 fields) */
public record class UnitFromSpawner(
    AsciiString name /* NeedsAlign */,
    EntityReference Spawner /* NeedsAlign */)
{
    public static UnitFromSpawner Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* name */
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Spawner */
        EntityReference _Spawner = EntityReference.Read(reader);
        
        return new(_name,
            _Spawner);
    }
}

/* $PrefabCategoryCollection (2 fields) */
public record class PrefabCategoryCollection(
    PPtr<PrefabCategory>[] _namedEntities /* NeedsAlign */,
    int _indexOfMarkedEntity /* None */)
{
    public static PrefabCategoryCollection Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _namedEntities */
        PPtr<PrefabCategory>[] __namedEntities = BuiltInArray<PPtr<PrefabCategory>>.Read(reader);
        int __indexOfMarkedEntity = reader.ReadS32();
        
        return new(__namedEntities,
            __indexOfMarkedEntity);
    }
}

/* $ObjectMouseMoveAlongDirectionSettingsView (6 fields) */
public record class ObjectMouseMoveAlongDirectionSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectMouseMoveAlongDirectionSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $AstarData (5 fields) */
public record class AstarData(
    AsciiString dataString /* None */,
    byte[] upgradeData /* NeedsAlign */,
    PPtr<TextAsset> file_cachedStartup /* NeedsAlign */,
    byte[] data_cachedStartup /* None */,
    byte cacheStartup /* NeedsAlign */)
{
    public static AstarData Read(EndianBinaryReader reader)
    {
        AsciiString _dataString = BuiltInString.Read(reader);
        reader.AlignTo(4); /* upgradeData */
        byte[] _upgradeData = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* file_cachedStartup */
        PPtr<TextAsset> _file_cachedStartup = PPtr<TextAsset>.Read(reader);
        byte[] _data_cachedStartup = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* cacheStartup */
        byte _cacheStartup = reader.ReadU8();
        
        return new(_dataString,
            _upgradeData,
            _file_cachedStartup,
            _data_cachedStartup,
            _cacheStartup);
    }
}

/* $AstarColor (7 fields) */
public record class AstarColor(
    ColorRGBA _SolidColor /* None */,
    ColorRGBA _UnwalkableNode /* None */,
    ColorRGBA _BoundsHandles /* None */,
    ColorRGBA _ConnectionLowLerp /* None */,
    ColorRGBA _ConnectionHighLerp /* None */,
    ColorRGBA _MeshEdgeColor /* None */,
    ColorRGBA[] _AreaColors /* None */)
{
    public static AstarColor Read(EndianBinaryReader reader)
    {
        ColorRGBA __SolidColor = ColorRGBA.Read(reader);
        ColorRGBA __UnwalkableNode = ColorRGBA.Read(reader);
        ColorRGBA __BoundsHandles = ColorRGBA.Read(reader);
        ColorRGBA __ConnectionLowLerp = ColorRGBA.Read(reader);
        ColorRGBA __ConnectionHighLerp = ColorRGBA.Read(reader);
        ColorRGBA __MeshEdgeColor = ColorRGBA.Read(reader);
        ColorRGBA[] __AreaColors = BuiltInArray<ColorRGBA>.Read(reader);
        
        return new(__SolidColor,
            __UnwalkableNode,
            __BoundsHandles,
            __ConnectionLowLerp,
            __ConnectionHighLerp,
            __MeshEdgeColor,
            __AreaColors);
    }
}

/* $EuclideanEmbedding (4 fields) */
public record class EuclideanEmbedding(
    int mode /* None */,
    int seed /* None */,
    PPtr<Transform> pivotPointRoot /* None */,
    int spreadOutCount /* None */)
{
    public static EuclideanEmbedding Read(EndianBinaryReader reader)
    {
        int _mode = reader.ReadS32();
        int _seed = reader.ReadS32();
        PPtr<Transform> _pivotPointRoot = PPtr<Transform>.Read(reader);
        int _spreadOutCount = reader.ReadS32();
        
        return new(_mode,
            _seed,
            _pivotPointRoot,
            _spreadOutCount);
    }
}

/* $PregenCharacterNameList (3 fields) */
public record class PregenCharacterNameList(
    int Race /* None */,
    int Gender /* None */,
    LocalizedString NameList /* None */)
{
    public static PregenCharacterNameList Read(EndianBinaryReader reader)
    {
        int _Race = reader.ReadS32();
        int _Gender = reader.ReadS32();
        LocalizedString _NameList = LocalizedString.Read(reader);
        
        return new(_Race,
            _Gender,
            _NameList);
    }
}

/* $XZGridCellSizeSettingsView (8 fields) */
public record class XZGridCellSizeSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    AsciiString _xAxisName /* NeedsAlign */,
    AsciiString _zAxisName /* NeedsAlign */)
{
    public static XZGridCellSizeSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _xAxisName */
        AsciiString __xAxisName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _zAxisName */
        AsciiString __zAxisName = BuiltInString.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __xAxisName,
            __zAxisName);
    }
}

/* $UnitAnimationSettings (17 fields) */
public readonly record struct UnitAnimationSettings(
    float MovementSpeedCoeff /* None */,
    byte OverrideSlowWalk /* None */,
    float SlowWalkCoeff /* NeedsAlign */,
    byte OverrideSlowWalkNonCombat /* None */,
    float SlowWalkNonCombatCoeff /* NeedsAlign */,
    byte OverrideNormal /* None */,
    float NormalCoeff /* NeedsAlign */,
    byte OverrideNormalNonCombat /* None */,
    float NormalNonCombatCoeff /* NeedsAlign */,
    byte OverrideCharge /* None */,
    float ChargeCoeff /* NeedsAlign */,
    byte OverrideChargeNonCombat /* None */,
    float ChargeNonCombatCoeff /* NeedsAlign */,
    byte OverrideStealth /* None */,
    float StealthCoeff /* NeedsAlign */,
    byte OverrideStealthNonCombat /* None */,
    float StealthNonCombatCoeff /* NeedsAlign */)
{
    public static UnitAnimationSettings Read(EndianBinaryReader reader)
    {
        float _MovementSpeedCoeff = reader.ReadF32();
        byte _OverrideSlowWalk = reader.ReadU8();
        reader.AlignTo(4); /* SlowWalkCoeff */
        float _SlowWalkCoeff = reader.ReadF32();
        byte _OverrideSlowWalkNonCombat = reader.ReadU8();
        reader.AlignTo(4); /* SlowWalkNonCombatCoeff */
        float _SlowWalkNonCombatCoeff = reader.ReadF32();
        byte _OverrideNormal = reader.ReadU8();
        reader.AlignTo(4); /* NormalCoeff */
        float _NormalCoeff = reader.ReadF32();
        byte _OverrideNormalNonCombat = reader.ReadU8();
        reader.AlignTo(4); /* NormalNonCombatCoeff */
        float _NormalNonCombatCoeff = reader.ReadF32();
        byte _OverrideCharge = reader.ReadU8();
        reader.AlignTo(4); /* ChargeCoeff */
        float _ChargeCoeff = reader.ReadF32();
        byte _OverrideChargeNonCombat = reader.ReadU8();
        reader.AlignTo(4); /* ChargeNonCombatCoeff */
        float _ChargeNonCombatCoeff = reader.ReadF32();
        byte _OverrideStealth = reader.ReadU8();
        reader.AlignTo(4); /* StealthCoeff */
        float _StealthCoeff = reader.ReadF32();
        byte _OverrideStealthNonCombat = reader.ReadU8();
        reader.AlignTo(4); /* StealthNonCombatCoeff */
        float _StealthNonCombatCoeff = reader.ReadF32();
        
        return new(_MovementSpeedCoeff,
            _OverrideSlowWalk,
            _SlowWalkCoeff,
            _OverrideSlowWalkNonCombat,
            _SlowWalkNonCombatCoeff,
            _OverrideNormal,
            _NormalCoeff,
            _OverrideNormalNonCombat,
            _NormalNonCombatCoeff,
            _OverrideCharge,
            _ChargeCoeff,
            _OverrideChargeNonCombat,
            _ChargeNonCombatCoeff,
            _OverrideStealth,
            _StealthCoeff,
            _OverrideStealthNonCombat,
            _StealthNonCombatCoeff);
    }
}

/* $AnimationSequenceAction (3 fields) */
public record class AnimationSequenceAction(
    int UnitAnimationType /* None */,
    int UnitAnimationSpecialAttackType /* None */,
    PPtr<AnimationClipWrapper> AnimationClipWrapper /* None */)
{
    public static AnimationSequenceAction Read(EndianBinaryReader reader)
    {
        int _UnitAnimationType = reader.ReadS32();
        int _UnitAnimationSpecialAttackType = reader.ReadS32();
        PPtr<AnimationClipWrapper> _AnimationClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_UnitAnimationType,
            _UnitAnimationSpecialAttackType,
            _AnimationClipWrapper);
    }
}

/* $AnimationSequence (1 fields) */
public record class AnimationSequence(
    AnimationSequenceAction[] Actions /* None */)
{
    public static AnimationSequence Read(EndianBinaryReader reader)
    {
        AnimationSequenceAction[] _Actions = BuiltInArray<AnimationSequenceAction>.Read(reader);
        
        return new(_Actions);
    }
}

/* $DecorPaintStrokeSurface (5 fields) */
public record class DecorPaintStrokeSurface(
    byte _isValid /* NeedsAlign */,
    Vector3f _mouseCursorPickPoint /* NeedsAlign */,
    Vector3f _normal /* None */,
    int _type /* None */,
    PPtr<GameObject> _surfaceObject /* None */)
{
    public static DecorPaintStrokeSurface Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isValid */
        byte __isValid = reader.ReadU8();
        reader.AlignTo(4); /* _mouseCursorPickPoint */
        Vector3f __mouseCursorPickPoint = Vector3f.Read(reader);
        Vector3f __normal = Vector3f.Read(reader);
        int __type = reader.ReadS32();
        PPtr<GameObject> __surfaceObject = PPtr<GameObject>.Read(reader);
        
        return new(__isValid,
            __mouseCursorPickPoint,
            __normal,
            __type,
            __surfaceObject);
    }
}

/* $SingleModeDecorPaintStroke (1 fields) */
public record class SingleModeDecorPaintStroke(
    DecorPaintStrokeSurface _strokeSurface /* NeedsAlign */)
{
    public static SingleModeDecorPaintStroke Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _strokeSurface */
        DecorPaintStrokeSurface __strokeSurface = DecorPaintStrokeSurface.Read(reader);
        
        return new(__strokeSurface);
    }
}

/* $XZOrientedEllipseObjectInteractionShape (1 fields) */
public record class XZOrientedEllipseObjectInteractionShape(
    PPtr<XZOrientedEllipseShapeRenderSettings> _renderSettings /* NeedsAlign */)
{
    public static XZOrientedEllipseObjectInteractionShape Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _renderSettings */
        PPtr<XZOrientedEllipseShapeRenderSettings> __renderSettings = PPtr<XZOrientedEllipseShapeRenderSettings>.Read(reader);
        
        return new(__renderSettings);
    }
}

/* $DecorPaintObjectPlacementBrushCircle (1 fields) */
public record class DecorPaintObjectPlacementBrushCircle(
    XZOrientedEllipseObjectInteractionShape _circleShape /* NeedsAlign */)
{
    public static DecorPaintObjectPlacementBrushCircle Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _circleShape */
        XZOrientedEllipseObjectInteractionShape __circleShape = XZOrientedEllipseObjectInteractionShape.Read(reader);
        
        return new(__circleShape);
    }
}

/* $BrushModeDecorPaintStroke (2 fields) */
public record class BrushModeDecorPaintStroke(
    DecorPaintStrokeSurface _strokeSurface /* NeedsAlign */,
    DecorPaintObjectPlacementBrushCircle _brushCircle /* NeedsAlign */)
{
    public static BrushModeDecorPaintStroke Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _strokeSurface */
        DecorPaintStrokeSurface __strokeSurface = DecorPaintStrokeSurface.Read(reader);
        reader.AlignTo(4); /* _brushCircle */
        DecorPaintObjectPlacementBrushCircle __brushCircle = DecorPaintObjectPlacementBrushCircle.Read(reader);
        
        return new(__strokeSurface,
            __brushCircle);
    }
}

/* $ObjectMaskView (6 fields) */
public record class ObjectMaskView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectMaskView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectMask (3 fields) */
public record class ObjectMask(
    PPtr<ObjectLayerObjectMask> _objectLayerObjectMask /* NeedsAlign */,
    PPtr<ObjectCollectionMask> _objectCollectionMask /* None */,
    ObjectMaskView _view /* None */)
{
    public static ObjectMask Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _objectLayerObjectMask */
        PPtr<ObjectLayerObjectMask> __objectLayerObjectMask = PPtr<ObjectLayerObjectMask>.Read(reader);
        PPtr<ObjectCollectionMask> __objectCollectionMask = PPtr<ObjectCollectionMask>.Read(reader);
        ObjectMaskView __view = ObjectMaskView.Read(reader);
        
        return new(__objectLayerObjectMask,
            __objectCollectionMask,
            __view);
    }
}

/* $PrefabTagSelectionView (7 fields) */
public record class PrefabTagSelectionView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<PrefabTagSelectionViewData> _viewData /* NeedsAlign */)
{
    public static PrefabTagSelectionView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<PrefabTagSelectionViewData> __viewData = PPtr<PrefabTagSelectionViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $PrefabToCategoryDropSettingsView (8 fields) */
public record class PrefabToCategoryDropSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PrefabTagSelectionView _tagSelectionForDroppedPrefabs /* NeedsAlign */,
    PPtr<PrefabTagFilter> _prefabTagFilterForTagSelection /* NeedsAlign */)
{
    public static PrefabToCategoryDropSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _tagSelectionForDroppedPrefabs */
        PrefabTagSelectionView __tagSelectionForDroppedPrefabs = PrefabTagSelectionView.Read(reader);
        reader.AlignTo(4); /* _prefabTagFilterForTagSelection */
        PPtr<PrefabTagFilter> __prefabTagFilterForTagSelection = PPtr<PrefabTagFilter>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __tagSelectionForDroppedPrefabs,
            __prefabTagFilterForTagSelection);
    }
}

/* $EllipseShapeRenderSettingsView (6 fields) */
public record class EllipseShapeRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static EllipseShapeRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $MinFloatParameter (2 fields) */
public readonly record struct MinFloatParameter(
    byte m_OverrideState /* NeedsAlign */,
    float m_Value /* NeedsAlign */)
{
    public static MinFloatParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        float _m_Value = reader.ReadF32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ShaderPropertyParameter (3 fields) */
public record class ShaderPropertyParameter(
    byte OverrideState /* None */,
    int PassIndex /* NeedsAlign */,
    ShaderPropertyDescriptor Property /* None */)
{
    public static ShaderPropertyParameter Read(EndianBinaryReader reader)
    {
        byte _OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* PassIndex */
        int _PassIndex = reader.ReadS32();
        ShaderPropertyDescriptor _Property = ShaderPropertyDescriptor.Read(reader);
        
        return new(_OverrideState,
            _PassIndex,
            _Property);
    }
}

/* $EffectOverride (3 fields) */
public record class EffectOverride(
    byte OverrideState /* None */,
    PPtr<CustomPostProcessEffect> Effect /* NeedsAlign */,
    ShaderPropertyParameter[] Parameters /* None */)
{
    public static EffectOverride Read(EndianBinaryReader reader)
    {
        byte _OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* Effect */
        PPtr<CustomPostProcessEffect> _Effect = PPtr<CustomPostProcessEffect>.Read(reader);
        ShaderPropertyParameter[] _Parameters = BuiltInArray<ShaderPropertyParameter>.Read(reader);
        
        return new(_OverrideState,
            _Effect,
            _Parameters);
    }
}

/* $CustomPostProcessSettings (1 fields) */
public record class CustomPostProcessSettings(
    EffectOverride[] EffectOverrides /* NeedsAlign */)
{
    public static CustomPostProcessSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* EffectOverrides */
        EffectOverride[] _EffectOverrides = BuiltInArray<EffectOverride>.Read(reader);
        
        return new(_EffectOverrides);
    }
}

/* $CustomPostPocessParameter (2 fields) */
public record class CustomPostPocessParameter(
    byte m_OverrideState /* NeedsAlign */,
    CustomPostProcessSettings m_Value /* NeedsAlign */)
{
    public static CustomPostPocessParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        CustomPostProcessSettings _m_Value = CustomPostProcessSettings.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $IDEventPair (3 fields) */
public record class IDEventPair(
    int Id /* NeedsAlign */,
    managedReference Event /* None */,
    RefRegistry references /* None */)
{
    public static IDEventPair Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Id */
        int _Id = reader.ReadS32();
        managedReference _Event = managedReference.Read(reader);
        RefRegistry _references = default! /* RefRegistry_3 */;
        
        return new(_Id,
            _Event,
            _references);
    }
}

/* $RectOffset (4 fields) */
public readonly record struct RectOffset(
    int m_Left /* NeedsAlign */,
    int m_Right /* None */,
    int m_Top /* None */,
    int m_Bottom /* None */)
{
    public static RectOffset Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Left */
        int _m_Left = reader.ReadS32();
        int _m_Right = reader.ReadS32();
        int _m_Top = reader.ReadS32();
        int _m_Bottom = reader.ReadS32();
        
        return new(_m_Left,
            _m_Right,
            _m_Top,
            _m_Bottom);
    }
}

/* $FilmGrainLookupParameter (2 fields) */
public readonly record struct FilmGrainLookupParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static FilmGrainLookupParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $NoInterpTextureParameter (2 fields) */
public record class NoInterpTextureParameter(
    byte m_OverrideState /* NeedsAlign */,
    PPtr<Texture> m_Value /* NeedsAlign */)
{
    public static NoInterpTextureParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        PPtr<Texture> _m_Value = PPtr<Texture>.Read(reader);
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $BlueprintItemReference (1 fields) */
public record class BlueprintItemReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintItemReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $KeyRestrictionSettings (2 fields) */
public record class KeyRestrictionSettings(
    BlueprintItemReference m_Key /* NeedsAlign */,
    byte DontRemoveKey /* NeedsAlign */)
{
    public static KeyRestrictionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Key */
        BlueprintItemReference _m_Key = BlueprintItemReference.Read(reader);
        reader.AlignTo(4); /* DontRemoveKey */
        byte _DontRemoveKey = reader.ReadU8();
        
        return new(_m_Key,
            _DontRemoveKey);
    }
}

/* $StageSettings (4 fields) */
public record class StageSettings(
    int Type /* None */,
    PPtr<GameObject> StaticPrefab /* None */,
    PPtr<GameObject> FXOnEnter /* None */,
    AsciiString SFXOnEnter /* None */)
{
    public static StageSettings Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<GameObject> _StaticPrefab = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _FXOnEnter = PPtr<GameObject>.Read(reader);
        AsciiString _SFXOnEnter = BuiltInString.Read(reader);
        
        return new(_Type,
            _StaticPrefab,
            _FXOnEnter,
            _SFXOnEnter);
    }
}

/* $CustomAxisRotationRandomizationSettingsView (6 fields) */
public record class CustomAxisRotationRandomizationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static CustomAxisRotationRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $CustomMaterialPropertyData (2 fields) */
public record class CustomMaterialPropertyData(
    AsciiString PropertyName /* None */,
    float FadeOutValue /* NeedsAlign */)
{
    public static CustomMaterialPropertyData Read(EndianBinaryReader reader)
    {
        AsciiString _PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* FadeOutValue */
        float _FadeOutValue = reader.ReadF32();
        
        return new(_PropertyName,
            _FadeOutValue);
    }
}

/* $ObjectGroupView (6 fields) */
public record class ObjectGroupView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectGroupView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $TimelineClip (23 fields) */
public record class TimelineClip(
    int m_Version /* None */,
    double m_Start /* None */,
    double m_ClipIn /* None */,
    PPtr<Object> m_Asset /* None */,
    double m_Duration /* None */,
    double m_TimeScale /* None */,
    PPtr<TrackAsset> m_ParentTrack /* None */,
    double m_EaseInDuration /* None */,
    double m_EaseOutDuration /* None */,
    double m_BlendInDuration /* None */,
    double m_BlendOutDuration /* None */,
    AnimationCurve m_MixInCurve /* None */,
    AnimationCurve m_MixOutCurve /* NeedsAlign */,
    int m_BlendInCurveMode /* NeedsAlign */,
    int m_BlendOutCurveMode /* None */,
    AsciiString[] m_ExposedParameterNames /* None */,
    PPtr<AnimationClip> m_AnimationCurves /* NeedsAlign */,
    byte m_Recordable /* None */,
    int m_PostExtrapolationMode /* NeedsAlign */,
    int m_PreExtrapolationMode /* None */,
    double m_PostExtrapolationTime /* None */,
    double m_PreExtrapolationTime /* None */,
    AsciiString m_DisplayName /* None */)
{
    public static TimelineClip Read(EndianBinaryReader reader)
    {
        int _m_Version = reader.ReadS32();
        double _m_Start = reader.ReadF64();
        double _m_ClipIn = reader.ReadF64();
        PPtr<Object> _m_Asset = PPtr<Object>.Read(reader);
        double _m_Duration = reader.ReadF64();
        double _m_TimeScale = reader.ReadF64();
        PPtr<TrackAsset> _m_ParentTrack = PPtr<TrackAsset>.Read(reader);
        double _m_EaseInDuration = reader.ReadF64();
        double _m_EaseOutDuration = reader.ReadF64();
        double _m_BlendInDuration = reader.ReadF64();
        double _m_BlendOutDuration = reader.ReadF64();
        AnimationCurve _m_MixInCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_MixOutCurve */
        AnimationCurve _m_MixOutCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_BlendInCurveMode */
        int _m_BlendInCurveMode = reader.ReadS32();
        int _m_BlendOutCurveMode = reader.ReadS32();
        AsciiString[] _m_ExposedParameterNames = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_AnimationCurves */
        PPtr<AnimationClip> _m_AnimationCurves = PPtr<AnimationClip>.Read(reader);
        byte _m_Recordable = reader.ReadU8();
        reader.AlignTo(4); /* m_PostExtrapolationMode */
        int _m_PostExtrapolationMode = reader.ReadS32();
        int _m_PreExtrapolationMode = reader.ReadS32();
        double _m_PostExtrapolationTime = reader.ReadF64();
        double _m_PreExtrapolationTime = reader.ReadF64();
        AsciiString _m_DisplayName = BuiltInString.Read(reader);
        
        return new(_m_Version,
            _m_Start,
            _m_ClipIn,
            _m_Asset,
            _m_Duration,
            _m_TimeScale,
            _m_ParentTrack,
            _m_EaseInDuration,
            _m_EaseOutDuration,
            _m_BlendInDuration,
            _m_BlendOutDuration,
            _m_MixInCurve,
            _m_MixOutCurve,
            _m_BlendInCurveMode,
            _m_BlendOutCurveMode,
            _m_ExposedParameterNames,
            _m_AnimationCurves,
            _m_Recordable,
            _m_PostExtrapolationMode,
            _m_PreExtrapolationMode,
            _m_PostExtrapolationTime,
            _m_PreExtrapolationTime,
            _m_DisplayName);
    }
}

/* $MarkerList (1 fields) */
public record class MarkerList(
    PPtr<ScriptableObject>[] m_Objects /* NeedsAlign */)
{
    public static MarkerList Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Objects */
        PPtr<ScriptableObject>[] _m_Objects = BuiltInArray<PPtr<ScriptableObject>>.Read(reader);
        
        return new(_m_Objects);
    }
}

/* $ToggleEvent (1 fields) */
public record class ToggleEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static ToggleEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $EquipmentSlotSetting (6 fields) */
public record class EquipmentSlotSetting(
    int Slot /* None */,
    PPtr<AnimationClipWrapper> ClipWrapper /* None */,
    PPtr<AnimationClipWrapper> IdleToCombatClipWrapper /* None */,
    PPtr<AnimationClipWrapper> InCombatClipWrapper /* None */,
    PPtr<AnimationClipWrapper> CombatToIdleClipWrapper /* None */,
    PPtr<AnimationClipWrapper> HalfAnimationClipWrapper /* None */)
{
    public static EquipmentSlotSetting Read(EndianBinaryReader reader)
    {
        int _Slot = reader.ReadS32();
        PPtr<AnimationClipWrapper> _ClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _IdleToCombatClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _InCombatClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _CombatToIdleClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _HalfAnimationClipWrapper = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_Slot,
            _ClipWrapper,
            _IdleToCombatClipWrapper,
            _InCombatClipWrapper,
            _CombatToIdleClipWrapper,
            _HalfAnimationClipWrapper);
    }
}

/* $EquipmentStyleSetting (2 fields) */
public record class EquipmentStyleSetting(
    int Style /* None */,
    EquipmentSlotSetting[] m_Slots /* None */)
{
    public static EquipmentStyleSetting Read(EndianBinaryReader reader)
    {
        int _Style = reader.ReadS32();
        EquipmentSlotSetting[] _m_Slots = BuiltInArray<EquipmentSlotSetting>.Read(reader);
        
        return new(_Style,
            _m_Slots);
    }
}

/* $ObjectSelectionPrefabCreationSettingsView (6 fields) */
public record class ObjectSelectionPrefabCreationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSelectionPrefabCreationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectSelectionBoxCornerEdgesRenderModeSettingsView (6 fields) */
public record class ObjectSelectionBoxCornerEdgesRenderModeSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSelectionBoxCornerEdgesRenderModeSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectSelectionBoxCornerEdgesRenderModeSettings (2 fields) */
public record class ObjectSelectionBoxCornerEdgesRenderModeSettings(
    float _cornerEdgeLengthPercentage /* None */,
    ObjectSelectionBoxCornerEdgesRenderModeSettingsView _view /* None */)
{
    public static ObjectSelectionBoxCornerEdgesRenderModeSettings Read(EndianBinaryReader reader)
    {
        float __cornerEdgeLengthPercentage = reader.ReadF32();
        ObjectSelectionBoxCornerEdgesRenderModeSettingsView __view = ObjectSelectionBoxCornerEdgesRenderModeSettingsView.Read(reader);
        
        return new(__cornerEdgeLengthPercentage,
            __view);
    }
}

/* $ObjectSelectionBoxRenderModeSettingsView (6 fields) */
public record class ObjectSelectionBoxRenderModeSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSelectionBoxRenderModeSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $NegativeEffects (13 fields) */
public record class NegativeEffects(
    PPtr<FadeAnimator> RedBackground /* None */,
    PPtr<Image> ResourceIcon /* None */,
    PPtr<Image> ResourceSeparator /* None */,
    PPtr<TextMeshProUGUI> ResourceCount /* None */,
    PPtr<TextMeshProUGUI> ResourceCountAdditional /* None */,
    ColorRGBA RedIconColor /* None */,
    ColorRGBA RedSeparatorColor /* None */,
    ColorRGBA RedCountColor /* None */,
    ColorRGBA RedCountAdditionalColor /* None */,
    ColorRGBA NormalIconColor /* None */,
    ColorRGBA NormalSeparatorColor /* None */,
    ColorRGBA NormalCountColor /* None */,
    ColorRGBA NormalCountAdditionalColor /* None */)
{
    public static NegativeEffects Read(EndianBinaryReader reader)
    {
        PPtr<FadeAnimator> _RedBackground = PPtr<FadeAnimator>.Read(reader);
        PPtr<Image> _ResourceIcon = PPtr<Image>.Read(reader);
        PPtr<Image> _ResourceSeparator = PPtr<Image>.Read(reader);
        PPtr<TextMeshProUGUI> _ResourceCount = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<TextMeshProUGUI> _ResourceCountAdditional = PPtr<TextMeshProUGUI>.Read(reader);
        ColorRGBA _RedIconColor = ColorRGBA.Read(reader);
        ColorRGBA _RedSeparatorColor = ColorRGBA.Read(reader);
        ColorRGBA _RedCountColor = ColorRGBA.Read(reader);
        ColorRGBA _RedCountAdditionalColor = ColorRGBA.Read(reader);
        ColorRGBA _NormalIconColor = ColorRGBA.Read(reader);
        ColorRGBA _NormalSeparatorColor = ColorRGBA.Read(reader);
        ColorRGBA _NormalCountColor = ColorRGBA.Read(reader);
        ColorRGBA _NormalCountAdditionalColor = ColorRGBA.Read(reader);
        
        return new(_RedBackground,
            _ResourceIcon,
            _ResourceSeparator,
            _ResourceCount,
            _ResourceCountAdditional,
            _RedIconColor,
            _RedSeparatorColor,
            _RedCountColor,
            _RedCountAdditionalColor,
            _NormalIconColor,
            _NormalSeparatorColor,
            _NormalCountColor,
            _NormalCountAdditionalColor);
    }
}

/* $ClipSet (5 fields) */
public record class ClipSet(
    PPtr<AnimationClipWrapper> m_TraverseInHorizontal /* None */,
    PPtr<AnimationClipWrapper> m_TraverseInVertical /* None */,
    PPtr<AnimationClipWrapper> m_Traverse /* None */,
    PPtr<AnimationClipWrapper> m_TraverseOutVertical /* None */,
    PPtr<AnimationClipWrapper> m_TraverseOutHorizontal /* None */)
{
    public static ClipSet Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> _m_TraverseInHorizontal = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_TraverseInVertical = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_Traverse = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_TraverseOutVertical = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_TraverseOutHorizontal = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_m_TraverseInHorizontal,
            _m_TraverseInVertical,
            _m_Traverse,
            _m_TraverseOutVertical,
            _m_TraverseOutHorizontal);
    }
}

/* $ClipSetByHeight (5 fields) */
public record class ClipSetByHeight(
    float TraverseHeight /* None */,
    ClipSet m_UpAnimationsSet /* None */,
    ClipSet m_DownAnimationsSet /* None */,
    float m_DownVerticalInDistance /* None */,
    float m_UpVerticalOutDistance /* None */)
{
    public static ClipSetByHeight Read(EndianBinaryReader reader)
    {
        float _TraverseHeight = reader.ReadF32();
        ClipSet _m_UpAnimationsSet = ClipSet.Read(reader);
        ClipSet _m_DownAnimationsSet = ClipSet.Read(reader);
        float _m_DownVerticalInDistance = reader.ReadF32();
        float _m_UpVerticalOutDistance = reader.ReadF32();
        
        return new(_TraverseHeight,
            _m_UpAnimationsSet,
            _m_DownAnimationsSet,
            _m_DownVerticalInDistance,
            _m_UpVerticalOutDistance);
    }
}

/* $BlueprintDialogReference (1 fields) */
public record class BlueprintDialogReference(
    AsciiString guid /* None */)
{
    public static BlueprintDialogReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $InteractWithToolFXData (4 fields) */
public record class InteractWithToolFXData(
    byte DoNotShowFx /* None */,
    byte OverrideDefaultFx /* NeedsAlign */,
    PPtr<GameObject> OverrideFxPrefab /* NeedsAlign */,
    PPtr<GameObject> FxLocator /* None */)
{
    public static InteractWithToolFXData Read(EndianBinaryReader reader)
    {
        byte _DoNotShowFx = reader.ReadU8();
        reader.AlignTo(4); /* OverrideDefaultFx */
        byte _OverrideDefaultFx = reader.ReadU8();
        reader.AlignTo(4); /* OverrideFxPrefab */
        PPtr<GameObject> _OverrideFxPrefab = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _FxLocator = PPtr<GameObject>.Read(reader);
        
        return new(_DoNotShowFx,
            _OverrideDefaultFx,
            _OverrideFxPrefab,
            _FxLocator);
    }
}

/* $InteractionDoorSettings (27 fields) */
public record class InteractionDoorSettings(
    int UIType /* NeedsAlign */,
    byte NotInCombat /* None */,
    byte ShowOvertip /* NeedsAlign */,
    byte AlwaysDisabled /* NeedsAlign */,
    byte ShowHighlight /* NeedsAlign */,
    int ProximityRadius /* NeedsAlign */,
    int Type /* None */,
    int UseAnimationState /* None */,
    BlueprintDialogReference m_Dialog /* None */,
    AsciiString InteractionSound /* NeedsAlign */,
    AsciiString InteractionDisabledSound /* NeedsAlign */,
    AsciiString InteractionStopSound /* NeedsAlign */,
    PPtr<TrapObjectView> Trap /* NeedsAlign */,
    byte DoNotNeedCollider /* None */,
    byte UnlimitedInteractionsPerRound /* NeedsAlign */,
    byte OverrideActionPointsCost /* NeedsAlign */,
    int ActionPointsCost /* NeedsAlign */,
    InteractWithToolFXData InteractWithMeltaChargeFXData /* None */,
    float OvertipVerticalCorrection /* NeedsAlign */,
    PPtr<AnimationClip> ObstacleAnimation /* None */,
    byte DisableOnOpen /* None */,
    byte OpenByDefault /* NeedsAlign */,
    int NavmeshCutAction /* NeedsAlign */,
    PPtr<StaticRendererLink> HideWhenOpen /* None */,
    AsciiString OpenSound /* None */,
    AsciiString CloseSound /* NeedsAlign */,
    byte DonNotNeedNavmeshCut /* NeedsAlign */)
{
    public static InteractionDoorSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* UIType */
        int _UIType = reader.ReadS32();
        byte _NotInCombat = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte _ShowOvertip = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte _AlwaysDisabled = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        byte _ShowHighlight = reader.ReadU8();
        reader.AlignTo(4); /* ProximityRadius */
        int _ProximityRadius = reader.ReadS32();
        int _Type = reader.ReadS32();
        int _UseAnimationState = reader.ReadS32();
        BlueprintDialogReference _m_Dialog = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString _InteractionSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString _InteractionDisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        AsciiString _InteractionStopSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trap */
        PPtr<TrapObjectView> _Trap = PPtr<TrapObjectView>.Read(reader);
        byte _DoNotNeedCollider = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte _UnlimitedInteractionsPerRound = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        byte _OverrideActionPointsCost = reader.ReadU8();
        reader.AlignTo(4); /* ActionPointsCost */
        int _ActionPointsCost = reader.ReadS32();
        InteractWithToolFXData _InteractWithMeltaChargeFXData = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* OvertipVerticalCorrection */
        float _OvertipVerticalCorrection = reader.ReadF32();
        PPtr<AnimationClip> _ObstacleAnimation = PPtr<AnimationClip>.Read(reader);
        byte _DisableOnOpen = reader.ReadU8();
        reader.AlignTo(4); /* OpenByDefault */
        byte _OpenByDefault = reader.ReadU8();
        reader.AlignTo(4); /* NavmeshCutAction */
        int _NavmeshCutAction = reader.ReadS32();
        PPtr<StaticRendererLink> _HideWhenOpen = PPtr<StaticRendererLink>.Read(reader);
        AsciiString _OpenSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* CloseSound */
        AsciiString _CloseSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* DonNotNeedNavmeshCut */
        byte _DonNotNeedNavmeshCut = reader.ReadU8();
        
        return new(_UIType,
            _NotInCombat,
            _ShowOvertip,
            _AlwaysDisabled,
            _ShowHighlight,
            _ProximityRadius,
            _Type,
            _UseAnimationState,
            _m_Dialog,
            _InteractionSound,
            _InteractionDisabledSound,
            _InteractionStopSound,
            _Trap,
            _DoNotNeedCollider,
            _UnlimitedInteractionsPerRound,
            _OverrideActionPointsCost,
            _ActionPointsCost,
            _InteractWithMeltaChargeFXData,
            _OvertipVerticalCorrection,
            _ObstacleAnimation,
            _DisableOnOpen,
            _OpenByDefault,
            _NavmeshCutAction,
            _HideWhenOpen,
            _OpenSound,
            _CloseSound,
            _DonNotNeedNavmeshCut);
    }
}

/* $DetailInstanceData (5 fields) */
public record class DetailInstanceData(
    Vector3f Position /* None */,
    Vector3f TintColor /* None */,
    Vector4f Shadowmask /* None */,
    float Scale /* None */,
    float Rotation /* None */)
{
    public static DetailInstanceData Read(EndianBinaryReader reader)
    {
        Vector3f _Position = Vector3f.Read(reader);
        Vector3f _TintColor = Vector3f.Read(reader);
        Vector4f _Shadowmask = Vector4f.Read(reader);
        float _Scale = reader.ReadF32();
        float _Rotation = reader.ReadF32();
        
        return new(_Position,
            _TintColor,
            _Shadowmask,
            _Scale,
            _Rotation);
    }
}

/* $ObjectPlacementModeSelectionToolbar (6 fields) */
public record class ObjectPlacementModeSelectionToolbar(
    AsciiString[] _normalStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _activeStateButtonTexturePaths /* NeedsAlign */,
    AsciiString[] _buttonTooltips /* NeedsAlign */,
    float _buttonScale /* NeedsAlign */,
    byte _allowActiveStateForButtons /* None */,
    byte _useBoxStyleForButtons /* NeedsAlign */)
{
    public static ObjectPlacementModeSelectionToolbar Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] __normalStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] __activeStateButtonTexturePaths = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        AsciiString[] __buttonTooltips = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonScale */
        float __buttonScale = reader.ReadF32();
        byte __allowActiveStateForButtons = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        byte __useBoxStyleForButtons = reader.ReadU8();
        
        return new(__normalStateButtonTexturePaths,
            __activeStateButtonTexturePaths,
            __buttonTooltips,
            __buttonScale,
            __allowActiveStateForButtons,
            __useBoxStyleForButtons);
    }
}

/* $ObjectPlacementSettingsView (7 fields) */
public record class ObjectPlacementSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    ObjectPlacementModeSelectionToolbar _objectPlacementModeSelectionToolbar /* NeedsAlign */)
{
    public static ObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _objectPlacementModeSelectionToolbar */
        ObjectPlacementModeSelectionToolbar __objectPlacementModeSelectionToolbar = ObjectPlacementModeSelectionToolbar.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __objectPlacementModeSelectionToolbar);
    }
}

/* $ObjectGroupCollection (2 fields) */
public record class ObjectGroupCollection(
    PPtr<ObjectGroup>[] _namedEntities /* NeedsAlign */,
    int _indexOfMarkedEntity /* None */)
{
    public static ObjectGroupCollection Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _namedEntities */
        PPtr<ObjectGroup>[] __namedEntities = BuiltInArray<PPtr<ObjectGroup>>.Read(reader);
        int __indexOfMarkedEntity = reader.ReadS32();
        
        return new(__namedEntities,
            __indexOfMarkedEntity);
    }
}

/* $ObjectGroupDatabaseView (7 fields) */
public record class ObjectGroupDatabaseView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<ObjectGroupDatabaseViewData> _viewData /* NeedsAlign */)
{
    public static ObjectGroupDatabaseView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<ObjectGroupDatabaseViewData> __viewData = PPtr<ObjectGroupDatabaseViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $AkSwitchReference (2 fields) */
public record class AkSwitchReference(
    AsciiString Value /* NeedsAlign */,
    AsciiString Group /* NeedsAlign */)
{
    public static AkSwitchReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Value */
        AsciiString _Value = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Group */
        AsciiString _Group = BuiltInString.Read(reader);
        
        return new(_Value,
            _Group);
    }
}

/* $BlueprintBuffReference (1 fields) */
public record class BlueprintBuffReference(
    AsciiString guid /* None */)
{
    public static BlueprintBuffReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $StatDamageEntry (3 fields) */
public record class StatDamageEntry(
    int Attribute /* None */,
    BlueprintBuffReference m_DamageBuff /* None */,
    BlueprintBuffReference m_DrainBuff /* NeedsAlign */)
{
    public static StatDamageEntry Read(EndianBinaryReader reader)
    {
        int _Attribute = reader.ReadS32();
        BlueprintBuffReference _m_DamageBuff = BlueprintBuffReference.Read(reader);
        reader.AlignTo(4); /* m_DrainBuff */
        BlueprintBuffReference _m_DrainBuff = BlueprintBuffReference.Read(reader);
        
        return new(_Attribute,
            _m_DamageBuff,
            _m_DrainBuff);
    }
}

/* $ProjectedBoxFacePivotPointsRenderSettingsView (6 fields) */
public record class ProjectedBoxFacePivotPointsRenderSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ProjectedBoxFacePivotPointsRenderSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectPlacementBlockManualConstructionSettingsView (6 fields) */
public record class ObjectPlacementBlockManualConstructionSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementBlockManualConstructionSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $StellarOrbit (3 fields) */
public record class StellarOrbit(
    PPtr<Transform> PositionForObjectOnOrbit /* None */,
    PPtr<Transform> OrbitAxis /* None */,
    PPtr<SolarSystemStellarBodyVisual> SettledStellarBody /* None */)
{
    public static StellarOrbit Read(EndianBinaryReader reader)
    {
        PPtr<Transform> _PositionForObjectOnOrbit = PPtr<Transform>.Read(reader);
        PPtr<Transform> _OrbitAxis = PPtr<Transform>.Read(reader);
        PPtr<SolarSystemStellarBodyVisual> _SettledStellarBody = PPtr<SolarSystemStellarBodyVisual>.Read(reader);
        
        return new(_PositionForObjectOnOrbit,
            _OrbitAxis,
            _SettledStellarBody);
    }
}

/* $SceneReference (2 fields) */
public record class SceneReference(
    PPtr<Object> m_SceneAsset /* None */,
    AsciiString m_SceneName /* None */)
{
    public static SceneReference Read(EndianBinaryReader reader)
    {
        PPtr<Object> _m_SceneAsset = PPtr<Object>.Read(reader);
        AsciiString _m_SceneName = BuiltInString.Read(reader);
        
        return new(_m_SceneAsset,
            _m_SceneName);
    }
}

/* $TrailBonesNamesPair (2 fields) */
public record class TrailBonesNamesPair(
    AsciiString Start /* None */,
    AsciiString End /* NeedsAlign */)
{
    public static TrailBonesNamesPair Read(EndianBinaryReader reader)
    {
        AsciiString _Start = BuiltInString.Read(reader);
        reader.AlignTo(4); /* End */
        AsciiString _End = BuiltInString.Read(reader);
        
        return new(_Start,
            _End);
    }
}

/* $BlueprintSummonPoolReference (1 fields) */
public record class BlueprintSummonPoolReference(
    AsciiString guid /* None */)
{
    public static BlueprintSummonPoolReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $AkBankReference (1 fields) */
public record class AkBankReference(
    AsciiString Value /* NeedsAlign */)
{
    public static AkBankReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Value */
        AsciiString _Value = BuiltInString.Read(reader);
        
        return new(_Value);
    }
}

/* $LoreXenosRestrictionSettings (4 fields) */
public readonly record struct LoreXenosRestrictionSettings(
    int DC /* NeedsAlign */,
    byte Exact /* None */,
    byte StartUnlocked /* NeedsAlign */,
    byte IsPartyCheck /* NeedsAlign */)
{
    public static LoreXenosRestrictionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DC */
        int _DC = reader.ReadS32();
        byte _Exact = reader.ReadU8();
        reader.AlignTo(4); /* StartUnlocked */
        byte _StartUnlocked = reader.ReadU8();
        reader.AlignTo(4); /* IsPartyCheck */
        byte _IsPartyCheck = reader.ReadU8();
        
        return new(_DC,
            _Exact,
            _StartUnlocked,
            _IsPartyCheck);
    }
}

/* forward decl ?GameObjectSphereTree (no type info) */
public record struct GameObjectSphereTree;
/* $Octave3DScene (1 fields) */
public record class Octave3DScene(
    GameObjectSphereTree _gameObjectSphereTree /* NeedsAlign */)
{
    public static Octave3DScene Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _gameObjectSphereTree */
        GameObjectSphereTree __gameObjectSphereTree = default! /* ?GameObjectSphereTree */;
        
        return new(__gameObjectSphereTree);
    }
}

/* $PrefabPreviewGenerator (3 fields) */
public record class PrefabPreviewGenerator(
    PPtr<Camera> _renderCamera /* None */,
    PPtr<RenderTexture> _renderTexture /* None */,
    PPtr<Light>[] _previewLights /* None */)
{
    public static PrefabPreviewGenerator Read(EndianBinaryReader reader)
    {
        PPtr<Camera> __renderCamera = PPtr<Camera>.Read(reader);
        PPtr<RenderTexture> __renderTexture = PPtr<RenderTexture>.Read(reader);
        PPtr<Light>[] __previewLights = BuiltInArray<PPtr<Light>>.Read(reader);
        
        return new(__renderCamera,
            __renderTexture,
            __previewLights);
    }
}

/* $PrefabsToCategoryDropEventHandler (2 fields) */
public record class PrefabsToCategoryDropEventHandler(
    PPtr<PrefabsToCategoryDropSettings> _prefabsDropSettings /* None */,
    PPtr<PrefabFoldersToCategoryDropSettings> _prefabFoldersDropSettings /* None */)
{
    public static PrefabsToCategoryDropEventHandler Read(EndianBinaryReader reader)
    {
        PPtr<PrefabsToCategoryDropSettings> __prefabsDropSettings = PPtr<PrefabsToCategoryDropSettings>.Read(reader);
        PPtr<PrefabFoldersToCategoryDropSettings> __prefabFoldersDropSettings = PPtr<PrefabFoldersToCategoryDropSettings>.Read(reader);
        
        return new(__prefabsDropSettings,
            __prefabFoldersDropSettings);
    }
}

/* $PrefabsToPathTileConectionDropEventHandler (1 fields) */
public record class PrefabsToPathTileConectionDropEventHandler(
    PPtr<PrefabsToPathTileConectionButtonDropSettings> _dropSettings /* None */)
{
    public static PrefabsToPathTileConectionDropEventHandler Read(EndianBinaryReader reader)
    {
        PPtr<PrefabsToPathTileConectionButtonDropSettings> __dropSettings = PPtr<PrefabsToPathTileConectionButtonDropSettings>.Read(reader);
        
        return new(__dropSettings);
    }
}

/* forward decl ?PrefabsToDecorPaintBrushEventHandler (no type info) */
public record struct PrefabsToDecorPaintBrushEventHandler;
/* $ShaderPool (1 fields) */
public record class ShaderPool(
    PPtr<Shader> _gridShader /* None */)
{
    public static ShaderPool Read(EndianBinaryReader reader)
    {
        PPtr<Shader> __gridShader = PPtr<Shader>.Read(reader);
        
        return new(__gridShader);
    }
}

/* $MaterialPool (1 fields) */
public record class MaterialPool(
    PPtr<Material> _xzGridMaterial /* None */)
{
    public static MaterialPool Read(EndianBinaryReader reader)
    {
        PPtr<Material> __xzGridMaterial = PPtr<Material>.Read(reader);
        
        return new(__xzGridMaterial);
    }
}

/* $StencilRefParameter (2 fields) */
public readonly record struct StencilRefParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static StencilRefParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ActiveObjectPlacementPathTileConnectionConfigurationView (6 fields) */
public record class ActiveObjectPlacementPathTileConnectionConfigurationView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ActiveObjectPlacementPathTileConnectionConfigurationView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectPlacementPathSettingsView (7 fields) */
public record class ObjectPlacementPathSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    ActiveObjectPlacementPathTileConnectionConfigurationView _activeObjectPlacementPathTileConnectionConfigurationView /* NeedsAlign */)
{
    public static ObjectPlacementPathSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _activeObjectPlacementPathTileConnectionConfigurationView */
        ActiveObjectPlacementPathTileConnectionConfigurationView __activeObjectPlacementPathTileConnectionConfigurationView = ActiveObjectPlacementPathTileConnectionConfigurationView.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __activeObjectPlacementPathTileConnectionConfigurationView);
    }
}

/* $ScreenUnit (9 fields) */
public record class ScreenUnit(
    PPtr<CanvasGroup> CanvasGroup /* None */,
    float InTime /* None */,
    float DelayTime /* None */,
    float OutTime /* None */,
    int Ease /* None */,
    PPtr<VideoPlayerHelper> VideoPlayer /* None */,
    AsciiString AKSoundEvent /* None */,
    uint SoundId /* NeedsAlign */,
    byte HideInFirstLaunch /* None */)
{
    public static ScreenUnit Read(EndianBinaryReader reader)
    {
        PPtr<CanvasGroup> _CanvasGroup = PPtr<CanvasGroup>.Read(reader);
        float _InTime = reader.ReadF32();
        float _DelayTime = reader.ReadF32();
        float _OutTime = reader.ReadF32();
        int _Ease = reader.ReadS32();
        PPtr<VideoPlayerHelper> _VideoPlayer = PPtr<VideoPlayerHelper>.Read(reader);
        AsciiString _AKSoundEvent = BuiltInString.Read(reader);
        reader.AlignTo(4); /* SoundId */
        uint _SoundId = reader.ReadU32();
        byte _HideInFirstLaunch = reader.ReadU8();
        
        return new(_CanvasGroup,
            _InTime,
            _DelayTime,
            _OutTime,
            _Ease,
            _VideoPlayer,
            _AKSoundEvent,
            _SoundId,
            _HideInFirstLaunch);
    }
}

/* $Event (3 fields) */
public record class Event(
    int idInternal /* NeedsAlign */,
    byte[] valueGuidInternal /* None */,
    PPtr<WwiseEventReference> WwiseObjectReference /* NeedsAlign */)
{
    public static Event Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* idInternal */
        int _idInternal = reader.ReadS32();
        byte[] _valueGuidInternal = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* WwiseObjectReference */
        PPtr<WwiseEventReference> _WwiseObjectReference = PPtr<WwiseEventReference>.Read(reader);
        
        return new(_idInternal,
            _valueGuidInternal,
            _WwiseObjectReference);
    }
}

/* $CallbackFlags (1 fields) */
public readonly record struct CallbackFlags(
    uint @value /* None */)
{
    public static CallbackFlags Read(EndianBinaryReader reader)
    {
        uint _value = reader.ReadU32();
        
        return new(_value);
    }
}

/* $CallbackData (3 fields) */
public record class CallbackData(
    CallbackFlags Flags /* None */,
    AsciiString FunctionName /* None */,
    PPtr<GameObject> GameObject /* NeedsAlign */)
{
    public static CallbackData Read(EndianBinaryReader reader)
    {
        CallbackFlags _Flags = CallbackFlags.Read(reader);
        AsciiString _FunctionName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* GameObject */
        PPtr<GameObject> _GameObject = PPtr<GameObject>.Read(reader);
        
        return new(_Flags,
            _FunctionName,
            _GameObject);
    }
}

/* $CompassAnimationElement (3 fields) */
public record class CompassAnimationElement(
    PPtr<RectTransform> m_Transform /* None */,
    int m_RotationFramesCount /* None */,
    int m_DelayFramesCount /* None */)
{
    public static CompassAnimationElement Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> _m_Transform = PPtr<RectTransform>.Read(reader);
        int _m_RotationFramesCount = reader.ReadS32();
        int _m_DelayFramesCount = reader.ReadS32();
        
        return new(_m_Transform,
            _m_RotationFramesCount,
            _m_DelayFramesCount);
    }
}

/* $SizeEntry (2 fields) */
public record class SizeEntry(
    int Size /* None */,
    LocalizedString Text /* None */)
{
    public static SizeEntry Read(EndianBinaryReader reader)
    {
        int _Size = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Size,
            _Text);
    }
}

/* $BlueprintStarSystemObjectReference (1 fields) */
public record class BlueprintStarSystemObjectReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintStarSystemObjectReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $VirtualListScrollSettings (4 fields) */
public readonly record struct VirtualListScrollSettings(
    byte UseScrollWheel /* None */,
    float ScrollWheelSpeed /* NeedsAlign */,
    float ConsoleNavigationScrollSpeed /* None */,
    float ScrollZoneReduction /* None */)
{
    public static VirtualListScrollSettings Read(EndianBinaryReader reader)
    {
        byte _UseScrollWheel = reader.ReadU8();
        reader.AlignTo(4); /* ScrollWheelSpeed */
        float _ScrollWheelSpeed = reader.ReadF32();
        float _ConsoleNavigationScrollSpeed = reader.ReadF32();
        float _ScrollZoneReduction = reader.ReadF32();
        
        return new(_UseScrollWheel,
            _ScrollWheelSpeed,
            _ConsoleNavigationScrollSpeed,
            _ScrollZoneReduction);
    }
}

/* $VirtualListLayoutSettingsGrid (6 fields) */
public record class VirtualListLayoutSettingsGrid(
    VirtualListLayoutPadding Padding /* NeedsAlign */,
    Vector2f Spacing /* None */,
    int ElementsInRow /* None */,
    float Width /* None */,
    float Height /* None */,
    float VisibleZoneExpansion /* None */)
{
    public static VirtualListLayoutSettingsGrid Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Padding */
        VirtualListLayoutPadding _Padding = VirtualListLayoutPadding.Read(reader);
        Vector2f _Spacing = Vector2f.Read(reader);
        int _ElementsInRow = reader.ReadS32();
        float _Width = reader.ReadF32();
        float _Height = reader.ReadF32();
        float _VisibleZoneExpansion = reader.ReadF32();
        
        return new(_Padding,
            _Spacing,
            _ElementsInRow,
            _Width,
            _Height,
            _VisibleZoneExpansion);
    }
}

/* $OvertipTorpedoHealthPoint (3 fields) */
public record class OvertipTorpedoHealthPoint(
    PPtr<GameObject> GameObject /* None */,
    PPtr<Image> Image /* None */,
    PPtr<Image> DamageImage /* None */)
{
    public static OvertipTorpedoHealthPoint Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _GameObject = PPtr<GameObject>.Read(reader);
        PPtr<Image> _Image = PPtr<Image>.Read(reader);
        PPtr<Image> _DamageImage = PPtr<Image>.Read(reader);
        
        return new(_GameObject,
            _Image,
            _DamageImage);
    }
}

/* $ObjectKeyboardRotationSettingsView (6 fields) */
public record class ObjectKeyboardRotationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectKeyboardRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $CombatTextCommonCreator (2 fields) */
public record class CombatTextCommonCreator(
    PPtr<RectTransform> ContainerRect /* None */,
    PPtr<CombatTextCommonView> m_PrefabView /* None */)
{
    public static CombatTextCommonCreator Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> _ContainerRect = PPtr<RectTransform>.Read(reader);
        PPtr<CombatTextCommonView> _m_PrefabView = PPtr<CombatTextCommonView>.Read(reader);
        
        return new(_ContainerRect,
            _m_PrefabView);
    }
}

/* $CombatTextHitPointsCreator (2 fields) */
public record class CombatTextHitPointsCreator(
    PPtr<RectTransform> ContainerRect /* None */,
    PPtr<CombatTextHitPointsView> m_PrefabView /* None */)
{
    public static CombatTextHitPointsCreator Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> _ContainerRect = PPtr<RectTransform>.Read(reader);
        PPtr<CombatTextHitPointsView> _m_PrefabView = PPtr<CombatTextHitPointsView>.Read(reader);
        
        return new(_ContainerRect,
            _m_PrefabView);
    }
}

/* $SpecialPhrasesDict (4 fields) */
public record class SpecialPhrasesDict(
    AsciiString Comment /* None */,
    BlueprintUnitReference Vendors /* NeedsAlign */,
    LocalizedString HelloPhrases /* NeedsAlign */,
    LocalizedString FinishDealPhrases /* NeedsAlign */)
{
    public static SpecialPhrasesDict Read(EndianBinaryReader reader)
    {
        AsciiString _Comment = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Vendors */
        BlueprintUnitReference _Vendors = BlueprintUnitReference.Read(reader);
        reader.AlignTo(4); /* HelloPhrases */
        LocalizedString _HelloPhrases = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FinishDealPhrases */
        LocalizedString _FinishDealPhrases = LocalizedString.Read(reader);
        
        return new(_Comment,
            _Vendors,
            _HelloPhrases,
            _FinishDealPhrases);
    }
}

/* $ObjectPivotPointsRenderSettingsView (6 fields) */
public record class ObjectPivotPointsRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPivotPointsRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $AkStateReference (2 fields) */
public record class AkStateReference(
    AsciiString Value /* NeedsAlign */,
    AsciiString Group /* NeedsAlign */)
{
    public static AkStateReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Value */
        AsciiString _Value = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Group */
        AsciiString _Group = BuiltInString.Read(reader);
        
        return new(_Value,
            _Group);
    }
}

/* $CoordinateSystemRenderSettingsView (6 fields) */
public record class CoordinateSystemRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static CoordinateSystemRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BlueprintScriptZoneReference (1 fields) */
public record class BlueprintScriptZoneReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintScriptZoneReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $UnitEvent (1 fields) */
public record class UnitEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static UnitEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $UnifiedStatusParams (6 fields) */
public record class UnifiedStatusParams(
    int Status /* None */,
    PPtr<Sprite> Icon /* None */,
    byte ShowFrame /* None */,
    ColorRGBA IconColor /* NeedsAlign */,
    ColorRGBA TextColor /* None */,
    ColorRGBA FrameColor /* None */)
{
    public static UnifiedStatusParams Read(EndianBinaryReader reader)
    {
        int _Status = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        byte _ShowFrame = reader.ReadU8();
        reader.AlignTo(4); /* IconColor */
        ColorRGBA _IconColor = ColorRGBA.Read(reader);
        ColorRGBA _TextColor = ColorRGBA.Read(reader);
        ColorRGBA _FrameColor = ColorRGBA.Read(reader);
        
        return new(_Status,
            _Icon,
            _ShowFrame,
            _IconColor,
            _TextColor,
            _FrameColor);
    }
}

/* $BlueprintScriptableObjectReference (1 fields) */
public record class BlueprintScriptableObjectReference(
    AsciiString guid /* None */)
{
    public static BlueprintScriptableObjectReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $DlcText (2 fields) */
public record class DlcText(
    BlueprintScriptableObjectReference m_Dlc /* None */,
    PPtr<SharedStringAsset> Text /* NeedsAlign */)
{
    public static DlcText Read(EndianBinaryReader reader)
    {
        BlueprintScriptableObjectReference _m_Dlc = BlueprintScriptableObjectReference.Read(reader);
        reader.AlignTo(4); /* Text */
        PPtr<SharedStringAsset> _Text = PPtr<SharedStringAsset>.Read(reader);
        
        return new(_m_Dlc,
            _Text);
    }
}

/* $DepthOfFieldModeParameter (2 fields) */
public readonly record struct DepthOfFieldModeParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static DepthOfFieldModeParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ClipsPlaySimpleAnim (2 fields) */
public record class ClipsPlaySimpleAnim(
    PPtr<AnimationClip> Clip /* None */,
    float Speed /* None */)
{
    public static ClipsPlaySimpleAnim Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClip> _Clip = PPtr<AnimationClip>.Read(reader);
        float _Speed = reader.ReadF32();
        
        return new(_Clip,
            _Speed);
    }
}

/* $ClipsPlaySpecialAnim (3 fields) */
public record class ClipsPlaySpecialAnim(
    PPtr<AnimationClip> Clip /* None */,
    AsciiString Trigger /* None */,
    float Speed /* NeedsAlign */)
{
    public static ClipsPlaySpecialAnim Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClip> _Clip = PPtr<AnimationClip>.Read(reader);
        AsciiString _Trigger = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Speed */
        float _Speed = reader.ReadF32();
        
        return new(_Clip,
            _Trigger,
            _Speed);
    }
}

/* $OwlcatMultiLayer (2 fields) */
public record class OwlcatMultiLayer(
    AsciiString LayerName /* None */,
    OwlcatSelectableLayerPart Parts /* NeedsAlign */)
{
    public static OwlcatMultiLayer Read(EndianBinaryReader reader)
    {
        AsciiString _LayerName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Parts */
        OwlcatSelectableLayerPart _Parts = OwlcatSelectableLayerPart.Read(reader);
        
        return new(_LayerName,
            _Parts);
    }
}

/* $TransformModule (22 fields) */
public record class TransformModule(
    byte _hasOffset /* None */,
    byte _hasRotationOffset /* NeedsAlign */,
    Vector2f _offset /* NeedsAlign */,
    Vector3f _rotationOffset /* None */,
    Vector3f _baseScale /* None */,
    byte _2dMode /* None */,
    int velocityHandleMode /* NeedsAlign */,
    byte applyPositionX /* None */,
    byte applyPositionY /* NeedsAlign */,
    byte applyPositionZ /* NeedsAlign */,
    byte applyPosition2D /* NeedsAlign */,
    byte retainLocalPosition /* NeedsAlign */,
    int direction /* NeedsAlign */,
    byte applyRotationX /* None */,
    byte applyRotationY /* NeedsAlign */,
    byte applyRotationZ /* NeedsAlign */,
    byte applyRotation2D /* NeedsAlign */,
    byte retainLocalRotation /* NeedsAlign */,
    byte applyScaleX /* NeedsAlign */,
    byte applyScaleY /* NeedsAlign */,
    byte applyScaleZ /* NeedsAlign */,
    PPtr<SplineUser> targetUser /* NeedsAlign */)
{
    public static TransformModule Read(EndianBinaryReader reader)
    {
        byte __hasOffset = reader.ReadU8();
        reader.AlignTo(4); /* _hasRotationOffset */
        byte __hasRotationOffset = reader.ReadU8();
        reader.AlignTo(4); /* _offset */
        Vector2f __offset = Vector2f.Read(reader);
        Vector3f __rotationOffset = Vector3f.Read(reader);
        Vector3f __baseScale = Vector3f.Read(reader);
        byte __2dMode = reader.ReadU8();
        reader.AlignTo(4); /* velocityHandleMode */
        int _velocityHandleMode = reader.ReadS32();
        byte _applyPositionX = reader.ReadU8();
        reader.AlignTo(4); /* applyPositionY */
        byte _applyPositionY = reader.ReadU8();
        reader.AlignTo(4); /* applyPositionZ */
        byte _applyPositionZ = reader.ReadU8();
        reader.AlignTo(4); /* applyPosition2D */
        byte _applyPosition2D = reader.ReadU8();
        reader.AlignTo(4); /* retainLocalPosition */
        byte _retainLocalPosition = reader.ReadU8();
        reader.AlignTo(4); /* direction */
        int _direction = reader.ReadS32();
        byte _applyRotationX = reader.ReadU8();
        reader.AlignTo(4); /* applyRotationY */
        byte _applyRotationY = reader.ReadU8();
        reader.AlignTo(4); /* applyRotationZ */
        byte _applyRotationZ = reader.ReadU8();
        reader.AlignTo(4); /* applyRotation2D */
        byte _applyRotation2D = reader.ReadU8();
        reader.AlignTo(4); /* retainLocalRotation */
        byte _retainLocalRotation = reader.ReadU8();
        reader.AlignTo(4); /* applyScaleX */
        byte _applyScaleX = reader.ReadU8();
        reader.AlignTo(4); /* applyScaleY */
        byte _applyScaleY = reader.ReadU8();
        reader.AlignTo(4); /* applyScaleZ */
        byte _applyScaleZ = reader.ReadU8();
        reader.AlignTo(4); /* targetUser */
        PPtr<SplineUser> _targetUser = PPtr<SplineUser>.Read(reader);
        
        return new(__hasOffset,
            __hasRotationOffset,
            __offset,
            __rotationOffset,
            __baseScale,
            __2dMode,
            _velocityHandleMode,
            _applyPositionX,
            _applyPositionY,
            _applyPositionZ,
            _applyPosition2D,
            _retainLocalPosition,
            _direction,
            _applyRotationX,
            _applyRotationY,
            _applyRotationZ,
            _applyRotation2D,
            _retainLocalRotation,
            _applyScaleX,
            _applyScaleY,
            _applyScaleZ,
            _targetUser);
    }
}

/* $SpeedKey (8 fields) */
public record class SpeedKey(
    double _featherStart /* None */,
    double _featherEnd /* None */,
    double _centerStart /* None */,
    double _centerEnd /* None */,
    AnimationCurve interpolation /* None */,
    float blend /* NeedsAlign */,
    float speed /* None */,
    int mode /* None */)
{
    public static SpeedKey Read(EndianBinaryReader reader)
    {
        double __featherStart = reader.ReadF64();
        double __featherEnd = reader.ReadF64();
        double __centerStart = reader.ReadF64();
        double __centerEnd = reader.ReadF64();
        AnimationCurve _interpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* blend */
        float _blend = reader.ReadF32();
        float _speed = reader.ReadF32();
        int _mode = reader.ReadS32();
        
        return new(__featherStart,
            __featherEnd,
            __centerStart,
            __centerEnd,
            _interpolation,
            _blend,
            _speed,
            _mode);
    }
}

/* $FollowerSpeedModifier (3 fields) */
public record class FollowerSpeedModifier(
    float blend /* None */,
    byte useClippedPercent /* None */,
    SpeedKey[] keys /* NeedsAlign */)
{
    public static FollowerSpeedModifier Read(EndianBinaryReader reader)
    {
        float _blend = reader.ReadF32();
        byte _useClippedPercent = reader.ReadU8();
        reader.AlignTo(4); /* keys */
        SpeedKey[] _keys = BuiltInArray<SpeedKey>.Read(reader);
        
        return new(_blend,
            _useClippedPercent,
            _keys);
    }
}

/* $FloatEvent (1 fields) */
public record class FloatEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static FloatEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $ObjectPlacementPathTileConnectionConfigurationCollection (2 fields) */
public record class ObjectPlacementPathTileConnectionConfigurationCollection(
    PPtr<ObjectPlacementPathTileConnectionConfiguration>[] _namedEntities /* NeedsAlign */,
    int _indexOfMarkedEntity /* None */)
{
    public static ObjectPlacementPathTileConnectionConfigurationCollection Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _namedEntities */
        PPtr<ObjectPlacementPathTileConnectionConfiguration>[] __namedEntities = BuiltInArray<PPtr<ObjectPlacementPathTileConnectionConfiguration>>.Read(reader);
        int __indexOfMarkedEntity = reader.ReadS32();
        
        return new(__namedEntities,
            __indexOfMarkedEntity);
    }
}

/* $ObjectPlacementPathTileConnectionConfigurationDatabaseView (7 fields) */
public record class ObjectPlacementPathTileConnectionConfigurationDatabaseView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<ObjectPlacementPathTileConnectionConfigurationDatabaseViewData> _viewData /* NeedsAlign */)
{
    public static ObjectPlacementPathTileConnectionConfigurationDatabaseView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<ObjectPlacementPathTileConnectionConfigurationDatabaseViewData> __viewData = PPtr<ObjectPlacementPathTileConnectionConfigurationDatabaseViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $RendererDescription (6 fields) */
public record class RendererDescription(
    AsciiString Name /* None */,
    AsciiString[] Bones /* NeedsAlign */,
    AsciiString RootBone /* NeedsAlign */,
    PPtr<Mesh> Mesh /* NeedsAlign */,
    PPtr<Material> Material /* None */,
    CharacterTextureDescription Textures /* None */)
{
    public static RendererDescription Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Bones */
        AsciiString[] _Bones = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* RootBone */
        AsciiString _RootBone = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Mesh */
        PPtr<Mesh> _Mesh = PPtr<Mesh>.Read(reader);
        PPtr<Material> _Material = PPtr<Material>.Read(reader);
        CharacterTextureDescription _Textures = CharacterTextureDescription.Read(reader);
        
        return new(_Name,
            _Bones,
            _RootBone,
            _Mesh,
            _Material,
            _Textures);
    }
}

/* $SoundSettingsDefaultValues (15 fields) */
public readonly record struct SoundSettingsDefaultValues(
    float VolumeMaster /* NeedsAlign */,
    float VolumeVoices /* None */,
    float VolumeVoicesCharacterInGame /* None */,
    float VolumeVoicesNpcInGame /* None */,
    float VolumeVoicesDialogues /* None */,
    float VolumeMusic /* None */,
    float VolumeSfx /* None */,
    float VolumeAmbience /* None */,
    float VolumeAbilities /* None */,
    float VolumeRangedWeapons /* None */,
    float VolumeMeleeWeapons /* None */,
    float VolumeHitsLevel /* None */,
    float VolumeUI /* None */,
    int VoicedAskFrequency /* None */,
    byte MuteAudioWhileTheGameIsOutFocus /* None */)
{
    public static SoundSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* VolumeMaster */
        float _VolumeMaster = reader.ReadF32();
        float _VolumeVoices = reader.ReadF32();
        float _VolumeVoicesCharacterInGame = reader.ReadF32();
        float _VolumeVoicesNpcInGame = reader.ReadF32();
        float _VolumeVoicesDialogues = reader.ReadF32();
        float _VolumeMusic = reader.ReadF32();
        float _VolumeSfx = reader.ReadF32();
        float _VolumeAmbience = reader.ReadF32();
        float _VolumeAbilities = reader.ReadF32();
        float _VolumeRangedWeapons = reader.ReadF32();
        float _VolumeMeleeWeapons = reader.ReadF32();
        float _VolumeHitsLevel = reader.ReadF32();
        float _VolumeUI = reader.ReadF32();
        int _VoicedAskFrequency = reader.ReadS32();
        byte _MuteAudioWhileTheGameIsOutFocus = reader.ReadU8();
        
        return new(_VolumeMaster,
            _VolumeVoices,
            _VolumeVoicesCharacterInGame,
            _VolumeVoicesNpcInGame,
            _VolumeVoicesDialogues,
            _VolumeMusic,
            _VolumeSfx,
            _VolumeAmbience,
            _VolumeAbilities,
            _VolumeRangedWeapons,
            _VolumeMeleeWeapons,
            _VolumeHitsLevel,
            _VolumeUI,
            _VoicedAskFrequency,
            _MuteAudioWhileTheGameIsOutFocus);
    }
}

/* $GraphicsSettingsDefaultValues (3 fields) */
public readonly record struct GraphicsSettingsDefaultValues(
    byte WindowedCursorLock /* NeedsAlign */,
    byte CameraShake /* NeedsAlign */,
    int GraphicsQuality /* NeedsAlign */)
{
    public static GraphicsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* WindowedCursorLock */
        byte _WindowedCursorLock = reader.ReadU8();
        reader.AlignTo(4); /* CameraShake */
        byte _CameraShake = reader.ReadU8();
        reader.AlignTo(4); /* GraphicsQuality */
        int _GraphicsQuality = reader.ReadS32();
        
        return new(_WindowedCursorLock,
            _CameraShake,
            _GraphicsQuality);
    }
}

/* $GameMainSettingsDefaultValues (9 fields) */
public readonly record struct GameMainSettingsDefaultValues(
    int Localization /* NeedsAlign */,
    byte AutofillActionbarSlots /* None */,
    byte LootInCombat /* NeedsAlign */,
    byte SendGameStatistic /* NeedsAlign */,
    byte SendSaves /* NeedsAlign */,
    byte UseHotAreas /* NeedsAlign */,
    byte BloodOnCharacters /* NeedsAlign */,
    byte DismemberCharacters /* NeedsAlign */,
    byte AcceleratedMove /* NeedsAlign */)
{
    public static GameMainSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Localization */
        int _Localization = reader.ReadS32();
        byte _AutofillActionbarSlots = reader.ReadU8();
        reader.AlignTo(4); /* LootInCombat */
        byte _LootInCombat = reader.ReadU8();
        reader.AlignTo(4); /* SendGameStatistic */
        byte _SendGameStatistic = reader.ReadU8();
        reader.AlignTo(4); /* SendSaves */
        byte _SendSaves = reader.ReadU8();
        reader.AlignTo(4); /* UseHotAreas */
        byte _UseHotAreas = reader.ReadU8();
        reader.AlignTo(4); /* BloodOnCharacters */
        byte _BloodOnCharacters = reader.ReadU8();
        reader.AlignTo(4); /* DismemberCharacters */
        byte _DismemberCharacters = reader.ReadU8();
        reader.AlignTo(4); /* AcceleratedMove */
        byte _AcceleratedMove = reader.ReadU8();
        
        return new(_Localization,
            _AutofillActionbarSlots,
            _LootInCombat,
            _SendGameStatistic,
            _SendSaves,
            _UseHotAreas,
            _BloodOnCharacters,
            _DismemberCharacters,
            _AcceleratedMove);
    }
}

/* $GameTutorialSettingsDefaultValues (10 fields) */
public readonly record struct GameTutorialSettingsDefaultValues(
    byte ShowBasicTutorial /* NeedsAlign */,
    byte ShowControlsBasicTutorial /* NeedsAlign */,
    byte ShowControlsAdvancedTutorial /* NeedsAlign */,
    byte ShowGameplayBasicTutorial /* NeedsAlign */,
    byte ShowGameplayAdvancedTutorial /* NeedsAlign */,
    byte ShowWarhammerRulesTutorial /* NeedsAlign */,
    byte ShowSpaceEncountersTutorial /* NeedsAlign */,
    byte ShowSpaceExplorationTutorial /* NeedsAlign */,
    byte ShowGroundEncountersTutorial /* NeedsAlign */,
    byte ShowContextTutorial /* NeedsAlign */)
{
    public static GameTutorialSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShowBasicTutorial */
        byte _ShowBasicTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowControlsBasicTutorial */
        byte _ShowControlsBasicTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowControlsAdvancedTutorial */
        byte _ShowControlsAdvancedTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowGameplayBasicTutorial */
        byte _ShowGameplayBasicTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowGameplayAdvancedTutorial */
        byte _ShowGameplayAdvancedTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowWarhammerRulesTutorial */
        byte _ShowWarhammerRulesTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowSpaceEncountersTutorial */
        byte _ShowSpaceEncountersTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowSpaceExplorationTutorial */
        byte _ShowSpaceExplorationTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowGroundEncountersTutorial */
        byte _ShowGroundEncountersTutorial = reader.ReadU8();
        reader.AlignTo(4); /* ShowContextTutorial */
        byte _ShowContextTutorial = reader.ReadU8();
        
        return new(_ShowBasicTutorial,
            _ShowControlsBasicTutorial,
            _ShowControlsAdvancedTutorial,
            _ShowGameplayBasicTutorial,
            _ShowGameplayAdvancedTutorial,
            _ShowWarhammerRulesTutorial,
            _ShowSpaceEncountersTutorial,
            _ShowSpaceExplorationTutorial,
            _ShowGroundEncountersTutorial,
            _ShowContextTutorial);
    }
}

/* $GameSaveSettingsDefaultValues (3 fields) */
public readonly record struct GameSaveSettingsDefaultValues(
    byte AutosaveEnabled /* NeedsAlign */,
    int AutosaveSlots /* NeedsAlign */,
    int QuicksaveSlots /* None */)
{
    public static GameSaveSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AutosaveEnabled */
        byte _AutosaveEnabled = reader.ReadU8();
        reader.AlignTo(4); /* AutosaveSlots */
        int _AutosaveSlots = reader.ReadS32();
        int _QuicksaveSlots = reader.ReadS32();
        
        return new(_AutosaveEnabled,
            _AutosaveSlots,
            _QuicksaveSlots);
    }
}

/* $GameTooltipsSettingsDefaultValues (3 fields) */
public readonly record struct GameTooltipsSettingsDefaultValues(
    byte ShowComparative /* NeedsAlign */,
    float ShowDelay /* NeedsAlign */,
    byte Shortened /* None */)
{
    public static GameTooltipsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShowComparative */
        byte _ShowComparative = reader.ReadU8();
        reader.AlignTo(4); /* ShowDelay */
        float _ShowDelay = reader.ReadF32();
        byte _Shortened = reader.ReadU8();
        
        return new(_ShowComparative,
            _ShowDelay,
            _Shortened);
    }
}

/* $GameCombatTextsSettingsDefaultValues (22 fields) */
public readonly record struct GameCombatTextsSettingsDefaultValues(
    int ShowSpellName /* NeedsAlign */,
    int ShowAvoid /* None */,
    int ShowMiss /* None */,
    int ShowAttackOfOpportunity /* None */,
    int ShowCriticalHit /* None */,
    int ShowSneakAttack /* None */,
    int ShowDamage /* None */,
    int ShowSaves /* None */,
    int ShowPartyActions /* None */,
    int ShowPartyActionsNoIdle /* None */,
    int ShowEnemyActions /* None */,
    int ShowPartyHP /* None */,
    int ShowEnemyHP /* None */,
    byte PartyHPIsShort /* None */,
    byte EnemyHPIsShort /* NeedsAlign */,
    int ShowNumericCooldownParty /* NeedsAlign */,
    int ShowNumericCooldownEnemy /* None */,
    int ShowNamesForParty /* None */,
    int ShowNamesForEnemy /* None */,
    int ShowPartyAttackIntentions /* None */,
    int ShowPartyCastIntentions /* None */,
    int ShowEnemyIntentions /* None */)
{
    public static GameCombatTextsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShowSpellName */
        int _ShowSpellName = reader.ReadS32();
        int _ShowAvoid = reader.ReadS32();
        int _ShowMiss = reader.ReadS32();
        int _ShowAttackOfOpportunity = reader.ReadS32();
        int _ShowCriticalHit = reader.ReadS32();
        int _ShowSneakAttack = reader.ReadS32();
        int _ShowDamage = reader.ReadS32();
        int _ShowSaves = reader.ReadS32();
        int _ShowPartyActions = reader.ReadS32();
        int _ShowPartyActionsNoIdle = reader.ReadS32();
        int _ShowEnemyActions = reader.ReadS32();
        int _ShowPartyHP = reader.ReadS32();
        int _ShowEnemyHP = reader.ReadS32();
        byte _PartyHPIsShort = reader.ReadU8();
        reader.AlignTo(4); /* EnemyHPIsShort */
        byte _EnemyHPIsShort = reader.ReadU8();
        reader.AlignTo(4); /* ShowNumericCooldownParty */
        int _ShowNumericCooldownParty = reader.ReadS32();
        int _ShowNumericCooldownEnemy = reader.ReadS32();
        int _ShowNamesForParty = reader.ReadS32();
        int _ShowNamesForEnemy = reader.ReadS32();
        int _ShowPartyAttackIntentions = reader.ReadS32();
        int _ShowPartyCastIntentions = reader.ReadS32();
        int _ShowEnemyIntentions = reader.ReadS32();
        
        return new(_ShowSpellName,
            _ShowAvoid,
            _ShowMiss,
            _ShowAttackOfOpportunity,
            _ShowCriticalHit,
            _ShowSneakAttack,
            _ShowDamage,
            _ShowSaves,
            _ShowPartyActions,
            _ShowPartyActionsNoIdle,
            _ShowEnemyActions,
            _ShowPartyHP,
            _ShowEnemyHP,
            _PartyHPIsShort,
            _EnemyHPIsShort,
            _ShowNumericCooldownParty,
            _ShowNumericCooldownEnemy,
            _ShowNamesForParty,
            _ShowNamesForEnemy,
            _ShowPartyAttackIntentions,
            _ShowPartyCastIntentions,
            _ShowEnemyIntentions);
    }
}

/* $GameDialogsSettingsDefaultValues (10 fields) */
public readonly record struct GameDialogsSettingsDefaultValues(
    byte ShowItemsReceivedNotification /* NeedsAlign */,
    byte ShowLocationRevealedNotification /* NeedsAlign */,
    byte ShowXPGainedNotification /* NeedsAlign */,
    byte ShowAlignmentShiftsInAnswer /* NeedsAlign */,
    byte ShowAlignmentShiftsNotifications /* NeedsAlign */,
    byte ShowAlignmentRequirements /* NeedsAlign */,
    byte ShowMythicRequirements /* NeedsAlign */,
    byte ShowSkillcheckDC /* NeedsAlign */,
    byte ShowSkillcheckResult /* NeedsAlign */,
    byte ShowKingdomNotifications /* NeedsAlign */)
{
    public static GameDialogsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShowItemsReceivedNotification */
        byte _ShowItemsReceivedNotification = reader.ReadU8();
        reader.AlignTo(4); /* ShowLocationRevealedNotification */
        byte _ShowLocationRevealedNotification = reader.ReadU8();
        reader.AlignTo(4); /* ShowXPGainedNotification */
        byte _ShowXPGainedNotification = reader.ReadU8();
        reader.AlignTo(4); /* ShowAlignmentShiftsInAnswer */
        byte _ShowAlignmentShiftsInAnswer = reader.ReadU8();
        reader.AlignTo(4); /* ShowAlignmentShiftsNotifications */
        byte _ShowAlignmentShiftsNotifications = reader.ReadU8();
        reader.AlignTo(4); /* ShowAlignmentRequirements */
        byte _ShowAlignmentRequirements = reader.ReadU8();
        reader.AlignTo(4); /* ShowMythicRequirements */
        byte _ShowMythicRequirements = reader.ReadU8();
        reader.AlignTo(4); /* ShowSkillcheckDC */
        byte _ShowSkillcheckDC = reader.ReadU8();
        reader.AlignTo(4); /* ShowSkillcheckResult */
        byte _ShowSkillcheckResult = reader.ReadU8();
        reader.AlignTo(4); /* ShowKingdomNotifications */
        byte _ShowKingdomNotifications = reader.ReadU8();
        
        return new(_ShowItemsReceivedNotification,
            _ShowLocationRevealedNotification,
            _ShowXPGainedNotification,
            _ShowAlignmentShiftsInAnswer,
            _ShowAlignmentShiftsNotifications,
            _ShowAlignmentRequirements,
            _ShowMythicRequirements,
            _ShowSkillcheckDC,
            _ShowSkillcheckResult,
            _ShowKingdomNotifications);
    }
}

/* $GameAutopauseSettingsDefaultValues (26 fields) */
public readonly record struct GameAutopauseSettingsDefaultValues(
    byte ContinueMovementOnEngagement /* NeedsAlign */,
    byte PauseOnLostFocus /* NeedsAlign */,
    byte PauseOnTrapDetected /* NeedsAlign */,
    byte PauseOnHiddenObjectDetected /* NeedsAlign */,
    byte PauseOnEngagement /* NeedsAlign */,
    byte PauseOnMeleeEngagement /* NeedsAlign */,
    byte PauseOnPartyIsAttacked /* NeedsAlign */,
    byte PauseOnEndOfPartyMembersRound /* NeedsAlign */,
    byte PauseOnEndOfRound /* NeedsAlign */,
    byte PauseOnPartyMemberFinishedAbility /* NeedsAlign */,
    int PauseOnSpellcastInterrupted /* NeedsAlign */,
    int PauseOnSpellcastStarted /* None */,
    byte PauseOnSpellcastFinished /* None */,
    byte PauseOnEndedBuffSummon /* NeedsAlign */,
    byte PauseOnAllyDown /* NeedsAlign */,
    byte PauseOnEnemyDown /* NeedsAlign */,
    byte PauseOnNewEnemyAppeared /* NeedsAlign */,
    byte PauseOnLowHealth /* NeedsAlign */,
    byte PauseOnAttackOfOpportunity /* NeedsAlign */,
    byte PauseOnPartyMemberRanOutOfConsumable /* NeedsAlign */,
    byte PauseOnEnemySpotted /* NeedsAlign */,
    byte PauseOnWeaponIsIneffective /* NeedsAlign */,
    byte PauseOnAreaLoaded /* NeedsAlign */,
    byte PauseWhenAllyUnconscious /* NeedsAlign */,
    byte PauseWhenEnemyUnconscious /* NeedsAlign */,
    byte PauseOnLoadingScreen /* NeedsAlign */)
{
    public static GameAutopauseSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ContinueMovementOnEngagement */
        byte _ContinueMovementOnEngagement = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnLostFocus */
        byte _PauseOnLostFocus = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnTrapDetected */
        byte _PauseOnTrapDetected = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnHiddenObjectDetected */
        byte _PauseOnHiddenObjectDetected = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEngagement */
        byte _PauseOnEngagement = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnMeleeEngagement */
        byte _PauseOnMeleeEngagement = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnPartyIsAttacked */
        byte _PauseOnPartyIsAttacked = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEndOfPartyMembersRound */
        byte _PauseOnEndOfPartyMembersRound = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEndOfRound */
        byte _PauseOnEndOfRound = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnPartyMemberFinishedAbility */
        byte _PauseOnPartyMemberFinishedAbility = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnSpellcastInterrupted */
        int _PauseOnSpellcastInterrupted = reader.ReadS32();
        int _PauseOnSpellcastStarted = reader.ReadS32();
        byte _PauseOnSpellcastFinished = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEndedBuffSummon */
        byte _PauseOnEndedBuffSummon = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnAllyDown */
        byte _PauseOnAllyDown = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEnemyDown */
        byte _PauseOnEnemyDown = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnNewEnemyAppeared */
        byte _PauseOnNewEnemyAppeared = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnLowHealth */
        byte _PauseOnLowHealth = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnAttackOfOpportunity */
        byte _PauseOnAttackOfOpportunity = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnPartyMemberRanOutOfConsumable */
        byte _PauseOnPartyMemberRanOutOfConsumable = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEnemySpotted */
        byte _PauseOnEnemySpotted = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnWeaponIsIneffective */
        byte _PauseOnWeaponIsIneffective = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnAreaLoaded */
        byte _PauseOnAreaLoaded = reader.ReadU8();
        reader.AlignTo(4); /* PauseWhenAllyUnconscious */
        byte _PauseWhenAllyUnconscious = reader.ReadU8();
        reader.AlignTo(4); /* PauseWhenEnemyUnconscious */
        byte _PauseWhenEnemyUnconscious = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnLoadingScreen */
        byte _PauseOnLoadingScreen = reader.ReadU8();
        
        return new(_ContinueMovementOnEngagement,
            _PauseOnLostFocus,
            _PauseOnTrapDetected,
            _PauseOnHiddenObjectDetected,
            _PauseOnEngagement,
            _PauseOnMeleeEngagement,
            _PauseOnPartyIsAttacked,
            _PauseOnEndOfPartyMembersRound,
            _PauseOnEndOfRound,
            _PauseOnPartyMemberFinishedAbility,
            _PauseOnSpellcastInterrupted,
            _PauseOnSpellcastStarted,
            _PauseOnSpellcastFinished,
            _PauseOnEndedBuffSummon,
            _PauseOnAllyDown,
            _PauseOnEnemyDown,
            _PauseOnNewEnemyAppeared,
            _PauseOnLowHealth,
            _PauseOnAttackOfOpportunity,
            _PauseOnPartyMemberRanOutOfConsumable,
            _PauseOnEnemySpotted,
            _PauseOnWeaponIsIneffective,
            _PauseOnAreaLoaded,
            _PauseWhenAllyUnconscious,
            _PauseWhenEnemyUnconscious,
            _PauseOnLoadingScreen);
    }
}

/* $GameTurnBasedSettingsDefaultValues (12 fields) */
public readonly record struct GameTurnBasedSettingsDefaultValues(
    byte EnableTurnBasedMode /* NeedsAlign */,
    byte AutoEndTurn /* NeedsAlign */,
    byte AutoStopAfterFirstMoveAction /* NeedsAlign */,
    byte CameraFollowUnit /* NeedsAlign */,
    byte CameraScrollToCurrentUnit /* NeedsAlign */,
    byte EnableTurnBaseCombatText /* NeedsAlign */,
    int SpeedUpMode /* NeedsAlign */,
    byte FastMovement /* None */,
    byte FastPartyCast /* NeedsAlign */,
    float TimeScaleInPlayerTurn /* NeedsAlign */,
    float TimeScaleInNonPlayerTurn /* None */,
    byte AutoSelectWeaponAbility /* None */)
{
    public static GameTurnBasedSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* EnableTurnBasedMode */
        byte _EnableTurnBasedMode = reader.ReadU8();
        reader.AlignTo(4); /* AutoEndTurn */
        byte _AutoEndTurn = reader.ReadU8();
        reader.AlignTo(4); /* AutoStopAfterFirstMoveAction */
        byte _AutoStopAfterFirstMoveAction = reader.ReadU8();
        reader.AlignTo(4); /* CameraFollowUnit */
        byte _CameraFollowUnit = reader.ReadU8();
        reader.AlignTo(4); /* CameraScrollToCurrentUnit */
        byte _CameraScrollToCurrentUnit = reader.ReadU8();
        reader.AlignTo(4); /* EnableTurnBaseCombatText */
        byte _EnableTurnBaseCombatText = reader.ReadU8();
        reader.AlignTo(4); /* SpeedUpMode */
        int _SpeedUpMode = reader.ReadS32();
        byte _FastMovement = reader.ReadU8();
        reader.AlignTo(4); /* FastPartyCast */
        byte _FastPartyCast = reader.ReadU8();
        reader.AlignTo(4); /* TimeScaleInPlayerTurn */
        float _TimeScaleInPlayerTurn = reader.ReadF32();
        float _TimeScaleInNonPlayerTurn = reader.ReadF32();
        byte _AutoSelectWeaponAbility = reader.ReadU8();
        
        return new(_EnableTurnBasedMode,
            _AutoEndTurn,
            _AutoStopAfterFirstMoveAction,
            _CameraFollowUnit,
            _CameraScrollToCurrentUnit,
            _EnableTurnBaseCombatText,
            _SpeedUpMode,
            _FastMovement,
            _FastPartyCast,
            _TimeScaleInPlayerTurn,
            _TimeScaleInNonPlayerTurn,
            _AutoSelectWeaponAbility);
    }
}

/* $GameSillyCheatCodesSettingsDefaultValues (5 fields) */
public readonly record struct GameSillyCheatCodesSettingsDefaultValues(
    byte CanSeeTheirClassSpecificClothes /* NeedsAlign */,
    byte DressAllCompanionsInDrobyshevskysShirt /* NeedsAlign */,
    byte FeedCritters /* NeedsAlign */,
    byte InsteadOfBloodSprinkleRandomCritters /* NeedsAlign */,
    byte SpawnOwlcatOnGlobalmap /* NeedsAlign */)
{
    public static GameSillyCheatCodesSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* CanSeeTheirClassSpecificClothes */
        byte _CanSeeTheirClassSpecificClothes = reader.ReadU8();
        reader.AlignTo(4); /* DressAllCompanionsInDrobyshevskysShirt */
        byte _DressAllCompanionsInDrobyshevskysShirt = reader.ReadU8();
        reader.AlignTo(4); /* FeedCritters */
        byte _FeedCritters = reader.ReadU8();
        reader.AlignTo(4); /* InsteadOfBloodSprinkleRandomCritters */
        byte _InsteadOfBloodSprinkleRandomCritters = reader.ReadU8();
        reader.AlignTo(4); /* SpawnOwlcatOnGlobalmap */
        byte _SpawnOwlcatOnGlobalmap = reader.ReadU8();
        
        return new(_CanSeeTheirClassSpecificClothes,
            _DressAllCompanionsInDrobyshevskysShirt,
            _FeedCritters,
            _InsteadOfBloodSprinkleRandomCritters,
            _SpawnOwlcatOnGlobalmap);
    }
}

/* $GameSettingsDefaultValues (10 fields) */
public record class GameSettingsDefaultValues(
    GameMainSettingsDefaultValues Main /* NeedsAlign */,
    GameTutorialSettingsDefaultValues Tutorial /* NeedsAlign */,
    GameSaveSettingsDefaultValues Save /* NeedsAlign */,
    GameSaveSettingsDefaultValues SaveConsole /* NeedsAlign */,
    GameTooltipsSettingsDefaultValues Tooltips /* NeedsAlign */,
    GameCombatTextsSettingsDefaultValues CombatTexts /* NeedsAlign */,
    GameDialogsSettingsDefaultValues Dialogs /* NeedsAlign */,
    GameAutopauseSettingsDefaultValues Autopause /* NeedsAlign */,
    GameTurnBasedSettingsDefaultValues TurnBased /* NeedsAlign */,
    GameSillyCheatCodesSettingsDefaultValues SillyCheatCodes /* NeedsAlign */)
{
    public static GameSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Main */
        GameMainSettingsDefaultValues _Main = GameMainSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Tutorial */
        GameTutorialSettingsDefaultValues _Tutorial = GameTutorialSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Save */
        GameSaveSettingsDefaultValues _Save = GameSaveSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* SaveConsole */
        GameSaveSettingsDefaultValues _SaveConsole = GameSaveSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Tooltips */
        GameTooltipsSettingsDefaultValues _Tooltips = GameTooltipsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* CombatTexts */
        GameCombatTextsSettingsDefaultValues _CombatTexts = GameCombatTextsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Dialogs */
        GameDialogsSettingsDefaultValues _Dialogs = GameDialogsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Autopause */
        GameAutopauseSettingsDefaultValues _Autopause = GameAutopauseSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* TurnBased */
        GameTurnBasedSettingsDefaultValues _TurnBased = GameTurnBasedSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* SillyCheatCodes */
        GameSillyCheatCodesSettingsDefaultValues _SillyCheatCodes = GameSillyCheatCodesSettingsDefaultValues.Read(reader);
        
        return new(_Main,
            _Tutorial,
            _Save,
            _SaveConsole,
            _Tooltips,
            _CombatTexts,
            _Dialogs,
            _Autopause,
            _TurnBased,
            _SillyCheatCodes);
    }
}

/* $DifficultySettingsDefaultValues (26 fields) */
public readonly record struct DifficultySettingsDefaultValues(
    byte OnlyOneSave /* NeedsAlign */,
    byte ImmersiveMode /* NeedsAlign */,
    byte OnlyActiveCompanionsReceiveExperience /* NeedsAlign */,
    byte OnlyInitiatorReceiveSkillCheckExperience /* NeedsAlign */,
    byte LimitedAI /* NeedsAlign */,
    int EnemyDodgePercentModifier /* NeedsAlign */,
    int CoverHitBonusHalfModifier /* None */,
    int CoverHitBonusFullModifier /* None */,
    int MinPartyDamage /* None */,
    int MinPartyDamageFraction /* None */,
    int MinPartyStarshipDamage /* None */,
    int MinPartyStarshipDamageFraction /* None */,
    int PartyMomentumPercentModifier /* None */,
    int NPCAttributesBaseValuePercentModifier /* None */,
    int HardCrowdControlOnPartyMaxDurationRounds /* None */,
    int SkillCheckModifier /* None */,
    int EnemyHitPointsPercentModifier /* None */,
    int AllyResolveModifier /* None */,
    int PartyDamageDealtAfterArmorReductionPercentModifier /* None */,
    int WoundDamagePerTurnThresholdHPFraction /* None */,
    int OldWoundDelayRounds /* None */,
    int WoundStacksForTrauma /* None */,
    int MinCR /* None */,
    int MaxCR /* None */,
    int SpaceCombatDifficulty /* None */,
    int GameDifficulty /* None */)
{
    public static DifficultySettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* OnlyOneSave */
        byte _OnlyOneSave = reader.ReadU8();
        reader.AlignTo(4); /* ImmersiveMode */
        byte _ImmersiveMode = reader.ReadU8();
        reader.AlignTo(4); /* OnlyActiveCompanionsReceiveExperience */
        byte _OnlyActiveCompanionsReceiveExperience = reader.ReadU8();
        reader.AlignTo(4); /* OnlyInitiatorReceiveSkillCheckExperience */
        byte _OnlyInitiatorReceiveSkillCheckExperience = reader.ReadU8();
        reader.AlignTo(4); /* LimitedAI */
        byte _LimitedAI = reader.ReadU8();
        reader.AlignTo(4); /* EnemyDodgePercentModifier */
        int _EnemyDodgePercentModifier = reader.ReadS32();
        int _CoverHitBonusHalfModifier = reader.ReadS32();
        int _CoverHitBonusFullModifier = reader.ReadS32();
        int _MinPartyDamage = reader.ReadS32();
        int _MinPartyDamageFraction = reader.ReadS32();
        int _MinPartyStarshipDamage = reader.ReadS32();
        int _MinPartyStarshipDamageFraction = reader.ReadS32();
        int _PartyMomentumPercentModifier = reader.ReadS32();
        int _NPCAttributesBaseValuePercentModifier = reader.ReadS32();
        int _HardCrowdControlOnPartyMaxDurationRounds = reader.ReadS32();
        int _SkillCheckModifier = reader.ReadS32();
        int _EnemyHitPointsPercentModifier = reader.ReadS32();
        int _AllyResolveModifier = reader.ReadS32();
        int _PartyDamageDealtAfterArmorReductionPercentModifier = reader.ReadS32();
        int _WoundDamagePerTurnThresholdHPFraction = reader.ReadS32();
        int _OldWoundDelayRounds = reader.ReadS32();
        int _WoundStacksForTrauma = reader.ReadS32();
        int _MinCR = reader.ReadS32();
        int _MaxCR = reader.ReadS32();
        int _SpaceCombatDifficulty = reader.ReadS32();
        int _GameDifficulty = reader.ReadS32();
        
        return new(_OnlyOneSave,
            _ImmersiveMode,
            _OnlyActiveCompanionsReceiveExperience,
            _OnlyInitiatorReceiveSkillCheckExperience,
            _LimitedAI,
            _EnemyDodgePercentModifier,
            _CoverHitBonusHalfModifier,
            _CoverHitBonusFullModifier,
            _MinPartyDamage,
            _MinPartyDamageFraction,
            _MinPartyStarshipDamage,
            _MinPartyStarshipDamageFraction,
            _PartyMomentumPercentModifier,
            _NPCAttributesBaseValuePercentModifier,
            _HardCrowdControlOnPartyMaxDurationRounds,
            _SkillCheckModifier,
            _EnemyHitPointsPercentModifier,
            _AllyResolveModifier,
            _PartyDamageDealtAfterArmorReductionPercentModifier,
            _WoundDamagePerTurnThresholdHPFraction,
            _OldWoundDelayRounds,
            _WoundStacksForTrauma,
            _MinCR,
            _MaxCR,
            _SpaceCombatDifficulty,
            _GameDifficulty);
    }
}

/* $KeyBindingData (4 fields) */
public readonly record struct KeyBindingData(
    int Key /* NeedsAlign */,
    byte IsCtrlDown /* None */,
    byte IsAltDown /* NeedsAlign */,
    byte IsShiftDown /* NeedsAlign */)
{
    public static KeyBindingData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Key */
        int _Key = reader.ReadS32();
        byte _IsCtrlDown = reader.ReadU8();
        reader.AlignTo(4); /* IsAltDown */
        byte _IsAltDown = reader.ReadU8();
        reader.AlignTo(4); /* IsShiftDown */
        byte _IsShiftDown = reader.ReadU8();
        
        return new(_Key,
            _IsCtrlDown,
            _IsAltDown,
            _IsShiftDown);
    }
}

/* $KeyBindingPair (4 fields) */
public record class KeyBindingPair(
    KeyBindingData Binding1 /* NeedsAlign */,
    KeyBindingData Binding2 /* NeedsAlign */,
    int GameModesGroup /* NeedsAlign */,
    byte TriggerOnHold /* None */)
{
    public static KeyBindingPair Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Binding1 */
        KeyBindingData _Binding1 = KeyBindingData.Read(reader);
        reader.AlignTo(4); /* Binding2 */
        KeyBindingData _Binding2 = KeyBindingData.Read(reader);
        reader.AlignTo(4); /* GameModesGroup */
        int _GameModesGroup = reader.ReadS32();
        byte _TriggerOnHold = reader.ReadU8();
        
        return new(_Binding1,
            _Binding2,
            _GameModesGroup,
            _TriggerOnHold);
    }
}

/* $ControlsKeybindingsGeneralSettingsDefaultValues (35 fields) */
public record class ControlsKeybindingsGeneralSettingsDefaultValues(
    KeyBindingPair HighlightObjects /* NeedsAlign */,
    KeyBindingPair Hold /* NeedsAlign */,
    KeyBindingPair MuteMusic /* NeedsAlign */,
    KeyBindingPair MuteSound /* NeedsAlign */,
    KeyBindingPair OpenCharacterScreen /* NeedsAlign */,
    KeyBindingPair OpenInventory /* NeedsAlign */,
    KeyBindingPair OpenJournal /* NeedsAlign */,
    KeyBindingPair OpenMap /* NeedsAlign */,
    KeyBindingPair OpenEncyclopedia /* NeedsAlign */,
    KeyBindingPair OpenColonyManagement /* NeedsAlign */,
    KeyBindingPair OpenShipCustomization /* NeedsAlign */,
    KeyBindingPair OpenCargoManagement /* NeedsAlign */,
    KeyBindingPair OpenRestCamp /* NeedsAlign */,
    KeyBindingPair OpenSpells /* NeedsAlign */,
    KeyBindingPair Inspect /* NeedsAlign */,
    KeyBindingPair Pause /* NeedsAlign */,
    KeyBindingPair QuickLoad /* NeedsAlign */,
    KeyBindingPair QuickSave /* NeedsAlign */,
    KeyBindingPair Screenshot /* NeedsAlign */,
    KeyBindingPair Stop /* NeedsAlign */,
    KeyBindingPair Unpause /* NeedsAlign */,
    KeyBindingPair CameraUp /* NeedsAlign */,
    KeyBindingPair CameraDown /* NeedsAlign */,
    KeyBindingPair CameraLeft /* NeedsAlign */,
    KeyBindingPair CameraRight /* NeedsAlign */,
    KeyBindingPair CameraRotateLeft /* NeedsAlign */,
    KeyBindingPair CameraRotateRight /* NeedsAlign */,
    KeyBindingPair FollowUnit /* NeedsAlign */,
    KeyBindingPair SkipBark /* NeedsAlign */,
    KeyBindingPair SkipCutscene /* NeedsAlign */,
    KeyBindingPair SwitchTBM /* NeedsAlign */,
    KeyBindingPair ChangeCursorAction /* NeedsAlign */,
    KeyBindingPair ModifyMovementLimit /* NeedsAlign */,
    KeyBindingPair OpenModificationWindow /* NeedsAlign */,
    KeyBindingPair SpeedUpEnemiesTurn /* NeedsAlign */)
{
    public static ControlsKeybindingsGeneralSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* HighlightObjects */
        KeyBindingPair _HighlightObjects = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Hold */
        KeyBindingPair _Hold = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* MuteMusic */
        KeyBindingPair _MuteMusic = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* MuteSound */
        KeyBindingPair _MuteSound = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenCharacterScreen */
        KeyBindingPair _OpenCharacterScreen = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenInventory */
        KeyBindingPair _OpenInventory = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenJournal */
        KeyBindingPair _OpenJournal = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenMap */
        KeyBindingPair _OpenMap = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenEncyclopedia */
        KeyBindingPair _OpenEncyclopedia = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenColonyManagement */
        KeyBindingPair _OpenColonyManagement = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenShipCustomization */
        KeyBindingPair _OpenShipCustomization = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenCargoManagement */
        KeyBindingPair _OpenCargoManagement = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenRestCamp */
        KeyBindingPair _OpenRestCamp = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenSpells */
        KeyBindingPair _OpenSpells = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Inspect */
        KeyBindingPair _Inspect = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Pause */
        KeyBindingPair _Pause = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* QuickLoad */
        KeyBindingPair _QuickLoad = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* QuickSave */
        KeyBindingPair _QuickSave = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Screenshot */
        KeyBindingPair _Screenshot = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Stop */
        KeyBindingPair _Stop = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Unpause */
        KeyBindingPair _Unpause = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraUp */
        KeyBindingPair _CameraUp = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraDown */
        KeyBindingPair _CameraDown = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraLeft */
        KeyBindingPair _CameraLeft = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRight */
        KeyBindingPair _CameraRight = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRotateLeft */
        KeyBindingPair _CameraRotateLeft = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRotateRight */
        KeyBindingPair _CameraRotateRight = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* FollowUnit */
        KeyBindingPair _FollowUnit = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SkipBark */
        KeyBindingPair _SkipBark = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SkipCutscene */
        KeyBindingPair _SkipCutscene = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SwitchTBM */
        KeyBindingPair _SwitchTBM = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ChangeCursorAction */
        KeyBindingPair _ChangeCursorAction = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ModifyMovementLimit */
        KeyBindingPair _ModifyMovementLimit = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenModificationWindow */
        KeyBindingPair _OpenModificationWindow = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SpeedUpEnemiesTurn */
        KeyBindingPair _SpeedUpEnemiesTurn = KeyBindingPair.Read(reader);
        
        return new(_HighlightObjects,
            _Hold,
            _MuteMusic,
            _MuteSound,
            _OpenCharacterScreen,
            _OpenInventory,
            _OpenJournal,
            _OpenMap,
            _OpenEncyclopedia,
            _OpenColonyManagement,
            _OpenShipCustomization,
            _OpenCargoManagement,
            _OpenRestCamp,
            _OpenSpells,
            _Inspect,
            _Pause,
            _QuickLoad,
            _QuickSave,
            _Screenshot,
            _Stop,
            _Unpause,
            _CameraUp,
            _CameraDown,
            _CameraLeft,
            _CameraRight,
            _CameraRotateLeft,
            _CameraRotateRight,
            _FollowUnit,
            _SkipBark,
            _SkipCutscene,
            _SwitchTBM,
            _ChangeCursorAction,
            _ModifyMovementLimit,
            _OpenModificationWindow,
            _SpeedUpEnemiesTurn);
    }
}

/* $ControlsKeybindingsActionBarSettingsDefaultValues (4 fields) */
public record class ControlsKeybindingsActionBarSettingsDefaultValues(
    KeyBindingPair ChangeWeaponSet /* NeedsAlign */,
    KeyBindingPair ActionBarConsumables /* NeedsAlign */,
    KeyBindingPair ActionBarWeapons /* NeedsAlign */,
    KeyBindingPair ActionBarAbilities /* NeedsAlign */)
{
    public static ControlsKeybindingsActionBarSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ChangeWeaponSet */
        KeyBindingPair _ChangeWeaponSet = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ActionBarConsumables */
        KeyBindingPair _ActionBarConsumables = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ActionBarWeapons */
        KeyBindingPair _ActionBarWeapons = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ActionBarAbilities */
        KeyBindingPair _ActionBarAbilities = KeyBindingPair.Read(reader);
        
        return new(_ChangeWeaponSet,
            _ActionBarConsumables,
            _ActionBarWeapons,
            _ActionBarAbilities);
    }
}

/* $ControlsKeybindingsDialogSettingsDefaultValues (2 fields) */
public record class ControlsKeybindingsDialogSettingsDefaultValues(
    KeyBindingPair DialogChoices /* NeedsAlign */,
    KeyBindingPair NextOrEnd /* NeedsAlign */)
{
    public static ControlsKeybindingsDialogSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DialogChoices */
        KeyBindingPair _DialogChoices = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* NextOrEnd */
        KeyBindingPair _NextOrEnd = KeyBindingPair.Read(reader);
        
        return new(_DialogChoices,
            _NextOrEnd);
    }
}

/* $ControlsKeybindingsSelectCharacterSettingsDefaultValues (2 fields) */
public record class ControlsKeybindingsSelectCharacterSettingsDefaultValues(
    KeyBindingPair SelectCharacter /* NeedsAlign */,
    KeyBindingPair SelectAll /* NeedsAlign */)
{
    public static ControlsKeybindingsSelectCharacterSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* SelectCharacter */
        KeyBindingPair _SelectCharacter = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SelectAll */
        KeyBindingPair _SelectAll = KeyBindingPair.Read(reader);
        
        return new(_SelectCharacter,
            _SelectAll);
    }
}

/* $ControlsKeybindingsTurnBasedSettingsDefaultValues (3 fields) */
public record class ControlsKeybindingsTurnBasedSettingsDefaultValues(
    KeyBindingPair ChangeCursorAction /* NeedsAlign */,
    KeyBindingPair ModifyMovementLimit /* NeedsAlign */,
    KeyBindingPair SwitchTBM /* NeedsAlign */)
{
    public static ControlsKeybindingsTurnBasedSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ChangeCursorAction */
        KeyBindingPair _ChangeCursorAction = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ModifyMovementLimit */
        KeyBindingPair _ModifyMovementLimit = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SwitchTBM */
        KeyBindingPair _SwitchTBM = KeyBindingPair.Read(reader);
        
        return new(_ChangeCursorAction,
            _ModifyMovementLimit,
            _SwitchTBM);
    }
}

/* $ControlsKeybindingsSettingsDefaultValues (5 fields) */
public record class ControlsKeybindingsSettingsDefaultValues(
    ControlsKeybindingsGeneralSettingsDefaultValues General /* NeedsAlign */,
    ControlsKeybindingsActionBarSettingsDefaultValues ActionBar /* NeedsAlign */,
    ControlsKeybindingsDialogSettingsDefaultValues Dialog /* NeedsAlign */,
    ControlsKeybindingsSelectCharacterSettingsDefaultValues SelectCharacter /* NeedsAlign */,
    ControlsKeybindingsTurnBasedSettingsDefaultValues TurnBased /* NeedsAlign */)
{
    public static ControlsKeybindingsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* General */
        ControlsKeybindingsGeneralSettingsDefaultValues _General = ControlsKeybindingsGeneralSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* ActionBar */
        ControlsKeybindingsActionBarSettingsDefaultValues _ActionBar = ControlsKeybindingsActionBarSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Dialog */
        ControlsKeybindingsDialogSettingsDefaultValues _Dialog = ControlsKeybindingsDialogSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* SelectCharacter */
        ControlsKeybindingsSelectCharacterSettingsDefaultValues _SelectCharacter = ControlsKeybindingsSelectCharacterSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* TurnBased */
        ControlsKeybindingsTurnBasedSettingsDefaultValues _TurnBased = ControlsKeybindingsTurnBasedSettingsDefaultValues.Read(reader);
        
        return new(_General,
            _ActionBar,
            _Dialog,
            _SelectCharacter,
            _TurnBased);
    }
}

/* $ControlsSettingsDefaultValues (12 fields) */
public record class ControlsSettingsDefaultValues(
    float MouseSensitivity /* NeedsAlign */,
    float MouseClickDelay /* None */,
    byte ScreenEdgeScrolling /* None */,
    float CameraScrollSpeedEdge /* NeedsAlign */,
    float CameraScrollSpeedKeyboard /* None */,
    float CameraRotationSpeedEdge /* None */,
    float CameraRotationSpeedKeyboard /* None */,
    byte CameraScrollOutOfScreenEnabled /* None */,
    int MouseRightButtonFunction /* NeedsAlign */,
    byte ConvertSnapLogic /* None */,
    byte CameraFollowsUnit /* NeedsAlign */,
    ControlsKeybindingsSettingsDefaultValues Keybindings /* NeedsAlign */)
{
    public static ControlsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* MouseSensitivity */
        float _MouseSensitivity = reader.ReadF32();
        float _MouseClickDelay = reader.ReadF32();
        byte _ScreenEdgeScrolling = reader.ReadU8();
        reader.AlignTo(4); /* CameraScrollSpeedEdge */
        float _CameraScrollSpeedEdge = reader.ReadF32();
        float _CameraScrollSpeedKeyboard = reader.ReadF32();
        float _CameraRotationSpeedEdge = reader.ReadF32();
        float _CameraRotationSpeedKeyboard = reader.ReadF32();
        byte _CameraScrollOutOfScreenEnabled = reader.ReadU8();
        reader.AlignTo(4); /* MouseRightButtonFunction */
        int _MouseRightButtonFunction = reader.ReadS32();
        byte _ConvertSnapLogic = reader.ReadU8();
        reader.AlignTo(4); /* CameraFollowsUnit */
        byte _CameraFollowsUnit = reader.ReadU8();
        reader.AlignTo(4); /* Keybindings */
        ControlsKeybindingsSettingsDefaultValues _Keybindings = ControlsKeybindingsSettingsDefaultValues.Read(reader);
        
        return new(_MouseSensitivity,
            _MouseClickDelay,
            _ScreenEdgeScrolling,
            _CameraScrollSpeedEdge,
            _CameraScrollSpeedKeyboard,
            _CameraRotationSpeedEdge,
            _CameraRotationSpeedKeyboard,
            _CameraScrollOutOfScreenEnabled,
            _MouseRightButtonFunction,
            _ConvertSnapLogic,
            _CameraFollowsUnit,
            _Keybindings);
    }
}

/* $DisplaySettingsDefaultValues (4 fields) */
public readonly record struct DisplaySettingsDefaultValues(
    float GammaCorrection /* NeedsAlign */,
    float Brightness /* None */,
    float Contrast /* None */,
    int SafeZoneOffset /* None */)
{
    public static DisplaySettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* GammaCorrection */
        float _GammaCorrection = reader.ReadF32();
        float _Brightness = reader.ReadF32();
        float _Contrast = reader.ReadF32();
        int _SafeZoneOffset = reader.ReadS32();
        
        return new(_GammaCorrection,
            _Brightness,
            _Contrast,
            _SafeZoneOffset);
    }
}

/* $AccessiabilitySettingsDefaultValues (4 fields) */
public readonly record struct AccessiabilitySettingsDefaultValues(
    float Protanopia /* None */,
    float Deuteranopia /* None */,
    float Tritanopia /* None */,
    float FontSize /* None */)
{
    public static AccessiabilitySettingsDefaultValues Read(EndianBinaryReader reader)
    {
        float _Protanopia = reader.ReadF32();
        float _Deuteranopia = reader.ReadF32();
        float _Tritanopia = reader.ReadF32();
        float _FontSize = reader.ReadF32();
        
        return new(_Protanopia,
            _Deuteranopia,
            _Tritanopia,
            _FontSize);
    }
}

/* $SettingsDefaultValues (7 fields) */
public record class SettingsDefaultValues(
    SoundSettingsDefaultValues Sound /* NeedsAlign */,
    GraphicsSettingsDefaultValues Graphics /* NeedsAlign */,
    GameSettingsDefaultValues Game /* NeedsAlign */,
    DifficultySettingsDefaultValues Difficulty /* NeedsAlign */,
    ControlsSettingsDefaultValues Controls /* NeedsAlign */,
    DisplaySettingsDefaultValues Display /* NeedsAlign */,
    AccessiabilitySettingsDefaultValues Accessiability /* None */)
{
    public static SettingsDefaultValues Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Sound */
        SoundSettingsDefaultValues _Sound = SoundSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Graphics */
        GraphicsSettingsDefaultValues _Graphics = GraphicsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Game */
        GameSettingsDefaultValues _Game = GameSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Difficulty */
        DifficultySettingsDefaultValues _Difficulty = DifficultySettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Controls */
        ControlsSettingsDefaultValues _Controls = ControlsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Display */
        DisplaySettingsDefaultValues _Display = DisplaySettingsDefaultValues.Read(reader);
        AccessiabilitySettingsDefaultValues _Accessiability = AccessiabilitySettingsDefaultValues.Read(reader);
        
        return new(_Sound,
            _Graphics,
            _Game,
            _Difficulty,
            _Controls,
            _Display,
            _Accessiability);
    }
}

/* $PointAndClickObjectPlacementSettingsView (6 fields) */
public record class PointAndClickObjectPlacementSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static PointAndClickObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $WarpPassageVisualParameters (8 fields) */
public record class WarpPassageVisualParameters(
    Gradient SafeColor /* NeedsAlign */,
    Gradient UnsafeColor /* NeedsAlign */,
    Gradient DangerousColor /* NeedsAlign */,
    Gradient DeadlyColor /* NeedsAlign */,
    PPtr<Material> SafeMaterial /* NeedsAlign */,
    PPtr<Material> UnsafeMaterial /* None */,
    PPtr<Material> DangerousMaterial /* None */,
    PPtr<Material> DeadlyMaterial /* None */)
{
    public static WarpPassageVisualParameters Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* SafeColor */
        Gradient _SafeColor = Gradient.Read(reader);
        reader.AlignTo(4); /* UnsafeColor */
        Gradient _UnsafeColor = Gradient.Read(reader);
        reader.AlignTo(4); /* DangerousColor */
        Gradient _DangerousColor = Gradient.Read(reader);
        reader.AlignTo(4); /* DeadlyColor */
        Gradient _DeadlyColor = Gradient.Read(reader);
        reader.AlignTo(4); /* SafeMaterial */
        PPtr<Material> _SafeMaterial = PPtr<Material>.Read(reader);
        PPtr<Material> _UnsafeMaterial = PPtr<Material>.Read(reader);
        PPtr<Material> _DangerousMaterial = PPtr<Material>.Read(reader);
        PPtr<Material> _DeadlyMaterial = PPtr<Material>.Read(reader);
        
        return new(_SafeColor,
            _UnsafeColor,
            _DangerousColor,
            _DeadlyColor,
            _SafeMaterial,
            _UnsafeMaterial,
            _DangerousMaterial,
            _DeadlyMaterial);
    }
}

/* $CinemachineBlendDefinition (3 fields) */
public record class CinemachineBlendDefinition(
    int m_Style /* None */,
    float m_Time /* None */,
    AnimationCurve m_CustomCurve /* None */)
{
    public static CinemachineBlendDefinition Read(EndianBinaryReader reader)
    {
        int _m_Style = reader.ReadS32();
        float _m_Time = reader.ReadF32();
        AnimationCurve _m_CustomCurve = AnimationCurve.Read(reader);
        
        return new(_m_Style,
            _m_Time,
            _m_CustomCurve);
    }
}

/* $BrainEvent (1 fields) */
public record class BrainEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static BrainEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $VcamActivatedEvent (1 fields) */
public record class VcamActivatedEvent(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static VcamActivatedEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $PrefabTagCollection (1 fields) */
public record class PrefabTagCollection(
    PPtr<PrefabTag>[] _namedEntities /* NeedsAlign */)
{
    public static PrefabTagCollection Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _namedEntities */
        PPtr<PrefabTag>[] __namedEntities = BuiltInArray<PPtr<PrefabTag>>.Read(reader);
        
        return new(__namedEntities);
    }
}

/* $PrefabTagDatabaseView (7 fields) */
public record class PrefabTagDatabaseView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<PrefabTagDatabaseViewData> _viewData /* NeedsAlign */)
{
    public static PrefabTagDatabaseView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<PrefabTagDatabaseViewData> __viewData = PPtr<PrefabTagDatabaseViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $DollRoomCameraZoomPreset (3 fields) */
public record class DollRoomCameraZoomPreset(
    AsciiString TargetBoneName /* None */,
    Vector3f OffsetFromHead /* NeedsAlign */,
    byte CanZoom /* None */)
{
    public static DollRoomCameraZoomPreset Read(EndianBinaryReader reader)
    {
        AsciiString _TargetBoneName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* OffsetFromHead */
        Vector3f _OffsetFromHead = Vector3f.Read(reader);
        byte _CanZoom = reader.ReadU8();
        
        return new(_TargetBoneName,
            _OffsetFromHead,
            _CanZoom);
    }
}

/* $half (1 fields) */
public readonly record struct half(
    ushort @value /* None */)
{
    public static half Read(EndianBinaryReader reader)
    {
        ushort _value = reader.ReadU16();
        
        return new(_value);
    }
}

/* $half3 (3 fields) */
public record class half3(
    half x /* None */,
    half y /* NeedsAlign */,
    half z /* NeedsAlign */)
{
    public static half3 Read(EndianBinaryReader reader)
    {
        half _x = half.Read(reader);
        reader.AlignTo(4); /* y */
        half _y = half.Read(reader);
        reader.AlignTo(4); /* z */
        half _z = half.Read(reader);
        
        return new(_x,
            _y,
            _z);
    }
}

/* $half4 (4 fields) */
public record class half4(
    half x /* NeedsAlign */,
    half y /* NeedsAlign */,
    half z /* NeedsAlign */,
    half w /* NeedsAlign */)
{
    public static half4 Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* x */
        half _x = half.Read(reader);
        reader.AlignTo(4); /* y */
        half _y = half.Read(reader);
        reader.AlignTo(4); /* z */
        half _z = half.Read(reader);
        reader.AlignTo(4); /* w */
        half _w = half.Read(reader);
        
        return new(_x,
            _y,
            _z,
            _w);
    }
}

/* $PackedBounds (7 fields) */
public record class PackedBounds(
    half3 a /* None */,
    half3 b /* NeedsAlign */,
    half3 c /* NeedsAlign */,
    half3 e /* NeedsAlign */,
    half4 q /* NeedsAlign */,
    int ib /* NeedsAlign */,
    int ie /* None */)
{
    public static PackedBounds Read(EndianBinaryReader reader)
    {
        half3 _a = half3.Read(reader);
        reader.AlignTo(4); /* b */
        half3 _b = half3.Read(reader);
        reader.AlignTo(4); /* c */
        half3 _c = half3.Read(reader);
        reader.AlignTo(4); /* e */
        half3 _e = half3.Read(reader);
        reader.AlignTo(4); /* q */
        half4 _q = half4.Read(reader);
        reader.AlignTo(4); /* ib */
        int _ib = reader.ReadS32();
        int _ie = reader.ReadS32();
        
        return new(_a,
            _b,
            _c,
            _e,
            _q,
            _ib,
            _ie);
    }
}

/* $OcclusionGeometry (3 fields) */
public record class OcclusionGeometry(
    PackedBounds[] bounds /* NeedsAlign */,
    PPtr<Renderer>[] renderers /* NeedsAlign */,
    ushort[] indices /* None */)
{
    public static OcclusionGeometry Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* bounds */
        PackedBounds[] _bounds = BuiltInArray<PackedBounds>.Read(reader);
        reader.AlignTo(4); /* renderers */
        PPtr<Renderer>[] _renderers = BuiltInArray<PPtr<Renderer>>.Read(reader);
        ushort[] _indices = BuiltInArray<ushort>.Read(reader);
        
        return new(_bounds,
            _renderers,
            _indices);
    }
}

/* $GUIStyleState (2 fields) */
public record class GUIStyleState(
    PPtr<Texture2D> m_Background /* NeedsAlign */,
    ColorRGBA m_TextColor /* None */)
{
    public static GUIStyleState Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Background */
        PPtr<Texture2D> _m_Background = PPtr<Texture2D>.Read(reader);
        ColorRGBA _m_TextColor = ColorRGBA.Read(reader);
        
        return new(_m_Background,
            _m_TextColor);
    }
}

/* $GUIStyle (26 fields) */
public record class GUIStyle(
    AsciiString m_Name /* None */,
    GUIStyleState m_Normal /* NeedsAlign */,
    GUIStyleState m_Hover /* None */,
    GUIStyleState m_Active /* None */,
    GUIStyleState m_Focused /* None */,
    GUIStyleState m_OnNormal /* None */,
    GUIStyleState m_OnHover /* None */,
    GUIStyleState m_OnActive /* None */,
    GUIStyleState m_OnFocused /* None */,
    RectOffset m_Border /* None */,
    RectOffset m_Margin /* None */,
    RectOffset m_Padding /* None */,
    RectOffset m_Overflow /* None */,
    PPtr<Font> m_Font /* None */,
    int m_FontSize /* None */,
    int m_FontStyle /* None */,
    int m_Alignment /* None */,
    bool m_WordWrap /* None */,
    bool m_RichText /* None */,
    int m_TextClipping /* NeedsAlign */,
    int m_ImagePosition /* None */,
    Vector2f m_ContentOffset /* None */,
    float m_FixedWidth /* None */,
    float m_FixedHeight /* None */,
    bool m_StretchWidth /* None */,
    bool m_StretchHeight /* None */)
{
    public static GUIStyle Read(EndianBinaryReader reader)
    {
        AsciiString _m_Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Normal */
        GUIStyleState _m_Normal = GUIStyleState.Read(reader);
        GUIStyleState _m_Hover = GUIStyleState.Read(reader);
        GUIStyleState _m_Active = GUIStyleState.Read(reader);
        GUIStyleState _m_Focused = GUIStyleState.Read(reader);
        GUIStyleState _m_OnNormal = GUIStyleState.Read(reader);
        GUIStyleState _m_OnHover = GUIStyleState.Read(reader);
        GUIStyleState _m_OnActive = GUIStyleState.Read(reader);
        GUIStyleState _m_OnFocused = GUIStyleState.Read(reader);
        RectOffset _m_Border = RectOffset.Read(reader);
        RectOffset _m_Margin = RectOffset.Read(reader);
        RectOffset _m_Padding = RectOffset.Read(reader);
        RectOffset _m_Overflow = RectOffset.Read(reader);
        PPtr<Font> _m_Font = PPtr<Font>.Read(reader);
        int _m_FontSize = reader.ReadS32();
        int _m_FontStyle = reader.ReadS32();
        int _m_Alignment = reader.ReadS32();
        bool _m_WordWrap = reader.ReadBool();
        bool _m_RichText = reader.ReadBool();
        reader.AlignTo(4); /* m_TextClipping */
        int _m_TextClipping = reader.ReadS32();
        int _m_ImagePosition = reader.ReadS32();
        Vector2f _m_ContentOffset = Vector2f.Read(reader);
        float _m_FixedWidth = reader.ReadF32();
        float _m_FixedHeight = reader.ReadF32();
        bool _m_StretchWidth = reader.ReadBool();
        bool _m_StretchHeight = reader.ReadBool();
        
        return new(_m_Name,
            _m_Normal,
            _m_Hover,
            _m_Active,
            _m_Focused,
            _m_OnNormal,
            _m_OnHover,
            _m_OnActive,
            _m_OnFocused,
            _m_Border,
            _m_Margin,
            _m_Padding,
            _m_Overflow,
            _m_Font,
            _m_FontSize,
            _m_FontStyle,
            _m_Alignment,
            _m_WordWrap,
            _m_RichText,
            _m_TextClipping,
            _m_ImagePosition,
            _m_ContentOffset,
            _m_FixedWidth,
            _m_FixedHeight,
            _m_StretchWidth,
            _m_StretchHeight);
    }
}

/* $GUISettings (5 fields) */
public record class GUISettings(
    byte m_DoubleClickSelectsWord /* NeedsAlign */,
    byte m_TripleClickSelectsLine /* NeedsAlign */,
    ColorRGBA m_CursorColor /* NeedsAlign */,
    float m_CursorFlashSpeed /* None */,
    ColorRGBA m_SelectionColor /* None */)
{
    public static GUISettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_DoubleClickSelectsWord */
        byte _m_DoubleClickSelectsWord = reader.ReadU8();
        reader.AlignTo(4); /* m_TripleClickSelectsLine */
        byte _m_TripleClickSelectsLine = reader.ReadU8();
        reader.AlignTo(4); /* m_CursorColor */
        ColorRGBA _m_CursorColor = ColorRGBA.Read(reader);
        float _m_CursorFlashSpeed = reader.ReadF32();
        ColorRGBA _m_SelectionColor = ColorRGBA.Read(reader);
        
        return new(_m_DoubleClickSelectsWord,
            _m_TripleClickSelectsLine,
            _m_CursorColor,
            _m_CursorFlashSpeed,
            _m_SelectionColor);
    }
}

/* $ObjectLayerObjectMaskView (7 fields) */
public record class ObjectLayerObjectMaskView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<ObjectLayerObjectMaskViewData> _viewData /* NeedsAlign */)
{
    public static ObjectLayerObjectMaskView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<ObjectLayerObjectMaskViewData> __viewData = PPtr<ObjectLayerObjectMaskViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $TechUseRestrictionSettings (4 fields) */
public readonly record struct TechUseRestrictionSettings(
    int DC /* NeedsAlign */,
    byte Exact /* None */,
    byte StartUnlocked /* NeedsAlign */,
    byte IsPartyCheck /* NeedsAlign */)
{
    public static TechUseRestrictionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DC */
        int _DC = reader.ReadS32();
        byte _Exact = reader.ReadU8();
        reader.AlignTo(4); /* StartUnlocked */
        byte _StartUnlocked = reader.ReadU8();
        reader.AlignTo(4); /* IsPartyCheck */
        byte _IsPartyCheck = reader.ReadU8();
        
        return new(_DC,
            _Exact,
            _StartUnlocked,
            _IsPartyCheck);
    }
}

/* $DecoratorEntry (5 fields) */
public record class DecoratorEntry(
    PPtr<GameObject> Prefab /* None */,
    AsciiString BoneName /* None */,
    Vector3f Position /* NeedsAlign */,
    Vector3f Rotation /* None */,
    Vector3f Scale /* None */)
{
    public static DecoratorEntry Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _Prefab = PPtr<GameObject>.Read(reader);
        AsciiString _BoneName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Position */
        Vector3f _Position = Vector3f.Read(reader);
        Vector3f _Rotation = Vector3f.Read(reader);
        Vector3f _Scale = Vector3f.Read(reader);
        
        return new(_Prefab,
            _BoneName,
            _Position,
            _Rotation,
            _Scale);
    }
}

/* $WeatherArray (1 fields) */
public record class WeatherArray(
    float[] Values /* NeedsAlign */)
{
    public static WeatherArray Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Values */
        float[] _Values = BuiltInArray<float>.Read(reader);
        
        return new(_Values);
    }
}

/* $WeatherMinMaxArray (2 fields) */
public record class WeatherMinMaxArray(
    float[] MinValues /* NeedsAlign */,
    float[] MaxValues /* NeedsAlign */)
{
    public static WeatherMinMaxArray Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* MinValues */
        float[] _MinValues = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* MaxValues */
        float[] _MaxValues = BuiltInArray<float>.Read(reader);
        
        return new(_MinValues,
            _MaxValues);
    }
}

/* $SeasonalData (3 fields) */
public record class SeasonalData(
    WeatherArray InclemencyChangeSpeed /* NeedsAlign */,
    WeatherArray InclemencyWeights /* NeedsAlign */,
    WeatherMinMaxArray InclemencyCooldownInMinutes /* NeedsAlign */)
{
    public static SeasonalData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* InclemencyChangeSpeed */
        WeatherArray _InclemencyChangeSpeed = WeatherArray.Read(reader);
        reader.AlignTo(4); /* InclemencyWeights */
        WeatherArray _InclemencyWeights = WeatherArray.Read(reader);
        reader.AlignTo(4); /* InclemencyCooldownInMinutes */
        WeatherMinMaxArray _InclemencyCooldownInMinutes = WeatherMinMaxArray.Read(reader);
        
        return new(_InclemencyChangeSpeed,
            _InclemencyWeights,
            _InclemencyCooldownInMinutes);
    }
}

/* $NoiseSettings (2 fields) */
public record class NoiseSettings(
    NoiseOctave m_Octave1 /* NeedsAlign */,
    NoiseOctave m_Octave2 /* None */)
{
    public static NoiseSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_Octave1 */
        NoiseOctave _m_Octave1 = NoiseOctave.Read(reader);
        NoiseOctave _m_Octave2 = NoiseOctave.Read(reader);
        
        return new(_m_Octave1,
            _m_Octave2);
    }
}

/* $VirtualListLayoutSettingsVertical (5 fields) */
public record class VirtualListLayoutSettingsVertical(
    VirtualListLayoutPadding Padding /* NeedsAlign */,
    float Spacing /* None */,
    float Width /* None */,
    float Height /* None */,
    float VisibleZoneExpansion /* None */)
{
    public static VirtualListLayoutSettingsVertical Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Padding */
        VirtualListLayoutPadding _Padding = VirtualListLayoutPadding.Read(reader);
        float _Spacing = reader.ReadF32();
        float _Width = reader.ReadF32();
        float _Height = reader.ReadF32();
        float _VisibleZoneExpansion = reader.ReadF32();
        
        return new(_Padding,
            _Spacing,
            _Width,
            _Height,
            _VisibleZoneExpansion);
    }
}

/* $PageGenerator (4 fields) */
public readonly record struct PageGenerator(
    float HeightPage /* None */,
    float HeightHeader /* None */,
    float HeightDeveloperRow /* None */,
    float HeightBakerRow /* None */)
{
    public static PageGenerator Read(EndianBinaryReader reader)
    {
        float _HeightPage = reader.ReadF32();
        float _HeightHeader = reader.ReadF32();
        float _HeightDeveloperRow = reader.ReadF32();
        float _HeightBakerRow = reader.ReadF32();
        
        return new(_HeightPage,
            _HeightHeader,
            _HeightDeveloperRow,
            _HeightBakerRow);
    }
}

/* $PrefabLink (1 fields) */
public record class PrefabLink(
    AsciiString AssetId /* NeedsAlign */)
{
    public static PrefabLink Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AssetId */
        AsciiString _AssetId = BuiltInString.Read(reader);
        
        return new(_AssetId);
    }
}

/* $AutoUnwrapSettings (9 fields) */
public record class AutoUnwrapSettings(
    byte m_UseWorldSpace /* None */,
    byte m_FlipU /* NeedsAlign */,
    byte m_FlipV /* NeedsAlign */,
    byte m_SwapUV /* NeedsAlign */,
    int m_Fill /* NeedsAlign */,
    Vector2f m_Scale /* None */,
    Vector2f m_Offset /* None */,
    float m_Rotation /* None */,
    int m_Anchor /* None */)
{
    public static AutoUnwrapSettings Read(EndianBinaryReader reader)
    {
        byte _m_UseWorldSpace = reader.ReadU8();
        reader.AlignTo(4); /* m_FlipU */
        byte _m_FlipU = reader.ReadU8();
        reader.AlignTo(4); /* m_FlipV */
        byte _m_FlipV = reader.ReadU8();
        reader.AlignTo(4); /* m_SwapUV */
        byte _m_SwapUV = reader.ReadU8();
        reader.AlignTo(4); /* m_Fill */
        int _m_Fill = reader.ReadS32();
        Vector2f _m_Scale = Vector2f.Read(reader);
        Vector2f _m_Offset = Vector2f.Read(reader);
        float _m_Rotation = reader.ReadF32();
        int _m_Anchor = reader.ReadS32();
        
        return new(_m_UseWorldSpace,
            _m_FlipU,
            _m_FlipV,
            _m_SwapUV,
            _m_Fill,
            _m_Scale,
            _m_Offset,
            _m_Rotation,
            _m_Anchor);
    }
}

/* $Face (8 fields) */
public record class Face(
    int[] m_Indexes /* None */,
    int m_SmoothingGroup /* NeedsAlign */,
    AutoUnwrapSettings m_Uv /* None */,
    PPtr<Material> m_Material /* NeedsAlign */,
    int m_SubmeshIndex /* None */,
    byte m_ManualUV /* None */,
    int elementGroup /* NeedsAlign */,
    int m_TextureGroup /* None */)
{
    public static Face Read(EndianBinaryReader reader)
    {
        int[] _m_Indexes = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_SmoothingGroup */
        int _m_SmoothingGroup = reader.ReadS32();
        AutoUnwrapSettings _m_Uv = AutoUnwrapSettings.Read(reader);
        reader.AlignTo(4); /* m_Material */
        PPtr<Material> _m_Material = PPtr<Material>.Read(reader);
        int _m_SubmeshIndex = reader.ReadS32();
        byte _m_ManualUV = reader.ReadU8();
        reader.AlignTo(4); /* elementGroup */
        int _elementGroup = reader.ReadS32();
        int _m_TextureGroup = reader.ReadS32();
        
        return new(_m_Indexes,
            _m_SmoothingGroup,
            _m_Uv,
            _m_Material,
            _m_SubmeshIndex,
            _m_ManualUV,
            _elementGroup,
            _m_TextureGroup);
    }
}

/* $SharedVertex (1 fields) */
public record class SharedVertex(
    int[] m_Vertices /* None */)
{
    public static SharedVertex Read(EndianBinaryReader reader)
    {
        int[] _m_Vertices = BuiltInArray<int>.Read(reader);
        
        return new(_m_Vertices);
    }
}

/* $UnwrapParameters (4 fields) */
public readonly record struct UnwrapParameters(
    float m_HardAngle /* NeedsAlign */,
    float m_PackMargin /* None */,
    float m_AngleError /* None */,
    float m_AreaError /* None */)
{
    public static UnwrapParameters Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_HardAngle */
        float _m_HardAngle = reader.ReadF32();
        float _m_PackMargin = reader.ReadF32();
        float _m_AngleError = reader.ReadF32();
        float _m_AreaError = reader.ReadF32();
        
        return new(_m_HardAngle,
            _m_PackMargin,
            _m_AngleError,
            _m_AreaError);
    }
}

/* $Edge (2 fields) */
public readonly record struct Edge(
    int a /* None */,
    int b /* None */)
{
    public static Edge Read(EndianBinaryReader reader)
    {
        int _a = reader.ReadS32();
        int _b = reader.ReadS32();
        
        return new(_a,
            _b);
    }
}

/* $PrefabInPair (2 fields) */
public record class PrefabInPair(
    PPtr<GameObject> PrefabPairGo /* None */,
    int PrefabPairInt /* None */)
{
    public static PrefabInPair Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _PrefabPairGo = PPtr<GameObject>.Read(reader);
        int _PrefabPairInt = reader.ReadS32();
        
        return new(_PrefabPairGo,
            _PrefabPairInt);
    }
}

/* $BlueprintFactionReference (1 fields) */
public record class BlueprintFactionReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintFactionReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $ColonyProjectsRequirementElementVisual (7 fields) */
public record class ColonyProjectsRequirementElementVisual(
    int Type /* None */,
    PPtr<GameObject> Container /* None */,
    PPtr<Image> Icon /* None */,
    PPtr<TextMeshProUGUI> Description /* None */,
    byte HasCheckmark /* None */,
    byte HasCount /* NeedsAlign */,
    PPtr<TextMeshProUGUI> CountText /* NeedsAlign */)
{
    public static ColonyProjectsRequirementElementVisual Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<GameObject> _Container = PPtr<GameObject>.Read(reader);
        PPtr<Image> _Icon = PPtr<Image>.Read(reader);
        PPtr<TextMeshProUGUI> _Description = PPtr<TextMeshProUGUI>.Read(reader);
        byte _HasCheckmark = reader.ReadU8();
        reader.AlignTo(4); /* HasCount */
        byte _HasCount = reader.ReadU8();
        reader.AlignTo(4); /* CountText */
        PPtr<TextMeshProUGUI> _CountText = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(_Type,
            _Container,
            _Icon,
            _Description,
            _HasCheckmark,
            _HasCount,
            _CountText);
    }
}

/* $Clip (6 fields) */
public record class Clip(
    AsciiString PropertyName /* None */,
    AnimationCurve Curve /* NeedsAlign */,
    float CurveDuration /* NeedsAlign */,
    float Duration /* None */,
    float Delay /* None */,
    int Priority /* None */)
{
    public static Clip Read(EndianBinaryReader reader)
    {
        AsciiString _PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Curve */
        AnimationCurve _Curve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* CurveDuration */
        float _CurveDuration = reader.ReadF32();
        float _Duration = reader.ReadF32();
        float _Delay = reader.ReadF32();
        int _Priority = reader.ReadS32();
        
        return new(_PropertyName,
            _Curve,
            _CurveDuration,
            _Duration,
            _Delay,
            _Priority);
    }
}

/* $ObjectSnapSettingsView (6 fields) */
public record class ObjectSnapSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectSnapSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectPlacementBlockManualConstructionRenderSettingsView (6 fields) */
public record class ObjectPlacementBlockManualConstructionRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementBlockManualConstructionRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $SoundFXSettings (4 fields) */
public record class SoundFXSettings(
    AsciiString Event /* None */,
    float Gain /* NeedsAlign */,
    float Pitch /* None */,
    float Delay /* None */)
{
    public static SoundFXSettings Read(EndianBinaryReader reader)
    {
        AsciiString _Event = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Gain */
        float _Gain = reader.ReadF32();
        float _Pitch = reader.ReadF32();
        float _Delay = reader.ReadF32();
        
        return new(_Event,
            _Gain,
            _Pitch,
            _Delay);
    }
}

/* $SliderEvent (1 fields) */
public record class SliderEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static SliderEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $PrefabCollection (2 fields) */
public record class PrefabCollection(
    Prefab _namedEntities /* NeedsAlign */,
    int _indexOfMarkedEntity /* NeedsAlign */)
{
    public static PrefabCollection Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _namedEntities */
        Prefab __namedEntities = Prefab.Read(reader);
        reader.AlignTo(4); /* _indexOfMarkedEntity */
        int __indexOfMarkedEntity = reader.ReadS32();
        
        return new(__namedEntities,
            __indexOfMarkedEntity);
    }
}

/* $CareerPathRoundProgressionConfig (4 fields) */
public record class CareerPathRoundProgressionConfig(
    int Tier /* None */,
    int ItemsRadius /* None */,
    int ProgressBarSize /* None */,
    PPtr<Sprite> Icon /* None */)
{
    public static CareerPathRoundProgressionConfig Read(EndianBinaryReader reader)
    {
        int _Tier = reader.ReadS32();
        int _ItemsRadius = reader.ReadS32();
        int _ProgressBarSize = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        
        return new(_Tier,
            _ItemsRadius,
            _ProgressBarSize,
            _Icon);
    }
}

/* $InteractionBarkSettings (22 fields) */
public record class InteractionBarkSettings(
    int UIType /* NeedsAlign */,
    byte NotInCombat /* None */,
    byte ShowOvertip /* NeedsAlign */,
    byte AlwaysDisabled /* NeedsAlign */,
    byte ShowHighlight /* NeedsAlign */,
    int ProximityRadius /* NeedsAlign */,
    int Type /* None */,
    int UseAnimationState /* None */,
    BlueprintDialogReference m_Dialog /* None */,
    AsciiString InteractionSound /* NeedsAlign */,
    AsciiString InteractionDisabledSound /* NeedsAlign */,
    AsciiString InteractionStopSound /* NeedsAlign */,
    PPtr<TrapObjectView> Trap /* NeedsAlign */,
    byte DoNotNeedCollider /* None */,
    byte UnlimitedInteractionsPerRound /* NeedsAlign */,
    byte OverrideActionPointsCost /* NeedsAlign */,
    int ActionPointsCost /* NeedsAlign */,
    InteractWithToolFXData InteractWithMeltaChargeFXData /* None */,
    float OvertipVerticalCorrection /* NeedsAlign */,
    ConditionsReference Condition /* None */,
    PPtr<SharedStringAsset> Bark /* NeedsAlign */,
    byte ShowOnUser /* None */)
{
    public static InteractionBarkSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* UIType */
        int _UIType = reader.ReadS32();
        byte _NotInCombat = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte _ShowOvertip = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte _AlwaysDisabled = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        byte _ShowHighlight = reader.ReadU8();
        reader.AlignTo(4); /* ProximityRadius */
        int _ProximityRadius = reader.ReadS32();
        int _Type = reader.ReadS32();
        int _UseAnimationState = reader.ReadS32();
        BlueprintDialogReference _m_Dialog = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString _InteractionSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString _InteractionDisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        AsciiString _InteractionStopSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trap */
        PPtr<TrapObjectView> _Trap = PPtr<TrapObjectView>.Read(reader);
        byte _DoNotNeedCollider = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte _UnlimitedInteractionsPerRound = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        byte _OverrideActionPointsCost = reader.ReadU8();
        reader.AlignTo(4); /* ActionPointsCost */
        int _ActionPointsCost = reader.ReadS32();
        InteractWithToolFXData _InteractWithMeltaChargeFXData = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* OvertipVerticalCorrection */
        float _OvertipVerticalCorrection = reader.ReadF32();
        ConditionsReference _Condition = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* Bark */
        PPtr<SharedStringAsset> _Bark = PPtr<SharedStringAsset>.Read(reader);
        byte _ShowOnUser = reader.ReadU8();
        
        return new(_UIType,
            _NotInCombat,
            _ShowOvertip,
            _AlwaysDisabled,
            _ShowHighlight,
            _ProximityRadius,
            _Type,
            _UseAnimationState,
            _m_Dialog,
            _InteractionSound,
            _InteractionDisabledSound,
            _InteractionStopSound,
            _Trap,
            _DoNotNeedCollider,
            _UnlimitedInteractionsPerRound,
            _OverrideActionPointsCost,
            _ActionPointsCost,
            _InteractWithMeltaChargeFXData,
            _OvertipVerticalCorrection,
            _Condition,
            _Bark,
            _ShowOnUser);
    }
}

/* $LinkEventData (1 fields) */
public record class LinkEventData(
    PersistentCallGroup m_PersistentCalls /* NeedsAlign */)
{
    public static LinkEventData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_PersistentCalls */
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $ShipDecalMeshData (4 fields) */
public record class ShipDecalMeshData(
    byte IsDirect /* None */,
    PPtr<MeshRenderer> Renderer /* NeedsAlign */,
    PPtr<Material> NormalMaterial /* None */,
    PPtr<Material> SelectedMaterial /* None */)
{
    public static ShipDecalMeshData Read(EndianBinaryReader reader)
    {
        byte _IsDirect = reader.ReadU8();
        reader.AlignTo(4); /* Renderer */
        PPtr<MeshRenderer> _Renderer = PPtr<MeshRenderer>.Read(reader);
        PPtr<Material> _NormalMaterial = PPtr<Material>.Read(reader);
        PPtr<Material> _SelectedMaterial = PPtr<Material>.Read(reader);
        
        return new(_IsDirect,
            _Renderer,
            _NormalMaterial,
            _SelectedMaterial);
    }
}

/* $CompositeAnimationCurve (2 fields) */
public record class CompositeAnimationCurve(
    AnimationCurve ScaleCurve /* None */,
    Entry Entries /* NeedsAlign */)
{
    public static CompositeAnimationCurve Read(EndianBinaryReader reader)
    {
        AnimationCurve _ScaleCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* Entries */
        Entry _Entries = Entry.Read(reader);
        
        return new(_ScaleCurve,
            _Entries);
    }
}

/* $TrailEmitter (13 fields) */
public record class TrailEmitter(
    PPtr<GameObject> Spawner /* None */,
    PPtr<GameObject> SecondSpawner /* None */,
    byte Smooth /* None */,
    float WidthFactor /* NeedsAlign */,
    byte UseSpawnerScale /* None */,
    int WidthOffset /* NeedsAlign */,
    float UvOffset /* None */,
    float RandomUvOffset /* None */,
    int VelocityType /* None */,
    float RandomizeVelocity /* None */,
    float Delay /* None */,
    byte UseUnscaledTime /* None */,
    byte DontDestroyOnDisable /* NeedsAlign */)
{
    public static TrailEmitter Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _Spawner = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> _SecondSpawner = PPtr<GameObject>.Read(reader);
        byte _Smooth = reader.ReadU8();
        reader.AlignTo(4); /* WidthFactor */
        float _WidthFactor = reader.ReadF32();
        byte _UseSpawnerScale = reader.ReadU8();
        reader.AlignTo(4); /* WidthOffset */
        int _WidthOffset = reader.ReadS32();
        float _UvOffset = reader.ReadF32();
        float _RandomUvOffset = reader.ReadF32();
        int _VelocityType = reader.ReadS32();
        float _RandomizeVelocity = reader.ReadF32();
        float _Delay = reader.ReadF32();
        byte _UseUnscaledTime = reader.ReadU8();
        reader.AlignTo(4); /* DontDestroyOnDisable */
        byte _DontDestroyOnDisable = reader.ReadU8();
        
        return new(_Spawner,
            _SecondSpawner,
            _Smooth,
            _WidthFactor,
            _UseSpawnerScale,
            _WidthOffset,
            _UvOffset,
            _RandomUvOffset,
            _VelocityType,
            _RandomizeVelocity,
            _Delay,
            _UseUnscaledTime,
            _DontDestroyOnDisable);
    }
}

/* $ViewDCModifier (2 fields) */
public record class ViewDCModifier(
    int Mod /* None */,
    ConditionsReference Conditions /* None */)
{
    public static ViewDCModifier Read(EndianBinaryReader reader)
    {
        int _Mod = reader.ReadS32();
        ConditionsReference _Conditions = ConditionsReference.Read(reader);
        
        return new(_Mod,
            _Conditions);
    }
}

/* $Experience (4 fields) */
public readonly record struct Experience(
    int Encounter /* NeedsAlign */,
    float Modifier /* None */,
    byte CRByZone /* None */,
    int CR /* NeedsAlign */)
{
    public static Experience Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Encounter */
        int _Encounter = reader.ReadS32();
        float _Modifier = reader.ReadF32();
        byte _CRByZone = reader.ReadU8();
        reader.AlignTo(4); /* CR */
        int _CR = reader.ReadS32();
        
        return new(_Encounter,
            _Modifier,
            _CRByZone,
            _CR);
    }
}

/* $InteractionSkillCheckSettings (49 fields) */
public record class InteractionSkillCheckSettings(
    int UIType /* NeedsAlign */,
    byte NotInCombat /* None */,
    byte ShowOvertip /* NeedsAlign */,
    byte AlwaysDisabled /* NeedsAlign */,
    byte ShowHighlight /* NeedsAlign */,
    int ProximityRadius /* NeedsAlign */,
    int Type /* None */,
    int UseAnimationState /* None */,
    BlueprintDialogReference m_Dialog /* None */,
    AsciiString InteractionSound /* NeedsAlign */,
    AsciiString InteractionDisabledSound /* NeedsAlign */,
    AsciiString InteractionStopSound /* NeedsAlign */,
    PPtr<TrapObjectView> Trap /* NeedsAlign */,
    byte DoNotNeedCollider /* None */,
    byte UnlimitedInteractionsPerRound /* NeedsAlign */,
    byte OverrideActionPointsCost /* NeedsAlign */,
    int ActionPointsCost /* NeedsAlign */,
    InteractWithToolFXData InteractWithMeltaChargeFXData /* None */,
    float OvertipVerticalCorrection /* NeedsAlign */,
    byte FadeOnSuccess /* None */,
    byte FadeOnFail /* NeedsAlign */,
    int PenaltyForFailedSkillCheck /* NeedsAlign */,
    byte ApplyPenaltyAfterFade /* None */,
    int Skill /* NeedsAlign */,
    byte NeedSupply /* None */,
    int DC /* NeedsAlign */,
    byte Exact /* None */,
    int FakeResult /* NeedsAlign */,
    ViewDCModifier[] DCModifiers /* None */,
    PPtr<SharedStringAsset> DisplayName /* NeedsAlign */,
    PPtr<SharedStringAsset> ShortDescription /* None */,
    PPtr<SharedStringAsset> TooltipKeyword /* None */,
    ConditionsReference Condition /* None */,
    byte HideDC /* NeedsAlign */,
    byte DisableAfterUse /* NeedsAlign */,
    byte OnlyCheckOnce /* NeedsAlign */,
    byte TriggerActionsEveryClick /* NeedsAlign */,
    PPtr<SharedStringAsset> DisplayNameAfterUse /* NeedsAlign */,
    PPtr<SharedStringAsset> ShortDescriptionPassed /* None */,
    PPtr<SharedStringAsset> ShortDescriptionFailed /* None */,
    byte IsPartyCheck /* None */,
    PPtr<SharedStringAsset> CheckPassedBark /* NeedsAlign */,
    ActionsReference CheckPassedActions /* None */,
    BlueprintAreaEnterPointReference m_TeleportOnSuccess /* NeedsAlign */,
    BlueprintAreaEnterPointReference m_TeleportOnFail /* NeedsAlign */,
    PPtr<SharedStringAsset> CheckFailBark /* NeedsAlign */,
    ActionsReference CheckFailedActions /* None */,
    byte ShowOnUser /* NeedsAlign */,
    Experience Exp /* NeedsAlign */)
{
    public static InteractionSkillCheckSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* UIType */
        int _UIType = reader.ReadS32();
        byte _NotInCombat = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte _ShowOvertip = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte _AlwaysDisabled = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        byte _ShowHighlight = reader.ReadU8();
        reader.AlignTo(4); /* ProximityRadius */
        int _ProximityRadius = reader.ReadS32();
        int _Type = reader.ReadS32();
        int _UseAnimationState = reader.ReadS32();
        BlueprintDialogReference _m_Dialog = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString _InteractionSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString _InteractionDisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        AsciiString _InteractionStopSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trap */
        PPtr<TrapObjectView> _Trap = PPtr<TrapObjectView>.Read(reader);
        byte _DoNotNeedCollider = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte _UnlimitedInteractionsPerRound = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        byte _OverrideActionPointsCost = reader.ReadU8();
        reader.AlignTo(4); /* ActionPointsCost */
        int _ActionPointsCost = reader.ReadS32();
        InteractWithToolFXData _InteractWithMeltaChargeFXData = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* OvertipVerticalCorrection */
        float _OvertipVerticalCorrection = reader.ReadF32();
        byte _FadeOnSuccess = reader.ReadU8();
        reader.AlignTo(4); /* FadeOnFail */
        byte _FadeOnFail = reader.ReadU8();
        reader.AlignTo(4); /* PenaltyForFailedSkillCheck */
        int _PenaltyForFailedSkillCheck = reader.ReadS32();
        byte _ApplyPenaltyAfterFade = reader.ReadU8();
        reader.AlignTo(4); /* Skill */
        int _Skill = reader.ReadS32();
        byte _NeedSupply = reader.ReadU8();
        reader.AlignTo(4); /* DC */
        int _DC = reader.ReadS32();
        byte _Exact = reader.ReadU8();
        reader.AlignTo(4); /* FakeResult */
        int _FakeResult = reader.ReadS32();
        ViewDCModifier[] _DCModifiers = BuiltInArray<ViewDCModifier>.Read(reader);
        reader.AlignTo(4); /* DisplayName */
        PPtr<SharedStringAsset> _DisplayName = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> _ShortDescription = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> _TooltipKeyword = PPtr<SharedStringAsset>.Read(reader);
        ConditionsReference _Condition = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* HideDC */
        byte _HideDC = reader.ReadU8();
        reader.AlignTo(4); /* DisableAfterUse */
        byte _DisableAfterUse = reader.ReadU8();
        reader.AlignTo(4); /* OnlyCheckOnce */
        byte _OnlyCheckOnce = reader.ReadU8();
        reader.AlignTo(4); /* TriggerActionsEveryClick */
        byte _TriggerActionsEveryClick = reader.ReadU8();
        reader.AlignTo(4); /* DisplayNameAfterUse */
        PPtr<SharedStringAsset> _DisplayNameAfterUse = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> _ShortDescriptionPassed = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> _ShortDescriptionFailed = PPtr<SharedStringAsset>.Read(reader);
        byte _IsPartyCheck = reader.ReadU8();
        reader.AlignTo(4); /* CheckPassedBark */
        PPtr<SharedStringAsset> _CheckPassedBark = PPtr<SharedStringAsset>.Read(reader);
        ActionsReference _CheckPassedActions = ActionsReference.Read(reader);
        reader.AlignTo(4); /* m_TeleportOnSuccess */
        BlueprintAreaEnterPointReference _m_TeleportOnSuccess = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* m_TeleportOnFail */
        BlueprintAreaEnterPointReference _m_TeleportOnFail = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* CheckFailBark */
        PPtr<SharedStringAsset> _CheckFailBark = PPtr<SharedStringAsset>.Read(reader);
        ActionsReference _CheckFailedActions = ActionsReference.Read(reader);
        reader.AlignTo(4); /* ShowOnUser */
        byte _ShowOnUser = reader.ReadU8();
        reader.AlignTo(4); /* Exp */
        Experience _Exp = Experience.Read(reader);
        
        return new(_UIType,
            _NotInCombat,
            _ShowOvertip,
            _AlwaysDisabled,
            _ShowHighlight,
            _ProximityRadius,
            _Type,
            _UseAnimationState,
            _m_Dialog,
            _InteractionSound,
            _InteractionDisabledSound,
            _InteractionStopSound,
            _Trap,
            _DoNotNeedCollider,
            _UnlimitedInteractionsPerRound,
            _OverrideActionPointsCost,
            _ActionPointsCost,
            _InteractWithMeltaChargeFXData,
            _OvertipVerticalCorrection,
            _FadeOnSuccess,
            _FadeOnFail,
            _PenaltyForFailedSkillCheck,
            _ApplyPenaltyAfterFade,
            _Skill,
            _NeedSupply,
            _DC,
            _Exact,
            _FakeResult,
            _DCModifiers,
            _DisplayName,
            _ShortDescription,
            _TooltipKeyword,
            _Condition,
            _HideDC,
            _DisableAfterUse,
            _OnlyCheckOnce,
            _TriggerActionsEveryClick,
            _DisplayNameAfterUse,
            _ShortDescriptionPassed,
            _ShortDescriptionFailed,
            _IsPartyCheck,
            _CheckPassedBark,
            _CheckPassedActions,
            _m_TeleportOnSuccess,
            _m_TeleportOnFail,
            _CheckFailBark,
            _CheckFailedActions,
            _ShowOnUser,
            _Exp);
    }
}

/* $BlueprintDynamicMapObjectReference (1 fields) */
public record class BlueprintDynamicMapObjectReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintDynamicMapObjectReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $DialogColors (13 fields) */
public record class DialogColors(
    ColorRGBA NameColorMultiplyer /* NeedsAlign */,
    ColorRGBA Narrator /* None */,
    ColorRGBA SelectedAnswer /* None */,
    ColorRGBA FocusAnswer /* None */,
    ColorRGBA FocusDisableAnswer /* None */,
    ColorRGBA NormalAnswer /* None */,
    ColorRGBA DisabledAnswer /* None */,
    ColorRGBA SoulMarkShiftBePositive /* None */,
    ColorRGBA SoulMarkShiftBeNegative /* None */,
    ColorRGBA SkillCheckSuccessfulDialogue /* None */,
    ColorRGBA SkillCheckFailedDialogue /* None */,
    ColorRGBA SkillCheckSuccessfulBE /* None */,
    ColorRGBA SkillCheckFailedBE /* None */)
{
    public static DialogColors Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* NameColorMultiplyer */
        ColorRGBA _NameColorMultiplyer = ColorRGBA.Read(reader);
        ColorRGBA _Narrator = ColorRGBA.Read(reader);
        ColorRGBA _SelectedAnswer = ColorRGBA.Read(reader);
        ColorRGBA _FocusAnswer = ColorRGBA.Read(reader);
        ColorRGBA _FocusDisableAnswer = ColorRGBA.Read(reader);
        ColorRGBA _NormalAnswer = ColorRGBA.Read(reader);
        ColorRGBA _DisabledAnswer = ColorRGBA.Read(reader);
        ColorRGBA _SoulMarkShiftBePositive = ColorRGBA.Read(reader);
        ColorRGBA _SoulMarkShiftBeNegative = ColorRGBA.Read(reader);
        ColorRGBA _SkillCheckSuccessfulDialogue = ColorRGBA.Read(reader);
        ColorRGBA _SkillCheckFailedDialogue = ColorRGBA.Read(reader);
        ColorRGBA _SkillCheckSuccessfulBE = ColorRGBA.Read(reader);
        ColorRGBA _SkillCheckFailedBE = ColorRGBA.Read(reader);
        
        return new(_NameColorMultiplyer,
            _Narrator,
            _SelectedAnswer,
            _FocusAnswer,
            _FocusDisableAnswer,
            _NormalAnswer,
            _DisabledAnswer,
            _SoulMarkShiftBePositive,
            _SoulMarkShiftBeNegative,
            _SkillCheckSuccessfulDialogue,
            _SkillCheckFailedDialogue,
            _SkillCheckSuccessfulBE,
            _SkillCheckFailedBE);
    }
}

/* $LocalMapMarkerSettings (4 fields) */
public record class LocalMapMarkerSettings(
    int Type /* NeedsAlign */,
    PPtr<SharedStringAsset> Description /* None */,
    BlueprintUnitReference m_DescriptionUnit /* None */,
    byte StartHidden /* NeedsAlign */)
{
    public static LocalMapMarkerSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Type */
        int _Type = reader.ReadS32();
        PPtr<SharedStringAsset> _Description = PPtr<SharedStringAsset>.Read(reader);
        BlueprintUnitReference _m_DescriptionUnit = BlueprintUnitReference.Read(reader);
        reader.AlignTo(4); /* StartHidden */
        byte _StartHidden = reader.ReadU8();
        
        return new(_Type,
            _Description,
            _m_DescriptionUnit,
            _StartHidden);
    }
}

/* $PathObjectPlacementSettingsView (6 fields) */
public record class PathObjectPlacementSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static PathObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $VFXBakedGroundAreaAsset (2 fields) */
public record class VFXBakedGroundAreaAsset(
    AsciiString m_Identifier /* None */,
    PPtr<Texture2D> Texture /* NeedsAlign */)
{
    public static VFXBakedGroundAreaAsset Read(EndianBinaryReader reader)
    {
        AsciiString _m_Identifier = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Texture */
        PPtr<Texture2D> _Texture = PPtr<Texture2D>.Read(reader);
        
        return new(_m_Identifier,
            _Texture);
    }
}

/* $GPUAnimationClip (2 fields) */
public record class GPUAnimationClip(
    AsciiString Name /* None */,
    int FrameCount /* NeedsAlign */)
{
    public static GPUAnimationClip Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* FrameCount */
        int _FrameCount = reader.ReadS32();
        
        return new(_Name,
            _FrameCount);
    }
}

/* $EquipmentEntityLink (1 fields) */
public record class EquipmentEntityLink(
    AsciiString AssetId /* None */)
{
    public static EquipmentEntityLink Read(EndianBinaryReader reader)
    {
        AsciiString _AssetId = BuiltInString.Read(reader);
        
        return new(_AssetId);
    }
}

/* $SavedSelectedRampIndices (3 fields) */
public record class SavedSelectedRampIndices(
    EquipmentEntityLink EquipmentEntityLink /* None */,
    int PrimaryIndex /* NeedsAlign */,
    int SecondaryIndex /* None */)
{
    public static SavedSelectedRampIndices Read(EndianBinaryReader reader)
    {
        EquipmentEntityLink _EquipmentEntityLink = EquipmentEntityLink.Read(reader);
        reader.AlignTo(4); /* PrimaryIndex */
        int _PrimaryIndex = reader.ReadS32();
        int _SecondaryIndex = reader.ReadS32();
        
        return new(_EquipmentEntityLink,
            _PrimaryIndex,
            _SecondaryIndex);
    }
}

/* $DismembermentPieceDescriptor (10 fields) */
public record class DismembermentPieceDescriptor(
    PPtr<Transform> Root /* None */,
    PPtr<Transform> Skeleton /* None */,
    PPtr<Rigidbody>[] ImpulseRigidBodies /* None */,
    PPtr<Collider>[] Colliders /* None */,
    PPtr<CharacterJoint>[] Joints /* None */,
    Vector3f Impulse /* None */,
    Vector2f ImpulseMultiplier /* None */,
    Vector2f IncomingImpulseMultiplier /* None */,
    Vector2f ChildrenImpulseMultiplier /* None */,
    float PieceMass /* None */)
{
    public static DismembermentPieceDescriptor Read(EndianBinaryReader reader)
    {
        PPtr<Transform> _Root = PPtr<Transform>.Read(reader);
        PPtr<Transform> _Skeleton = PPtr<Transform>.Read(reader);
        PPtr<Rigidbody>[] _ImpulseRigidBodies = BuiltInArray<PPtr<Rigidbody>>.Read(reader);
        PPtr<Collider>[] _Colliders = BuiltInArray<PPtr<Collider>>.Read(reader);
        PPtr<CharacterJoint>[] _Joints = BuiltInArray<PPtr<CharacterJoint>>.Read(reader);
        Vector3f _Impulse = Vector3f.Read(reader);
        Vector2f _ImpulseMultiplier = Vector2f.Read(reader);
        Vector2f _IncomingImpulseMultiplier = Vector2f.Read(reader);
        Vector2f _ChildrenImpulseMultiplier = Vector2f.Read(reader);
        float _PieceMass = reader.ReadF32();
        
        return new(_Root,
            _Skeleton,
            _ImpulseRigidBodies,
            _Colliders,
            _Joints,
            _Impulse,
            _ImpulseMultiplier,
            _IncomingImpulseMultiplier,
            _ChildrenImpulseMultiplier,
            _PieceMass);
    }
}

/* $CharGenPhaseDetailedViewsFactory (15 fields) */
public record class CharGenPhaseDetailedViewsFactory(
    PPtr<CharGenPregenPhaseDetailedView> m_PregenPhaseDetailedView /* None */,
    PPtr<CharGenAppearancePhaseDetailedView> m_AppearancePhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_SoulMarkPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_HomeworldPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_ImperialHomeworldChildPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_ForgeHomeworldChildPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_OccupationPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_NavigatorPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_SanctionedPsykerPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_DarkestHourPhaseDetailedView /* None */,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_MomentOfTriumphPhaseDetailedView /* None */,
    PPtr<CharGenCareerPhaseDetailedView> m_CareerPhaseDetailedView /* None */,
    PPtr<CharGenAttributesPhaseDetailedView> m_AttributesPhaseDetailedView /* None */,
    PPtr<CharGenSummaryPhaseDetailedView> m_SummaryPhaseDetailedView /* None */,
    PPtr<CharGenShipPhaseDetailedView> m_ShipPhaseDetailedView /* None */)
{
    public static CharGenPhaseDetailedViewsFactory Read(EndianBinaryReader reader)
    {
        PPtr<CharGenPregenPhaseDetailedView> _m_PregenPhaseDetailedView = PPtr<CharGenPregenPhaseDetailedView>.Read(reader);
        PPtr<CharGenAppearancePhaseDetailedView> _m_AppearancePhaseDetailedView = PPtr<CharGenAppearancePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_SoulMarkPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_HomeworldPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_ImperialHomeworldChildPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_ForgeHomeworldChildPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_OccupationPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_NavigatorPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_SanctionedPsykerPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_DarkestHourPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> _m_MomentOfTriumphPhaseDetailedView = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenCareerPhaseDetailedView> _m_CareerPhaseDetailedView = PPtr<CharGenCareerPhaseDetailedView>.Read(reader);
        PPtr<CharGenAttributesPhaseDetailedView> _m_AttributesPhaseDetailedView = PPtr<CharGenAttributesPhaseDetailedView>.Read(reader);
        PPtr<CharGenSummaryPhaseDetailedView> _m_SummaryPhaseDetailedView = PPtr<CharGenSummaryPhaseDetailedView>.Read(reader);
        PPtr<CharGenShipPhaseDetailedView> _m_ShipPhaseDetailedView = PPtr<CharGenShipPhaseDetailedView>.Read(reader);
        
        return new(_m_PregenPhaseDetailedView,
            _m_AppearancePhaseDetailedView,
            _m_SoulMarkPhaseDetailedView,
            _m_HomeworldPhaseDetailedView,
            _m_ImperialHomeworldChildPhaseDetailedView,
            _m_ForgeHomeworldChildPhaseDetailedView,
            _m_OccupationPhaseDetailedView,
            _m_NavigatorPhaseDetailedView,
            _m_SanctionedPsykerPhaseDetailedView,
            _m_DarkestHourPhaseDetailedView,
            _m_MomentOfTriumphPhaseDetailedView,
            _m_CareerPhaseDetailedView,
            _m_AttributesPhaseDetailedView,
            _m_SummaryPhaseDetailedView,
            _m_ShipPhaseDetailedView);
    }
}

/* $DollPosition (2 fields) */
public record class DollPosition(
    int Position /* None */,
    PPtr<RectTransform> Transform /* None */)
{
    public static DollPosition Read(EndianBinaryReader reader)
    {
        int _Position = reader.ReadS32();
        PPtr<RectTransform> _Transform = PPtr<RectTransform>.Read(reader);
        
        return new(_Position,
            _Transform);
    }
}

/* $DismembermentBone (3 fields) */
public record class DismembermentBone(
    PPtr<Transform> Transform /* None */,
    float SliceOffset /* None */,
    Vector3f SliceOrientationEuler /* None */)
{
    public static DismembermentBone Read(EndianBinaryReader reader)
    {
        PPtr<Transform> _Transform = PPtr<Transform>.Read(reader);
        float _SliceOffset = reader.ReadF32();
        Vector3f _SliceOrientationEuler = Vector3f.Read(reader);
        
        return new(_Transform,
            _SliceOffset,
            _SliceOrientationEuler);
    }
}

/* $DismembermentSet (3 fields) */
public record class DismembermentSet(
    int Type /* None */,
    DismembermentBone[] SliceBones /* None */,
    PrefabLink Prefab /* None */)
{
    public static DismembermentSet Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        DismembermentBone[] _SliceBones = BuiltInArray<DismembermentBone>.Read(reader);
        PrefabLink _Prefab = PrefabLink.Read(reader);
        
        return new(_Type,
            _SliceBones,
            _Prefab);
    }
}

/* $SingleDecorPaintModeObjectPlacementSettingsView (6 fields) */
public record class SingleDecorPaintModeObjectPlacementSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static SingleDecorPaintModeObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ConditionalRestrictionSettings (1 fields) */
public record class ConditionalRestrictionSettings(
    ConditionsReference Condition /* NeedsAlign */)
{
    public static ConditionalRestrictionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Condition */
        ConditionsReference _Condition = ConditionsReference.Read(reader);
        
        return new(_Condition);
    }
}

/* $Texture2DLink (1 fields) */
public record class Texture2DLink(
    AsciiString AssetId /* NeedsAlign */)
{
    public static Texture2DLink Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AssetId */
        AsciiString _AssetId = BuiltInString.Read(reader);
        
        return new(_AssetId);
    }
}

/* $LineOfSightColor (3 fields) */
public record class LineOfSightColor(
    float HitChance /* None */,
    Gradient Gradient /* None */,
    ColorRGBA Color /* NeedsAlign */)
{
    public static LineOfSightColor Read(EndianBinaryReader reader)
    {
        float _HitChance = reader.ReadF32();
        Gradient _Gradient = Gradient.Read(reader);
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        
        return new(_HitChance,
            _Gradient,
            _Color);
    }
}

/* $CurrentWalkingStyleLayer (7 fields) */
public record class CurrentWalkingStyleLayer(
    AnimationCurve InCurve /* None */,
    AnimationCurve OutCurve /* NeedsAlign */,
    float OutDistance /* NeedsAlign */,
    PPtr<AnimationClipWrapper> In /* None */,
    PPtr<AnimationClipWrapper> Out /* None */,
    PPtr<AnimationClipWrapper> Clip /* None */,
    float Speed /* None */)
{
    public static CurrentWalkingStyleLayer Read(EndianBinaryReader reader)
    {
        AnimationCurve _InCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OutCurve */
        AnimationCurve _OutCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OutDistance */
        float _OutDistance = reader.ReadF32();
        PPtr<AnimationClipWrapper> _In = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _Out = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _Clip = PPtr<AnimationClipWrapper>.Read(reader);
        float _Speed = reader.ReadF32();
        
        return new(_InCurve,
            _OutCurve,
            _OutDistance,
            _In,
            _Out,
            _Clip,
            _Speed);
    }
}

/* $MovementStyleLayer (4 fields) */
public record class MovementStyleLayer(
    CurrentWalkingStyleLayer Crouch /* None */,
    CurrentWalkingStyleLayer Walking /* NeedsAlign */,
    CurrentWalkingStyleLayer Run /* NeedsAlign */,
    CurrentWalkingStyleLayer Sprint /* NeedsAlign */)
{
    public static MovementStyleLayer Read(EndianBinaryReader reader)
    {
        CurrentWalkingStyleLayer _Crouch = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Walking */
        CurrentWalkingStyleLayer _Walking = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Run */
        CurrentWalkingStyleLayer _Run = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Sprint */
        CurrentWalkingStyleLayer _Sprint = CurrentWalkingStyleLayer.Read(reader);
        
        return new(_Crouch,
            _Walking,
            _Run,
            _Sprint);
    }
}

/* $WeaponStyleIdleLayer (4 fields) */
public record class WeaponStyleIdleLayer(
    int Style /* None */,
    byte IsOffHand /* None */,
    byte NoOffHand /* NeedsAlign */,
    PPtr<AnimationClipWrapper> Wrapper /* NeedsAlign */)
{
    public static WeaponStyleIdleLayer Read(EndianBinaryReader reader)
    {
        int _Style = reader.ReadS32();
        byte _IsOffHand = reader.ReadU8();
        reader.AlignTo(4); /* NoOffHand */
        byte _NoOffHand = reader.ReadU8();
        reader.AlignTo(4); /* Wrapper */
        PPtr<AnimationClipWrapper> _Wrapper = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_Style,
            _IsOffHand,
            _NoOffHand,
            _Wrapper);
    }
}

/* $WeaponStyleLayer (3 fields) */
public record class WeaponStyleLayer(
    int Style /* None */,
    byte IsOffHand /* None */,
    MovementStyleLayer MovementStyleLayer /* NeedsAlign */)
{
    public static WeaponStyleLayer Read(EndianBinaryReader reader)
    {
        int _Style = reader.ReadS32();
        byte _IsOffHand = reader.ReadU8();
        reader.AlignTo(4); /* MovementStyleLayer */
        MovementStyleLayer _MovementStyleLayer = MovementStyleLayer.Read(reader);
        
        return new(_Style,
            _IsOffHand,
            _MovementStyleLayer);
    }
}

/* $MovePart (2 fields) */
public readonly record struct MovePart(
    float AppearSize /* NeedsAlign */,
    float DisappearSize /* None */)
{
    public static MovePart Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AppearSize */
        float _AppearSize = reader.ReadF32();
        float _DisappearSize = reader.ReadF32();
        
        return new(_AppearSize,
            _DisappearSize);
    }
}

/* $XZOrientedEllipseShapeRenderSettingsView (7 fields) */
public record class XZOrientedEllipseShapeRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<XZOrientedEllipseShapeRenderSettings> _settings /* NeedsAlign */)
{
    public static XZOrientedEllipseShapeRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _settings */
        PPtr<XZOrientedEllipseShapeRenderSettings> __settings = PPtr<XZOrientedEllipseShapeRenderSettings>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __settings);
    }
}

/* $Range`1 (2 fields) */
public readonly record struct Range_1(
    int _min /* None */,
    int _max /* None */)
{
    public static Range_1 Read(EndianBinaryReader reader)
    {
        int __min = reader.ReadS32();
        int __max = reader.ReadS32();
        
        return new(__min,
            __max);
    }
}

/* $XZGridFiniteDimensionSettings (2 fields) */
public record class XZGridFiniteDimensionSettings(
    Range_1 _xAxisCellIndexRange /* None */,
    Range_1 _zAxisCellIndexRange /* None */)
{
    public static XZGridFiniteDimensionSettings Read(EndianBinaryReader reader)
    {
        Range_1 __xAxisCellIndexRange = Range_1.Read(reader);
        Range_1 __zAxisCellIndexRange = Range_1.Read(reader);
        
        return new(__xAxisCellIndexRange,
            __zAxisCellIndexRange);
    }
}

/* $XZGridDimensionSettings (2 fields) */
public record class XZGridDimensionSettings(
    int _dimensionType /* None */,
    XZGridFiniteDimensionSettings _finiteDimensionSettings /* None */)
{
    public static XZGridDimensionSettings Read(EndianBinaryReader reader)
    {
        int __dimensionType = reader.ReadS32();
        XZGridFiniteDimensionSettings __finiteDimensionSettings = XZGridFiniteDimensionSettings.Read(reader);
        
        return new(__dimensionType,
            __finiteDimensionSettings);
    }
}

/* $TransformMatrix (3 fields) */
public record class TransformMatrix(
    Vector3f _translation /* NeedsAlign */,
    Quaternionf _rotation /* None */,
    Vector3f _scale /* None */)
{
    public static TransformMatrix Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _translation */
        Vector3f __translation = Vector3f.Read(reader);
        Quaternionf __rotation = Quaternionf.Read(reader);
        Vector3f __scale = Vector3f.Read(reader);
        
        return new(__translation,
            __rotation,
            __scale);
    }
}

/* $RenderableCoordinateSystem (3 fields) */
public record class RenderableCoordinateSystem(
    Vector3f[] _localAxes /* None */,
    TransformMatrix _transformMatrix /* NeedsAlign */,
    PPtr<CoordinateSystemRenderSettings> _renderSettings /* None */)
{
    public static RenderableCoordinateSystem Read(EndianBinaryReader reader)
    {
        Vector3f[] __localAxes = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _transformMatrix */
        TransformMatrix __transformMatrix = TransformMatrix.Read(reader);
        PPtr<CoordinateSystemRenderSettings> __renderSettings = PPtr<CoordinateSystemRenderSettings>.Read(reader);
        
        return new(__localAxes,
            __transformMatrix,
            __renderSettings);
    }
}

/* $CursorEntry (3 fields) */
public record class CursorEntry(
    int Type /* None */,
    PPtr<Sprite> Sprite /* None */,
    PPtr<Texture2D> Texture /* None */)
{
    public static CursorEntry Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<Sprite> _Sprite = PPtr<Sprite>.Read(reader);
        PPtr<Texture2D> _Texture = PPtr<Texture2D>.Read(reader);
        
        return new(_Type,
            _Sprite,
            _Texture);
    }
}

/* $DestructionStagesActionsSettings (2 fields) */
public record class DestructionStagesActionsSettings(
    ActionsReference m_OnBecameDamaged /* NeedsAlign */,
    ActionsReference m_OnBecameDestroyed /* NeedsAlign */)
{
    public static DestructionStagesActionsSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OnBecameDamaged */
        ActionsReference _m_OnBecameDamaged = ActionsReference.Read(reader);
        reader.AlignTo(4); /* m_OnBecameDestroyed */
        ActionsReference _m_OnBecameDestroyed = ActionsReference.Read(reader);
        
        return new(_m_OnBecameDamaged,
            _m_OnBecameDestroyed);
    }
}

/* $AxisKeyboardRotationSettingsView (6 fields) */
public record class AxisKeyboardRotationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static AxisKeyboardRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $TextHolder (1 fields) */
public record class TextHolder(
    LocalizedString Name /* None */)
{
    public static TextHolder Read(EndianBinaryReader reader)
    {
        LocalizedString _Name = LocalizedString.Read(reader);
        
        return new(_Name);
    }
}

/* $FormatEntry (2 fields) */
public record class FormatEntry(
    int Type /* None */,
    AsciiString Format /* None */)
{
    public static FormatEntry Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        AsciiString _Format = BuiltInString.Read(reader);
        
        return new(_Type,
            _Format);
    }
}

/* $TimePeriodStrings (16 fields) */
public record class TimePeriodStrings(
    LocalizedString OneDay /* NeedsAlign */,
    LocalizedString TwoDays /* NeedsAlign */,
    LocalizedString ThreeDays /* NeedsAlign */,
    LocalizedString FourDays /* NeedsAlign */,
    LocalizedString Days /* NeedsAlign */,
    LocalizedString LessThanAnHour /* NeedsAlign */,
    LocalizedString OneHour /* NeedsAlign */,
    LocalizedString TwoHours /* NeedsAlign */,
    LocalizedString ThreeHours /* NeedsAlign */,
    LocalizedString FourHours /* NeedsAlign */,
    LocalizedString Hours /* NeedsAlign */,
    LocalizedString And /* NeedsAlign */,
    LocalizedString CompactDay /* NeedsAlign */,
    LocalizedString CompactHour /* NeedsAlign */,
    LocalizedString CompactMinute /* NeedsAlign */,
    LocalizedString CompactSecond /* NeedsAlign */)
{
    public static TimePeriodStrings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* OneDay */
        LocalizedString _OneDay = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoDays */
        LocalizedString _TwoDays = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThreeDays */
        LocalizedString _ThreeDays = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FourDays */
        LocalizedString _FourDays = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Days */
        LocalizedString _Days = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LessThanAnHour */
        LocalizedString _LessThanAnHour = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneHour */
        LocalizedString _OneHour = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoHours */
        LocalizedString _TwoHours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThreeHours */
        LocalizedString _ThreeHours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FourHours */
        LocalizedString _FourHours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Hours */
        LocalizedString _Hours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* And */
        LocalizedString _And = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactDay */
        LocalizedString _CompactDay = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactHour */
        LocalizedString _CompactHour = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactMinute */
        LocalizedString _CompactMinute = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactSecond */
        LocalizedString _CompactSecond = LocalizedString.Read(reader);
        
        return new(_OneDay,
            _TwoDays,
            _ThreeDays,
            _FourDays,
            _Days,
            _LessThanAnHour,
            _OneHour,
            _TwoHours,
            _ThreeHours,
            _FourHours,
            _Hours,
            _And,
            _CompactDay,
            _CompactHour,
            _CompactMinute,
            _CompactSecond);
    }
}

/* $EntityNameFilterView (6 fields) */
public record class EntityNameFilterView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static EntityNameFilterView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $ObjectColliderSnapSurfaceGridSettingsView (6 fields) */
public record class ObjectColliderSnapSurfaceGridSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectColliderSnapSurfaceGridSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $PointOnMap (3 fields) */
public record class PointOnMap(
    AsciiString Comment /* None */,
    CanvasTransformSettings LightBeamPointSettings /* NeedsAlign */,
    PPtr<OwlcatMultiButton> PointButton /* None */)
{
    public static PointOnMap Read(EndianBinaryReader reader)
    {
        AsciiString _Comment = BuiltInString.Read(reader);
        reader.AlignTo(4); /* LightBeamPointSettings */
        CanvasTransformSettings _LightBeamPointSettings = CanvasTransformSettings.Read(reader);
        PPtr<OwlcatMultiButton> _PointButton = PPtr<OwlcatMultiButton>.Read(reader);
        
        return new(_Comment,
            _LightBeamPointSettings,
            _PointButton);
    }
}

/* $TransitionMapPart (8 fields) */
public record class TransitionMapPart(
    int Map /* None */,
    PPtr<GameObject> MapObject /* None */,
    PPtr<TransitionEntryBaseView>[] Entries /* None */,
    PPtr<WidgetListMVVM> WidgetList /* None */,
    PPtr<RectTransform> LightBeam /* None */,
    PPtr<CanvasGroup> LightBeamCanvas /* None */,
    PointOnMap[] PointsOnMap /* None */,
    PPtr<OwlcatButton> Close /* NeedsAlign */)
{
    public static TransitionMapPart Read(EndianBinaryReader reader)
    {
        int _Map = reader.ReadS32();
        PPtr<GameObject> _MapObject = PPtr<GameObject>.Read(reader);
        PPtr<TransitionEntryBaseView>[] _Entries = BuiltInArray<PPtr<TransitionEntryBaseView>>.Read(reader);
        PPtr<WidgetListMVVM> _WidgetList = PPtr<WidgetListMVVM>.Read(reader);
        PPtr<RectTransform> _LightBeam = PPtr<RectTransform>.Read(reader);
        PPtr<CanvasGroup> _LightBeamCanvas = PPtr<CanvasGroup>.Read(reader);
        PointOnMap[] _PointsOnMap = BuiltInArray<PointOnMap>.Read(reader);
        reader.AlignTo(4); /* Close */
        PPtr<OwlcatButton> _Close = PPtr<OwlcatButton>.Read(reader);
        
        return new(_Map,
            _MapObject,
            _Entries,
            _WidgetList,
            _LightBeam,
            _LightBeamCanvas,
            _PointsOnMap,
            _Close);
    }
}

/* $TrailBonesPair (2 fields) */
public record class TrailBonesPair(
    FxBone Start /* None */,
    FxBone End /* NeedsAlign */)
{
    public static TrailBonesPair Read(EndianBinaryReader reader)
    {
        FxBone _Start = FxBone.Read(reader);
        reader.AlignTo(4); /* End */
        FxBone _End = FxBone.Read(reader);
        
        return new(_Start,
            _End);
    }
}

/* $DecalColorSet (2 fields) */
public record class DecalColorSet(
    ColorRGBA Color /* NeedsAlign */,
    ColorRGBA UnconsciousColor /* None */)
{
    public static DecalColorSet Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        ColorRGBA _UnconsciousColor = ColorRGBA.Read(reader);
        
        return new(_Color,
            _UnconsciousColor);
    }
}

/* $UnitMarkDecal (4 fields) */
public record class UnitMarkDecal(
    PPtr<GameObject> GameObject /* None */,
    PPtr<MeshRenderer> DecalMeshRenderer /* None */,
    PPtr<Material> MaterialSizeStandard /* None */,
    PPtr<Material> MaterailSizeBig /* None */)
{
    public static UnitMarkDecal Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _GameObject = PPtr<GameObject>.Read(reader);
        PPtr<MeshRenderer> _DecalMeshRenderer = PPtr<MeshRenderer>.Read(reader);
        PPtr<Material> _MaterialSizeStandard = PPtr<Material>.Read(reader);
        PPtr<Material> _MaterailSizeBig = PPtr<Material>.Read(reader);
        
        return new(_GameObject,
            _DecalMeshRenderer,
            _MaterialSizeStandard,
            _MaterailSizeBig);
    }
}

/* $ShieldDecalColorSet (1 fields) */
public record class ShieldDecalColorSet(
    ColorRGBA ShieldColor /* NeedsAlign */)
{
    public static ShieldDecalColorSet Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShieldColor */
        ColorRGBA _ShieldColor = ColorRGBA.Read(reader);
        
        return new(_ShieldColor);
    }
}

/* $BlueprintAreaPresetReference (1 fields) */
public record class BlueprintAreaPresetReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintAreaPresetReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $ColonyStatTypeIcon (2 fields) */
public record class ColonyStatTypeIcon(
    int Type /* None */,
    PPtr<Sprite> Icon /* None */)
{
    public static ColonyStatTypeIcon Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        PPtr<Sprite> _Icon = PPtr<Sprite>.Read(reader);
        
        return new(_Type,
            _Icon);
    }
}

/* $AkAuxBusReference (1 fields) */
public record class AkAuxBusReference(
    AsciiString Value /* NeedsAlign */)
{
    public static AkAuxBusReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Value */
        AsciiString _Value = BuiltInString.Read(reader);
        
        return new(_Value);
    }
}

/* $WalkingStyleLayer (13 fields) */
public record class WalkingStyleLayer(
    AnimationCurve RunInCurve /* None */,
    AnimationCurve RunOutCurve /* NeedsAlign */,
    float RunOutDistance /* NeedsAlign */,
    PPtr<AnimationClipWrapper> RunIn /* None */,
    PPtr<AnimationClipWrapper> RunOut /* None */,
    PPtr<AnimationClipWrapper> Crouch /* None */,
    float CrouchSpeed /* None */,
    PPtr<AnimationClipWrapper> Walking /* None */,
    float WalkingSpeed /* None */,
    PPtr<AnimationClipWrapper> Run /* None */,
    float RunSpeed /* None */,
    PPtr<AnimationClipWrapper> Sprint /* None */,
    float SprintSpeed /* None */)
{
    public static WalkingStyleLayer Read(EndianBinaryReader reader)
    {
        AnimationCurve _RunInCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* RunOutCurve */
        AnimationCurve _RunOutCurve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* RunOutDistance */
        float _RunOutDistance = reader.ReadF32();
        PPtr<AnimationClipWrapper> _RunIn = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _RunOut = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _Crouch = PPtr<AnimationClipWrapper>.Read(reader);
        float _CrouchSpeed = reader.ReadF32();
        PPtr<AnimationClipWrapper> _Walking = PPtr<AnimationClipWrapper>.Read(reader);
        float _WalkingSpeed = reader.ReadF32();
        PPtr<AnimationClipWrapper> _Run = PPtr<AnimationClipWrapper>.Read(reader);
        float _RunSpeed = reader.ReadF32();
        PPtr<AnimationClipWrapper> _Sprint = PPtr<AnimationClipWrapper>.Read(reader);
        float _SprintSpeed = reader.ReadF32();
        
        return new(_RunInCurve,
            _RunOutCurve,
            _RunOutDistance,
            _RunIn,
            _RunOut,
            _Crouch,
            _CrouchSpeed,
            _Walking,
            _WalkingSpeed,
            _Run,
            _RunSpeed,
            _Sprint,
            _SprintSpeed);
    }
}

/* $WeaponStyleWalkingLayer (3 fields) */
public record class WeaponStyleWalkingLayer(
    int Style /* None */,
    byte IsOffHand /* None */,
    WalkingStyleLayer WalkingStyleLayer /* NeedsAlign */)
{
    public static WeaponStyleWalkingLayer Read(EndianBinaryReader reader)
    {
        int _Style = reader.ReadS32();
        byte _IsOffHand = reader.ReadU8();
        reader.AlignTo(4); /* WalkingStyleLayer */
        WalkingStyleLayer _WalkingStyleLayer = WalkingStyleLayer.Read(reader);
        
        return new(_Style,
            _IsOffHand,
            _WalkingStyleLayer);
    }
}

/* $BlueprintDlcReference (1 fields) */
public record class BlueprintDlcReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintDlcReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $IKChain2D (6 fields) */
public record class IKChain2D(
    PPtr<Transform> m_EffectorTransform /* None */,
    PPtr<Transform> m_TargetTransform /* None */,
    int m_TransformCount /* None */,
    PPtr<Transform>[] m_Transforms /* None */,
    Quaternionf[] m_DefaultLocalRotations /* None */,
    Quaternionf[] m_StoredLocalRotations /* NeedsAlign */)
{
    public static IKChain2D Read(EndianBinaryReader reader)
    {
        PPtr<Transform> _m_EffectorTransform = PPtr<Transform>.Read(reader);
        PPtr<Transform> _m_TargetTransform = PPtr<Transform>.Read(reader);
        int _m_TransformCount = reader.ReadS32();
        PPtr<Transform>[] _m_Transforms = BuiltInArray<PPtr<Transform>>.Read(reader);
        Quaternionf[] _m_DefaultLocalRotations = BuiltInArray<Quaternionf>.Read(reader);
        reader.AlignTo(4); /* m_StoredLocalRotations */
        Quaternionf[] _m_StoredLocalRotations = BuiltInArray<Quaternionf>.Read(reader);
        
        return new(_m_EffectorTransform,
            _m_TargetTransform,
            _m_TransformCount,
            _m_Transforms,
            _m_DefaultLocalRotations,
            _m_StoredLocalRotations);
    }
}

/* $ObjectPlacementBlockProjectionSettings (7 fields) */
public readonly record struct ObjectPlacementBlockProjectionSettings(
    byte _projectOnSurface /* None */,
    byte _rejectNonProjectables /* NeedsAlign */,
    int _projectionDirection /* NeedsAlign */,
    byte _canProjectOnTerrain /* None */,
    byte _canProjectOnMesh /* NeedsAlign */,
    byte _alignToSurfaceNormal /* NeedsAlign */,
    int _alignmentAxis /* NeedsAlign */)
{
    public static ObjectPlacementBlockProjectionSettings Read(EndianBinaryReader reader)
    {
        byte __projectOnSurface = reader.ReadU8();
        reader.AlignTo(4); /* _rejectNonProjectables */
        byte __rejectNonProjectables = reader.ReadU8();
        reader.AlignTo(4); /* _projectionDirection */
        int __projectionDirection = reader.ReadS32();
        byte __canProjectOnTerrain = reader.ReadU8();
        reader.AlignTo(4); /* _canProjectOnMesh */
        byte __canProjectOnMesh = reader.ReadU8();
        reader.AlignTo(4); /* _alignToSurfaceNormal */
        byte __alignToSurfaceNormal = reader.ReadU8();
        reader.AlignTo(4); /* _alignmentAxis */
        int __alignmentAxis = reader.ReadS32();
        
        return new(__projectOnSurface,
            __rejectNonProjectables,
            __projectionDirection,
            __canProjectOnTerrain,
            __canProjectOnMesh,
            __alignToSurfaceNormal,
            __alignmentAxis);
    }
}

/* $ObjectPlacementBlockSettingsView (6 fields) */
public record class ObjectPlacementBlockSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementBlockSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BlueprintProjectileReference (1 fields) */
public record class BlueprintProjectileReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintProjectileReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $ScrollRectEvent (1 fields) */
public record class ScrollRectEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static ScrollRectEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $WeatherDirectionalLightSettings (3 fields) */
public record class WeatherDirectionalLightSettings(
    AnimationCurve ShadowStrengthMultiplierOverRootIntensity /* None */,
    AnimationCurve LerpToNewColorOverRootIntensity /* NeedsAlign */,
    ColorRGBA NewColor /* NeedsAlign */)
{
    public static WeatherDirectionalLightSettings Read(EndianBinaryReader reader)
    {
        AnimationCurve _ShadowStrengthMultiplierOverRootIntensity = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LerpToNewColorOverRootIntensity */
        AnimationCurve _LerpToNewColorOverRootIntensity = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* NewColor */
        ColorRGBA _NewColor = ColorRGBA.Read(reader);
        
        return new(_ShadowStrengthMultiplierOverRootIntensity,
            _LerpToNewColorOverRootIntensity,
            _NewColor);
    }
}

/* $VFXLocationWeatherDataProfile (5 fields) */
public record class VFXLocationWeatherDataProfile(
    BitField RaycastMask /* None */,
    byte RaycastIsBlockedByOtherLayers /* None */,
    int TextureDensity /* NeedsAlign */,
    int MaxAllowedTextureSize /* None */,
    byte CreateCollidersForAllMeshes /* None */)
{
    public static VFXLocationWeatherDataProfile Read(EndianBinaryReader reader)
    {
        BitField _RaycastMask = BitField.Read(reader);
        byte _RaycastIsBlockedByOtherLayers = reader.ReadU8();
        reader.AlignTo(4); /* TextureDensity */
        int _TextureDensity = reader.ReadS32();
        int _MaxAllowedTextureSize = reader.ReadS32();
        byte _CreateCollidersForAllMeshes = reader.ReadU8();
        
        return new(_RaycastMask,
            _RaycastIsBlockedByOtherLayers,
            _TextureDensity,
            _MaxAllowedTextureSize,
            _CreateCollidersForAllMeshes);
    }
}

/* $AkEventReference (1 fields) */
public record class AkEventReference(
    AsciiString Value /* NeedsAlign */)
{
    public static AkEventReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Value */
        AsciiString _Value = BuiltInString.Read(reader);
        
        return new(_Value);
    }
}

/* $CanvasGroupWithAlpha (2 fields) */
public record class CanvasGroupWithAlpha(
    PPtr<CanvasGroup> CanvasGroup /* None */,
    float Alpha /* None */)
{
    public static CanvasGroupWithAlpha Read(EndianBinaryReader reader)
    {
        PPtr<CanvasGroup> _CanvasGroup = PPtr<CanvasGroup>.Read(reader);
        float _Alpha = reader.ReadF32();
        
        return new(_CanvasGroup,
            _Alpha);
    }
}

/* $ColonyProjectsBuiltListElemVisual (1 fields) */
public record class ColonyProjectsBuiltListElemVisual(
    CanvasGroupWithAlpha[] Elements /* None */)
{
    public static ColonyProjectsBuiltListElemVisual Read(EndianBinaryReader reader)
    {
        CanvasGroupWithAlpha[] _Elements = BuiltInArray<CanvasGroupWithAlpha>.Read(reader);
        
        return new(_Elements);
    }
}

/* $StarProperties (2 fields) */
public record class StarProperties(
    PrefabLink Prefab /* NeedsAlign */,
    float Scale /* NeedsAlign */)
{
    public static StarProperties Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Prefab */
        PrefabLink _Prefab = PrefabLink.Read(reader);
        reader.AlignTo(4); /* Scale */
        float _Scale = reader.ReadF32();
        
        return new(_Prefab,
            _Scale);
    }
}

/* $SpaceObjectProperties (4 fields) */
public record class SpaceObjectProperties(
    PrefabLink Prefab /* None */,
    float Scale /* NeedsAlign */,
    float AngleOnOrbit /* None */,
    float OffsetY /* None */)
{
    public static SpaceObjectProperties Read(EndianBinaryReader reader)
    {
        PrefabLink _Prefab = PrefabLink.Read(reader);
        reader.AlignTo(4); /* Scale */
        float _Scale = reader.ReadF32();
        float _AngleOnOrbit = reader.ReadF32();
        float _OffsetY = reader.ReadF32();
        
        return new(_Prefab,
            _Scale,
            _AngleOnOrbit,
            _OffsetY);
    }
}

/* $RangeSettings (6 fields) */
public record class RangeSettings(
    PPtr<AnimationClipWrapper> m_ClipOneCell /* None */,
    PPtr<AnimationClipWrapper> m_ClipTwoCell /* None */,
    PPtr<AnimationClipWrapper> m_ClipThreeCell /* None */,
    PPtr<AnimationClipWrapper> m_ClipFourCell /* None */,
    PPtr<AnimationClipWrapper> m_ClipFiveCell /* None */,
    PPtr<AnimationClipWrapper> m_StandUp /* None */)
{
    public static RangeSettings Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> _m_ClipOneCell = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_ClipTwoCell = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_ClipThreeCell = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_ClipFourCell = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_ClipFiveCell = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _m_StandUp = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_m_ClipOneCell,
            _m_ClipTwoCell,
            _m_ClipThreeCell,
            _m_ClipFourCell,
            _m_ClipFiveCell,
            _m_StandUp);
    }
}

/* $HighlightSource (12 fields) */
public record class HighlightSource(
    float Lifetime /* NeedsAlign */,
    int Priority /* None */,
    int Mode /* None */,
    ColorRGBA Color /* None */,
    float OnsetTime /* None */,
    float RemoveTime /* None */,
    ColorRGBA AlternateColor /* None */,
    float FlashingFrequency /* None */,
    Gradient ColorGradient /* None */,
    float GradientLifetime /* NeedsAlign */,
    byte UnscaledTime /* None */,
    float AddTime /* NeedsAlign */)
{
    public static HighlightSource Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Lifetime */
        float _Lifetime = reader.ReadF32();
        int _Priority = reader.ReadS32();
        int _Mode = reader.ReadS32();
        ColorRGBA _Color = ColorRGBA.Read(reader);
        float _OnsetTime = reader.ReadF32();
        float _RemoveTime = reader.ReadF32();
        ColorRGBA _AlternateColor = ColorRGBA.Read(reader);
        float _FlashingFrequency = reader.ReadF32();
        Gradient _ColorGradient = Gradient.Read(reader);
        reader.AlignTo(4); /* GradientLifetime */
        float _GradientLifetime = reader.ReadF32();
        byte _UnscaledTime = reader.ReadU8();
        reader.AlignTo(4); /* AddTime */
        float _AddTime = reader.ReadF32();
        
        return new(_Lifetime,
            _Priority,
            _Mode,
            _Color,
            _OnsetTime,
            _RemoveTime,
            _AlternateColor,
            _FlashingFrequency,
            _ColorGradient,
            _GradientLifetime,
            _UnscaledTime,
            _AddTime);
    }
}

/* $RandomizeImages (6 fields) */
public record class RandomizeImages(
    PPtr<Image> LeftTopImage /* NeedsAlign */,
    PPtr<Image> LeftBottomImage /* None */,
    PPtr<Image> RightBottomImage /* None */,
    PPtr<Sprite>[] LeftTopSprites /* None */,
    PPtr<Sprite>[] LeftBottomSprites /* None */,
    PPtr<Sprite>[] RightBottomSprites /* None */)
{
    public static RandomizeImages Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* LeftTopImage */
        PPtr<Image> _LeftTopImage = PPtr<Image>.Read(reader);
        PPtr<Image> _LeftBottomImage = PPtr<Image>.Read(reader);
        PPtr<Image> _RightBottomImage = PPtr<Image>.Read(reader);
        PPtr<Sprite>[] _LeftTopSprites = BuiltInArray<PPtr<Sprite>>.Read(reader);
        PPtr<Sprite>[] _LeftBottomSprites = BuiltInArray<PPtr<Sprite>>.Read(reader);
        PPtr<Sprite>[] _RightBottomSprites = BuiltInArray<PPtr<Sprite>>.Read(reader);
        
        return new(_LeftTopImage,
            _LeftBottomImage,
            _RightBottomImage,
            _LeftTopSprites,
            _LeftBottomSprites,
            _RightBottomSprites);
    }
}

/* $CircleArtRotation (7 fields) */
public record class CircleArtRotation(
    PPtr<RectTransform> CircleArt /* None */,
    float CircleArtDefaultScale /* None */,
    float CircleArtMoveScale /* None */,
    float CircleArtMinRotation /* None */,
    float CircleArtMaxRotation /* None */,
    float CircleArtAnimationDuration /* None */,
    float CircleArtCloseAnimationDuration /* None */)
{
    public static CircleArtRotation Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> _CircleArt = PPtr<RectTransform>.Read(reader);
        float _CircleArtDefaultScale = reader.ReadF32();
        float _CircleArtMoveScale = reader.ReadF32();
        float _CircleArtMinRotation = reader.ReadF32();
        float _CircleArtMaxRotation = reader.ReadF32();
        float _CircleArtAnimationDuration = reader.ReadF32();
        float _CircleArtCloseAnimationDuration = reader.ReadF32();
        
        return new(_CircleArt,
            _CircleArtDefaultScale,
            _CircleArtMoveScale,
            _CircleArtMinRotation,
            _CircleArtMaxRotation,
            _CircleArtAnimationDuration,
            _CircleArtCloseAnimationDuration);
    }
}

/* $CustomAxisMouseRotationSettingsView (6 fields) */
public record class CustomAxisMouseRotationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static CustomAxisMouseRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $FogSettings (5 fields) */
public record class FogSettings(
    byte Enabled /* NeedsAlign */,
    AnimationCurve FogIntensityOverRootIntensity /* NeedsAlign */,
    ColorRGBA Color /* NeedsAlign */,
    float StartDistance /* None */,
    float EndDistance /* None */)
{
    public static FogSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Enabled */
        byte _Enabled = reader.ReadU8();
        reader.AlignTo(4); /* FogIntensityOverRootIntensity */
        AnimationCurve _FogIntensityOverRootIntensity = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* Color */
        ColorRGBA _Color = ColorRGBA.Read(reader);
        float _StartDistance = reader.ReadF32();
        float _EndDistance = reader.ReadF32();
        
        return new(_Enabled,
            _FogIntensityOverRootIntensity,
            _Color,
            _StartDistance,
            _EndDistance);
    }
}

/* $DecalSettings (2 fields) */
public record class DecalSettings(
    PPtr<GameObject> DecalPrefab /* NeedsAlign */,
    AnimationCurve AlphaOverIntensity /* None */)
{
    public static DecalSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DecalPrefab */
        PPtr<GameObject> _DecalPrefab = PPtr<GameObject>.Read(reader);
        AnimationCurve _AlphaOverIntensity = AnimationCurve.Read(reader);
        
        return new(_DecalPrefab,
            _AlphaOverIntensity);
    }
}

/* $PostProcessVolumeSettings (4 fields) */
public record class PostProcessVolumeSettings(
    AnimationCurve WeightOverLayerIntensity /* NeedsAlign */,
    float Priority /* NeedsAlign */,
    PPtr<VolumeProfile> Profile /* None */,
    int VolumeLayer /* None */)
{
    public static PostProcessVolumeSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* WeightOverLayerIntensity */
        AnimationCurve _WeightOverLayerIntensity = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* Priority */
        float _Priority = reader.ReadF32();
        PPtr<VolumeProfile> _Profile = PPtr<VolumeProfile>.Read(reader);
        int _VolumeLayer = reader.ReadS32();
        
        return new(_WeightOverLayerIntensity,
            _Priority,
            _Profile,
            _VolumeLayer);
    }
}

/* $WeatherEffect (8 fields) */
public record class WeatherEffect(
    AsciiString Name /* None */,
    AnimationCurve EffectIntensityOverLayerIntensity /* NeedsAlign */,
    int PositioningMode /* NeedsAlign */,
    float DistanceFromCamera /* None */,
    byte SnapToGround /* None */,
    BitField SnapRaycastMask /* NeedsAlign */,
    byte UseBakedLocationData /* None */,
    PPtr<GameObject> VisualEffectPrefab /* NeedsAlign */)
{
    public static WeatherEffect Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* EffectIntensityOverLayerIntensity */
        AnimationCurve _EffectIntensityOverLayerIntensity = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* PositioningMode */
        int _PositioningMode = reader.ReadS32();
        float _DistanceFromCamera = reader.ReadF32();
        byte _SnapToGround = reader.ReadU8();
        reader.AlignTo(4); /* SnapRaycastMask */
        BitField _SnapRaycastMask = BitField.Read(reader);
        byte _UseBakedLocationData = reader.ReadU8();
        reader.AlignTo(4); /* VisualEffectPrefab */
        PPtr<GameObject> _VisualEffectPrefab = PPtr<GameObject>.Read(reader);
        
        return new(_Name,
            _EffectIntensityOverLayerIntensity,
            _PositioningMode,
            _DistanceFromCamera,
            _SnapToGround,
            _SnapRaycastMask,
            _UseBakedLocationData,
            _VisualEffectPrefab);
    }
}

/* $FXedPortrait (2 fields) */
public record class FXedPortrait(
    PPtr<Image> Portrait /* NeedsAlign */,
    PPtr<CanvasGroup> CanvasGroup /* None */)
{
    public static FXedPortrait Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Portrait */
        PPtr<Image> _Portrait = PPtr<Image>.Read(reader);
        PPtr<CanvasGroup> _CanvasGroup = PPtr<CanvasGroup>.Read(reader);
        
        return new(_Portrait,
            _CanvasGroup);
    }
}

/* $ListItems (2 fields) */
public record class ListItems(
    PPtr<GameObject> itemGo /* None */,
    float itemFloat /* None */)
{
    public static ListItems Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _itemGo = PPtr<GameObject>.Read(reader);
        float _itemFloat = reader.ReadF32();
        
        return new(_itemGo,
            _itemFloat);
    }
}

/* $ListOriginalMeshes (2 fields) */
public record class ListOriginalMeshes(
    PPtr<MeshFilter> itemMeshFilter /* None */,
    PPtr<Mesh> itemMesh /* None */)
{
    public static ListOriginalMeshes Read(EndianBinaryReader reader)
    {
        PPtr<MeshFilter> _itemMeshFilter = PPtr<MeshFilter>.Read(reader);
        PPtr<Mesh> _itemMesh = PPtr<Mesh>.Read(reader);
        
        return new(_itemMeshFilter,
            _itemMesh);
    }
}

/* $ListMeshes (2 fields) */
public record class ListMeshes(
    PPtr<MeshFilter> itemMeshFilter /* None */,
    PPtr<Mesh> itemMesh /* None */)
{
    public static ListMeshes Read(EndianBinaryReader reader)
    {
        PPtr<MeshFilter> _itemMeshFilter = PPtr<MeshFilter>.Read(reader);
        PPtr<Mesh> _itemMesh = PPtr<Mesh>.Read(reader);
        
        return new(_itemMeshFilter,
            _itemMesh);
    }
}

/* $FloatPropertyAnimationData (5 fields) */
public record class FloatPropertyAnimationData(
    AsciiString m_PropertyName /* None */,
    AnimationCurve m_Curve /* NeedsAlign */,
    float m_CurveDuration /* NeedsAlign */,
    float m_Duration /* None */,
    float m_Delay /* None */)
{
    public static FloatPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString _m_PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        AnimationCurve _m_Curve = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_CurveDuration */
        float _m_CurveDuration = reader.ReadF32();
        float _m_Duration = reader.ReadF32();
        float _m_Delay = reader.ReadF32();
        
        return new(_m_PropertyName,
            _m_Curve,
            _m_CurveDuration,
            _m_Duration,
            _m_Delay);
    }
}

/* $ColorPropertyAnimationData (6 fields) */
public record class ColorPropertyAnimationData(
    AsciiString m_PropertyName /* None */,
    Gradient m_Gradient /* NeedsAlign */,
    int m_GradientWrapMode /* NeedsAlign */,
    float m_GradientDuration /* None */,
    float m_Duration /* None */,
    float m_Delay /* None */)
{
    public static ColorPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString _m_PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Gradient */
        Gradient _m_Gradient = Gradient.Read(reader);
        reader.AlignTo(4); /* m_GradientWrapMode */
        int _m_GradientWrapMode = reader.ReadS32();
        float _m_GradientDuration = reader.ReadF32();
        float _m_Duration = reader.ReadF32();
        float _m_Delay = reader.ReadF32();
        
        return new(_m_PropertyName,
            _m_Gradient,
            _m_GradientWrapMode,
            _m_GradientDuration,
            _m_Duration,
            _m_Delay);
    }
}

/* $TexturePropertyAnimationData (4 fields) */
public record class TexturePropertyAnimationData(
    AsciiString m_PropertyName /* None */,
    PPtr<Texture> m_Texture /* NeedsAlign */,
    float m_Duration /* None */,
    float m_Delay /* None */)
{
    public static TexturePropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString _m_PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Texture */
        PPtr<Texture> _m_Texture = PPtr<Texture>.Read(reader);
        float _m_Duration = reader.ReadF32();
        float _m_Delay = reader.ReadF32();
        
        return new(_m_PropertyName,
            _m_Texture,
            _m_Duration,
            _m_Delay);
    }
}

/* $TransformPropertyAnimationData (5 fields) */
public record class TransformPropertyAnimationData(
    AsciiString m_WorldToLocalPropertyName /* None */,
    AsciiString m_LocalToWorldPropertyName /* NeedsAlign */,
    PPtr<Transform> m_Transform /* NeedsAlign */,
    float m_Duration /* None */,
    float m_Delay /* None */)
{
    public static TransformPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString _m_WorldToLocalPropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_LocalToWorldPropertyName */
        AsciiString _m_LocalToWorldPropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Transform */
        PPtr<Transform> _m_Transform = PPtr<Transform>.Read(reader);
        float _m_Duration = reader.ReadF32();
        float _m_Delay = reader.ReadF32();
        
        return new(_m_WorldToLocalPropertyName,
            _m_LocalToWorldPropertyName,
            _m_Transform,
            _m_Duration,
            _m_Delay);
    }
}

/* $TransferMaterialPropertyAnimationData (5 fields) */
public record class TransferMaterialPropertyAnimationData(
    AsciiString m_PropertyName /* None */,
    AsciiString m_BaseMaterialPropertyName /* NeedsAlign */,
    int m_PropertyType /* NeedsAlign */,
    float m_Duration /* None */,
    float m_Delay /* None */)
{
    public static TransferMaterialPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString _m_PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_BaseMaterialPropertyName */
        AsciiString _m_BaseMaterialPropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PropertyType */
        int _m_PropertyType = reader.ReadS32();
        float _m_Duration = reader.ReadF32();
        float _m_Delay = reader.ReadF32();
        
        return new(_m_PropertyName,
            _m_BaseMaterialPropertyName,
            _m_PropertyType,
            _m_Duration,
            _m_Delay);
    }
}

/* $TransferScriptPropertyAnimationData (4 fields) */
public record class TransferScriptPropertyAnimationData(
    AsciiString m_PropertyName /* None */,
    int m_ScriptProperty /* NeedsAlign */,
    float m_Duration /* None */,
    float m_Delay /* None */)
{
    public static TransferScriptPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString _m_PropertyName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ScriptProperty */
        int _m_ScriptProperty = reader.ReadS32();
        float _m_Duration = reader.ReadF32();
        float _m_Delay = reader.ReadF32();
        
        return new(_m_PropertyName,
            _m_ScriptProperty,
            _m_Duration,
            _m_Delay);
    }
}

/* $Setting (2 fields) */
public record class Setting(
    int Type /* None */,
    AsciiString[] SortedMaskNames /* None */)
{
    public static Setting Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        AsciiString[] _SortedMaskNames = BuiltInArray<AsciiString>.Read(reader);
        
        return new(_Type,
            _SortedMaskNames);
    }
}

/* $SurfaceDebugInfo (2 fields) */
public record class SurfaceDebugInfo(
    int SoundSwitch /* None */,
    ColorRGBA GizmoColor /* None */)
{
    public static SurfaceDebugInfo Read(EndianBinaryReader reader)
    {
        int _SoundSwitch = reader.ReadS32();
        ColorRGBA _GizmoColor = ColorRGBA.Read(reader);
        
        return new(_SoundSwitch,
            _GizmoColor);
    }
}

/* $InteractionStairsSettings (20 fields) */
public record class InteractionStairsSettings(
    int UIType /* NeedsAlign */,
    byte NotInCombat /* None */,
    byte ShowOvertip /* NeedsAlign */,
    byte AlwaysDisabled /* NeedsAlign */,
    byte ShowHighlight /* NeedsAlign */,
    int ProximityRadius /* NeedsAlign */,
    int Type /* None */,
    int UseAnimationState /* None */,
    BlueprintDialogReference m_Dialog /* None */,
    AsciiString InteractionSound /* NeedsAlign */,
    AsciiString InteractionDisabledSound /* NeedsAlign */,
    AsciiString InteractionStopSound /* NeedsAlign */,
    PPtr<TrapObjectView> Trap /* NeedsAlign */,
    byte DoNotNeedCollider /* None */,
    byte UnlimitedInteractionsPerRound /* NeedsAlign */,
    byte OverrideActionPointsCost /* NeedsAlign */,
    int ActionPointsCost /* NeedsAlign */,
    InteractWithToolFXData InteractWithMeltaChargeFXData /* None */,
    float OvertipVerticalCorrection /* NeedsAlign */,
    PPtr<WarhammerNodeLink> NodeLink /* None */)
{
    public static InteractionStairsSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* UIType */
        int _UIType = reader.ReadS32();
        byte _NotInCombat = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte _ShowOvertip = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte _AlwaysDisabled = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        byte _ShowHighlight = reader.ReadU8();
        reader.AlignTo(4); /* ProximityRadius */
        int _ProximityRadius = reader.ReadS32();
        int _Type = reader.ReadS32();
        int _UseAnimationState = reader.ReadS32();
        BlueprintDialogReference _m_Dialog = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString _InteractionSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString _InteractionDisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        AsciiString _InteractionStopSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trap */
        PPtr<TrapObjectView> _Trap = PPtr<TrapObjectView>.Read(reader);
        byte _DoNotNeedCollider = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte _UnlimitedInteractionsPerRound = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        byte _OverrideActionPointsCost = reader.ReadU8();
        reader.AlignTo(4); /* ActionPointsCost */
        int _ActionPointsCost = reader.ReadS32();
        InteractWithToolFXData _InteractWithMeltaChargeFXData = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* OvertipVerticalCorrection */
        float _OvertipVerticalCorrection = reader.ReadF32();
        PPtr<WarhammerNodeLink> _NodeLink = PPtr<WarhammerNodeLink>.Read(reader);
        
        return new(_UIType,
            _NotInCombat,
            _ShowOvertip,
            _AlwaysDisabled,
            _ShowHighlight,
            _ProximityRadius,
            _Type,
            _UseAnimationState,
            _m_Dialog,
            _InteractionSound,
            _InteractionDisabledSound,
            _InteractionStopSound,
            _Trap,
            _DoNotNeedCollider,
            _UnlimitedInteractionsPerRound,
            _OverrideActionPointsCost,
            _ActionPointsCost,
            _InteractWithMeltaChargeFXData,
            _OvertipVerticalCorrection,
            _NodeLink);
    }
}

/* $SingleObjectPivotPointRenderSettingsView (6 fields) */
public record class SingleObjectPivotPointRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static SingleObjectPivotPointRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $CustomBlend (3 fields) */
public record class CustomBlend(
    AsciiString m_From /* None */,
    AsciiString m_To /* NeedsAlign */,
    CinemachineBlendDefinition m_Blend /* NeedsAlign */)
{
    public static CustomBlend Read(EndianBinaryReader reader)
    {
        AsciiString _m_From = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_To */
        AsciiString _m_To = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Blend */
        CinemachineBlendDefinition _m_Blend = CinemachineBlendDefinition.Read(reader);
        
        return new(_m_From,
            _m_To,
            _m_Blend);
    }
}

/* $BlueprintEncyclopediaChapterReference (1 fields) */
public record class BlueprintEncyclopediaChapterReference(
    AsciiString guid /* None */)
{
    public static BlueprintEncyclopediaChapterReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $RadialBlurSettings (10 fields) */
public record class RadialBlurSettings(
    float Delay /* None */,
    float Lifetime /* None */,
    AnimationCurve StrengthOverLifetime /* None */,
    AnimationCurve WidthOverLifetime /* NeedsAlign */,
    AnimationCurve StrengthOverDistance /* NeedsAlign */,
    AnimationCurve WidthOverDistance /* NeedsAlign */,
    float StrengthMultiplier /* NeedsAlign */,
    float WidthMultiplier /* None */,
    byte LoopAnimation /* None */,
    int Layer /* NeedsAlign */)
{
    public static RadialBlurSettings Read(EndianBinaryReader reader)
    {
        float _Delay = reader.ReadF32();
        float _Lifetime = reader.ReadF32();
        AnimationCurve _StrengthOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* WidthOverLifetime */
        AnimationCurve _WidthOverLifetime = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* StrengthOverDistance */
        AnimationCurve _StrengthOverDistance = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* WidthOverDistance */
        AnimationCurve _WidthOverDistance = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* StrengthMultiplier */
        float _StrengthMultiplier = reader.ReadF32();
        float _WidthMultiplier = reader.ReadF32();
        byte _LoopAnimation = reader.ReadU8();
        reader.AlignTo(4); /* Layer */
        int _Layer = reader.ReadS32();
        
        return new(_Delay,
            _Lifetime,
            _StrengthOverLifetime,
            _WidthOverLifetime,
            _StrengthOverDistance,
            _WidthOverDistance,
            _StrengthMultiplier,
            _WidthMultiplier,
            _LoopAnimation,
            _Layer);
    }
}

/* $RimLightingSettings (2 fields) */
public record class RimLightingSettings(
    ColorRGBA RimGlobalColor /* None */,
    float RimGlobalIntensity /* None */)
{
    public static RimLightingSettings Read(EndianBinaryReader reader)
    {
        ColorRGBA _RimGlobalColor = ColorRGBA.Read(reader);
        float _RimGlobalIntensity = reader.ReadF32();
        
        return new(_RimGlobalColor,
            _RimGlobalIntensity);
    }
}

/* $ObjectPlacementGuideSettingsView (6 fields) */
public record class ObjectPlacementGuideSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementGuideSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $UIDifficultySettings (24 fields) */
public record class UIDifficultySettings(
    PPtr<UISettingsEntityGameDifficulty> GameDifficulty /* None */,
    PPtr<UISettingsEntityDropdownCombatEncountersCapacity> CombatEncountersCapacity /* None */,
    PPtr<UISettingsEntityDropdownAutoLevelUp> AutoLevelUp /* None */,
    PPtr<UISettingsEntityBool> RespecAllowed /* None */,
    PPtr<UISettingsEntityBool> AdditionalAIBehaviors /* None */,
    PPtr<UISettingsEntityBool> OnlyOneSave /* None */,
    PPtr<UISettingsEntityBool> LimitedAI /* None */,
    PPtr<UISettingsEntitySliderInt> EnemyDodgePercentModifier /* None */,
    PPtr<UISettingsEntitySliderInt> CoverHitBonusHalfModifier /* None */,
    PPtr<UISettingsEntitySliderInt> CoverHitBonusFullModifier /* None */,
    PPtr<UISettingsEntitySliderInt> MinPartyDamage /* None */,
    PPtr<UISettingsEntitySliderInt> MinPartyDamageFraction /* None */,
    PPtr<UISettingsEntitySliderInt> MinPartyStarshipDamage /* None */,
    PPtr<UISettingsEntitySliderInt> MinPartyStarshipDamageFraction /* None */,
    PPtr<UISettingsEntitySliderInt> PartyMomentumPercentMultiplier /* None */,
    PPtr<UISettingsEntitySliderInt> NPCAttributesBaseValuePercentMultiplier /* None */,
    PPtr<UISettingDropdownHardCrowdControlDurationLimit> HardCrowdControlOnPartyMaxDurationRounds /* None */,
    PPtr<UISettingsEntitySliderInt> SkillCheckModifier /* None */,
    PPtr<UISettingsEntitySliderInt> EnemyHitPointsPercentModifier /* None */,
    PPtr<UISettingsEntitySliderInt> PartyDamageDealtAfterArmorReductionPercentModifier /* None */,
    PPtr<UISettingsEntitySliderInt> WoundDamagePerTurnThresholdHPFraction /* None */,
    PPtr<UISettingsEntitySliderInt> OldWoundDelayRounds /* None */,
    PPtr<UISettingsEntitySliderInt> WoundStacksForTrauma /* None */,
    PPtr<UISettingsEntityDropdownSpaceCombatDifficulty> SpaceCombatDifficulty /* None */)
{
    public static UIDifficultySettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityGameDifficulty> _GameDifficulty = PPtr<UISettingsEntityGameDifficulty>.Read(reader);
        PPtr<UISettingsEntityDropdownCombatEncountersCapacity> _CombatEncountersCapacity = PPtr<UISettingsEntityDropdownCombatEncountersCapacity>.Read(reader);
        PPtr<UISettingsEntityDropdownAutoLevelUp> _AutoLevelUp = PPtr<UISettingsEntityDropdownAutoLevelUp>.Read(reader);
        PPtr<UISettingsEntityBool> _RespecAllowed = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _AdditionalAIBehaviors = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _OnlyOneSave = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _LimitedAI = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _EnemyDodgePercentModifier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _CoverHitBonusHalfModifier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _CoverHitBonusFullModifier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _MinPartyDamage = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _MinPartyDamageFraction = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _MinPartyStarshipDamage = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _MinPartyStarshipDamageFraction = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _PartyMomentumPercentMultiplier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _NPCAttributesBaseValuePercentMultiplier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingDropdownHardCrowdControlDurationLimit> _HardCrowdControlOnPartyMaxDurationRounds = PPtr<UISettingDropdownHardCrowdControlDurationLimit>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _SkillCheckModifier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _EnemyHitPointsPercentModifier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _PartyDamageDealtAfterArmorReductionPercentModifier = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _WoundDamagePerTurnThresholdHPFraction = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _OldWoundDelayRounds = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _WoundStacksForTrauma = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntityDropdownSpaceCombatDifficulty> _SpaceCombatDifficulty = PPtr<UISettingsEntityDropdownSpaceCombatDifficulty>.Read(reader);
        
        return new(_GameDifficulty,
            _CombatEncountersCapacity,
            _AutoLevelUp,
            _RespecAllowed,
            _AdditionalAIBehaviors,
            _OnlyOneSave,
            _LimitedAI,
            _EnemyDodgePercentModifier,
            _CoverHitBonusHalfModifier,
            _CoverHitBonusFullModifier,
            _MinPartyDamage,
            _MinPartyDamageFraction,
            _MinPartyStarshipDamage,
            _MinPartyStarshipDamageFraction,
            _PartyMomentumPercentMultiplier,
            _NPCAttributesBaseValuePercentMultiplier,
            _HardCrowdControlOnPartyMaxDurationRounds,
            _SkillCheckModifier,
            _EnemyHitPointsPercentModifier,
            _PartyDamageDealtAfterArmorReductionPercentModifier,
            _WoundDamagePerTurnThresholdHPFraction,
            _OldWoundDelayRounds,
            _WoundStacksForTrauma,
            _SpaceCombatDifficulty);
    }
}

/* $UIGraphicsSettings (25 fields) */
public record class UIGraphicsSettings(
    PPtr<UISettingsEntityDropdownInt> Display /* None */,
    PPtr<UISettingsEntityDropdownFullScreenMode> FullScreenMode /* None */,
    PPtr<UISettingsEntityDropdownInt> ScreenResolution /* None */,
    PPtr<UISettingsEntityBool> WindowedMouseLock /* None */,
    PPtr<UISettingsEntityBool> CameraShake /* None */,
    PPtr<UISettingsEntityDropdownGraphicsPreset> GraphicsQuality /* None */,
    PPtr<UISettingsEntityDropdownVSyncMode> VSyncMode /* None */,
    PPtr<UISettingsEntityBool> FrameRateLimitEnabled /* None */,
    PPtr<UISettingsEntitySliderInt> FrameRateLimit /* None */,
    PPtr<UISettingsEntityDropdownFsrMode> FsrMode /* None */,
    PPtr<UISettingsEntitySliderFloat> FsrSharpness /* None */,
    PPtr<UISettingsEntityDropdownQuality> VolumetricLightingQuality /* None */,
    PPtr<UISettingsEntityBool> ParticleSystemsLightingEnabled /* None */,
    PPtr<UISettingsEntityBool> ParticleSystemsShadowsEnabled /* None */,
    PPtr<UISettingsEntityDropdownQualityDisactivatable> ShadowsQuality /* None */,
    PPtr<UISettingsEntityDropdownQuality> TexturesQuality /* None */,
    PPtr<UISettingsEntityBool> DepthOfField /* None */,
    PPtr<UISettingsEntityBool> Bloom /* None */,
    PPtr<UISettingsEntityDropdownQualityDisactivatable> SSAOQuality /* None */,
    PPtr<UISettingsEntityDropdownQualityDisactivatable> SSRQuality /* None */,
    PPtr<UISettingsEntityBool> FilmGrainEnabled /* None */,
    PPtr<UISettingsEntityDropdownAntialiasingMode> AntialiasingMode /* None */,
    PPtr<UISettingsEntityDropdownQuality> AntialiasingQuality /* None */,
    PPtr<UISettingsEntityDropdownFootprintsMode> FootprintsMode /* None */,
    PPtr<UISettingsEntityDropdownCrowdQuality> CrowdQuality /* None */)
{
    public static UIGraphicsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownInt> _Display = PPtr<UISettingsEntityDropdownInt>.Read(reader);
        PPtr<UISettingsEntityDropdownFullScreenMode> _FullScreenMode = PPtr<UISettingsEntityDropdownFullScreenMode>.Read(reader);
        PPtr<UISettingsEntityDropdownInt> _ScreenResolution = PPtr<UISettingsEntityDropdownInt>.Read(reader);
        PPtr<UISettingsEntityBool> _WindowedMouseLock = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _CameraShake = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownGraphicsPreset> _GraphicsQuality = PPtr<UISettingsEntityDropdownGraphicsPreset>.Read(reader);
        PPtr<UISettingsEntityDropdownVSyncMode> _VSyncMode = PPtr<UISettingsEntityDropdownVSyncMode>.Read(reader);
        PPtr<UISettingsEntityBool> _FrameRateLimitEnabled = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _FrameRateLimit = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntityDropdownFsrMode> _FsrMode = PPtr<UISettingsEntityDropdownFsrMode>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _FsrSharpness = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityDropdownQuality> _VolumetricLightingQuality = PPtr<UISettingsEntityDropdownQuality>.Read(reader);
        PPtr<UISettingsEntityBool> _ParticleSystemsLightingEnabled = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ParticleSystemsShadowsEnabled = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownQualityDisactivatable> _ShadowsQuality = PPtr<UISettingsEntityDropdownQualityDisactivatable>.Read(reader);
        PPtr<UISettingsEntityDropdownQuality> _TexturesQuality = PPtr<UISettingsEntityDropdownQuality>.Read(reader);
        PPtr<UISettingsEntityBool> _DepthOfField = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _Bloom = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownQualityDisactivatable> _SSAOQuality = PPtr<UISettingsEntityDropdownQualityDisactivatable>.Read(reader);
        PPtr<UISettingsEntityDropdownQualityDisactivatable> _SSRQuality = PPtr<UISettingsEntityDropdownQualityDisactivatable>.Read(reader);
        PPtr<UISettingsEntityBool> _FilmGrainEnabled = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownAntialiasingMode> _AntialiasingMode = PPtr<UISettingsEntityDropdownAntialiasingMode>.Read(reader);
        PPtr<UISettingsEntityDropdownQuality> _AntialiasingQuality = PPtr<UISettingsEntityDropdownQuality>.Read(reader);
        PPtr<UISettingsEntityDropdownFootprintsMode> _FootprintsMode = PPtr<UISettingsEntityDropdownFootprintsMode>.Read(reader);
        PPtr<UISettingsEntityDropdownCrowdQuality> _CrowdQuality = PPtr<UISettingsEntityDropdownCrowdQuality>.Read(reader);
        
        return new(_Display,
            _FullScreenMode,
            _ScreenResolution,
            _WindowedMouseLock,
            _CameraShake,
            _GraphicsQuality,
            _VSyncMode,
            _FrameRateLimitEnabled,
            _FrameRateLimit,
            _FsrMode,
            _FsrSharpness,
            _VolumetricLightingQuality,
            _ParticleSystemsLightingEnabled,
            _ParticleSystemsShadowsEnabled,
            _ShadowsQuality,
            _TexturesQuality,
            _DepthOfField,
            _Bloom,
            _SSAOQuality,
            _SSRQuality,
            _FilmGrainEnabled,
            _AntialiasingMode,
            _AntialiasingQuality,
            _FootprintsMode,
            _CrowdQuality);
    }
}

/* $UIDisplaySettings (4 fields) */
public record class UIDisplaySettings(
    PPtr<UISettingsEntityGammaCorrection> GammaCorrection /* None */,
    PPtr<UISettingsEntityGammaCorrection> Brightness /* None */,
    PPtr<UISettingsEntitySliderFloat> Contrast /* None */,
    PPtr<UISettingsEntitySliderInt> SafeZoneOffset /* None */)
{
    public static UIDisplaySettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityGammaCorrection> _GammaCorrection = PPtr<UISettingsEntityGammaCorrection>.Read(reader);
        PPtr<UISettingsEntityGammaCorrection> _Brightness = PPtr<UISettingsEntityGammaCorrection>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _Contrast = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _SafeZoneOffset = PPtr<UISettingsEntitySliderInt>.Read(reader);
        
        return new(_GammaCorrection,
            _Brightness,
            _Contrast,
            _SafeZoneOffset);
    }
}

/* $UISoundSettings (15 fields) */
public record class UISoundSettings(
    PPtr<UISettingsEntitySliderFloat> VolumeMaster /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeVoices /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeVoicesCharacterInGame /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeVoicesNpcInGame /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeVoicesDialogues /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeMusic /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeSfx /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeAmbience /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeAbilities /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeRangedWeapons /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeMeleeWeapons /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeHitsLevel /* None */,
    PPtr<UISettingsEntitySliderFloat> VolumeUI /* None */,
    PPtr<UISettingsEntityDropdownVoiceAskFrequency> VoicedAskFrequency /* None */,
    PPtr<UISettingsEntityBool> MuteAudioWhileTheGameIsOutFocus /* None */)
{
    public static UISoundSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntitySliderFloat> _VolumeMaster = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeVoices = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeVoicesCharacterInGame = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeVoicesNpcInGame = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeVoicesDialogues = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeMusic = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeSfx = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeAmbience = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeAbilities = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeRangedWeapons = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeMeleeWeapons = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeHitsLevel = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _VolumeUI = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityDropdownVoiceAskFrequency> _VoicedAskFrequency = PPtr<UISettingsEntityDropdownVoiceAskFrequency>.Read(reader);
        PPtr<UISettingsEntityBool> _MuteAudioWhileTheGameIsOutFocus = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_VolumeMaster,
            _VolumeVoices,
            _VolumeVoicesCharacterInGame,
            _VolumeVoicesNpcInGame,
            _VolumeVoicesDialogues,
            _VolumeMusic,
            _VolumeSfx,
            _VolumeAmbience,
            _VolumeAbilities,
            _VolumeRangedWeapons,
            _VolumeMeleeWeapons,
            _VolumeHitsLevel,
            _VolumeUI,
            _VoicedAskFrequency,
            _MuteAudioWhileTheGameIsOutFocus);
    }
}

/* $UIAccessiabilitySettings (4 fields) */
public record class UIAccessiabilitySettings(
    PPtr<UISettingsEntitySliderFloat> Protanopia /* None */,
    PPtr<UISettingsEntitySliderFloat> Deuteranopia /* None */,
    PPtr<UISettingsEntitySliderFloat> Tritanopia /* None */,
    PPtr<UISettingsEntitySliderFontSize> FontSize /* None */)
{
    public static UIAccessiabilitySettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntitySliderFloat> _Protanopia = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _Deuteranopia = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _Tritanopia = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFontSize> _FontSize = PPtr<UISettingsEntitySliderFontSize>.Read(reader);
        
        return new(_Protanopia,
            _Deuteranopia,
            _Tritanopia,
            _FontSize);
    }
}

/* $UIGameMainSettings (9 fields) */
public record class UIGameMainSettings(
    PPtr<UISettingsEntityDropdownLocale> Localization /* None */,
    PPtr<UISettingsEntityBool> AutofillActionbarSlots /* None */,
    PPtr<UISettingsEntityBool> LootInCombat /* None */,
    PPtr<UISettingsEntityBool> SendGameStatistic /* None */,
    PPtr<UISettingsEntityBool> SendSaves /* None */,
    PPtr<UISettingsEntityBool> UseHotAreas /* None */,
    PPtr<UISettingsEntityBool> BloodOnCharacters /* None */,
    PPtr<UISettingsEntityBool> DismemberCharacters /* None */,
    PPtr<UISettingsEntityBool> AcceleratedMove /* None */)
{
    public static UIGameMainSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownLocale> _Localization = PPtr<UISettingsEntityDropdownLocale>.Read(reader);
        PPtr<UISettingsEntityBool> _AutofillActionbarSlots = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _LootInCombat = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _SendGameStatistic = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _SendSaves = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _UseHotAreas = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _BloodOnCharacters = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _DismemberCharacters = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _AcceleratedMove = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_Localization,
            _AutofillActionbarSlots,
            _LootInCombat,
            _SendGameStatistic,
            _SendSaves,
            _UseHotAreas,
            _BloodOnCharacters,
            _DismemberCharacters,
            _AcceleratedMove);
    }
}

/* $UIGameSaveSettings (3 fields) */
public record class UIGameSaveSettings(
    PPtr<UISettingsEntityBool> AutosaveEnabled /* None */,
    PPtr<UISettingsEntitySliderInt> AutosaveSlots /* None */,
    PPtr<UISettingsEntitySliderInt> QuicksaveSlots /* None */)
{
    public static UIGameSaveSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> _AutosaveEnabled = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _AutosaveSlots = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> _QuicksaveSlots = PPtr<UISettingsEntitySliderInt>.Read(reader);
        
        return new(_AutosaveEnabled,
            _AutosaveSlots,
            _QuicksaveSlots);
    }
}

/* $UIGameTooltipsSettings (3 fields) */
public record class UIGameTooltipsSettings(
    PPtr<UISettingsEntityBool> ShowComparative /* None */,
    PPtr<UISettingsEntitySliderFloat> ShowDelay /* None */,
    PPtr<UISettingsEntityBool> Shortened /* None */)
{
    public static UIGameTooltipsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> _ShowComparative = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _ShowDelay = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> _Shortened = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_ShowComparative,
            _ShowDelay,
            _Shortened);
    }
}

/* $UIGameTutorialSettings (10 fields) */
public record class UIGameTutorialSettings(
    PPtr<UISettingsEntityBool> ShowBasicTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowControlsBasicTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowControlsAdvancedTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowGameplayBasicTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowGameplayAdvancedTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowWarhammerRulesTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowSpaceEncountersTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowSpaceExplorationTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowGroundEncountersTutorial /* None */,
    PPtr<UISettingsEntityBool> ShowContextTutorial /* None */)
{
    public static UIGameTutorialSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> _ShowBasicTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowControlsBasicTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowControlsAdvancedTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowGameplayBasicTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowGameplayAdvancedTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowWarhammerRulesTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowSpaceEncountersTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowSpaceExplorationTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowGroundEncountersTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowContextTutorial = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_ShowBasicTutorial,
            _ShowControlsBasicTutorial,
            _ShowControlsAdvancedTutorial,
            _ShowGameplayBasicTutorial,
            _ShowGameplayAdvancedTutorial,
            _ShowWarhammerRulesTutorial,
            _ShowSpaceEncountersTutorial,
            _ShowSpaceExplorationTutorial,
            _ShowGroundEncountersTutorial,
            _ShowContextTutorial);
    }
}

/* $UIGameCombatTextsSettings (8 fields) */
public record class UIGameCombatTextsSettings(
    PPtr<UISettingsEntityDropdownEntitiesType> ShowSpellName /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowAvoid /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowMiss /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowAttackOfOpportunity /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowCriticalHit /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowSneakAttack /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowDamage /* None */,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowSaves /* None */)
{
    public static UIGameCombatTextsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowSpellName = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowAvoid = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowMiss = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowAttackOfOpportunity = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowCriticalHit = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowSneakAttack = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowDamage = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> _ShowSaves = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        
        return new(_ShowSpellName,
            _ShowAvoid,
            _ShowMiss,
            _ShowAttackOfOpportunity,
            _ShowCriticalHit,
            _ShowSneakAttack,
            _ShowDamage,
            _ShowSaves);
    }
}

/* $UIGameDialogsSettings (8 fields) */
public record class UIGameDialogsSettings(
    PPtr<UISettingsEntityBool> ShowItemsReceivedNotification /* None */,
    PPtr<UISettingsEntityBool> ShowLocationRevealedNotification /* None */,
    PPtr<UISettingsEntityBool> ShowXPGainedNotification /* None */,
    PPtr<UISettingsEntityBool> ShowAlignmentShiftsInAnswer /* None */,
    PPtr<UISettingsEntityBool> ShowAlignmentShiftsNotifications /* None */,
    PPtr<UISettingsEntityBool> ShowAlignmentRequirements /* None */,
    PPtr<UISettingsEntityBool> ShowSkillcheckDC /* None */,
    PPtr<UISettingsEntityBool> ShowSkillcheckResult /* None */)
{
    public static UIGameDialogsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> _ShowItemsReceivedNotification = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowLocationRevealedNotification = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowXPGainedNotification = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowAlignmentShiftsInAnswer = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowAlignmentShiftsNotifications = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowAlignmentRequirements = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowSkillcheckDC = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _ShowSkillcheckResult = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_ShowItemsReceivedNotification,
            _ShowLocationRevealedNotification,
            _ShowXPGainedNotification,
            _ShowAlignmentShiftsInAnswer,
            _ShowAlignmentShiftsNotifications,
            _ShowAlignmentRequirements,
            _ShowSkillcheckDC,
            _ShowSkillcheckResult);
    }
}

/* $UIGameAutopauseSettings (5 fields) */
public record class UIGameAutopauseSettings(
    PPtr<UISettingsEntityBool> PauseOnLostFocus /* None */,
    PPtr<UISettingsEntityBool> PauseOnTrapDetected /* None */,
    PPtr<UISettingsEntityBool> PauseOnHiddenObjectDetected /* None */,
    PPtr<UISettingsEntityBool> PauseWhenAreaLoaded /* None */,
    PPtr<UISettingsEntityBool> PauseOnLoadingScreen /* None */)
{
    public static UIGameAutopauseSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> _PauseOnLostFocus = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _PauseOnTrapDetected = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _PauseOnHiddenObjectDetected = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _PauseWhenAreaLoaded = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _PauseOnLoadingScreen = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_PauseOnLostFocus,
            _PauseOnTrapDetected,
            _PauseOnHiddenObjectDetected,
            _PauseWhenAreaLoaded,
            _PauseOnLoadingScreen);
    }
}

/* $UIGameTurnBasedSettings (9 fields) */
public record class UIGameTurnBasedSettings(
    PPtr<UISettingsEntityBool> AutoEndTurn /* None */,
    PPtr<UISettingsEntityBool> CameraFollowUnit /* None */,
    PPtr<UISettingsEntityBool> CameraScrollToCurrentUnit /* None */,
    PPtr<UISettingsEntityDropdownSpeedUpMode> SpeedUpMode /* None */,
    PPtr<UISettingsEntityBool> FastMovement /* None */,
    PPtr<UISettingsEntityBool> FastPartyCast /* None */,
    PPtr<UISettingsEntitySliderFloat> TimeScaleInPlayerTurn /* None */,
    PPtr<UISettingsEntitySliderFloat> TimeScaleInNonPlayerTurn /* None */,
    PPtr<UISettingsEntityBool> AutoSelectWeaponAbility /* None */)
{
    public static UIGameTurnBasedSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> _AutoEndTurn = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _CameraFollowUnit = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _CameraScrollToCurrentUnit = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownSpeedUpMode> _SpeedUpMode = PPtr<UISettingsEntityDropdownSpeedUpMode>.Read(reader);
        PPtr<UISettingsEntityBool> _FastMovement = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _FastPartyCast = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _TimeScaleInPlayerTurn = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _TimeScaleInNonPlayerTurn = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> _AutoSelectWeaponAbility = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_AutoEndTurn,
            _CameraFollowUnit,
            _CameraScrollToCurrentUnit,
            _SpeedUpMode,
            _FastMovement,
            _FastPartyCast,
            _TimeScaleInPlayerTurn,
            _TimeScaleInNonPlayerTurn,
            _AutoSelectWeaponAbility);
    }
}

/* $UIControlsSettings (11 fields) */
public record class UIControlsSettings(
    PPtr<UISettingsEntitySliderFloat> MouseSensitivity /* None */,
    PPtr<UISettingsEntitySliderFloat> MouseClickDelay /* None */,
    PPtr<UISettingsEntityBool> ScreenEdgeScrolling /* None */,
    PPtr<UISettingsEntitySliderFloat> CameraScrollSpeedEdge /* None */,
    PPtr<UISettingsEntitySliderFloat> CameraScrollSpeedKeyboard /* None */,
    PPtr<UISettingsEntitySliderFloat> CameraRotationSpeedEdge /* None */,
    PPtr<UISettingsEntitySliderFloat> CameraRotationSpeedKeyboard /* None */,
    PPtr<UISettingsEntityBool> CameraScrollOutOfScreenEnabled /* None */,
    PPtr<UISettingsEntityDropdownMouseRightButtonFunction> MouseRightButtonFunction /* None */,
    PPtr<UISettingsEntityBool> ConvertSnapLogic /* None */,
    PPtr<UISettingsEntityBool> CameraFollowsUnit /* None */)
{
    public static UIControlsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntitySliderFloat> _MouseSensitivity = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _MouseClickDelay = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> _ScreenEdgeScrolling = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _CameraScrollSpeedEdge = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _CameraScrollSpeedKeyboard = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _CameraRotationSpeedEdge = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> _CameraRotationSpeedKeyboard = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> _CameraScrollOutOfScreenEnabled = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownMouseRightButtonFunction> _MouseRightButtonFunction = PPtr<UISettingsEntityDropdownMouseRightButtonFunction>.Read(reader);
        PPtr<UISettingsEntityBool> _ConvertSnapLogic = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> _CameraFollowsUnit = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(_MouseSensitivity,
            _MouseClickDelay,
            _ScreenEdgeScrolling,
            _CameraScrollSpeedEdge,
            _CameraScrollSpeedKeyboard,
            _CameraRotationSpeedEdge,
            _CameraRotationSpeedKeyboard,
            _CameraScrollOutOfScreenEnabled,
            _MouseRightButtonFunction,
            _ConvertSnapLogic,
            _CameraFollowsUnit);
    }
}

/* $UIKeybindGeneralSettings (27 fields) */
public record class UIKeybindGeneralSettings(
    PPtr<UISettingsEntityKeyBinding> HighlightObjects /* None */,
    PPtr<UISettingsEntityKeyBinding> Hold /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenCharacterScreen /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenInventory /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenJournal /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenMap /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenEncyclopedia /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenColonyManagement /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenShipCustomization /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenCargoManagement /* None */,
    PPtr<UISettingsEntityKeyBinding> Pause /* None */,
    PPtr<UISettingsEntityKeyBinding> QuickLoad /* None */,
    PPtr<UISettingsEntityKeyBinding> QuickSave /* None */,
    PPtr<UISettingsEntityKeyBinding> Screenshot /* None */,
    PPtr<UISettingsEntityKeyBinding> Stop /* None */,
    PPtr<UISettingsEntityKeyBinding> Unpause /* None */,
    PPtr<UISettingsEntityKeyBinding> CameraUp /* None */,
    PPtr<UISettingsEntityKeyBinding> CameraDown /* None */,
    PPtr<UISettingsEntityKeyBinding> CameraLeft /* None */,
    PPtr<UISettingsEntityKeyBinding> CameraRight /* None */,
    PPtr<UISettingsEntityKeyBinding> CameraRotateLeft /* None */,
    PPtr<UISettingsEntityKeyBinding> CameraRotateRight /* None */,
    PPtr<UISettingsEntityKeyBinding> FollowUnit /* None */,
    PPtr<UISettingsEntityKeyBinding> SkipBark /* None */,
    PPtr<UISettingsEntityKeyBinding> SkipCutscene /* None */,
    PPtr<UISettingsEntityKeyBinding> OpenModificationsWindow /* None */,
    PPtr<UISettingsEntityKeyBinding> SpeedUpEnemiesTurn /* None */)
{
    public static UIKeybindGeneralSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding> _HighlightObjects = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _Hold = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenCharacterScreen = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenInventory = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenJournal = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenMap = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenEncyclopedia = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenColonyManagement = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenShipCustomization = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenCargoManagement = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _Pause = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _QuickLoad = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _QuickSave = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _Screenshot = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _Stop = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _Unpause = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _CameraUp = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _CameraDown = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _CameraLeft = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _CameraRight = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _CameraRotateLeft = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _CameraRotateRight = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _FollowUnit = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _SkipBark = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _SkipCutscene = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _OpenModificationsWindow = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _SpeedUpEnemiesTurn = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        
        return new(_HighlightObjects,
            _Hold,
            _OpenCharacterScreen,
            _OpenInventory,
            _OpenJournal,
            _OpenMap,
            _OpenEncyclopedia,
            _OpenColonyManagement,
            _OpenShipCustomization,
            _OpenCargoManagement,
            _Pause,
            _QuickLoad,
            _QuickSave,
            _Screenshot,
            _Stop,
            _Unpause,
            _CameraUp,
            _CameraDown,
            _CameraLeft,
            _CameraRight,
            _CameraRotateLeft,
            _CameraRotateRight,
            _FollowUnit,
            _SkipBark,
            _SkipCutscene,
            _OpenModificationsWindow,
            _SpeedUpEnemiesTurn);
    }
}

/* $UIKeybindActionBarSettings (4 fields) */
public record class UIKeybindActionBarSettings(
    PPtr<UISettingsEntityKeyBinding> ChangeWeaponSet /* None */,
    PPtr<UISettingsEntityKeyBinding>[] ActionBarConsumables /* None */,
    PPtr<UISettingsEntityKeyBinding>[] ActionBarWeapons /* None */,
    PPtr<UISettingsEntityKeyBinding>[] ActionBarAbilities /* None */)
{
    public static UIKeybindActionBarSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding> _ChangeWeaponSet = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding>[] _ActionBarConsumables = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding>[] _ActionBarWeapons = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding>[] _ActionBarAbilities = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        
        return new(_ChangeWeaponSet,
            _ActionBarConsumables,
            _ActionBarWeapons,
            _ActionBarAbilities);
    }
}

/* $UIKeybindDialogSettings (2 fields) */
public record class UIKeybindDialogSettings(
    PPtr<UISettingsEntityKeyBinding>[] DialogChoices /* None */,
    PPtr<UISettingsEntityKeyBinding> NextOrEnd /* None */)
{
    public static UIKeybindDialogSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding>[] _DialogChoices = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _NextOrEnd = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        
        return new(_DialogChoices,
            _NextOrEnd);
    }
}

/* $UIKeybindSelectCharacterSettings (2 fields) */
public record class UIKeybindSelectCharacterSettings(
    PPtr<UISettingsEntityKeyBinding>[] SelectCharacter /* None */,
    PPtr<UISettingsEntityKeyBinding> SelectAll /* None */)
{
    public static UIKeybindSelectCharacterSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding>[] _SelectCharacter = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> _SelectAll = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        
        return new(_SelectCharacter,
            _SelectAll);
    }
}

/* $UISettingsMechanicLinks (18 fields) */
public record class UISettingsMechanicLinks(
    UIDifficultySettings UIDifficultySettings /* None */,
    UIGraphicsSettings UIGraphicsSettings /* None */,
    UIDisplaySettings UIDisplaySettings /* None */,
    UISoundSettings UISoundSettings /* None */,
    UIAccessiabilitySettings UIAccessiabilitySettings /* None */,
    UIGameMainSettings UIGameMainSettings /* None */,
    UIGameSaveSettings UIGameSaveSettings /* None */,
    UIGameTooltipsSettings UIGameTooltipsSettings /* None */,
    UIGameTutorialSettings UIGameTutorialSettings /* None */,
    UIGameCombatTextsSettings UIGameCombatTextsSettings /* None */,
    UIGameDialogsSettings UIGameDialogsSettings /* None */,
    UIGameAutopauseSettings UIGameAutopauseSettings /* None */,
    UIGameTurnBasedSettings UIGameTurnBasedSettings /* None */,
    UIControlsSettings UIControlsSettings /* None */,
    UIKeybindGeneralSettings UIKeybindGeneralSettings /* None */,
    UIKeybindActionBarSettings UIKeybindActionBarSettings /* None */,
    UIKeybindDialogSettings UIKeybindDialogSettings /* None */,
    UIKeybindSelectCharacterSettings UIKeybindSelectCharacterSettings /* None */)
{
    public static UISettingsMechanicLinks Read(EndianBinaryReader reader)
    {
        UIDifficultySettings _UIDifficultySettings = UIDifficultySettings.Read(reader);
        UIGraphicsSettings _UIGraphicsSettings = UIGraphicsSettings.Read(reader);
        UIDisplaySettings _UIDisplaySettings = UIDisplaySettings.Read(reader);
        UISoundSettings _UISoundSettings = UISoundSettings.Read(reader);
        UIAccessiabilitySettings _UIAccessiabilitySettings = UIAccessiabilitySettings.Read(reader);
        UIGameMainSettings _UIGameMainSettings = UIGameMainSettings.Read(reader);
        UIGameSaveSettings _UIGameSaveSettings = UIGameSaveSettings.Read(reader);
        UIGameTooltipsSettings _UIGameTooltipsSettings = UIGameTooltipsSettings.Read(reader);
        UIGameTutorialSettings _UIGameTutorialSettings = UIGameTutorialSettings.Read(reader);
        UIGameCombatTextsSettings _UIGameCombatTextsSettings = UIGameCombatTextsSettings.Read(reader);
        UIGameDialogsSettings _UIGameDialogsSettings = UIGameDialogsSettings.Read(reader);
        UIGameAutopauseSettings _UIGameAutopauseSettings = UIGameAutopauseSettings.Read(reader);
        UIGameTurnBasedSettings _UIGameTurnBasedSettings = UIGameTurnBasedSettings.Read(reader);
        UIControlsSettings _UIControlsSettings = UIControlsSettings.Read(reader);
        UIKeybindGeneralSettings _UIKeybindGeneralSettings = UIKeybindGeneralSettings.Read(reader);
        UIKeybindActionBarSettings _UIKeybindActionBarSettings = UIKeybindActionBarSettings.Read(reader);
        UIKeybindDialogSettings _UIKeybindDialogSettings = UIKeybindDialogSettings.Read(reader);
        UIKeybindSelectCharacterSettings _UIKeybindSelectCharacterSettings = UIKeybindSelectCharacterSettings.Read(reader);
        
        return new(_UIDifficultySettings,
            _UIGraphicsSettings,
            _UIDisplaySettings,
            _UISoundSettings,
            _UIAccessiabilitySettings,
            _UIGameMainSettings,
            _UIGameSaveSettings,
            _UIGameTooltipsSettings,
            _UIGameTutorialSettings,
            _UIGameCombatTextsSettings,
            _UIGameDialogsSettings,
            _UIGameAutopauseSettings,
            _UIGameTurnBasedSettings,
            _UIControlsSettings,
            _UIKeybindGeneralSettings,
            _UIKeybindActionBarSettings,
            _UIKeybindDialogSettings,
            _UIKeybindSelectCharacterSettings);
    }
}

/* $GraphicsPreset (23 fields) */
public readonly record struct GraphicsPreset(
    int GraphicsQuality /* NeedsAlign */,
    int VSyncMode /* None */,
    byte FrameRateLimitEnabled /* None */,
    int FrameRateLimit /* NeedsAlign */,
    int ShadowsQuality /* None */,
    int TexturesQuality /* None */,
    byte DepthOfField /* None */,
    byte Bloom /* NeedsAlign */,
    int SSAOQuality /* NeedsAlign */,
    int SSRQuality /* None */,
    int AntialiasingMode /* None */,
    int AntialiasingQuality /* None */,
    int PBDExecutionPath /* None */,
    int FootprintsMode /* None */,
    int FsrMode /* None */,
    float FsrSharpness /* None */,
    int VolumetricLightingQuality /* None */,
    byte ParticleSystemsLightingEnabled /* None */,
    byte ParticleSystemsShadowsEnabled /* NeedsAlign */,
    byte FilmGrainEnabled /* NeedsAlign */,
    float UIFrequentTimerInterval /* NeedsAlign */,
    float UIInfrequentTimerInterval /* None */,
    int CrowdQuality /* None */)
{
    public static GraphicsPreset Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* GraphicsQuality */
        int _GraphicsQuality = reader.ReadS32();
        int _VSyncMode = reader.ReadS32();
        byte _FrameRateLimitEnabled = reader.ReadU8();
        reader.AlignTo(4); /* FrameRateLimit */
        int _FrameRateLimit = reader.ReadS32();
        int _ShadowsQuality = reader.ReadS32();
        int _TexturesQuality = reader.ReadS32();
        byte _DepthOfField = reader.ReadU8();
        reader.AlignTo(4); /* Bloom */
        byte _Bloom = reader.ReadU8();
        reader.AlignTo(4); /* SSAOQuality */
        int _SSAOQuality = reader.ReadS32();
        int _SSRQuality = reader.ReadS32();
        int _AntialiasingMode = reader.ReadS32();
        int _AntialiasingQuality = reader.ReadS32();
        int _PBDExecutionPath = reader.ReadS32();
        int _FootprintsMode = reader.ReadS32();
        int _FsrMode = reader.ReadS32();
        float _FsrSharpness = reader.ReadF32();
        int _VolumetricLightingQuality = reader.ReadS32();
        byte _ParticleSystemsLightingEnabled = reader.ReadU8();
        reader.AlignTo(4); /* ParticleSystemsShadowsEnabled */
        byte _ParticleSystemsShadowsEnabled = reader.ReadU8();
        reader.AlignTo(4); /* FilmGrainEnabled */
        byte _FilmGrainEnabled = reader.ReadU8();
        reader.AlignTo(4); /* UIFrequentTimerInterval */
        float _UIFrequentTimerInterval = reader.ReadF32();
        float _UIInfrequentTimerInterval = reader.ReadF32();
        int _CrowdQuality = reader.ReadS32();
        
        return new(_GraphicsQuality,
            _VSyncMode,
            _FrameRateLimitEnabled,
            _FrameRateLimit,
            _ShadowsQuality,
            _TexturesQuality,
            _DepthOfField,
            _Bloom,
            _SSAOQuality,
            _SSRQuality,
            _AntialiasingMode,
            _AntialiasingQuality,
            _PBDExecutionPath,
            _FootprintsMode,
            _FsrMode,
            _FsrSharpness,
            _VolumetricLightingQuality,
            _ParticleSystemsLightingEnabled,
            _ParticleSystemsShadowsEnabled,
            _FilmGrainEnabled,
            _UIFrequentTimerInterval,
            _UIInfrequentTimerInterval,
            _CrowdQuality);
    }
}

/* $SquadSettings (2 fields) */
public record class SquadSettings(
    PPtr<UnitSpawner>[] Spawners /* None */,
    PPtr<UnitSpawner> Leader /* None */)
{
    public static SquadSettings Read(EndianBinaryReader reader)
    {
        PPtr<UnitSpawner>[] _Spawners = BuiltInArray<PPtr<UnitSpawner>>.Read(reader);
        PPtr<UnitSpawner> _Leader = PPtr<UnitSpawner>.Read(reader);
        
        return new(_Spawners,
            _Leader);
    }
}

/* $InteractionSettings (19 fields) */
public record class InteractionSettings(
    int UIType /* NeedsAlign */,
    byte NotInCombat /* None */,
    byte ShowOvertip /* NeedsAlign */,
    byte AlwaysDisabled /* NeedsAlign */,
    byte ShowHighlight /* NeedsAlign */,
    int ProximityRadius /* NeedsAlign */,
    int Type /* None */,
    int UseAnimationState /* None */,
    BlueprintDialogReference m_Dialog /* None */,
    AsciiString InteractionSound /* NeedsAlign */,
    AsciiString InteractionDisabledSound /* NeedsAlign */,
    AsciiString InteractionStopSound /* NeedsAlign */,
    PPtr<TrapObjectView> Trap /* NeedsAlign */,
    byte DoNotNeedCollider /* None */,
    byte UnlimitedInteractionsPerRound /* NeedsAlign */,
    byte OverrideActionPointsCost /* NeedsAlign */,
    int ActionPointsCost /* NeedsAlign */,
    InteractWithToolFXData InteractWithMeltaChargeFXData /* None */,
    float OvertipVerticalCorrection /* NeedsAlign */)
{
    public static InteractionSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* UIType */
        int _UIType = reader.ReadS32();
        byte _NotInCombat = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte _ShowOvertip = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte _AlwaysDisabled = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        byte _ShowHighlight = reader.ReadU8();
        reader.AlignTo(4); /* ProximityRadius */
        int _ProximityRadius = reader.ReadS32();
        int _Type = reader.ReadS32();
        int _UseAnimationState = reader.ReadS32();
        BlueprintDialogReference _m_Dialog = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString _InteractionSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString _InteractionDisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        AsciiString _InteractionStopSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trap */
        PPtr<TrapObjectView> _Trap = PPtr<TrapObjectView>.Read(reader);
        byte _DoNotNeedCollider = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte _UnlimitedInteractionsPerRound = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        byte _OverrideActionPointsCost = reader.ReadU8();
        reader.AlignTo(4); /* ActionPointsCost */
        int _ActionPointsCost = reader.ReadS32();
        InteractWithToolFXData _InteractWithMeltaChargeFXData = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* OvertipVerticalCorrection */
        float _OvertipVerticalCorrection = reader.ReadF32();
        
        return new(_UIType,
            _NotInCombat,
            _ShowOvertip,
            _AlwaysDisabled,
            _ShowHighlight,
            _ProximityRadius,
            _Type,
            _UseAnimationState,
            _m_Dialog,
            _InteractionSound,
            _InteractionDisabledSound,
            _InteractionStopSound,
            _Trap,
            _DoNotNeedCollider,
            _UnlimitedInteractionsPerRound,
            _OverrideActionPointsCost,
            _ActionPointsCost,
            _InteractWithMeltaChargeFXData,
            _OvertipVerticalCorrection);
    }
}

/* $UnitCustomizationPresetReference (1 fields) */
public record class UnitCustomizationPresetReference(
    AsciiString guid /* NeedsAlign */)
{
    public static UnitCustomizationPresetReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $BlueprintUnitAsksListReference (1 fields) */
public record class BlueprintUnitAsksListReference(
    AsciiString guid /* None */)
{
    public static BlueprintUnitAsksListReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $VertexGradient (4 fields) */
public record class VertexGradient(
    ColorRGBA topLeft /* None */,
    ColorRGBA topRight /* None */,
    ColorRGBA bottomLeft /* None */,
    ColorRGBA bottomRight /* None */)
{
    public static VertexGradient Read(EndianBinaryReader reader)
    {
        ColorRGBA _topLeft = ColorRGBA.Read(reader);
        ColorRGBA _topRight = ColorRGBA.Read(reader);
        ColorRGBA _bottomLeft = ColorRGBA.Read(reader);
        ColorRGBA _bottomRight = ColorRGBA.Read(reader);
        
        return new(_topLeft,
            _topRight,
            _bottomLeft,
            _bottomRight);
    }
}

/* $InteractableMirrorRenderSettingsView (6 fields) */
public record class InteractableMirrorRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static InteractableMirrorRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $EllipseObjectInteractionShape (1 fields) */
public record class EllipseObjectInteractionShape(
    PPtr<EllipseShapeRenderSettings> _renderSettings /* NeedsAlign */)
{
    public static EllipseObjectInteractionShape Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _renderSettings */
        PPtr<EllipseShapeRenderSettings> __renderSettings = PPtr<EllipseShapeRenderSettings>.Read(reader);
        
        return new(__renderSettings);
    }
}

/* $Object2DMassEraseShape (1 fields) */
public record class Object2DMassEraseShape(
    EllipseObjectInteractionShape _circleShape /* NeedsAlign */)
{
    public static Object2DMassEraseShape Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _circleShape */
        EllipseObjectInteractionShape __circleShape = EllipseObjectInteractionShape.Read(reader);
        
        return new(__circleShape);
    }
}

/* $Object3DMassEraseShape (1 fields) */
public record class Object3DMassEraseShape(
    XZOrientedEllipseObjectInteractionShape _circleShape /* None */)
{
    public static Object3DMassEraseShape Read(EndianBinaryReader reader)
    {
        XZOrientedEllipseObjectInteractionShape __circleShape = XZOrientedEllipseObjectInteractionShape.Read(reader);
        
        return new(__circleShape);
    }
}

/* $LocalVolumetricFogArtistParameters (18 fields) */
public record class LocalVolumetricFogArtistParameters(
    ColorRGBA Albedo /* NeedsAlign */,
    float MeanFreePath /* None */,
    float Anisotropy /* None */,
    PPtr<Texture> VolumeMask /* None */,
    Vector3f TextureScrollingSpeed /* None */,
    Vector3f TextureTiling /* None */,
    Vector3f TextureOffset /* None */,
    float m_EditorUniformFade /* None */,
    Vector3f m_EditorPositiveFade /* None */,
    Vector3f m_EditorNegativeFade /* None */,
    byte m_EditorAdvancedFade /* None */,
    float DistanceFadeStart /* NeedsAlign */,
    float DistanceFadeEnd /* None */,
    Vector3f Size /* None */,
    byte InvertFade /* None */,
    int FalloffMode /* NeedsAlign */,
    Vector3f PositiveFade /* None */,
    Vector3f NegativeFade /* None */)
{
    public static LocalVolumetricFogArtistParameters Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Albedo */
        ColorRGBA _Albedo = ColorRGBA.Read(reader);
        float _MeanFreePath = reader.ReadF32();
        float _Anisotropy = reader.ReadF32();
        PPtr<Texture> _VolumeMask = PPtr<Texture>.Read(reader);
        Vector3f _TextureScrollingSpeed = Vector3f.Read(reader);
        Vector3f _TextureTiling = Vector3f.Read(reader);
        Vector3f _TextureOffset = Vector3f.Read(reader);
        float _m_EditorUniformFade = reader.ReadF32();
        Vector3f _m_EditorPositiveFade = Vector3f.Read(reader);
        Vector3f _m_EditorNegativeFade = Vector3f.Read(reader);
        byte _m_EditorAdvancedFade = reader.ReadU8();
        reader.AlignTo(4); /* DistanceFadeStart */
        float _DistanceFadeStart = reader.ReadF32();
        float _DistanceFadeEnd = reader.ReadF32();
        Vector3f _Size = Vector3f.Read(reader);
        byte _InvertFade = reader.ReadU8();
        reader.AlignTo(4); /* FalloffMode */
        int _FalloffMode = reader.ReadS32();
        Vector3f _PositiveFade = Vector3f.Read(reader);
        Vector3f _NegativeFade = Vector3f.Read(reader);
        
        return new(_Albedo,
            _MeanFreePath,
            _Anisotropy,
            _VolumeMask,
            _TextureScrollingSpeed,
            _TextureTiling,
            _TextureOffset,
            _m_EditorUniformFade,
            _m_EditorPositiveFade,
            _m_EditorNegativeFade,
            _m_EditorAdvancedFade,
            _DistanceFadeStart,
            _DistanceFadeEnd,
            _Size,
            _InvertFade,
            _FalloffMode,
            _PositiveFade,
            _NegativeFade);
    }
}

/* $LensSettings (10 fields) */
public record class LensSettings(
    float FieldOfView /* None */,
    float OrthographicSize /* None */,
    float NearClipPlane /* None */,
    float FarClipPlane /* None */,
    float Dutch /* None */,
    int ModeOverride /* None */,
    Vector2f LensShift /* None */,
    int GateFit /* None */,
    float FocusDistance /* None */,
    Vector2f m_SensorSize /* None */)
{
    public static LensSettings Read(EndianBinaryReader reader)
    {
        float _FieldOfView = reader.ReadF32();
        float _OrthographicSize = reader.ReadF32();
        float _NearClipPlane = reader.ReadF32();
        float _FarClipPlane = reader.ReadF32();
        float _Dutch = reader.ReadF32();
        int _ModeOverride = reader.ReadS32();
        Vector2f _LensShift = Vector2f.Read(reader);
        int _GateFit = reader.ReadS32();
        float _FocusDistance = reader.ReadF32();
        Vector2f _m_SensorSize = Vector2f.Read(reader);
        
        return new(_FieldOfView,
            _OrthographicSize,
            _NearClipPlane,
            _FarClipPlane,
            _Dutch,
            _ModeOverride,
            _LensShift,
            _GateFit,
            _FocusDistance,
            _m_SensorSize);
    }
}

/* $TransitionParams (3 fields) */
public record class TransitionParams(
    int m_BlendHint /* None */,
    byte m_InheritPosition /* None */,
    VcamActivatedEvent m_OnCameraLive /* NeedsAlign */)
{
    public static TransitionParams Read(EndianBinaryReader reader)
    {
        int _m_BlendHint = reader.ReadS32();
        byte _m_InheritPosition = reader.ReadU8();
        reader.AlignTo(4); /* m_OnCameraLive */
        VcamActivatedEvent _m_OnCameraLive = VcamActivatedEvent.Read(reader);
        
        return new(_m_BlendHint,
            _m_InheritPosition,
            _m_OnCameraLive);
    }
}

/* $UIMeinMenuTexts (30 fields) */
public record class UIMeinMenuTexts(
    LocalizedString Continue /* NeedsAlign */,
    LocalizedString NewGame /* NeedsAlign */,
    LocalizedString LoadGame /* NeedsAlign */,
    LocalizedString Settings /* NeedsAlign */,
    LocalizedString Credits /* NeedsAlign */,
    LocalizedString License /* NeedsAlign */,
    LocalizedString Feedback /* NeedsAlign */,
    LocalizedString Exit /* NeedsAlign */,
    LocalizedString MotivationStartPart /* NeedsAlign */,
    LocalizedString MotivationStartPartFormat /* NeedsAlign */,
    LocalizedString MotivationLinkPartFormat /* NeedsAlign */,
    LocalizedString MotivationEndPart /* NeedsAlign */,
    LocalizedString Inventory /* NeedsAlign */,
    LocalizedString CharacterInfo /* NeedsAlign */,
    LocalizedString Journal /* NeedsAlign */,
    LocalizedString Encyclopedia /* NeedsAlign */,
    LocalizedString ColonyManagement /* NeedsAlign */,
    LocalizedString CargoManagement /* NeedsAlign */,
    LocalizedString LocalMap /* NeedsAlign */,
    LocalizedString ShipCustomization /* NeedsAlign */,
    LocalizedString Inspect /* NeedsAlign */,
    LocalizedString LevelUp /* NeedsAlign */,
    LocalizedString VoidshipLevelUp /* NeedsAlign */,
    LocalizedString CrashDumpFoundDialogue /* NeedsAlign */,
    LocalizedString CrashDumpFoundDialogueMods /* NeedsAlign */,
    LocalizedString CrashDumpFoundDialogueRam /* NeedsAlign */,
    LocalizedString CrashDumpFoundDialogueCorrupted /* NeedsAlign */,
    LocalizedString CrashDumpFoundDialogueFreeSpace /* NeedsAlign */,
    LocalizedString ExceptionDialogueCorrupted /* NeedsAlign */,
    LocalizedString ExceptionDialogueFreeSpace /* NeedsAlign */)
{
    public static UIMeinMenuTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Continue */
        LocalizedString _Continue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewGame */
        LocalizedString _NewGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadGame */
        LocalizedString _LoadGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Settings */
        LocalizedString _Settings = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Credits */
        LocalizedString _Credits = LocalizedString.Read(reader);
        reader.AlignTo(4); /* License */
        LocalizedString _License = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Feedback */
        LocalizedString _Feedback = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Exit */
        LocalizedString _Exit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationStartPart */
        LocalizedString _MotivationStartPart = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationStartPartFormat */
        LocalizedString _MotivationStartPartFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationLinkPartFormat */
        LocalizedString _MotivationLinkPartFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationEndPart */
        LocalizedString _MotivationEndPart = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inventory */
        LocalizedString _Inventory = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterInfo */
        LocalizedString _CharacterInfo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Journal */
        LocalizedString _Journal = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Encyclopedia */
        LocalizedString _Encyclopedia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagement */
        LocalizedString _ColonyManagement = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoManagement */
        LocalizedString _CargoManagement = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LocalMap */
        LocalizedString _LocalMap = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipCustomization */
        LocalizedString _ShipCustomization = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inspect */
        LocalizedString _Inspect = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelUp */
        LocalizedString _LevelUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VoidshipLevelUp */
        LocalizedString _VoidshipLevelUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogue */
        LocalizedString _CrashDumpFoundDialogue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueMods */
        LocalizedString _CrashDumpFoundDialogueMods = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueRam */
        LocalizedString _CrashDumpFoundDialogueRam = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueCorrupted */
        LocalizedString _CrashDumpFoundDialogueCorrupted = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueFreeSpace */
        LocalizedString _CrashDumpFoundDialogueFreeSpace = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExceptionDialogueCorrupted */
        LocalizedString _ExceptionDialogueCorrupted = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExceptionDialogueFreeSpace */
        LocalizedString _ExceptionDialogueFreeSpace = LocalizedString.Read(reader);
        
        return new(_Continue,
            _NewGame,
            _LoadGame,
            _Settings,
            _Credits,
            _License,
            _Feedback,
            _Exit,
            _MotivationStartPart,
            _MotivationStartPartFormat,
            _MotivationLinkPartFormat,
            _MotivationEndPart,
            _Inventory,
            _CharacterInfo,
            _Journal,
            _Encyclopedia,
            _ColonyManagement,
            _CargoManagement,
            _LocalMap,
            _ShipCustomization,
            _Inspect,
            _LevelUp,
            _VoidshipLevelUp,
            _CrashDumpFoundDialogue,
            _CrashDumpFoundDialogueMods,
            _CrashDumpFoundDialogueRam,
            _CrashDumpFoundDialogueCorrupted,
            _CrashDumpFoundDialogueFreeSpace,
            _ExceptionDialogueCorrupted,
            _ExceptionDialogueFreeSpace);
    }
}

/* $UITextCharSheet (188 fields) */
public record class UITextCharSheet(
    LocalizedString WeaponSkillShort /* NeedsAlign */,
    LocalizedString BallisticSkillShort /* NeedsAlign */,
    LocalizedString StrengthShort /* NeedsAlign */,
    LocalizedString ToughnessShort /* NeedsAlign */,
    LocalizedString AgilityShort /* NeedsAlign */,
    LocalizedString InteligenceShort /* NeedsAlign */,
    LocalizedString PerceptionShort /* NeedsAlign */,
    LocalizedString WillpowerShort /* NeedsAlign */,
    LocalizedString FellowshipShort /* NeedsAlign */,
    LocalizedString LEVEL /* NeedsAlign */,
    LocalizedString LvlShort /* NeedsAlign */,
    LocalizedString Attack /* NeedsAlign */,
    LocalizedString Abilities /* NeedsAlign */,
    LocalizedString Summary /* NeedsAlign */,
    LocalizedString Features /* NeedsAlign */,
    LocalizedString PsykerPowers /* NeedsAlign */,
    LocalizedString LevelProgression /* NeedsAlign */,
    LocalizedString Biography /* NeedsAlign */,
    LocalizedString FactionsReputation /* NeedsAlign */,
    LocalizedString Skills /* NeedsAlign */,
    LocalizedString Stats /* NeedsAlign */,
    LocalizedString BuffsAndConditions /* NeedsAlign */,
    LocalizedString Career /* NeedsAlign */,
    LocalizedString StatusEffects /* NeedsAlign */,
    LocalizedString Weapons /* NeedsAlign */,
    LocalizedString PsyRatingShort /* NeedsAlign */,
    LocalizedString Vendors /* NeedsAlign */,
    LocalizedString BackgroundAbilities /* NeedsAlign */,
    LocalizedString CareerAbilities /* NeedsAlign */,
    LocalizedString PostsAbilities /* NeedsAlign */,
    LocalizedString ItemsAbilities /* NeedsAlign */,
    LocalizedString SoulMarkAbilities /* NeedsAlign */,
    LocalizedString Speed /* NeedsAlign */,
    LocalizedString TemporaryHP /* NeedsAlign */,
    LocalizedString NoBuffText /* NeedsAlign */,
    LocalizedString Permanent /* NeedsAlign */,
    LocalizedString DeactivatedFeature /* NeedsAlign */,
    LocalizedString Male /* NeedsAlign */,
    LocalizedString Female /* NeedsAlign */,
    LocalizedString Equipment /* NeedsAlign */,
    LocalizedString ArmorAbsorption /* NeedsAlign */,
    LocalizedString ArmorDeflection /* NeedsAlign */,
    LocalizedString Dodge /* NeedsAlign */,
    LocalizedString DodgeReduction /* NeedsAlign */,
    LocalizedString Resolve /* NeedsAlign */,
    LocalizedString History /* NeedsAlign */,
    LocalizedString Drusians /* NeedsAlign */,
    LocalizedString DrusiansDescription /* NeedsAlign */,
    LocalizedString Explorators /* NeedsAlign */,
    LocalizedString ExploratorsDescription /* NeedsAlign */,
    LocalizedString Kasballica /* NeedsAlign */,
    LocalizedString KasballicaDescription /* NeedsAlign */,
    LocalizedString Pirates /* NeedsAlign */,
    LocalizedString PiratesDescription /* NeedsAlign */,
    LocalizedString ShipVendor /* NeedsAlign */,
    LocalizedString ShipVendorDescription /* NeedsAlign */,
    LocalizedString MaxReputationLevel /* NeedsAlign */,
    LocalizedString EmptyBiographyDesc /* NeedsAlign */,
    LocalizedString CareerPathHeader /* NeedsAlign */,
    LocalizedString ShipCareerPathHeader /* NeedsAlign */,
    LocalizedString CareerPathHasNewRanksHeader /* NeedsAlign */,
    LocalizedString CareerPathDescription /* NeedsAlign */,
    LocalizedString CareerUpgradeHeader /* NeedsAlign */,
    LocalizedString CareerUpgradeDescription /* NeedsAlign */,
    LocalizedString CareerUpgradedDescription /* NeedsAlign */,
    LocalizedString CareersTier1 /* NeedsAlign */,
    LocalizedString CareersTier2 /* NeedsAlign */,
    LocalizedString CareersTier3 /* NeedsAlign */,
    LocalizedString SelectCareerPath /* NeedsAlign */,
    LocalizedString UpgradeCareerPath /* NeedsAlign */,
    LocalizedString DialogCloseProgression /* NeedsAlign */,
    LocalizedString LevelupDialogCloseProgression /* NeedsAlign */,
    LocalizedString FeaturePrerequisites /* NeedsAlign */,
    LocalizedString CurrentLevelLabel /* NeedsAlign */,
    LocalizedString RanksCounterLabel /* NeedsAlign */,
    LocalizedString ApplyCareerSelections /* NeedsAlign */,
    LocalizedString ResetCareerSelections /* NeedsAlign */,
    LocalizedString DialogResetSelections /* NeedsAlign */,
    LocalizedString HeaderCareerDescriptionTab /* NeedsAlign */,
    LocalizedString HeaderFeatureDescriptionTab /* NeedsAlign */,
    LocalizedString HeaderImprovement /* NeedsAlign */,
    LocalizedString HeaderSummaryTab /* NeedsAlign */,
    LocalizedString ToSummaryTab /* NeedsAlign */,
    LocalizedString KeystoneAbilitiesHeader /* NeedsAlign */,
    LocalizedString KeystoneFeaturesHeader /* NeedsAlign */,
    LocalizedString UltimateAbilitiesHeader /* NeedsAlign */,
    LocalizedString LevelUpOnOtherUnitButtonHint /* NeedsAlign */,
    LocalizedString NoRanksForUpgradeButtonHint /* NeedsAlign */,
    LocalizedString UnitIsInCombatButtonHint /* NeedsAlign */,
    LocalizedString SelectFeatureButtonHint /* NeedsAlign */,
    LocalizedString SelectedCareerInProgress /* NeedsAlign */,
    LocalizedString SelectedCareerFinished /* NeedsAlign */,
    LocalizedString SelectedCareerHasUpgrades /* NeedsAlign */,
    LocalizedString CareerPathUpgradesLabel /* NeedsAlign */,
    LocalizedString CareerPathExpLabel /* NeedsAlign */,
    LocalizedString RecommendedCareerPath /* NeedsAlign */,
    LocalizedString RecommendedByCareerPath /* NeedsAlign */,
    LocalizedString BackToCareersList /* NeedsAlign */,
    LocalizedString RankLabel /* NeedsAlign */,
    LocalizedString ClickToDoctrine /* NeedsAlign */,
    LocalizedString ClickToDoctrineConsole /* NeedsAlign */,
    LocalizedString ToggleFavorites /* NeedsAlign */,
    LocalizedString NoFeaturesInFilter /* NeedsAlign */,
    LocalizedString AttributeFeatureGroupLabel /* NeedsAlign */,
    LocalizedString SkillFeatureGroupLabel /* NeedsAlign */,
    LocalizedString TalentFeatureGroupLabel /* NeedsAlign */,
    LocalizedString UltimateAbilityFeatureGroupLabel /* NeedsAlign */,
    LocalizedString ActiveAbilityFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AttributeFeatureGroupHint /* NeedsAlign */,
    LocalizedString SkillFeatureGroupHint /* NeedsAlign */,
    LocalizedString TalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionFirstCareerAbilityFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionSecondCareerAbilityFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupLabel /* NeedsAlign */,
    LocalizedString BackgroundAbilityFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionTalentFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionFirstCareerTalentFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionSecondCareerTalentFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupLabel /* NeedsAlign */,
    LocalizedString CommonTalentFeatureGroupLabel /* NeedsAlign */,
    LocalizedString AscensionFirstCareerAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionSecondCareerAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString BackgroundAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionFirstCareerTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionSecondCareerTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString CommonTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString UltimateAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ActiveAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAttributeFeatureGroupHint /* NeedsAlign */,
    LocalizedString ActiveShipUpgradeGroupHint /* NeedsAlign */,
    LocalizedString ChooseShipUpgradeGroupHint /* NeedsAlign */,
    LocalizedString ChooseSkillFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAdvancedAbilityGroupHint /* NeedsAlign */,
    LocalizedString ActiveAdvancedAbilityGroupHint /* NeedsAlign */,
    LocalizedString ChooseShipActiveAbilityGroupHint /* NeedsAlign */,
    LocalizedString ActiveShipActiveAbilityGroupHint /* NeedsAlign */,
    LocalizedString ChooseShipUltimateAbilityGroupHint /* NeedsAlign */,
    LocalizedString ActiveShipUltimateAbilityGroupHint /* NeedsAlign */,
    LocalizedString ChooseTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseUltimateAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseActiveAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionFirstCareerAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionSecondCareerAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseBackgroundAbilityFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionFirstCareerTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionSecondCareerTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString ChooseCommonTalentFeatureGroupHint /* NeedsAlign */,
    LocalizedString KeystoneFeaturesChargenDescription /* NeedsAlign */,
    LocalizedString UltimateAbilitiesChargenDescription /* NeedsAlign */,
    LocalizedString PredefinedAbilitiesChargenDescription /* NeedsAlign */,
    LocalizedString ActiveAbilitiesLabel /* NeedsAlign */,
    LocalizedString PassiveAbilitiesLabel /* NeedsAlign */,
    LocalizedString NoAbilitiesLabel /* NeedsAlign */,
    LocalizedString ActionPanelLabel /* NeedsAlign */,
    LocalizedString Chaos /* NeedsAlign */,
    LocalizedString Human /* NeedsAlign */,
    LocalizedString Xenos /* NeedsAlign */,
    LocalizedString AscensionFirstCareerAbilityFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionSecondCareerAbilityFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionFirstCareerTalentFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionSecondCareerTalentFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription /* NeedsAlign */,
    LocalizedString AscensionMissingOnlySecondCareerTalentFeatureGroupDescription /* NeedsAlign */,
    LocalizedString VisualSettingsTitle /* NeedsAlign */,
    LocalizedString VisualSettingsShowHelmet /* NeedsAlign */,
    LocalizedString VisualSettingsShowBackpack /* NeedsAlign */,
    LocalizedString VisualSettingsShowCloth /* NeedsAlign */,
    LocalizedString VisualSettingsEnableClothes /* NeedsAlign */,
    LocalizedString VisualSettingsDisabledForCharacter /* NeedsAlign */,
    LocalizedString AvailableRanksHint /* NeedsAlign */,
    LocalizedString NoneHint /* NeedsAlign */,
    LocalizedString RecommendedFilterHint /* NeedsAlign */,
    LocalizedString FavoritesFilterHint /* NeedsAlign */,
    LocalizedString OffenseFilterHint /* NeedsAlign */,
    LocalizedString DefenseFilterHint /* NeedsAlign */,
    LocalizedString SupportFilterHint /* NeedsAlign */,
    LocalizedString UniversalFilterHint /* NeedsAlign */,
    LocalizedString ArchetypeFilterHint /* NeedsAlign */,
    LocalizedString OriginFilterHint /* NeedsAlign */,
    LocalizedString WarpFilterHint /* NeedsAlign */)
{
    public static UITextCharSheet Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* WeaponSkillShort */
        LocalizedString _WeaponSkillShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BallisticSkillShort */
        LocalizedString _BallisticSkillShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StrengthShort */
        LocalizedString _StrengthShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToughnessShort */
        LocalizedString _ToughnessShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AgilityShort */
        LocalizedString _AgilityShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InteligenceShort */
        LocalizedString _InteligenceShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PerceptionShort */
        LocalizedString _PerceptionShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WillpowerShort */
        LocalizedString _WillpowerShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FellowshipShort */
        LocalizedString _FellowshipShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LEVEL */
        LocalizedString _LEVEL = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LvlShort */
        LocalizedString _LvlShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Attack */
        LocalizedString _Attack = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Abilities */
        LocalizedString _Abilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Summary */
        LocalizedString _Summary = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Features */
        LocalizedString _Features = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsykerPowers */
        LocalizedString _PsykerPowers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelProgression */
        LocalizedString _LevelProgression = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Biography */
        LocalizedString _Biography = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionsReputation */
        LocalizedString _FactionsReputation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Skills */
        LocalizedString _Skills = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Stats */
        LocalizedString _Stats = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuffsAndConditions */
        LocalizedString _BuffsAndConditions = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Career */
        LocalizedString _Career = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatusEffects */
        LocalizedString _StatusEffects = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Weapons */
        LocalizedString _Weapons = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsyRatingShort */
        LocalizedString _PsyRatingShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Vendors */
        LocalizedString _Vendors = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundAbilities */
        LocalizedString _BackgroundAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerAbilities */
        LocalizedString _CareerAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostsAbilities */
        LocalizedString _PostsAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsAbilities */
        LocalizedString _ItemsAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkAbilities */
        LocalizedString _SoulMarkAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Speed */
        LocalizedString _Speed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TemporaryHP */
        LocalizedString _TemporaryHP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoBuffText */
        LocalizedString _NoBuffText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Permanent */
        LocalizedString _Permanent = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeactivatedFeature */
        LocalizedString _DeactivatedFeature = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Male */
        LocalizedString _Male = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Female */
        LocalizedString _Female = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Equipment */
        LocalizedString _Equipment = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorAbsorption */
        LocalizedString _ArmorAbsorption = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorDeflection */
        LocalizedString _ArmorDeflection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString _Dodge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DodgeReduction */
        LocalizedString _DodgeReduction = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Resolve */
        LocalizedString _Resolve = LocalizedString.Read(reader);
        reader.AlignTo(4); /* History */
        LocalizedString _History = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Drusians */
        LocalizedString _Drusians = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DrusiansDescription */
        LocalizedString _DrusiansDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Explorators */
        LocalizedString _Explorators = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploratorsDescription */
        LocalizedString _ExploratorsDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Kasballica */
        LocalizedString _Kasballica = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KasballicaDescription */
        LocalizedString _KasballicaDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pirates */
        LocalizedString _Pirates = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PiratesDescription */
        LocalizedString _PiratesDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipVendor */
        LocalizedString _ShipVendor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipVendorDescription */
        LocalizedString _ShipVendorDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxReputationLevel */
        LocalizedString _MaxReputationLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmptyBiographyDesc */
        LocalizedString _EmptyBiographyDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathHeader */
        LocalizedString _CareerPathHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipCareerPathHeader */
        LocalizedString _ShipCareerPathHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathHasNewRanksHeader */
        LocalizedString _CareerPathHasNewRanksHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathDescription */
        LocalizedString _CareerPathDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerUpgradeHeader */
        LocalizedString _CareerUpgradeHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerUpgradeDescription */
        LocalizedString _CareerUpgradeDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerUpgradedDescription */
        LocalizedString _CareerUpgradedDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareersTier1 */
        LocalizedString _CareersTier1 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareersTier2 */
        LocalizedString _CareersTier2 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareersTier3 */
        LocalizedString _CareersTier3 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectCareerPath */
        LocalizedString _SelectCareerPath = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeCareerPath */
        LocalizedString _UpgradeCareerPath = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogCloseProgression */
        LocalizedString _DialogCloseProgression = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelupDialogCloseProgression */
        LocalizedString _LevelupDialogCloseProgression = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturePrerequisites */
        LocalizedString _FeaturePrerequisites = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentLevelLabel */
        LocalizedString _CurrentLevelLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RanksCounterLabel */
        LocalizedString _RanksCounterLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ApplyCareerSelections */
        LocalizedString _ApplyCareerSelections = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetCareerSelections */
        LocalizedString _ResetCareerSelections = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogResetSelections */
        LocalizedString _DialogResetSelections = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderCareerDescriptionTab */
        LocalizedString _HeaderCareerDescriptionTab = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderFeatureDescriptionTab */
        LocalizedString _HeaderFeatureDescriptionTab = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderImprovement */
        LocalizedString _HeaderImprovement = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderSummaryTab */
        LocalizedString _HeaderSummaryTab = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToSummaryTab */
        LocalizedString _ToSummaryTab = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KeystoneAbilitiesHeader */
        LocalizedString _KeystoneAbilitiesHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KeystoneFeaturesHeader */
        LocalizedString _KeystoneFeaturesHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilitiesHeader */
        LocalizedString _UltimateAbilitiesHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelUpOnOtherUnitButtonHint */
        LocalizedString _LevelUpOnOtherUnitButtonHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoRanksForUpgradeButtonHint */
        LocalizedString _NoRanksForUpgradeButtonHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnitIsInCombatButtonHint */
        LocalizedString _UnitIsInCombatButtonHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectFeatureButtonHint */
        LocalizedString _SelectFeatureButtonHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedCareerInProgress */
        LocalizedString _SelectedCareerInProgress = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedCareerFinished */
        LocalizedString _SelectedCareerFinished = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedCareerHasUpgrades */
        LocalizedString _SelectedCareerHasUpgrades = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathUpgradesLabel */
        LocalizedString _CareerPathUpgradesLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathExpLabel */
        LocalizedString _CareerPathExpLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RecommendedCareerPath */
        LocalizedString _RecommendedCareerPath = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RecommendedByCareerPath */
        LocalizedString _RecommendedByCareerPath = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackToCareersList */
        LocalizedString _BackToCareersList = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RankLabel */
        LocalizedString _RankLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClickToDoctrine */
        LocalizedString _ClickToDoctrine = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClickToDoctrineConsole */
        LocalizedString _ClickToDoctrineConsole = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToggleFavorites */
        LocalizedString _ToggleFavorites = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFeaturesInFilter */
        LocalizedString _NoFeaturesInFilter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttributeFeatureGroupLabel */
        LocalizedString _AttributeFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillFeatureGroupLabel */
        LocalizedString _SkillFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TalentFeatureGroupLabel */
        LocalizedString _TalentFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilityFeatureGroupLabel */
        LocalizedString _UltimateAbilityFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilityFeatureGroupLabel */
        LocalizedString _ActiveAbilityFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttributeFeatureGroupHint */
        LocalizedString _AttributeFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillFeatureGroupHint */
        LocalizedString _SkillFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TalentFeatureGroupHint */
        LocalizedString _TalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerAbilityFeatureGroupLabel */
        LocalizedString _AscensionFirstCareerAbilityFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerAbilityFeatureGroupLabel */
        LocalizedString _AscensionSecondCareerAbilityFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerAbilityFeatureGroupLabel */
        LocalizedString _AscensionFirstOrSecondCareerAbilityFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundAbilityFeatureGroupLabel */
        LocalizedString _BackgroundAbilityFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionTalentFeatureGroupLabel */
        LocalizedString _AscensionTalentFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerTalentFeatureGroupLabel */
        LocalizedString _AscensionFirstCareerTalentFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerTalentFeatureGroupLabel */
        LocalizedString _AscensionSecondCareerTalentFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerTalentFeatureGroupLabel */
        LocalizedString _AscensionFirstOrSecondCareerTalentFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CommonTalentFeatureGroupLabel */
        LocalizedString _CommonTalentFeatureGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerAbilityFeatureGroupHint */
        LocalizedString _AscensionFirstCareerAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerAbilityFeatureGroupHint */
        LocalizedString _AscensionSecondCareerAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerAbilityFeatureGroupHint */
        LocalizedString _AscensionFirstOrSecondCareerAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundAbilityFeatureGroupHint */
        LocalizedString _BackgroundAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionTalentFeatureGroupHint */
        LocalizedString _AscensionTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerTalentFeatureGroupHint */
        LocalizedString _AscensionFirstCareerTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerTalentFeatureGroupHint */
        LocalizedString _AscensionSecondCareerTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerTalentFeatureGroupHint */
        LocalizedString _AscensionFirstOrSecondCareerTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CommonTalentFeatureGroupHint */
        LocalizedString _CommonTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilityFeatureGroupHint */
        LocalizedString _UltimateAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilityFeatureGroupHint */
        LocalizedString _ActiveAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAttributeFeatureGroupHint */
        LocalizedString _ChooseAttributeFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveShipUpgradeGroupHint */
        LocalizedString _ActiveShipUpgradeGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseShipUpgradeGroupHint */
        LocalizedString _ChooseShipUpgradeGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseSkillFeatureGroupHint */
        LocalizedString _ChooseSkillFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAdvancedAbilityGroupHint */
        LocalizedString _ChooseAdvancedAbilityGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAdvancedAbilityGroupHint */
        LocalizedString _ActiveAdvancedAbilityGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseShipActiveAbilityGroupHint */
        LocalizedString _ChooseShipActiveAbilityGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveShipActiveAbilityGroupHint */
        LocalizedString _ActiveShipActiveAbilityGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseShipUltimateAbilityGroupHint */
        LocalizedString _ChooseShipUltimateAbilityGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveShipUltimateAbilityGroupHint */
        LocalizedString _ActiveShipUltimateAbilityGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseTalentFeatureGroupHint */
        LocalizedString _ChooseTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseUltimateAbilityFeatureGroupHint */
        LocalizedString _ChooseUltimateAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseActiveAbilityFeatureGroupHint */
        LocalizedString _ChooseActiveAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstCareerAbilityFeatureGroupHint */
        LocalizedString _ChooseAscensionFirstCareerAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionSecondCareerAbilityFeatureGroupHint */
        LocalizedString _ChooseAscensionSecondCareerAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint */
        LocalizedString _ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseBackgroundAbilityFeatureGroupHint */
        LocalizedString _ChooseBackgroundAbilityFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionTalentFeatureGroupHint */
        LocalizedString _ChooseAscensionTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstCareerTalentFeatureGroupHint */
        LocalizedString _ChooseAscensionFirstCareerTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionSecondCareerTalentFeatureGroupHint */
        LocalizedString _ChooseAscensionSecondCareerTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint */
        LocalizedString _ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseCommonTalentFeatureGroupHint */
        LocalizedString _ChooseCommonTalentFeatureGroupHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KeystoneFeaturesChargenDescription */
        LocalizedString _KeystoneFeaturesChargenDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilitiesChargenDescription */
        LocalizedString _UltimateAbilitiesChargenDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PredefinedAbilitiesChargenDescription */
        LocalizedString _PredefinedAbilitiesChargenDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilitiesLabel */
        LocalizedString _ActiveAbilitiesLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PassiveAbilitiesLabel */
        LocalizedString _PassiveAbilitiesLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAbilitiesLabel */
        LocalizedString _NoAbilitiesLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActionPanelLabel */
        LocalizedString _ActionPanelLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Chaos */
        LocalizedString _Chaos = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Human */
        LocalizedString _Human = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Xenos */
        LocalizedString _Xenos = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerAbilityFeatureGroupDescription */
        LocalizedString _AscensionFirstCareerAbilityFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerAbilityFeatureGroupDescription */
        LocalizedString _AscensionSecondCareerAbilityFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerAbilityFeatureGroupDescription */
        LocalizedString _AscensionFirstOrSecondCareerAbilityFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerTalentFeatureGroupDescription */
        LocalizedString _AscensionFirstCareerTalentFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerTalentFeatureGroupDescription */
        LocalizedString _AscensionSecondCareerTalentFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerTalentFeatureGroupDescription */
        LocalizedString _AscensionFirstOrSecondCareerTalentFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription */
        LocalizedString _AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionMissingOnlySecondCareerTalentFeatureGroupDescription */
        LocalizedString _AscensionMissingOnlySecondCareerTalentFeatureGroupDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsTitle */
        LocalizedString _VisualSettingsTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowHelmet */
        LocalizedString _VisualSettingsShowHelmet = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowBackpack */
        LocalizedString _VisualSettingsShowBackpack = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowCloth */
        LocalizedString _VisualSettingsShowCloth = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsEnableClothes */
        LocalizedString _VisualSettingsEnableClothes = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsDisabledForCharacter */
        LocalizedString _VisualSettingsDisabledForCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableRanksHint */
        LocalizedString _AvailableRanksHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoneHint */
        LocalizedString _NoneHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RecommendedFilterHint */
        LocalizedString _RecommendedFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FavoritesFilterHint */
        LocalizedString _FavoritesFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OffenseFilterHint */
        LocalizedString _OffenseFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DefenseFilterHint */
        LocalizedString _DefenseFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SupportFilterHint */
        LocalizedString _SupportFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UniversalFilterHint */
        LocalizedString _UniversalFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArchetypeFilterHint */
        LocalizedString _ArchetypeFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OriginFilterHint */
        LocalizedString _OriginFilterHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarpFilterHint */
        LocalizedString _WarpFilterHint = LocalizedString.Read(reader);
        
        return new(_WeaponSkillShort,
            _BallisticSkillShort,
            _StrengthShort,
            _ToughnessShort,
            _AgilityShort,
            _InteligenceShort,
            _PerceptionShort,
            _WillpowerShort,
            _FellowshipShort,
            _LEVEL,
            _LvlShort,
            _Attack,
            _Abilities,
            _Summary,
            _Features,
            _PsykerPowers,
            _LevelProgression,
            _Biography,
            _FactionsReputation,
            _Skills,
            _Stats,
            _BuffsAndConditions,
            _Career,
            _StatusEffects,
            _Weapons,
            _PsyRatingShort,
            _Vendors,
            _BackgroundAbilities,
            _CareerAbilities,
            _PostsAbilities,
            _ItemsAbilities,
            _SoulMarkAbilities,
            _Speed,
            _TemporaryHP,
            _NoBuffText,
            _Permanent,
            _DeactivatedFeature,
            _Male,
            _Female,
            _Equipment,
            _ArmorAbsorption,
            _ArmorDeflection,
            _Dodge,
            _DodgeReduction,
            _Resolve,
            _History,
            _Drusians,
            _DrusiansDescription,
            _Explorators,
            _ExploratorsDescription,
            _Kasballica,
            _KasballicaDescription,
            _Pirates,
            _PiratesDescription,
            _ShipVendor,
            _ShipVendorDescription,
            _MaxReputationLevel,
            _EmptyBiographyDesc,
            _CareerPathHeader,
            _ShipCareerPathHeader,
            _CareerPathHasNewRanksHeader,
            _CareerPathDescription,
            _CareerUpgradeHeader,
            _CareerUpgradeDescription,
            _CareerUpgradedDescription,
            _CareersTier1,
            _CareersTier2,
            _CareersTier3,
            _SelectCareerPath,
            _UpgradeCareerPath,
            _DialogCloseProgression,
            _LevelupDialogCloseProgression,
            _FeaturePrerequisites,
            _CurrentLevelLabel,
            _RanksCounterLabel,
            _ApplyCareerSelections,
            _ResetCareerSelections,
            _DialogResetSelections,
            _HeaderCareerDescriptionTab,
            _HeaderFeatureDescriptionTab,
            _HeaderImprovement,
            _HeaderSummaryTab,
            _ToSummaryTab,
            _KeystoneAbilitiesHeader,
            _KeystoneFeaturesHeader,
            _UltimateAbilitiesHeader,
            _LevelUpOnOtherUnitButtonHint,
            _NoRanksForUpgradeButtonHint,
            _UnitIsInCombatButtonHint,
            _SelectFeatureButtonHint,
            _SelectedCareerInProgress,
            _SelectedCareerFinished,
            _SelectedCareerHasUpgrades,
            _CareerPathUpgradesLabel,
            _CareerPathExpLabel,
            _RecommendedCareerPath,
            _RecommendedByCareerPath,
            _BackToCareersList,
            _RankLabel,
            _ClickToDoctrine,
            _ClickToDoctrineConsole,
            _ToggleFavorites,
            _NoFeaturesInFilter,
            _AttributeFeatureGroupLabel,
            _SkillFeatureGroupLabel,
            _TalentFeatureGroupLabel,
            _UltimateAbilityFeatureGroupLabel,
            _ActiveAbilityFeatureGroupLabel,
            _AttributeFeatureGroupHint,
            _SkillFeatureGroupHint,
            _TalentFeatureGroupHint,
            _AscensionFirstCareerAbilityFeatureGroupLabel,
            _AscensionSecondCareerAbilityFeatureGroupLabel,
            _AscensionFirstOrSecondCareerAbilityFeatureGroupLabel,
            _BackgroundAbilityFeatureGroupLabel,
            _AscensionTalentFeatureGroupLabel,
            _AscensionFirstCareerTalentFeatureGroupLabel,
            _AscensionSecondCareerTalentFeatureGroupLabel,
            _AscensionFirstOrSecondCareerTalentFeatureGroupLabel,
            _CommonTalentFeatureGroupLabel,
            _AscensionFirstCareerAbilityFeatureGroupHint,
            _AscensionSecondCareerAbilityFeatureGroupHint,
            _AscensionFirstOrSecondCareerAbilityFeatureGroupHint,
            _BackgroundAbilityFeatureGroupHint,
            _AscensionTalentFeatureGroupHint,
            _AscensionFirstCareerTalentFeatureGroupHint,
            _AscensionSecondCareerTalentFeatureGroupHint,
            _AscensionFirstOrSecondCareerTalentFeatureGroupHint,
            _CommonTalentFeatureGroupHint,
            _UltimateAbilityFeatureGroupHint,
            _ActiveAbilityFeatureGroupHint,
            _ChooseAttributeFeatureGroupHint,
            _ActiveShipUpgradeGroupHint,
            _ChooseShipUpgradeGroupHint,
            _ChooseSkillFeatureGroupHint,
            _ChooseAdvancedAbilityGroupHint,
            _ActiveAdvancedAbilityGroupHint,
            _ChooseShipActiveAbilityGroupHint,
            _ActiveShipActiveAbilityGroupHint,
            _ChooseShipUltimateAbilityGroupHint,
            _ActiveShipUltimateAbilityGroupHint,
            _ChooseTalentFeatureGroupHint,
            _ChooseUltimateAbilityFeatureGroupHint,
            _ChooseActiveAbilityFeatureGroupHint,
            _ChooseAscensionFirstCareerAbilityFeatureGroupHint,
            _ChooseAscensionSecondCareerAbilityFeatureGroupHint,
            _ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint,
            _ChooseBackgroundAbilityFeatureGroupHint,
            _ChooseAscensionTalentFeatureGroupHint,
            _ChooseAscensionFirstCareerTalentFeatureGroupHint,
            _ChooseAscensionSecondCareerTalentFeatureGroupHint,
            _ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint,
            _ChooseCommonTalentFeatureGroupHint,
            _KeystoneFeaturesChargenDescription,
            _UltimateAbilitiesChargenDescription,
            _PredefinedAbilitiesChargenDescription,
            _ActiveAbilitiesLabel,
            _PassiveAbilitiesLabel,
            _NoAbilitiesLabel,
            _ActionPanelLabel,
            _Chaos,
            _Human,
            _Xenos,
            _AscensionFirstCareerAbilityFeatureGroupDescription,
            _AscensionSecondCareerAbilityFeatureGroupDescription,
            _AscensionFirstOrSecondCareerAbilityFeatureGroupDescription,
            _AscensionFirstCareerTalentFeatureGroupDescription,
            _AscensionSecondCareerTalentFeatureGroupDescription,
            _AscensionFirstOrSecondCareerTalentFeatureGroupDescription,
            _AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription,
            _AscensionMissingOnlySecondCareerTalentFeatureGroupDescription,
            _VisualSettingsTitle,
            _VisualSettingsShowHelmet,
            _VisualSettingsShowBackpack,
            _VisualSettingsShowCloth,
            _VisualSettingsEnableClothes,
            _VisualSettingsDisabledForCharacter,
            _AvailableRanksHint,
            _NoneHint,
            _RecommendedFilterHint,
            _FavoritesFilterHint,
            _OffenseFilterHint,
            _DefenseFilterHint,
            _SupportFilterHint,
            _UniversalFilterHint,
            _ArchetypeFilterHint,
            _OriginFilterHint,
            _WarpFilterHint);
    }
}

/* $UITextInventory (15 fields) */
public record class UITextInventory(
    LocalizedString FilterTextAll /* NeedsAlign */,
    LocalizedString FilterTextWeapon /* NeedsAlign */,
    LocalizedString FilterTextArmor /* NeedsAlign */,
    LocalizedString FilterTextAcessories /* NeedsAlign */,
    LocalizedString FilterTextUsable /* NeedsAlign */,
    LocalizedString FilterTextNotable /* NeedsAlign */,
    LocalizedString FilterTextShipItem /* NeedsAlign */,
    LocalizedString FilterTextOther /* NeedsAlign */,
    LocalizedString OneHandWeapon /* NeedsAlign */,
    LocalizedString TwoHandWeapon /* NeedsAlign */,
    LocalizedString RangedWeapon /* NeedsAlign */,
    LocalizedString MeleeWeapon /* NeedsAlign */,
    LocalizedString ChooseItem /* NeedsAlign */,
    LocalizedString ToggleStats /* NeedsAlign */,
    LocalizedString ChangeWeaponSet /* NeedsAlign */)
{
    public static UITextInventory Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* FilterTextAll */
        LocalizedString _FilterTextAll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextWeapon */
        LocalizedString _FilterTextWeapon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextArmor */
        LocalizedString _FilterTextArmor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextAcessories */
        LocalizedString _FilterTextAcessories = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextUsable */
        LocalizedString _FilterTextUsable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextNotable */
        LocalizedString _FilterTextNotable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextShipItem */
        LocalizedString _FilterTextShipItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextOther */
        LocalizedString _FilterTextOther = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneHandWeapon */
        LocalizedString _OneHandWeapon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoHandWeapon */
        LocalizedString _TwoHandWeapon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RangedWeapon */
        LocalizedString _RangedWeapon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MeleeWeapon */
        LocalizedString _MeleeWeapon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseItem */
        LocalizedString _ChooseItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToggleStats */
        LocalizedString _ToggleStats = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeWeaponSet */
        LocalizedString _ChangeWeaponSet = LocalizedString.Read(reader);
        
        return new(_FilterTextAll,
            _FilterTextWeapon,
            _FilterTextArmor,
            _FilterTextAcessories,
            _FilterTextUsable,
            _FilterTextNotable,
            _FilterTextShipItem,
            _FilterTextOther,
            _OneHandWeapon,
            _TwoHandWeapon,
            _RangedWeapon,
            _MeleeWeapon,
            _ChooseItem,
            _ToggleStats,
            _ChangeWeaponSet);
    }
}

/* $UITextGlobalMap (26 fields) */
public record class UITextGlobalMap(
    LocalizedString Planets /* NeedsAlign */,
    LocalizedString SystemColonized /* NeedsAlign */,
    LocalizedString HasEnemiesInSystem /* NeedsAlign */,
    LocalizedString AsteroidsFieldDetected /* NeedsAlign */,
    LocalizedString VisitSystemHint /* NeedsAlign */,
    LocalizedString UnknownSystem /* NeedsAlign */,
    LocalizedString ScanForRoutes /* NeedsAlign */,
    LocalizedString SetCameraOnVoidship /* NeedsAlign */,
    LocalizedString AllSystems /* NeedsAlign */,
    LocalizedString SystemInfo /* NeedsAlign */,
    LocalizedString ShowResources /* NeedsAlign */,
    LocalizedString CloseResources /* NeedsAlign */,
    LocalizedString ChangeWindow /* NeedsAlign */,
    LocalizedString KnownStarSystems /* NeedsAlign */,
    LocalizedString CreateWay /* NeedsAlign */,
    LocalizedString NoResource /* NeedsAlign */,
    LocalizedString Route /* NeedsAlign */,
    LocalizedString Travel /* NeedsAlign */,
    LocalizedString TravelToWithRoute /* NeedsAlign */,
    LocalizedString TravelToFakeSystem /* NeedsAlign */,
    LocalizedString UpgradeWayCost /* NeedsAlign */,
    LocalizedString UpgradeWayToSafeCost /* NeedsAlign */,
    LocalizedString DifficultyPassageHint /* NeedsAlign */,
    LocalizedString TapToUpgrade /* NeedsAlign */,
    LocalizedString Scan /* NeedsAlign */,
    LocalizedString UpgradeRoute /* NeedsAlign */)
{
    public static UITextGlobalMap Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Planets */
        LocalizedString _Planets = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SystemColonized */
        LocalizedString _SystemColonized = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasEnemiesInSystem */
        LocalizedString _HasEnemiesInSystem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AsteroidsFieldDetected */
        LocalizedString _AsteroidsFieldDetected = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisitSystemHint */
        LocalizedString _VisitSystemHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnknownSystem */
        LocalizedString _UnknownSystem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScanForRoutes */
        LocalizedString _ScanForRoutes = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetCameraOnVoidship */
        LocalizedString _SetCameraOnVoidship = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllSystems */
        LocalizedString _AllSystems = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SystemInfo */
        LocalizedString _SystemInfo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowResources */
        LocalizedString _ShowResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseResources */
        LocalizedString _CloseResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeWindow */
        LocalizedString _ChangeWindow = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KnownStarSystems */
        LocalizedString _KnownStarSystems = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateWay */
        LocalizedString _CreateWay = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoResource */
        LocalizedString _NoResource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Route */
        LocalizedString _Route = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Travel */
        LocalizedString _Travel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TravelToWithRoute */
        LocalizedString _TravelToWithRoute = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TravelToFakeSystem */
        LocalizedString _TravelToFakeSystem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeWayCost */
        LocalizedString _UpgradeWayCost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeWayToSafeCost */
        LocalizedString _UpgradeWayToSafeCost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyPassageHint */
        LocalizedString _DifficultyPassageHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TapToUpgrade */
        LocalizedString _TapToUpgrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Scan */
        LocalizedString _Scan = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeRoute */
        LocalizedString _UpgradeRoute = LocalizedString.Read(reader);
        
        return new(_Planets,
            _SystemColonized,
            _HasEnemiesInSystem,
            _AsteroidsFieldDetected,
            _VisitSystemHint,
            _UnknownSystem,
            _ScanForRoutes,
            _SetCameraOnVoidship,
            _AllSystems,
            _SystemInfo,
            _ShowResources,
            _CloseResources,
            _ChangeWindow,
            _KnownStarSystems,
            _CreateWay,
            _NoResource,
            _Route,
            _Travel,
            _TravelToWithRoute,
            _TravelToFakeSystem,
            _UpgradeWayCost,
            _UpgradeWayToSafeCost,
            _DifficultyPassageHint,
            _TapToUpgrade,
            _Scan,
            _UpgradeRoute);
    }
}

/* $UITextSystemMap (11 fields) */
public record class UITextSystemMap(
    LocalizedString ScanRequired /* NeedsAlign */,
    LocalizedString PlanetColonized /* NeedsAlign */,
    LocalizedString PlanetNotColonized /* NeedsAlign */,
    LocalizedString PoIsDetected /* NeedsAlign */,
    LocalizedString RepairHull /* NeedsAlign */,
    LocalizedString RepairHullSimple /* NeedsAlign */,
    LocalizedString RepairHullDescription /* NeedsAlign */,
    LocalizedString ShipHpIsFull /* NeedsAlign */,
    LocalizedString YouNeedMoreScrap /* NeedsAlign */,
    LocalizedString ShipIsRepaired /* NeedsAlign */,
    LocalizedString PercentExplored /* NeedsAlign */)
{
    public static UITextSystemMap Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ScanRequired */
        LocalizedString _ScanRequired = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlanetColonized */
        LocalizedString _PlanetColonized = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlanetNotColonized */
        LocalizedString _PlanetNotColonized = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PoIsDetected */
        LocalizedString _PoIsDetected = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairHull */
        LocalizedString _RepairHull = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairHullSimple */
        LocalizedString _RepairHullSimple = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairHullDescription */
        LocalizedString _RepairHullDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipHpIsFull */
        LocalizedString _ShipHpIsFull = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouNeedMoreScrap */
        LocalizedString _YouNeedMoreScrap = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipIsRepaired */
        LocalizedString _ShipIsRepaired = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PercentExplored */
        LocalizedString _PercentExplored = LocalizedString.Read(reader);
        
        return new(_ScanRequired,
            _PlanetColonized,
            _PlanetNotColonized,
            _PoIsDetected,
            _RepairHull,
            _RepairHullSimple,
            _RepairHullDescription,
            _ShipHpIsFull,
            _YouNeedMoreScrap,
            _ShipIsRepaired,
            _PercentExplored);
    }
}

/* $UITextGlobalMapPassages (4 fields) */
public record class UITextGlobalMapPassages(
    LocalizedString Safe /* NeedsAlign */,
    LocalizedString Unsafe /* NeedsAlign */,
    LocalizedString Dangerous /* NeedsAlign */,
    LocalizedString Deadly /* NeedsAlign */)
{
    public static UITextGlobalMapPassages Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Safe */
        LocalizedString _Safe = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Unsafe */
        LocalizedString _Unsafe = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dangerous */
        LocalizedString _Dangerous = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Deadly */
        LocalizedString _Deadly = LocalizedString.Read(reader);
        
        return new(_Safe,
            _Unsafe,
            _Dangerous,
            _Deadly);
    }
}

/* $UITextBookEvent (7 fields) */
public record class UITextBookEvent(
    LocalizedString BookEventAllreadyVisited /* NeedsAlign */,
    LocalizedString BookEventArchive /* NeedsAlign */,
    LocalizedString BookEventOpenHistory /* NeedsAlign */,
    LocalizedString BookEventCloseHistory /* NeedsAlign */,
    LocalizedString BookEventHistoryBack /* NeedsAlign */,
    LocalizedString BookEventHistoryForward /* NeedsAlign */,
    LocalizedString BookEventHistoryRecord /* NeedsAlign */)
{
    public static UITextBookEvent Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* BookEventAllreadyVisited */
        LocalizedString _BookEventAllreadyVisited = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventArchive */
        LocalizedString _BookEventArchive = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventOpenHistory */
        LocalizedString _BookEventOpenHistory = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventCloseHistory */
        LocalizedString _BookEventCloseHistory = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventHistoryBack */
        LocalizedString _BookEventHistoryBack = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventHistoryForward */
        LocalizedString _BookEventHistoryForward = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventHistoryRecord */
        LocalizedString _BookEventHistoryRecord = LocalizedString.Read(reader);
        
        return new(_BookEventAllreadyVisited,
            _BookEventArchive,
            _BookEventOpenHistory,
            _BookEventCloseHistory,
            _BookEventHistoryBack,
            _BookEventHistoryForward,
            _BookEventHistoryRecord);
    }
}

/* $UITextAlignment (16 fields) */
public record class UITextAlignment(
    LocalizedString Imperialis /* NeedsAlign */,
    LocalizedString Benevolentia /* NeedsAlign */,
    LocalizedString Hereticus /* NeedsAlign */,
    LocalizedString Reason /* NeedsAlign */,
    LocalizedString SoulMarkRankTierNone /* NeedsAlign */,
    LocalizedString SoulMarkRankTier1 /* NeedsAlign */,
    LocalizedString SoulMarkRankTier2 /* NeedsAlign */,
    LocalizedString SoulMarkRankTier3 /* NeedsAlign */,
    LocalizedString SoulMarkRankTier4 /* NeedsAlign */,
    LocalizedString SoulMarkRankTier5 /* NeedsAlign */,
    LocalizedString RadicalTitle /* NeedsAlign */,
    LocalizedString RadicalDescription /* NeedsAlign */,
    LocalizedString PuritanTitle /* NeedsAlign */,
    LocalizedString PuritanDescription /* NeedsAlign */,
    LocalizedString CurrentConvictionTitle /* NeedsAlign */,
    LocalizedString CurrentConvictionDescription /* NeedsAlign */)
{
    public static UITextAlignment Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Imperialis */
        LocalizedString _Imperialis = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Benevolentia */
        LocalizedString _Benevolentia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Hereticus */
        LocalizedString _Hereticus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Reason */
        LocalizedString _Reason = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTierNone */
        LocalizedString _SoulMarkRankTierNone = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier1 */
        LocalizedString _SoulMarkRankTier1 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier2 */
        LocalizedString _SoulMarkRankTier2 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier3 */
        LocalizedString _SoulMarkRankTier3 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier4 */
        LocalizedString _SoulMarkRankTier4 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier5 */
        LocalizedString _SoulMarkRankTier5 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RadicalTitle */
        LocalizedString _RadicalTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RadicalDescription */
        LocalizedString _RadicalDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PuritanTitle */
        LocalizedString _PuritanTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PuritanDescription */
        LocalizedString _PuritanDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentConvictionTitle */
        LocalizedString _CurrentConvictionTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentConvictionDescription */
        LocalizedString _CurrentConvictionDescription = LocalizedString.Read(reader);
        
        return new(_Imperialis,
            _Benevolentia,
            _Hereticus,
            _Reason,
            _SoulMarkRankTierNone,
            _SoulMarkRankTier1,
            _SoulMarkRankTier2,
            _SoulMarkRankTier3,
            _SoulMarkRankTier4,
            _SoulMarkRankTier5,
            _RadicalTitle,
            _RadicalDescription,
            _PuritanTitle,
            _PuritanDescription,
            _CurrentConvictionTitle,
            _CurrentConvictionDescription);
    }
}

/* $UITextActionBar (11 fields) */
public record class UITextActionBar(
    LocalizedString ActionBarConvertWeapons /* NeedsAlign */,
    LocalizedString ActionPoints /* NeedsAlign */,
    LocalizedString MovementPoints /* NeedsAlign */,
    LocalizedString VailHeader /* NeedsAlign */,
    LocalizedString VailFooter /* NeedsAlign */,
    LocalizedString BrokenVeil /* NeedsAlign */,
    LocalizedString VailCurrentState /* NeedsAlign */,
    LocalizedString StatesOfVail /* NeedsAlign */,
    LocalizedString VailStates /* NeedsAlign */,
    LocalizedString MomentumHeader /* NeedsAlign */,
    LocalizedString MomentumDescription /* NeedsAlign */)
{
    public static UITextActionBar Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ActionBarConvertWeapons */
        LocalizedString _ActionBarConvertWeapons = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActionPoints */
        LocalizedString _ActionPoints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MovementPoints */
        LocalizedString _MovementPoints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailHeader */
        LocalizedString _VailHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailFooter */
        LocalizedString _VailFooter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BrokenVeil */
        LocalizedString _BrokenVeil = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailCurrentState */
        LocalizedString _VailCurrentState = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatesOfVail */
        LocalizedString _StatesOfVail = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailStates */
        LocalizedString _VailStates = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumHeader */
        LocalizedString _MomentumHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumDescription */
        LocalizedString _MomentumDescription = LocalizedString.Read(reader);
        
        return new(_ActionBarConvertWeapons,
            _ActionPoints,
            _MovementPoints,
            _VailHeader,
            _VailFooter,
            _BrokenVeil,
            _VailCurrentState,
            _StatesOfVail,
            _VailStates,
            _MomentumHeader,
            _MomentumDescription);
    }
}

/* $UICommonTexts (35 fields) */
public record class UICommonTexts(
    LocalizedString PunctuationTest /* NeedsAlign */,
    LocalizedString AllSymbolsTest /* NeedsAlign */,
    LocalizedString PermanentBuffTimer /* NeedsAlign */,
    LocalizedString BuffStacks /* NeedsAlign */,
    LocalizedString WarningBugReportWasSend /* NeedsAlign */,
    LocalizedString ReportButton /* NeedsAlign */,
    LocalizedString GameStatisticEnabledDialogue /* NeedsAlign */,
    LocalizedString QuitToDesctopLabel /* NeedsAlign */,
    LocalizedString QuitToMainMenuLabel /* NeedsAlign */,
    LocalizedString ProgressWillBeLost /* NeedsAlign */,
    LocalizedString DropItemFromGlobalMap /* NeedsAlign */,
    LocalizedString Ft /* NeedsAlign */,
    LocalizedString Accept /* NeedsAlign */,
    LocalizedString Cancel /* NeedsAlign */,
    LocalizedString Select /* NeedsAlign */,
    LocalizedString Pause /* NeedsAlign */,
    LocalizedString Back /* NeedsAlign */,
    LocalizedString Information /* NeedsAlign */,
    LocalizedString Warning /* NeedsAlign */,
    LocalizedString CloseWindow /* NeedsAlign */,
    LocalizedString Collapse /* NeedsAlign */,
    LocalizedString Expand /* NeedsAlign */,
    LocalizedString Skip /* NeedsAlign */,
    LocalizedString SkipHold /* NeedsAlign */,
    LocalizedString PressAnyKey /* NeedsAlign */,
    LocalizedString PressAnyKeyConsole /* NeedsAlign */,
    LocalizedString WaitingOtherPlayer /* NeedsAlign */,
    LocalizedString Menu /* NeedsAlign */,
    LocalizedString Search /* NeedsAlign */,
    LocalizedString Cursor /* NeedsAlign */,
    LocalizedString Increase /* NeedsAlign */,
    LocalizedString Decrease /* NeedsAlign */,
    LocalizedString HoldGamepadButton /* NeedsAlign */,
    LocalizedString ThisActionCantBeCanceled /* NeedsAlign */,
    LocalizedString AreYouSure /* NeedsAlign */)
{
    public static UICommonTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* PunctuationTest */
        LocalizedString _PunctuationTest = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllSymbolsTest */
        LocalizedString _AllSymbolsTest = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PermanentBuffTimer */
        LocalizedString _PermanentBuffTimer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuffStacks */
        LocalizedString _BuffStacks = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarningBugReportWasSend */
        LocalizedString _WarningBugReportWasSend = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReportButton */
        LocalizedString _ReportButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GameStatisticEnabledDialogue */
        LocalizedString _GameStatisticEnabledDialogue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuitToDesctopLabel */
        LocalizedString _QuitToDesctopLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuitToMainMenuLabel */
        LocalizedString _QuitToMainMenuLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProgressWillBeLost */
        LocalizedString _ProgressWillBeLost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DropItemFromGlobalMap */
        LocalizedString _DropItemFromGlobalMap = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ft */
        LocalizedString _Ft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Accept */
        LocalizedString _Accept = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cancel */
        LocalizedString _Cancel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Select */
        LocalizedString _Select = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pause */
        LocalizedString _Pause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Back */
        LocalizedString _Back = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Information */
        LocalizedString _Information = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Warning */
        LocalizedString _Warning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseWindow */
        LocalizedString _CloseWindow = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Collapse */
        LocalizedString _Collapse = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Expand */
        LocalizedString _Expand = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Skip */
        LocalizedString _Skip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkipHold */
        LocalizedString _SkipHold = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PressAnyKey */
        LocalizedString _PressAnyKey = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PressAnyKeyConsole */
        LocalizedString _PressAnyKeyConsole = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WaitingOtherPlayer */
        LocalizedString _WaitingOtherPlayer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Menu */
        LocalizedString _Menu = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Search */
        LocalizedString _Search = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cursor */
        LocalizedString _Cursor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Increase */
        LocalizedString _Increase = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Decrease */
        LocalizedString _Decrease = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HoldGamepadButton */
        LocalizedString _HoldGamepadButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThisActionCantBeCanceled */
        LocalizedString _ThisActionCantBeCanceled = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSure */
        LocalizedString _AreYouSure = LocalizedString.Read(reader);
        
        return new(_PunctuationTest,
            _AllSymbolsTest,
            _PermanentBuffTimer,
            _BuffStacks,
            _WarningBugReportWasSend,
            _ReportButton,
            _GameStatisticEnabledDialogue,
            _QuitToDesctopLabel,
            _QuitToMainMenuLabel,
            _ProgressWillBeLost,
            _DropItemFromGlobalMap,
            _Ft,
            _Accept,
            _Cancel,
            _Select,
            _Pause,
            _Back,
            _Information,
            _Warning,
            _CloseWindow,
            _Collapse,
            _Expand,
            _Skip,
            _SkipHold,
            _PressAnyKey,
            _PressAnyKeyConsole,
            _WaitingOtherPlayer,
            _Menu,
            _Search,
            _Cursor,
            _Increase,
            _Decrease,
            _HoldGamepadButton,
            _ThisActionCantBeCanceled,
            _AreYouSure);
    }
}

/* $UIPartySelectorTexts (4 fields) */
public record class UIPartySelectorTexts(
    LocalizedString Link /* NeedsAlign */,
    LocalizedString Unlink /* NeedsAlign */,
    LocalizedString LinkAll /* NeedsAlign */,
    LocalizedString UnlinkAll /* NeedsAlign */)
{
    public static UIPartySelectorTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Link */
        LocalizedString _Link = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Unlink */
        LocalizedString _Unlink = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LinkAll */
        LocalizedString _LinkAll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnlinkAll */
        LocalizedString _UnlinkAll = LocalizedString.Read(reader);
        
        return new(_Link,
            _Unlink,
            _LinkAll,
            _UnlinkAll);
    }
}

/* $UINetLobbyTexts (45 fields) */
public record class UINetLobbyTexts(
    LocalizedString NetHeader /* NeedsAlign */,
    LocalizedString ConnectingLabel /* NeedsAlign */,
    LocalizedString CreateLobby /* NeedsAlign */,
    LocalizedString JoinLobby /* NeedsAlign */,
    LocalizedString JoinLobbyCodePlaceholder /* NeedsAlign */,
    LocalizedString RegionHeader /* NeedsAlign */,
    LocalizedString DisconnectLobby /* NeedsAlign */,
    LocalizedString CopyLobbyId /* NeedsAlign */,
    LocalizedString CopyLobbyIdHint /* NeedsAlign */,
    LocalizedString PasteLobbyId /* NeedsAlign */,
    LocalizedString Launch /* NeedsAlign */,
    LocalizedString Reconnect /* NeedsAlign */,
    LocalizedString ChooseSaveHeader /* NeedsAlign */,
    LocalizedString ChooseSaveHint /* NeedsAlign */,
    LocalizedString LaunchInGameHint /* NeedsAlign */,
    LocalizedString DesyncWasDetected /* NeedsAlign */,
    LocalizedString LeaveLobbyMessageBox /* NeedsAlign */,
    LocalizedString InviteLobbyMessageBox /* NeedsAlign */,
    LocalizedString LastPlayerLeftLobbyMessageBox /* NeedsAlign */,
    LocalizedString NewPlayerJoinToActiveLobby /* NeedsAlign */,
    LocalizedString PlayerLeftRoomWarning /* NeedsAlign */,
    LocalizedString KickMessage /* NeedsAlign */,
    LocalizedString KickPlayerMessage /* NeedsAlign */,
    LocalizedString WarningPlayerIsNotControlMainCharacter /* NeedsAlign */,
    LocalizedString HowToPingCoopLabelPc /* NeedsAlign */,
    LocalizedString HowToPingCoopLabelConsole /* NeedsAlign */,
    LocalizedString CoopVer /* NeedsAlign */,
    LocalizedString CoopVerTooltip /* NeedsAlign */,
    LocalizedString CoopRegionTooltip /* NeedsAlign */,
    LocalizedString CoopLobbyCodeTooltip /* NeedsAlign */,
    LocalizedString ShowLobbyCode /* NeedsAlign */,
    LocalizedString HideLobbyCode /* NeedsAlign */,
    LocalizedString InvitePlayer /* NeedsAlign */,
    LocalizedString InviteEpicGamesPlayer /* NeedsAlign */,
    LocalizedString KickPlayer /* NeedsAlign */,
    LocalizedString SelectPlayers /* NeedsAlign */,
    LocalizedString UnselectPlayers /* NeedsAlign */,
    LocalizedString SelectRegion /* NeedsAlign */,
    LocalizedString HowToPlay /* NeedsAlign */,
    LocalizedString NeedSameRegionAndCoopVer /* NeedsAlign */,
    LocalizedString IsNotEnoughPlayersForGame /* NeedsAlign */,
    LocalizedString ImpossibleToStartCoopGameInThisMoment /* NeedsAlign */,
    LocalizedString NotAvailableInCoopMode /* NeedsAlign */,
    LocalizedString ResetCurrentSave /* NeedsAlign */,
    LocalizedString SignInToEpicGamesStore /* NeedsAlign */)
{
    public static UINetLobbyTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* NetHeader */
        LocalizedString _NetHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConnectingLabel */
        LocalizedString _ConnectingLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateLobby */
        LocalizedString _CreateLobby = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinLobby */
        LocalizedString _JoinLobby = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinLobbyCodePlaceholder */
        LocalizedString _JoinLobbyCodePlaceholder = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RegionHeader */
        LocalizedString _RegionHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisconnectLobby */
        LocalizedString _DisconnectLobby = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CopyLobbyId */
        LocalizedString _CopyLobbyId = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CopyLobbyIdHint */
        LocalizedString _CopyLobbyIdHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PasteLobbyId */
        LocalizedString _PasteLobbyId = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Launch */
        LocalizedString _Launch = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Reconnect */
        LocalizedString _Reconnect = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseSaveHeader */
        LocalizedString _ChooseSaveHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseSaveHint */
        LocalizedString _ChooseSaveHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LaunchInGameHint */
        LocalizedString _LaunchInGameHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DesyncWasDetected */
        LocalizedString _DesyncWasDetected = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LeaveLobbyMessageBox */
        LocalizedString _LeaveLobbyMessageBox = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InviteLobbyMessageBox */
        LocalizedString _InviteLobbyMessageBox = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LastPlayerLeftLobbyMessageBox */
        LocalizedString _LastPlayerLeftLobbyMessageBox = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewPlayerJoinToActiveLobby */
        LocalizedString _NewPlayerJoinToActiveLobby = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayerLeftRoomWarning */
        LocalizedString _PlayerLeftRoomWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KickMessage */
        LocalizedString _KickMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KickPlayerMessage */
        LocalizedString _KickPlayerMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarningPlayerIsNotControlMainCharacter */
        LocalizedString _WarningPlayerIsNotControlMainCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HowToPingCoopLabelPc */
        LocalizedString _HowToPingCoopLabelPc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HowToPingCoopLabelConsole */
        LocalizedString _HowToPingCoopLabelConsole = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopVer */
        LocalizedString _CoopVer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopVerTooltip */
        LocalizedString _CoopVerTooltip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopRegionTooltip */
        LocalizedString _CoopRegionTooltip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopLobbyCodeTooltip */
        LocalizedString _CoopLobbyCodeTooltip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowLobbyCode */
        LocalizedString _ShowLobbyCode = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideLobbyCode */
        LocalizedString _HideLobbyCode = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InvitePlayer */
        LocalizedString _InvitePlayer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InviteEpicGamesPlayer */
        LocalizedString _InviteEpicGamesPlayer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KickPlayer */
        LocalizedString _KickPlayer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectPlayers */
        LocalizedString _SelectPlayers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnselectPlayers */
        LocalizedString _UnselectPlayers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectRegion */
        LocalizedString _SelectRegion = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HowToPlay */
        LocalizedString _HowToPlay = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedSameRegionAndCoopVer */
        LocalizedString _NeedSameRegionAndCoopVer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IsNotEnoughPlayersForGame */
        LocalizedString _IsNotEnoughPlayersForGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ImpossibleToStartCoopGameInThisMoment */
        LocalizedString _ImpossibleToStartCoopGameInThisMoment = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotAvailableInCoopMode */
        LocalizedString _NotAvailableInCoopMode = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetCurrentSave */
        LocalizedString _ResetCurrentSave = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SignInToEpicGamesStore */
        LocalizedString _SignInToEpicGamesStore = LocalizedString.Read(reader);
        
        return new(_NetHeader,
            _ConnectingLabel,
            _CreateLobby,
            _JoinLobby,
            _JoinLobbyCodePlaceholder,
            _RegionHeader,
            _DisconnectLobby,
            _CopyLobbyId,
            _CopyLobbyIdHint,
            _PasteLobbyId,
            _Launch,
            _Reconnect,
            _ChooseSaveHeader,
            _ChooseSaveHint,
            _LaunchInGameHint,
            _DesyncWasDetected,
            _LeaveLobbyMessageBox,
            _InviteLobbyMessageBox,
            _LastPlayerLeftLobbyMessageBox,
            _NewPlayerJoinToActiveLobby,
            _PlayerLeftRoomWarning,
            _KickMessage,
            _KickPlayerMessage,
            _WarningPlayerIsNotControlMainCharacter,
            _HowToPingCoopLabelPc,
            _HowToPingCoopLabelConsole,
            _CoopVer,
            _CoopVerTooltip,
            _CoopRegionTooltip,
            _CoopLobbyCodeTooltip,
            _ShowLobbyCode,
            _HideLobbyCode,
            _InvitePlayer,
            _InviteEpicGamesPlayer,
            _KickPlayer,
            _SelectPlayers,
            _UnselectPlayers,
            _SelectRegion,
            _HowToPlay,
            _NeedSameRegionAndCoopVer,
            _IsNotEnoughPlayersForGame,
            _ImpossibleToStartCoopGameInThisMoment,
            _NotAvailableInCoopMode,
            _ResetCurrentSave,
            _SignInToEpicGamesStore);
    }
}

/* $UINetRolesTexts (2 fields) */
public record class UINetRolesTexts(
    LocalizedString RolesHeader /* NeedsAlign */,
    LocalizedString YouHaveNoRole /* NeedsAlign */)
{
    public static UINetRolesTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RolesHeader */
        LocalizedString _RolesHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouHaveNoRole */
        LocalizedString _YouHaveNoRole = LocalizedString.Read(reader);
        
        return new(_RolesHeader,
            _YouHaveNoRole);
    }
}

/* $UINetLobbyErrorsTexts (16 fields) */
public record class UINetLobbyErrorsTexts(
    LocalizedString StoreNotInitializedErrorMessage /* NeedsAlign */,
    LocalizedString GetAuthDataTimeoutMessage /* NeedsAlign */,
    LocalizedString GetAuthDataErrorMessage /* NeedsAlign */,
    LocalizedString PhotonConnectFailErrorMessage /* NeedsAlign */,
    LocalizedString ChangeRegionErrorMessage /* NeedsAlign */,
    LocalizedString LobbyNotFoundErrorMessage /* NeedsAlign */,
    LocalizedString JoinLobbyErrorMessage /* NeedsAlign */,
    LocalizedString CreatingLobbyErrorMessage /* NeedsAlign */,
    LocalizedString PhotonDisconnectedErrorMessage /* NeedsAlign */,
    LocalizedString PhotonCustomAuthenticationFailedErrorMessage /* NeedsAlign */,
    LocalizedString SaveSourceDisconnectedErrorMessage /* NeedsAlign */,
    LocalizedString SaveReceiveErrorMessage /* NeedsAlign */,
    LocalizedString SaveNotFoundErrorMessage /* NeedsAlign */,
    LocalizedString SendMessageFailErrorMessage /* NeedsAlign */,
    LocalizedString InternalErrorMessage /* NeedsAlign */,
    LocalizedString UnknownExceptionMessage /* NeedsAlign */)
{
    public static UINetLobbyErrorsTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* StoreNotInitializedErrorMessage */
        LocalizedString _StoreNotInitializedErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GetAuthDataTimeoutMessage */
        LocalizedString _GetAuthDataTimeoutMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GetAuthDataErrorMessage */
        LocalizedString _GetAuthDataErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhotonConnectFailErrorMessage */
        LocalizedString _PhotonConnectFailErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeRegionErrorMessage */
        LocalizedString _ChangeRegionErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LobbyNotFoundErrorMessage */
        LocalizedString _LobbyNotFoundErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinLobbyErrorMessage */
        LocalizedString _JoinLobbyErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreatingLobbyErrorMessage */
        LocalizedString _CreatingLobbyErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhotonDisconnectedErrorMessage */
        LocalizedString _PhotonDisconnectedErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhotonCustomAuthenticationFailedErrorMessage */
        LocalizedString _PhotonCustomAuthenticationFailedErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveSourceDisconnectedErrorMessage */
        LocalizedString _SaveSourceDisconnectedErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveReceiveErrorMessage */
        LocalizedString _SaveReceiveErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveNotFoundErrorMessage */
        LocalizedString _SaveNotFoundErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendMessageFailErrorMessage */
        LocalizedString _SendMessageFailErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InternalErrorMessage */
        LocalizedString _InternalErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnknownExceptionMessage */
        LocalizedString _UnknownExceptionMessage = LocalizedString.Read(reader);
        
        return new(_StoreNotInitializedErrorMessage,
            _GetAuthDataTimeoutMessage,
            _GetAuthDataErrorMessage,
            _PhotonConnectFailErrorMessage,
            _ChangeRegionErrorMessage,
            _LobbyNotFoundErrorMessage,
            _JoinLobbyErrorMessage,
            _CreatingLobbyErrorMessage,
            _PhotonDisconnectedErrorMessage,
            _PhotonCustomAuthenticationFailedErrorMessage,
            _SaveSourceDisconnectedErrorMessage,
            _SaveReceiveErrorMessage,
            _SaveNotFoundErrorMessage,
            _SendMessageFailErrorMessage,
            _InternalErrorMessage,
            _UnknownExceptionMessage);
    }
}

/* $UIActionText (10 fields) */
public record class UIActionText(
    LocalizedString Move /* NeedsAlign */,
    LocalizedString Stop /* NeedsAlign */,
    LocalizedString Interact /* NeedsAlign */,
    LocalizedString SplitItem /* NeedsAlign */,
    LocalizedString DropItem /* NeedsAlign */,
    LocalizedString MoveItem /* NeedsAlign */,
    LocalizedString ExitArea /* NeedsAlign */,
    LocalizedString Inspect /* NeedsAlign */,
    LocalizedString Talk /* NeedsAlign */,
    LocalizedString Rotate /* NeedsAlign */)
{
    public static UIActionText Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Move */
        LocalizedString _Move = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Stop */
        LocalizedString _Stop = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Interact */
        LocalizedString _Interact = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SplitItem */
        LocalizedString _SplitItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DropItem */
        LocalizedString _DropItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoveItem */
        LocalizedString _MoveItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExitArea */
        LocalizedString _ExitArea = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inspect */
        LocalizedString _Inspect = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Talk */
        LocalizedString _Talk = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rotate */
        LocalizedString _Rotate = LocalizedString.Read(reader);
        
        return new(_Move,
            _Stop,
            _Interact,
            _SplitItem,
            _DropItem,
            _MoveItem,
            _ExitArea,
            _Inspect,
            _Talk,
            _Rotate);
    }
}

/* $UITooltips (114 fields) */
public record class UITooltips(
    LocalizedString BaseDamage /* NeedsAlign */,
    LocalizedString CannotbeEquip /* NeedsAlign */,
    LocalizedString CanBeEquip /* NeedsAlign */,
    LocalizedString CanBeUsed /* NeedsAlign */,
    LocalizedString CannotbeUsed /* NeedsAlign */,
    LocalizedString IsNotRemovable /* NeedsAlign */,
    LocalizedString Loot /* NeedsAlign */,
    LocalizedString Door /* NeedsAlign */,
    LocalizedString DoorOpen /* NeedsAlign */,
    LocalizedString DoorClose /* NeedsAlign */,
    LocalizedString Trap /* NeedsAlign */,
    LocalizedString TrapNeutralize /* NeedsAlign */,
    LocalizedString Ladder /* NeedsAlign */,
    LocalizedString TitlePreviewSkillcheckSkillDC /* NeedsAlign */,
    LocalizedString TipPreviewSkillcheckBestCharacter /* NeedsAlign */,
    LocalizedString NoFeature /* NeedsAlign */,
    LocalizedString CharacterLevel /* NeedsAlign */,
    LocalizedString Level /* NeedsAlign */,
    LocalizedString NoClass /* NeedsAlign */,
    LocalizedString OneFrom /* NeedsAlign */,
    LocalizedString FeaturesFrom /* NeedsAlign */,
    LocalizedString NoProficiencies /* NeedsAlign */,
    LocalizedString HasProficiencies /* NeedsAlign */,
    LocalizedString MoreThan /* NeedsAlign */,
    LocalizedString and /* NeedsAlign */,
    LocalizedString or /* NeedsAlign */,
    LocalizedString lbs /* NeedsAlign */,
    LocalizedString PartyEncumbrance /* NeedsAlign */,
    LocalizedString PersonalEncumbrance /* NeedsAlign */,
    LocalizedString EncumbranceStatus /* NeedsAlign */,
    LocalizedString CurrentValue /* NeedsAlign */,
    LocalizedString Ranks /* NeedsAlign */,
    LocalizedString BaseValue /* NeedsAlign */,
    LocalizedString TotalValue /* NeedsAlign */,
    LocalizedString TotalSkillValue /* NeedsAlign */,
    LocalizedString TotalAttributeValue /* NeedsAlign */,
    LocalizedString BonusValue /* NeedsAlign */,
    LocalizedString UnitIsNotInspected /* NeedsAlign */,
    LocalizedString CurrentLevelExperience /* NeedsAlign */,
    LocalizedString NextLevelExperience /* NeedsAlign */,
    LocalizedString TillNextLevelExperience /* NeedsAlign */,
    LocalizedString TwoHanded /* NeedsAlign */,
    LocalizedString OneHanded /* NeedsAlign */,
    LocalizedString NoItemsAvailableToSelect /* NeedsAlign */,
    LocalizedString NonStackHeaderLabel /* NeedsAlign */,
    LocalizedString ShowInfo /* NeedsAlign */,
    LocalizedString Source /* NeedsAlign */,
    LocalizedString RateOfFire /* NeedsAlign */,
    LocalizedString Recoil /* NeedsAlign */,
    LocalizedString CostAP /* NeedsAlign */,
    LocalizedString AP /* NeedsAlign */,
    LocalizedString MP /* NeedsAlign */,
    LocalizedString PsychicPowerCostAP /* NeedsAlign */,
    LocalizedString ReloadAP /* NeedsAlign */,
    LocalizedString PsykerPower /* NeedsAlign */,
    LocalizedString EndsTurn /* NeedsAlign */,
    LocalizedString SpendAllMovementPoints /* NeedsAlign */,
    LocalizedString AttackAbilityGroupCooldown /* NeedsAlign */,
    LocalizedString IncreaseVeilDegradation /* NeedsAlign */,
    LocalizedString MinorVeilDegradation /* NeedsAlign */,
    LocalizedString MajorVeilDegradation /* NeedsAlign */,
    LocalizedString ShotsCount /* NeedsAlign */,
    LocalizedString MomentumAvailable /* NeedsAlign */,
    LocalizedString MomentumNotAvailable /* NeedsAlign */,
    LocalizedString EndTurn /* NeedsAlign */,
    LocalizedString HeroicActAbility /* NeedsAlign */,
    LocalizedString DesperateMeasureAbility /* NeedsAlign */,
    LocalizedString HitChances /* NeedsAlign */,
    LocalizedString HitChancesEffectiveDistance /* NeedsAlign */,
    LocalizedString HitChancesMaxDistance /* NeedsAlign */,
    LocalizedString ItemFooterLabel /* NeedsAlign */,
    LocalizedString SpendAllMovementPointsShort /* NeedsAlign */,
    LocalizedString AttackAbilityGroupCooldownShort /* NeedsAlign */,
    LocalizedString IncreaseVeilDegradationShort /* NeedsAlign */,
    LocalizedString ArmourDamageReduceDescription /* NeedsAlign */,
    LocalizedString ArmourDodgeChanceDescription /* NeedsAlign */,
    LocalizedString ReplenishingItem /* NeedsAlign */,
    LocalizedString ScatterMainLineClose /* NeedsAlign */,
    LocalizedString ScatterClose /* NeedsAlign */,
    LocalizedString ScatterMainLine /* NeedsAlign */,
    LocalizedString ScatterNear /* NeedsAlign */,
    LocalizedString ScatterFar /* NeedsAlign */,
    LocalizedString BonusesSum /* NeedsAlign */,
    LocalizedString BaseChance /* NeedsAlign */,
    LocalizedString HPLeft /* NeedsAlign */,
    LocalizedString HPMax /* NeedsAlign */,
    LocalizedString HPTemporary /* NeedsAlign */,
    LocalizedString HPTotalLeft /* NeedsAlign */,
    LocalizedString HPTotalMax /* NeedsAlign */,
    LocalizedString PossibleToKill /* NeedsAlign */,
    LocalizedString Damage /* NeedsAlign */,
    LocalizedString BurstCount /* NeedsAlign */,
    LocalizedString PossibleToPush /* NeedsAlign */,
    LocalizedString TotalHitChance /* NeedsAlign */,
    LocalizedString InitialHitChance /* NeedsAlign */,
    LocalizedString DodgeAvoidance /* NeedsAlign */,
    LocalizedString ParryAvoidance /* NeedsAlign */,
    LocalizedString CoverAvoidance /* NeedsAlign */,
    LocalizedString YouWillGainTitle /* NeedsAlign */,
    LocalizedString YouWillLoseTitle /* NeedsAlign */,
    LocalizedString ReputationPointsAbbreviation /* NeedsAlign */,
    LocalizedString SoulMarkRankHeader /* NeedsAlign */,
    LocalizedString SoulMarkRankDescription /* NeedsAlign */,
    LocalizedString SoulMarkIsLocked /* NeedsAlign */,
    LocalizedString SoulMarkMayBeLocked /* NeedsAlign */,
    LocalizedString Prerequisites /* NeedsAlign */,
    LocalizedString PrerequisiteAbilities /* NeedsAlign */,
    LocalizedString PrerequisiteCareers /* NeedsAlign */,
    LocalizedString PrerequisiteFeatures /* NeedsAlign */,
    LocalizedString PrerequisiteRank /* NeedsAlign */,
    LocalizedString PrerequisiteLevel /* NeedsAlign */,
    LocalizedString DoctrinesHeader /* NeedsAlign */,
    LocalizedString DoctrinesShortDesc /* NeedsAlign */,
    LocalizedString DoctrinesDescription /* NeedsAlign */)
{
    public static UITooltips Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* BaseDamage */
        LocalizedString _BaseDamage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotbeEquip */
        LocalizedString _CannotbeEquip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanBeEquip */
        LocalizedString _CanBeEquip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanBeUsed */
        LocalizedString _CanBeUsed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotbeUsed */
        LocalizedString _CannotbeUsed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IsNotRemovable */
        LocalizedString _IsNotRemovable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Loot */
        LocalizedString _Loot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Door */
        LocalizedString _Door = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoorOpen */
        LocalizedString _DoorOpen = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoorClose */
        LocalizedString _DoorClose = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Trap */
        LocalizedString _Trap = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrapNeutralize */
        LocalizedString _TrapNeutralize = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ladder */
        LocalizedString _Ladder = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TitlePreviewSkillcheckSkillDC */
        LocalizedString _TitlePreviewSkillcheckSkillDC = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TipPreviewSkillcheckBestCharacter */
        LocalizedString _TipPreviewSkillcheckBestCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFeature */
        LocalizedString _NoFeature = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterLevel */
        LocalizedString _CharacterLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Level */
        LocalizedString _Level = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoClass */
        LocalizedString _NoClass = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneFrom */
        LocalizedString _OneFrom = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturesFrom */
        LocalizedString _FeaturesFrom = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoProficiencies */
        LocalizedString _NoProficiencies = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasProficiencies */
        LocalizedString _HasProficiencies = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoreThan */
        LocalizedString _MoreThan = LocalizedString.Read(reader);
        reader.AlignTo(4); /* and */
        LocalizedString _and = LocalizedString.Read(reader);
        reader.AlignTo(4); /* or */
        LocalizedString _or = LocalizedString.Read(reader);
        reader.AlignTo(4); /* lbs */
        LocalizedString _lbs = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PartyEncumbrance */
        LocalizedString _PartyEncumbrance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PersonalEncumbrance */
        LocalizedString _PersonalEncumbrance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncumbranceStatus */
        LocalizedString _EncumbranceStatus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentValue */
        LocalizedString _CurrentValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ranks */
        LocalizedString _Ranks = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseValue */
        LocalizedString _BaseValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalValue */
        LocalizedString _TotalValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalSkillValue */
        LocalizedString _TotalSkillValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalAttributeValue */
        LocalizedString _TotalAttributeValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusValue */
        LocalizedString _BonusValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnitIsNotInspected */
        LocalizedString _UnitIsNotInspected = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentLevelExperience */
        LocalizedString _CurrentLevelExperience = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextLevelExperience */
        LocalizedString _NextLevelExperience = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TillNextLevelExperience */
        LocalizedString _TillNextLevelExperience = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoHanded */
        LocalizedString _TwoHanded = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneHanded */
        LocalizedString _OneHanded = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoItemsAvailableToSelect */
        LocalizedString _NoItemsAvailableToSelect = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NonStackHeaderLabel */
        LocalizedString _NonStackHeaderLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowInfo */
        LocalizedString _ShowInfo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Source */
        LocalizedString _Source = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RateOfFire */
        LocalizedString _RateOfFire = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Recoil */
        LocalizedString _Recoil = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CostAP */
        LocalizedString _CostAP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AP */
        LocalizedString _AP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MP */
        LocalizedString _MP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsychicPowerCostAP */
        LocalizedString _PsychicPowerCostAP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReloadAP */
        LocalizedString _ReloadAP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsykerPower */
        LocalizedString _PsykerPower = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EndsTurn */
        LocalizedString _EndsTurn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpendAllMovementPoints */
        LocalizedString _SpendAllMovementPoints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackAbilityGroupCooldown */
        LocalizedString _AttackAbilityGroupCooldown = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IncreaseVeilDegradation */
        LocalizedString _IncreaseVeilDegradation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinorVeilDegradation */
        LocalizedString _MinorVeilDegradation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MajorVeilDegradation */
        LocalizedString _MajorVeilDegradation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShotsCount */
        LocalizedString _ShotsCount = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumAvailable */
        LocalizedString _MomentumAvailable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumNotAvailable */
        LocalizedString _MomentumNotAvailable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EndTurn */
        LocalizedString _EndTurn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeroicActAbility */
        LocalizedString _HeroicActAbility = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DesperateMeasureAbility */
        LocalizedString _DesperateMeasureAbility = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChances */
        LocalizedString _HitChances = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChancesEffectiveDistance */
        LocalizedString _HitChancesEffectiveDistance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChancesMaxDistance */
        LocalizedString _HitChancesMaxDistance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemFooterLabel */
        LocalizedString _ItemFooterLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpendAllMovementPointsShort */
        LocalizedString _SpendAllMovementPointsShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackAbilityGroupCooldownShort */
        LocalizedString _AttackAbilityGroupCooldownShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IncreaseVeilDegradationShort */
        LocalizedString _IncreaseVeilDegradationShort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourDamageReduceDescription */
        LocalizedString _ArmourDamageReduceDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourDodgeChanceDescription */
        LocalizedString _ArmourDodgeChanceDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReplenishingItem */
        LocalizedString _ReplenishingItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterMainLineClose */
        LocalizedString _ScatterMainLineClose = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterClose */
        LocalizedString _ScatterClose = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterMainLine */
        LocalizedString _ScatterMainLine = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterNear */
        LocalizedString _ScatterNear = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterFar */
        LocalizedString _ScatterFar = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusesSum */
        LocalizedString _BonusesSum = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseChance */
        LocalizedString _BaseChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPLeft */
        LocalizedString _HPLeft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPMax */
        LocalizedString _HPMax = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPTemporary */
        LocalizedString _HPTemporary = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPTotalLeft */
        LocalizedString _HPTotalLeft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPTotalMax */
        LocalizedString _HPTotalMax = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PossibleToKill */
        LocalizedString _PossibleToKill = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Damage */
        LocalizedString _Damage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BurstCount */
        LocalizedString _BurstCount = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PossibleToPush */
        LocalizedString _PossibleToPush = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalHitChance */
        LocalizedString _TotalHitChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialHitChance */
        LocalizedString _InitialHitChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DodgeAvoidance */
        LocalizedString _DodgeAvoidance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ParryAvoidance */
        LocalizedString _ParryAvoidance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoverAvoidance */
        LocalizedString _CoverAvoidance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouWillGainTitle */
        LocalizedString _YouWillGainTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouWillLoseTitle */
        LocalizedString _YouWillLoseTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReputationPointsAbbreviation */
        LocalizedString _ReputationPointsAbbreviation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankHeader */
        LocalizedString _SoulMarkRankHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankDescription */
        LocalizedString _SoulMarkRankDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkIsLocked */
        LocalizedString _SoulMarkIsLocked = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkMayBeLocked */
        LocalizedString _SoulMarkMayBeLocked = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Prerequisites */
        LocalizedString _Prerequisites = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteAbilities */
        LocalizedString _PrerequisiteAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteCareers */
        LocalizedString _PrerequisiteCareers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteFeatures */
        LocalizedString _PrerequisiteFeatures = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteRank */
        LocalizedString _PrerequisiteRank = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteLevel */
        LocalizedString _PrerequisiteLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoctrinesHeader */
        LocalizedString _DoctrinesHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoctrinesShortDesc */
        LocalizedString _DoctrinesShortDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoctrinesDescription */
        LocalizedString _DoctrinesDescription = LocalizedString.Read(reader);
        
        return new(_BaseDamage,
            _CannotbeEquip,
            _CanBeEquip,
            _CanBeUsed,
            _CannotbeUsed,
            _IsNotRemovable,
            _Loot,
            _Door,
            _DoorOpen,
            _DoorClose,
            _Trap,
            _TrapNeutralize,
            _Ladder,
            _TitlePreviewSkillcheckSkillDC,
            _TipPreviewSkillcheckBestCharacter,
            _NoFeature,
            _CharacterLevel,
            _Level,
            _NoClass,
            _OneFrom,
            _FeaturesFrom,
            _NoProficiencies,
            _HasProficiencies,
            _MoreThan,
            _and,
            _or,
            _lbs,
            _PartyEncumbrance,
            _PersonalEncumbrance,
            _EncumbranceStatus,
            _CurrentValue,
            _Ranks,
            _BaseValue,
            _TotalValue,
            _TotalSkillValue,
            _TotalAttributeValue,
            _BonusValue,
            _UnitIsNotInspected,
            _CurrentLevelExperience,
            _NextLevelExperience,
            _TillNextLevelExperience,
            _TwoHanded,
            _OneHanded,
            _NoItemsAvailableToSelect,
            _NonStackHeaderLabel,
            _ShowInfo,
            _Source,
            _RateOfFire,
            _Recoil,
            _CostAP,
            _AP,
            _MP,
            _PsychicPowerCostAP,
            _ReloadAP,
            _PsykerPower,
            _EndsTurn,
            _SpendAllMovementPoints,
            _AttackAbilityGroupCooldown,
            _IncreaseVeilDegradation,
            _MinorVeilDegradation,
            _MajorVeilDegradation,
            _ShotsCount,
            _MomentumAvailable,
            _MomentumNotAvailable,
            _EndTurn,
            _HeroicActAbility,
            _DesperateMeasureAbility,
            _HitChances,
            _HitChancesEffectiveDistance,
            _HitChancesMaxDistance,
            _ItemFooterLabel,
            _SpendAllMovementPointsShort,
            _AttackAbilityGroupCooldownShort,
            _IncreaseVeilDegradationShort,
            _ArmourDamageReduceDescription,
            _ArmourDodgeChanceDescription,
            _ReplenishingItem,
            _ScatterMainLineClose,
            _ScatterClose,
            _ScatterMainLine,
            _ScatterNear,
            _ScatterFar,
            _BonusesSum,
            _BaseChance,
            _HPLeft,
            _HPMax,
            _HPTemporary,
            _HPTotalLeft,
            _HPTotalMax,
            _PossibleToKill,
            _Damage,
            _BurstCount,
            _PossibleToPush,
            _TotalHitChance,
            _InitialHitChance,
            _DodgeAvoidance,
            _ParryAvoidance,
            _CoverAvoidance,
            _YouWillGainTitle,
            _YouWillLoseTitle,
            _ReputationPointsAbbreviation,
            _SoulMarkRankHeader,
            _SoulMarkRankDescription,
            _SoulMarkIsLocked,
            _SoulMarkMayBeLocked,
            _Prerequisites,
            _PrerequisiteAbilities,
            _PrerequisiteCareers,
            _PrerequisiteFeatures,
            _PrerequisiteRank,
            _PrerequisiteLevel,
            _DoctrinesHeader,
            _DoctrinesShortDesc,
            _DoctrinesDescription);
    }
}

/* $UITooltipElementEntry (2 fields) */
public record class UITooltipElementEntry(
    int Type /* None */,
    LocalizedString Text /* None */)
{
    public static UITooltipElementEntry Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Type,
            _Text);
    }
}

/* $UITooltipElementLabels (1 fields) */
public record class UITooltipElementLabels(
    UITooltipElementEntry[] Entries /* NeedsAlign */)
{
    public static UITooltipElementLabels Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Entries */
        UITooltipElementEntry[] _Entries = BuiltInArray<UITooltipElementEntry>.Read(reader);
        
        return new(_Entries);
    }
}

/* $UISkillcheckTooltip (11 fields) */
public record class UISkillcheckTooltip(
    LocalizedString RollResult /* NeedsAlign */,
    LocalizedString RollD100 /* NeedsAlign */,
    LocalizedString SkillCheck /* NeedsAlign */,
    LocalizedString SkillValue /* NeedsAlign */,
    LocalizedString DifficultyClass /* NeedsAlign */,
    LocalizedString DifficultyModRoll /* NeedsAlign */,
    LocalizedString Against /* NeedsAlign */,
    LocalizedString DC /* NeedsAlign */,
    LocalizedString Result /* NeedsAlign */,
    LocalizedString ChooseCharacter /* NeedsAlign */,
    LocalizedString SkillCheckChance /* NeedsAlign */)
{
    public static UISkillcheckTooltip Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RollResult */
        LocalizedString _RollResult = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RollD100 */
        LocalizedString _RollD100 = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheck */
        LocalizedString _SkillCheck = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillValue */
        LocalizedString _SkillValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyClass */
        LocalizedString _DifficultyClass = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyModRoll */
        LocalizedString _DifficultyModRoll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Against */
        LocalizedString _Against = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DC */
        LocalizedString _DC = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Result */
        LocalizedString _Result = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseCharacter */
        LocalizedString _ChooseCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckChance */
        LocalizedString _SkillCheckChance = LocalizedString.Read(reader);
        
        return new(_RollResult,
            _RollD100,
            _SkillCheck,
            _SkillValue,
            _DifficultyClass,
            _DifficultyModRoll,
            _Against,
            _DC,
            _Result,
            _ChooseCharacter,
            _SkillCheckChance);
    }
}

/* $TutorialTagPair (2 fields) */
public record class TutorialTagPair(
    int Tag /* None */,
    LocalizedString Name /* None */)
{
    public static TutorialTagPair Read(EndianBinaryReader reader)
    {
        int _Tag = reader.ReadS32();
        LocalizedString _Name = LocalizedString.Read(reader);
        
        return new(_Tag,
            _Name);
    }
}

/* $TutorialTagNames (1 fields) */
public record class TutorialTagNames(
    TutorialTagPair[] Names /* NeedsAlign */)
{
    public static TutorialTagNames Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Names */
        TutorialTagPair[] _Names = BuiltInArray<TutorialTagPair>.Read(reader);
        
        return new(_Names);
    }
}

/* $UITutorial (8 fields) */
public record class UITutorial(
    LocalizedString DontShowTutorialTag /* NeedsAlign */,
    LocalizedString DontShowThisTutorial /* NeedsAlign */,
    TutorialTagNames TagNames /* NeedsAlign */,
    LocalizedString GotIt /* NeedsAlign */,
    LocalizedString Previous /* NeedsAlign */,
    LocalizedString Next /* NeedsAlign */,
    LocalizedString Complete /* NeedsAlign */,
    LocalizedString Encyclopedia /* NeedsAlign */)
{
    public static UITutorial Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DontShowTutorialTag */
        LocalizedString _DontShowTutorialTag = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DontShowThisTutorial */
        LocalizedString _DontShowThisTutorial = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TagNames */
        TutorialTagNames _TagNames = TutorialTagNames.Read(reader);
        reader.AlignTo(4); /* GotIt */
        LocalizedString _GotIt = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Previous */
        LocalizedString _Previous = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Next */
        LocalizedString _Next = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Complete */
        LocalizedString _Complete = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Encyclopedia */
        LocalizedString _Encyclopedia = LocalizedString.Read(reader);
        
        return new(_DontShowTutorialTag,
            _DontShowThisTutorial,
            _TagNames,
            _GotIt,
            _Previous,
            _Next,
            _Complete,
            _Encyclopedia);
    }
}

/* $UITextSettingsUI (55 fields) */
public record class UITextSettingsUI(
    LocalizedString SectionNameGame /* NeedsAlign */,
    LocalizedString SectionNameSound /* NeedsAlign */,
    LocalizedString SectionNameGraphics /* NeedsAlign */,
    LocalizedString SectionNameDisplay /* NeedsAlign */,
    LocalizedString SectionNameAccessiability /* NeedsAlign */,
    LocalizedString SectionNameLanguage /* NeedsAlign */,
    LocalizedString SectionNameSafeZone /* NeedsAlign */,
    LocalizedString SectionNameControls /* NeedsAlign */,
    LocalizedString SectionNameDifficulty /* NeedsAlign */,
    LocalizedString RestoreAllDefaultsMessage /* NeedsAlign */,
    LocalizedString CancelChangesMessage /* NeedsAlign */,
    LocalizedString SaveChangesMessage /* NeedsAlign */,
    LocalizedString HotkeyInUseErrorMessage /* NeedsAlign */,
    LocalizedString RestartConfirmation /* NeedsAlign */,
    LocalizedString Apply /* NeedsAlign */,
    LocalizedString Default /* NeedsAlign */,
    LocalizedString Cancel /* NeedsAlign */,
    LocalizedString DialogYes /* NeedsAlign */,
    LocalizedString DialogNo /* NeedsAlign */,
    LocalizedString DialogCancel /* NeedsAlign */,
    LocalizedString DialogOk /* NeedsAlign */,
    LocalizedString DialogApply /* NeedsAlign */,
    LocalizedString DialogRevert /* NeedsAlign */,
    LocalizedString DialogSave /* NeedsAlign */,
    LocalizedString MenuConfirm /* NeedsAlign */,
    LocalizedString Navigation /* NeedsAlign */,
    LocalizedString Value /* NeedsAlign */,
    LocalizedString DisplayImageShadows /* NeedsAlign */,
    LocalizedString DisplayImageMidtones /* NeedsAlign */,
    LocalizedString DisplayImageBrights /* NeedsAlign */,
    LocalizedString AccessiabilityExampleFontSize /* NeedsAlign */,
    LocalizedString ResetToDefaultHold /* NeedsAlign */,
    LocalizedString FinishSetupHold /* NeedsAlign */,
    LocalizedString ConsoleControlLeftStickButtonHint /* NeedsAlign */,
    LocalizedString ConsoleControlDPadRightHint /* NeedsAlign */,
    LocalizedString ConsoleControlDPadDownHint /* NeedsAlign */,
    LocalizedString ConsoleControlDPadLeftHint /* NeedsAlign */,
    LocalizedString ConsoleControlDPadUpHint /* NeedsAlign */,
    LocalizedString ConsoleControlLeftUpHint /* NeedsAlign */,
    LocalizedString ConsoleControlLeftBottomHint /* NeedsAlign */,
    LocalizedString ConsoleControlFuncAdditionalHint /* NeedsAlign */,
    LocalizedString ConsoleControlRightBottomHint /* NeedsAlign */,
    LocalizedString ConsoleControlRightUpHint /* NeedsAlign */,
    LocalizedString ConsoleControlOptionsHint /* NeedsAlign */,
    LocalizedString ConsoleControlFunc02Hint /* NeedsAlign */,
    LocalizedString ConsoleControlDeclineHint /* NeedsAlign */,
    LocalizedString ConsoleControlConfirmHint /* NeedsAlign */,
    LocalizedString ConsoleControlFunc01Hint /* NeedsAlign */,
    LocalizedString ConsoleControlRightStickButtonHint /* NeedsAlign */,
    LocalizedString ConsoleControlPingCoopHint /* NeedsAlign */,
    LocalizedString SettingsToggleOn /* NeedsAlign */,
    LocalizedString SettingsToggleOff /* NeedsAlign */,
    LocalizedString ShowStatistics /* NeedsAlign */,
    LocalizedString DeleteStatisticsData /* NeedsAlign */,
    LocalizedString DeleteStatisticsDataDialogue /* NeedsAlign */)
{
    public static UITextSettingsUI Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* SectionNameGame */
        LocalizedString _SectionNameGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameSound */
        LocalizedString _SectionNameSound = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameGraphics */
        LocalizedString _SectionNameGraphics = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameDisplay */
        LocalizedString _SectionNameDisplay = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameAccessiability */
        LocalizedString _SectionNameAccessiability = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameLanguage */
        LocalizedString _SectionNameLanguage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameSafeZone */
        LocalizedString _SectionNameSafeZone = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameControls */
        LocalizedString _SectionNameControls = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameDifficulty */
        LocalizedString _SectionNameDifficulty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestoreAllDefaultsMessage */
        LocalizedString _RestoreAllDefaultsMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CancelChangesMessage */
        LocalizedString _CancelChangesMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveChangesMessage */
        LocalizedString _SaveChangesMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HotkeyInUseErrorMessage */
        LocalizedString _HotkeyInUseErrorMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestartConfirmation */
        LocalizedString _RestartConfirmation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Apply */
        LocalizedString _Apply = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Default */
        LocalizedString _Default = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cancel */
        LocalizedString _Cancel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogYes */
        LocalizedString _DialogYes = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogNo */
        LocalizedString _DialogNo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogCancel */
        LocalizedString _DialogCancel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogOk */
        LocalizedString _DialogOk = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogApply */
        LocalizedString _DialogApply = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogRevert */
        LocalizedString _DialogRevert = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogSave */
        LocalizedString _DialogSave = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuConfirm */
        LocalizedString _MenuConfirm = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Navigation */
        LocalizedString _Navigation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Value */
        LocalizedString _Value = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisplayImageShadows */
        LocalizedString _DisplayImageShadows = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisplayImageMidtones */
        LocalizedString _DisplayImageMidtones = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisplayImageBrights */
        LocalizedString _DisplayImageBrights = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AccessiabilityExampleFontSize */
        LocalizedString _AccessiabilityExampleFontSize = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetToDefaultHold */
        LocalizedString _ResetToDefaultHold = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FinishSetupHold */
        LocalizedString _FinishSetupHold = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlLeftStickButtonHint */
        LocalizedString _ConsoleControlLeftStickButtonHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadRightHint */
        LocalizedString _ConsoleControlDPadRightHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadDownHint */
        LocalizedString _ConsoleControlDPadDownHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadLeftHint */
        LocalizedString _ConsoleControlDPadLeftHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadUpHint */
        LocalizedString _ConsoleControlDPadUpHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlLeftUpHint */
        LocalizedString _ConsoleControlLeftUpHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlLeftBottomHint */
        LocalizedString _ConsoleControlLeftBottomHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlFuncAdditionalHint */
        LocalizedString _ConsoleControlFuncAdditionalHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlRightBottomHint */
        LocalizedString _ConsoleControlRightBottomHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlRightUpHint */
        LocalizedString _ConsoleControlRightUpHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlOptionsHint */
        LocalizedString _ConsoleControlOptionsHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlFunc02Hint */
        LocalizedString _ConsoleControlFunc02Hint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDeclineHint */
        LocalizedString _ConsoleControlDeclineHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlConfirmHint */
        LocalizedString _ConsoleControlConfirmHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlFunc01Hint */
        LocalizedString _ConsoleControlFunc01Hint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlRightStickButtonHint */
        LocalizedString _ConsoleControlRightStickButtonHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlPingCoopHint */
        LocalizedString _ConsoleControlPingCoopHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SettingsToggleOn */
        LocalizedString _SettingsToggleOn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SettingsToggleOff */
        LocalizedString _SettingsToggleOff = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowStatistics */
        LocalizedString _ShowStatistics = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteStatisticsData */
        LocalizedString _DeleteStatisticsData = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteStatisticsDataDialogue */
        LocalizedString _DeleteStatisticsDataDialogue = LocalizedString.Read(reader);
        
        return new(_SectionNameGame,
            _SectionNameSound,
            _SectionNameGraphics,
            _SectionNameDisplay,
            _SectionNameAccessiability,
            _SectionNameLanguage,
            _SectionNameSafeZone,
            _SectionNameControls,
            _SectionNameDifficulty,
            _RestoreAllDefaultsMessage,
            _CancelChangesMessage,
            _SaveChangesMessage,
            _HotkeyInUseErrorMessage,
            _RestartConfirmation,
            _Apply,
            _Default,
            _Cancel,
            _DialogYes,
            _DialogNo,
            _DialogCancel,
            _DialogOk,
            _DialogApply,
            _DialogRevert,
            _DialogSave,
            _MenuConfirm,
            _Navigation,
            _Value,
            _DisplayImageShadows,
            _DisplayImageMidtones,
            _DisplayImageBrights,
            _AccessiabilityExampleFontSize,
            _ResetToDefaultHold,
            _FinishSetupHold,
            _ConsoleControlLeftStickButtonHint,
            _ConsoleControlDPadRightHint,
            _ConsoleControlDPadDownHint,
            _ConsoleControlDPadLeftHint,
            _ConsoleControlDPadUpHint,
            _ConsoleControlLeftUpHint,
            _ConsoleControlLeftBottomHint,
            _ConsoleControlFuncAdditionalHint,
            _ConsoleControlRightBottomHint,
            _ConsoleControlRightUpHint,
            _ConsoleControlOptionsHint,
            _ConsoleControlFunc02Hint,
            _ConsoleControlDeclineHint,
            _ConsoleControlConfirmHint,
            _ConsoleControlFunc01Hint,
            _ConsoleControlRightStickButtonHint,
            _ConsoleControlPingCoopHint,
            _SettingsToggleOn,
            _SettingsToggleOff,
            _ShowStatistics,
            _DeleteStatisticsData,
            _DeleteStatisticsDataDialogue);
    }
}

/* $UICombatTexts (18 fields) */
public record class UICombatTexts(
    LocalizedString CombatLogShowHide /* NeedsAlign */,
    LocalizedString CombatLogEventsFilter /* NeedsAlign */,
    LocalizedString CombatLogDialogueFilter /* NeedsAlign */,
    LocalizedString CombatLogCombatFilter /* NeedsAlign */,
    LocalizedString AttackOfOpportunity /* NeedsAlign */,
    LocalizedString ThrowSave /* NeedsAlign */,
    LocalizedString Avoid /* NeedsAlign */,
    LocalizedString Morale /* NeedsAlign */,
    LocalizedString Miss /* NeedsAlign */,
    LocalizedString Parried /* NeedsAlign */,
    LocalizedString Dodge /* NeedsAlign */,
    LocalizedString Cover /* NeedsAlign */,
    LocalizedString HPUninjured /* NeedsAlign */,
    LocalizedString HPBarelyInjured /* NeedsAlign */,
    LocalizedString HPInjured /* NeedsAlign */,
    LocalizedString HPBadlyInjured /* NeedsAlign */,
    LocalizedString HPNearDeath /* NeedsAlign */,
    LocalizedString HPDead /* NeedsAlign */)
{
    public static UICombatTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* CombatLogShowHide */
        LocalizedString _CombatLogShowHide = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogEventsFilter */
        LocalizedString _CombatLogEventsFilter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogDialogueFilter */
        LocalizedString _CombatLogDialogueFilter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogCombatFilter */
        LocalizedString _CombatLogCombatFilter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackOfOpportunity */
        LocalizedString _AttackOfOpportunity = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThrowSave */
        LocalizedString _ThrowSave = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Avoid */
        LocalizedString _Avoid = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Morale */
        LocalizedString _Morale = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Miss */
        LocalizedString _Miss = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Parried */
        LocalizedString _Parried = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString _Dodge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cover */
        LocalizedString _Cover = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPUninjured */
        LocalizedString _HPUninjured = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPBarelyInjured */
        LocalizedString _HPBarelyInjured = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPInjured */
        LocalizedString _HPInjured = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPBadlyInjured */
        LocalizedString _HPBadlyInjured = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPNearDeath */
        LocalizedString _HPNearDeath = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPDead */
        LocalizedString _HPDead = LocalizedString.Read(reader);
        
        return new(_CombatLogShowHide,
            _CombatLogEventsFilter,
            _CombatLogDialogueFilter,
            _CombatLogCombatFilter,
            _AttackOfOpportunity,
            _ThrowSave,
            _Avoid,
            _Morale,
            _Miss,
            _Parried,
            _Dodge,
            _Cover,
            _HPUninjured,
            _HPBarelyInjured,
            _HPInjured,
            _HPBadlyInjured,
            _HPNearDeath,
            _HPDead);
    }
}

/* $UITurnBasedTexts (14 fields) */
public record class UITurnBasedTexts(
    LocalizedString Round /* NeedsAlign */,
    LocalizedString Rounds /* NeedsAlign */,
    LocalizedString CanUseOneTimeInCombat /* NeedsAlign */,
    LocalizedString NotEnoughActionsMessage /* NeedsAlign */,
    LocalizedString StartBattle /* NeedsAlign */,
    LocalizedString DeploymentPhaseBattle /* NeedsAlign */,
    LocalizedString CannotDeploy /* NeedsAlign */,
    LocalizedString CannotStartbattle /* NeedsAlign */,
    LocalizedString YouTurn /* NeedsAlign */,
    LocalizedString CurrentUnit /* NeedsAlign */,
    LocalizedString UnitOrder /* NeedsAlign */,
    LocalizedString NextRound /* NeedsAlign */,
    LocalizedString Deploy /* NeedsAlign */,
    LocalizedString AutoEndTurn /* NeedsAlign */)
{
    public static UITurnBasedTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Round */
        LocalizedString _Round = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rounds */
        LocalizedString _Rounds = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanUseOneTimeInCombat */
        LocalizedString _CanUseOneTimeInCombat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughActionsMessage */
        LocalizedString _NotEnoughActionsMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StartBattle */
        LocalizedString _StartBattle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeploymentPhaseBattle */
        LocalizedString _DeploymentPhaseBattle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotDeploy */
        LocalizedString _CannotDeploy = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotStartbattle */
        LocalizedString _CannotStartbattle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouTurn */
        LocalizedString _YouTurn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentUnit */
        LocalizedString _CurrentUnit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnitOrder */
        LocalizedString _UnitOrder = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextRound */
        LocalizedString _NextRound = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Deploy */
        LocalizedString _Deploy = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoEndTurn */
        LocalizedString _AutoEndTurn = LocalizedString.Read(reader);
        
        return new(_Round,
            _Rounds,
            _CanUseOneTimeInCombat,
            _NotEnoughActionsMessage,
            _StartBattle,
            _DeploymentPhaseBattle,
            _CannotDeploy,
            _CannotStartbattle,
            _YouTurn,
            _CurrentUnit,
            _UnitOrder,
            _NextRound,
            _Deploy,
            _AutoEndTurn);
    }
}

/* $SpacePostStrings (2 fields) */
public record class SpacePostStrings(
    LocalizedString Title /* None */,
    LocalizedString Description /* NeedsAlign */)
{
    public static SpacePostStrings Read(EndianBinaryReader reader)
    {
        LocalizedString _Title = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString _Description = LocalizedString.Read(reader);
        
        return new(_Title,
            _Description);
    }
}

/* $UISpaceCombatTexts (20 fields) */
public record class UISpaceCombatTexts(
    LocalizedString BackToShipBridge /* NeedsAlign */,
    LocalizedString ExitBattle /* NeedsAlign */,
    LocalizedString ArmorHint /* NeedsAlign */,
    LocalizedString ShieldsHint /* NeedsAlign */,
    LocalizedString Crew /* NeedsAlign */,
    LocalizedString Morale /* NeedsAlign */,
    LocalizedString MilitaryRating /* NeedsAlign */,
    LocalizedString CombatMovementActionHint /* NeedsAlign */,
    LocalizedString TimeSurvivalHint /* NeedsAlign */,
    LocalizedString TimeSurvivalActionHint /* NeedsAlign */,
    LocalizedString ShipMovementWarning /* NeedsAlign */,
    LocalizedString PortAbilitiesGroupLabel /* NeedsAlign */,
    LocalizedString ProwAbilitiesGroupLabel /* NeedsAlign */,
    LocalizedString DorsalAbilitiesGroupLabel /* NeedsAlign */,
    LocalizedString StarboardAbilitiesGroupLabel /* NeedsAlign */,
    LocalizedString NavigatorResource /* NeedsAlign */,
    LocalizedString NavigatorResourceDescription /* NeedsAlign */,
    LocalizedString TorpedoSelfDestruct /* NeedsAlign */,
    SpacePostStrings[] PostStrings /* NeedsAlign */,
    LocalizedString KoronusExpanse /* NeedsAlign */)
{
    public static UISpaceCombatTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* BackToShipBridge */
        LocalizedString _BackToShipBridge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExitBattle */
        LocalizedString _ExitBattle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorHint */
        LocalizedString _ArmorHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldsHint */
        LocalizedString _ShieldsHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Crew */
        LocalizedString _Crew = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Morale */
        LocalizedString _Morale = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MilitaryRating */
        LocalizedString _MilitaryRating = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatMovementActionHint */
        LocalizedString _CombatMovementActionHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TimeSurvivalHint */
        LocalizedString _TimeSurvivalHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TimeSurvivalActionHint */
        LocalizedString _TimeSurvivalActionHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipMovementWarning */
        LocalizedString _ShipMovementWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortAbilitiesGroupLabel */
        LocalizedString _PortAbilitiesGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProwAbilitiesGroupLabel */
        LocalizedString _ProwAbilitiesGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DorsalAbilitiesGroupLabel */
        LocalizedString _DorsalAbilitiesGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StarboardAbilitiesGroupLabel */
        LocalizedString _StarboardAbilitiesGroupLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResource */
        LocalizedString _NavigatorResource = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResourceDescription */
        LocalizedString _NavigatorResourceDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TorpedoSelfDestruct */
        LocalizedString _TorpedoSelfDestruct = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostStrings */
        SpacePostStrings[] _PostStrings = BuiltInArray<SpacePostStrings>.Read(reader);
        reader.AlignTo(4); /* KoronusExpanse */
        LocalizedString _KoronusExpanse = LocalizedString.Read(reader);
        
        return new(_BackToShipBridge,
            _ExitBattle,
            _ArmorHint,
            _ShieldsHint,
            _Crew,
            _Morale,
            _MilitaryRating,
            _CombatMovementActionHint,
            _TimeSurvivalHint,
            _TimeSurvivalActionHint,
            _ShipMovementWarning,
            _PortAbilitiesGroupLabel,
            _ProwAbilitiesGroupLabel,
            _DorsalAbilitiesGroupLabel,
            _StarboardAbilitiesGroupLabel,
            _NavigatorResource,
            _NavigatorResourceDescription,
            _TorpedoSelfDestruct,
            _PostStrings,
            _KoronusExpanse);
    }
}

/* $UIExplorationTexts (42 fields) */
public record class UIExplorationTexts(
    LocalizedString ExploObjectResources /* NeedsAlign */,
    LocalizedString ExploObjectResourcesEmpty /* NeedsAlign */,
    LocalizedString ExploPointsOfInterest /* NeedsAlign */,
    LocalizedString ExploBeginScan /* NeedsAlign */,
    LocalizedString ExploCancelScan /* NeedsAlign */,
    LocalizedString ExploAlreadyExplored /* NeedsAlign */,
    LocalizedString ExploNotExplored /* NeedsAlign */,
    LocalizedString ExploNotInteractable /* NeedsAlign */,
    LocalizedString AnomalyVisitUnknown /* NeedsAlign */,
    LocalizedString AnomalyVisitExplored /* NeedsAlign */,
    LocalizedString StatCheckLootCheckStatButton /* NeedsAlign */,
    LocalizedString StatCheckLootConfirmSelectedUnitButton /* NeedsAlign */,
    LocalizedString StatCheckLootSwitchUnitSubHeader /* NeedsAlign */,
    LocalizedString ExpeditionHeader /* NeedsAlign */,
    LocalizedString ExpeditionRewardsDescription /* NeedsAlign */,
    LocalizedString ExpeditionSendButtonLabel /* NeedsAlign */,
    LocalizedString ExpeditionSentDialogMessage /* NeedsAlign */,
    LocalizedString ResourceMiner /* NeedsAlign */,
    LocalizedString ResourceMinerDesc /* NeedsAlign */,
    LocalizedString NotEnoughResourceMiners /* NeedsAlign */,
    LocalizedString UseResourceMinerDialogMessage /* NeedsAlign */,
    LocalizedString RemoveResourceMinerDialogMessage /* NeedsAlign */,
    LocalizedString StartMiningNotificationText /* NeedsAlign */,
    LocalizedString StopMiningNotificationText /* NeedsAlign */,
    LocalizedString YourScannersFoundResources /* NeedsAlign */,
    LocalizedString DefaultAnomalyTypeName /* NeedsAlign */,
    LocalizedString ShipSignatureAnomalyTypeName /* NeedsAlign */,
    LocalizedString EnemyAnomalyTypeName /* NeedsAlign */,
    LocalizedString GasAnomalyTypeName /* NeedsAlign */,
    LocalizedString WarpHtonAnomalyTypeName /* NeedsAlign */,
    LocalizedString LootAnomalyTypeName /* NeedsAlign */,
    LocalizedString NoAnomalyInSystem /* NeedsAlign */,
    LocalizedString TitheGrade /* NeedsAlign */,
    LocalizedString TitheGradeUndetermined /* NeedsAlign */,
    LocalizedString BookEventPoi /* NeedsAlign */,
    LocalizedString CargoPoi /* NeedsAlign */,
    LocalizedString ColonyTraitPoi /* NeedsAlign */,
    LocalizedString ExpeditionPoi /* NeedsAlign */,
    LocalizedString GroundOperationPoi /* NeedsAlign */,
    LocalizedString LootPoi /* NeedsAlign */,
    LocalizedString ResourcesPoi /* NeedsAlign */,
    LocalizedString StatCheckLootPoi /* NeedsAlign */)
{
    public static UIExplorationTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ExploObjectResources */
        LocalizedString _ExploObjectResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploObjectResourcesEmpty */
        LocalizedString _ExploObjectResourcesEmpty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploPointsOfInterest */
        LocalizedString _ExploPointsOfInterest = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploBeginScan */
        LocalizedString _ExploBeginScan = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploCancelScan */
        LocalizedString _ExploCancelScan = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploAlreadyExplored */
        LocalizedString _ExploAlreadyExplored = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploNotExplored */
        LocalizedString _ExploNotExplored = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploNotInteractable */
        LocalizedString _ExploNotInteractable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnomalyVisitUnknown */
        LocalizedString _AnomalyVisitUnknown = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnomalyVisitExplored */
        LocalizedString _AnomalyVisitExplored = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootCheckStatButton */
        LocalizedString _StatCheckLootCheckStatButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootConfirmSelectedUnitButton */
        LocalizedString _StatCheckLootConfirmSelectedUnitButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootSwitchUnitSubHeader */
        LocalizedString _StatCheckLootSwitchUnitSubHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionHeader */
        LocalizedString _ExpeditionHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionRewardsDescription */
        LocalizedString _ExpeditionRewardsDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionSendButtonLabel */
        LocalizedString _ExpeditionSendButtonLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionSentDialogMessage */
        LocalizedString _ExpeditionSentDialogMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourceMiner */
        LocalizedString _ResourceMiner = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourceMinerDesc */
        LocalizedString _ResourceMinerDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughResourceMiners */
        LocalizedString _NotEnoughResourceMiners = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UseResourceMinerDialogMessage */
        LocalizedString _UseResourceMinerDialogMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RemoveResourceMinerDialogMessage */
        LocalizedString _RemoveResourceMinerDialogMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StartMiningNotificationText */
        LocalizedString _StartMiningNotificationText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StopMiningNotificationText */
        LocalizedString _StopMiningNotificationText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YourScannersFoundResources */
        LocalizedString _YourScannersFoundResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DefaultAnomalyTypeName */
        LocalizedString _DefaultAnomalyTypeName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipSignatureAnomalyTypeName */
        LocalizedString _ShipSignatureAnomalyTypeName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnemyAnomalyTypeName */
        LocalizedString _EnemyAnomalyTypeName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GasAnomalyTypeName */
        LocalizedString _GasAnomalyTypeName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarpHtonAnomalyTypeName */
        LocalizedString _WarpHtonAnomalyTypeName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootAnomalyTypeName */
        LocalizedString _LootAnomalyTypeName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAnomalyInSystem */
        LocalizedString _NoAnomalyInSystem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TitheGrade */
        LocalizedString _TitheGrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TitheGradeUndetermined */
        LocalizedString _TitheGradeUndetermined = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventPoi */
        LocalizedString _BookEventPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoPoi */
        LocalizedString _CargoPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyTraitPoi */
        LocalizedString _ColonyTraitPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionPoi */
        LocalizedString _ExpeditionPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GroundOperationPoi */
        LocalizedString _GroundOperationPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootPoi */
        LocalizedString _LootPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourcesPoi */
        LocalizedString _ResourcesPoi = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootPoi */
        LocalizedString _StatCheckLootPoi = LocalizedString.Read(reader);
        
        return new(_ExploObjectResources,
            _ExploObjectResourcesEmpty,
            _ExploPointsOfInterest,
            _ExploBeginScan,
            _ExploCancelScan,
            _ExploAlreadyExplored,
            _ExploNotExplored,
            _ExploNotInteractable,
            _AnomalyVisitUnknown,
            _AnomalyVisitExplored,
            _StatCheckLootCheckStatButton,
            _StatCheckLootConfirmSelectedUnitButton,
            _StatCheckLootSwitchUnitSubHeader,
            _ExpeditionHeader,
            _ExpeditionRewardsDescription,
            _ExpeditionSendButtonLabel,
            _ExpeditionSentDialogMessage,
            _ResourceMiner,
            _ResourceMinerDesc,
            _NotEnoughResourceMiners,
            _UseResourceMinerDialogMessage,
            _RemoveResourceMinerDialogMessage,
            _StartMiningNotificationText,
            _StopMiningNotificationText,
            _YourScannersFoundResources,
            _DefaultAnomalyTypeName,
            _ShipSignatureAnomalyTypeName,
            _EnemyAnomalyTypeName,
            _GasAnomalyTypeName,
            _WarpHtonAnomalyTypeName,
            _LootAnomalyTypeName,
            _NoAnomalyInSystem,
            _TitheGrade,
            _TitheGradeUndetermined,
            _BookEventPoi,
            _CargoPoi,
            _ColonyTraitPoi,
            _ExpeditionPoi,
            _GroundOperationPoi,
            _LootPoi,
            _ResourcesPoi,
            _StatCheckLootPoi);
    }
}

/* $ColonyResourceStrings (2 fields) */
public record class ColonyResourceStrings(
    LocalizedString Name /* None */,
    LocalizedString Description /* NeedsAlign */)
{
    public static ColonyResourceStrings Read(EndianBinaryReader reader)
    {
        LocalizedString _Name = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString _Description = LocalizedString.Read(reader);
        
        return new(_Name,
            _Description);
    }
}

/* $ColonyStatsStrings (2 fields) */
public record class ColonyStatsStrings(
    LocalizedString Name /* None */,
    LocalizedString Description /* NeedsAlign */)
{
    public static ColonyStatsStrings Read(EndianBinaryReader reader)
    {
        LocalizedString _Name = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString _Description = LocalizedString.Read(reader);
        
        return new(_Name,
            _Description);
    }
}

/* $UIColonizationTexts (6 fields) */
public record class UIColonizationTexts(
    ColonyResourceStrings[] ResourceStrings /* NeedsAlign */,
    ColonyStatsStrings[] StatStrings /* NeedsAlign */,
    LocalizedString ColonyStatsTitle /* NeedsAlign */,
    LocalizedString ColonyStatModifierOriginOther /* NeedsAlign */,
    LocalizedString ColonyManagementNoColonies /* NeedsAlign */,
    LocalizedString ColonyManagementVisitColonyButton /* NeedsAlign */)
{
    public static UIColonizationTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ResourceStrings */
        ColonyResourceStrings[] _ResourceStrings = BuiltInArray<ColonyResourceStrings>.Read(reader);
        reader.AlignTo(4); /* StatStrings */
        ColonyStatsStrings[] _StatStrings = BuiltInArray<ColonyStatsStrings>.Read(reader);
        reader.AlignTo(4); /* ColonyStatsTitle */
        LocalizedString _ColonyStatsTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyStatModifierOriginOther */
        LocalizedString _ColonyStatModifierOriginOther = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagementNoColonies */
        LocalizedString _ColonyManagementNoColonies = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagementVisitColonyButton */
        LocalizedString _ColonyManagementVisitColonyButton = LocalizedString.Read(reader);
        
        return new(_ResourceStrings,
            _StatStrings,
            _ColonyStatsTitle,
            _ColonyStatModifierOriginOther,
            _ColonyManagementNoColonies,
            _ColonyManagementVisitColonyButton);
    }
}

/* $UIColonyProjectsTexts (14 fields) */
public record class UIColonyProjectsTexts(
    LocalizedString HeaderDefault /* NeedsAlign */,
    LocalizedString OpenProjectsButton /* NeedsAlign */,
    LocalizedString StartProjectButton /* NeedsAlign */,
    LocalizedString ShowBlockedProjectsButton /* NeedsAlign */,
    LocalizedString ShowFinishedProjectsButton /* NeedsAlign */,
    LocalizedString ProjectRewards /* NeedsAlign */,
    LocalizedString ProjectRequirements /* NeedsAlign */,
    LocalizedString ProjectIsBuilding /* NeedsAlign */,
    LocalizedString ProjectIsFinished /* NeedsAlign */,
    LocalizedString ProjectName /* NeedsAlign */,
    LocalizedString EventWaitingToStart /* NeedsAlign */,
    LocalizedString NewChronicle /* NeedsAlign */,
    LocalizedString BuildingInProgress /* NeedsAlign */,
    LocalizedString Rank /* NeedsAlign */)
{
    public static UIColonyProjectsTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* HeaderDefault */
        LocalizedString _HeaderDefault = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenProjectsButton */
        LocalizedString _OpenProjectsButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StartProjectButton */
        LocalizedString _StartProjectButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowBlockedProjectsButton */
        LocalizedString _ShowBlockedProjectsButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowFinishedProjectsButton */
        LocalizedString _ShowFinishedProjectsButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectRewards */
        LocalizedString _ProjectRewards = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectRequirements */
        LocalizedString _ProjectRequirements = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectIsBuilding */
        LocalizedString _ProjectIsBuilding = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectIsFinished */
        LocalizedString _ProjectIsFinished = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectName */
        LocalizedString _ProjectName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EventWaitingToStart */
        LocalizedString _EventWaitingToStart = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewChronicle */
        LocalizedString _NewChronicle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuildingInProgress */
        LocalizedString _BuildingInProgress = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rank */
        LocalizedString _Rank = LocalizedString.Read(reader);
        
        return new(_HeaderDefault,
            _OpenProjectsButton,
            _StartProjectButton,
            _ShowBlockedProjectsButton,
            _ShowFinishedProjectsButton,
            _ProjectRewards,
            _ProjectRequirements,
            _ProjectIsBuilding,
            _ProjectIsFinished,
            _ProjectName,
            _EventWaitingToStart,
            _NewChronicle,
            _BuildingInProgress,
            _Rank);
    }
}

/* $UIColonyProjectsRewards (21 fields) */
public record class UIColonyProjectsRewards(
    LocalizedString RewardAddFeature /* NeedsAlign */,
    LocalizedString RewardAddFeatureParty /* NeedsAlign */,
    LocalizedString RewardAddFeatureShip /* NeedsAlign */,
    LocalizedString RewardAllRoutesNotDeadly /* NeedsAlign */,
    LocalizedString RewardChangeNewPassageCost /* NeedsAlign */,
    LocalizedString RewardChangeStatContentment /* NeedsAlign */,
    LocalizedString RewardChangeStatEfficiency /* NeedsAlign */,
    LocalizedString RewardChangeStatSecurity /* NeedsAlign */,
    LocalizedString RewardProfitFactor /* NeedsAlign */,
    LocalizedString RewardStartContract /* NeedsAlign */,
    LocalizedString RewardActivateSpawners /* NeedsAlign */,
    LocalizedString RewardActivateSpawnersDesc /* NeedsAlign */,
    LocalizedString RewardUnhideUnitsOnSceneRE /* NeedsAlign */,
    LocalizedString RewardUnhideUnitsOnSceneREDesc /* NeedsAlign */,
    LocalizedString ClaimDescription /* NeedsAlign */,
    LocalizedString ColonyRewardsHeader /* NeedsAlign */,
    LocalizedString StatRewardsHeader /* NeedsAlign */,
    LocalizedString LootRewardsHeader /* NeedsAlign */,
    LocalizedString ForAllColonies /* NeedsAlign */,
    LocalizedString AllColonies /* NeedsAlign */,
    LocalizedString Rechargeable /* NeedsAlign */)
{
    public static UIColonyProjectsRewards Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RewardAddFeature */
        LocalizedString _RewardAddFeature = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAddFeatureParty */
        LocalizedString _RewardAddFeatureParty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAddFeatureShip */
        LocalizedString _RewardAddFeatureShip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAllRoutesNotDeadly */
        LocalizedString _RewardAllRoutesNotDeadly = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeNewPassageCost */
        LocalizedString _RewardChangeNewPassageCost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeStatContentment */
        LocalizedString _RewardChangeStatContentment = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeStatEfficiency */
        LocalizedString _RewardChangeStatEfficiency = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeStatSecurity */
        LocalizedString _RewardChangeStatSecurity = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardProfitFactor */
        LocalizedString _RewardProfitFactor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardStartContract */
        LocalizedString _RewardStartContract = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardActivateSpawners */
        LocalizedString _RewardActivateSpawners = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardActivateSpawnersDesc */
        LocalizedString _RewardActivateSpawnersDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardUnhideUnitsOnSceneRE */
        LocalizedString _RewardUnhideUnitsOnSceneRE = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardUnhideUnitsOnSceneREDesc */
        LocalizedString _RewardUnhideUnitsOnSceneREDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClaimDescription */
        LocalizedString _ClaimDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyRewardsHeader */
        LocalizedString _ColonyRewardsHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatRewardsHeader */
        LocalizedString _StatRewardsHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootRewardsHeader */
        LocalizedString _LootRewardsHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ForAllColonies */
        LocalizedString _ForAllColonies = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllColonies */
        LocalizedString _AllColonies = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rechargeable */
        LocalizedString _Rechargeable = LocalizedString.Read(reader);
        
        return new(_RewardAddFeature,
            _RewardAddFeatureParty,
            _RewardAddFeatureShip,
            _RewardAllRoutesNotDeadly,
            _RewardChangeNewPassageCost,
            _RewardChangeStatContentment,
            _RewardChangeStatEfficiency,
            _RewardChangeStatSecurity,
            _RewardProfitFactor,
            _RewardStartContract,
            _RewardActivateSpawners,
            _RewardActivateSpawnersDesc,
            _RewardUnhideUnitsOnSceneRE,
            _RewardUnhideUnitsOnSceneREDesc,
            _ClaimDescription,
            _ColonyRewardsHeader,
            _StatRewardsHeader,
            _LootRewardsHeader,
            _ForAllColonies,
            _AllColonies,
            _Rechargeable);
    }
}

/* $UIColonyProjectsRequirements (9 fields) */
public record class UIColonyProjectsRequirements(
    LocalizedString RequirementBuiltProjectOneOf /* NeedsAlign */,
    LocalizedString RequirementBuiltProjectGlobal /* NeedsAlign */,
    LocalizedString RequirementBuiltProjectInColony /* NeedsAlign */,
    LocalizedString RequirementNotBuiltProjectInColony /* NeedsAlign */,
    LocalizedString RequirementProfitFactorCost /* NeedsAlign */,
    LocalizedString RequirementReputation /* NeedsAlign */,
    LocalizedString RequirementStatContentment /* NeedsAlign */,
    LocalizedString RequireStatEfficiency /* NeedsAlign */,
    LocalizedString RequireStatSecurity /* NeedsAlign */)
{
    public static UIColonyProjectsRequirements Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RequirementBuiltProjectOneOf */
        LocalizedString _RequirementBuiltProjectOneOf = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementBuiltProjectGlobal */
        LocalizedString _RequirementBuiltProjectGlobal = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementBuiltProjectInColony */
        LocalizedString _RequirementBuiltProjectInColony = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementNotBuiltProjectInColony */
        LocalizedString _RequirementNotBuiltProjectInColony = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementProfitFactorCost */
        LocalizedString _RequirementProfitFactorCost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementReputation */
        LocalizedString _RequirementReputation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementStatContentment */
        LocalizedString _RequirementStatContentment = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequireStatEfficiency */
        LocalizedString _RequireStatEfficiency = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequireStatSecurity */
        LocalizedString _RequireStatSecurity = LocalizedString.Read(reader);
        
        return new(_RequirementBuiltProjectOneOf,
            _RequirementBuiltProjectGlobal,
            _RequirementBuiltProjectInColony,
            _RequirementNotBuiltProjectInColony,
            _RequirementProfitFactorCost,
            _RequirementReputation,
            _RequirementStatContentment,
            _RequireStatEfficiency,
            _RequireStatSecurity);
    }
}

/* $UIColonyNotificationTexts (5 fields) */
public record class UIColonyNotificationTexts(
    LocalizedString NewChronicleStatus /* NeedsAlign */,
    LocalizedString NewEventStatus /* NeedsAlign */,
    LocalizedString ChronicleMessage /* NeedsAlign */,
    LocalizedString EventMessage /* NeedsAlign */,
    LocalizedString ColonyManagementButtonText /* NeedsAlign */)
{
    public static UIColonyNotificationTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* NewChronicleStatus */
        LocalizedString _NewChronicleStatus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewEventStatus */
        LocalizedString _NewEventStatus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChronicleMessage */
        LocalizedString _ChronicleMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EventMessage */
        LocalizedString _EventMessage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagementButtonText */
        LocalizedString _ColonyManagementButtonText = LocalizedString.Read(reader);
        
        return new(_NewChronicleStatus,
            _NewEventStatus,
            _ChronicleMessage,
            _EventMessage,
            _ColonyManagementButtonText);
    }
}

/* $UIColonyEventsTexts (5 fields) */
public record class UIColonyEventsTexts(
    LocalizedString EventsHeader /* NeedsAlign */,
    LocalizedString RewardAvailableStatus /* NeedsAlign */,
    LocalizedString NeedsVisitMechanicString /* NeedsAlign */,
    LocalizedString NeedsResolveMechanicString /* NeedsAlign */,
    LocalizedString NeedsVisitWarningMessage /* NeedsAlign */)
{
    public static UIColonyEventsTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* EventsHeader */
        LocalizedString _EventsHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAvailableStatus */
        LocalizedString _RewardAvailableStatus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedsVisitMechanicString */
        LocalizedString _NeedsVisitMechanicString = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedsResolveMechanicString */
        LocalizedString _NeedsResolveMechanicString = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedsVisitWarningMessage */
        LocalizedString _NeedsVisitWarningMessage = LocalizedString.Read(reader);
        
        return new(_EventsHeader,
            _RewardAvailableStatus,
            _NeedsVisitMechanicString,
            _NeedsResolveMechanicString,
            _NeedsVisitWarningMessage);
    }
}

/* $UIColonyTraitsTexts (1 fields) */
public record class UIColonyTraitsTexts(
    LocalizedString TraitsHeader /* NeedsAlign */)
{
    public static UIColonyTraitsTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* TraitsHeader */
        LocalizedString _TraitsHeader = LocalizedString.Read(reader);
        
        return new(_TraitsHeader);
    }
}

/* $UITermsOfUseTexts (8 fields) */
public record class UITermsOfUseTexts(
    LocalizedString Header /* NeedsAlign */,
    LocalizedString Licence /* NeedsAlign */,
    LocalizedString LicenceConsole /* NeedsAlign */,
    LocalizedString SubLicence /* NeedsAlign */,
    LocalizedString AcceptBtn /* NeedsAlign */,
    LocalizedString DeclineBtn /* NeedsAlign */,
    LocalizedString OkBtn /* NeedsAlign */,
    LocalizedString AreYouReallyWantToDeclineAgreement /* NeedsAlign */)
{
    public static UITermsOfUseTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Header */
        LocalizedString _Header = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Licence */
        LocalizedString _Licence = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LicenceConsole */
        LocalizedString _LicenceConsole = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SubLicence */
        LocalizedString _SubLicence = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AcceptBtn */
        LocalizedString _AcceptBtn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeclineBtn */
        LocalizedString _DeclineBtn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OkBtn */
        LocalizedString _OkBtn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouReallyWantToDeclineAgreement */
        LocalizedString _AreYouReallyWantToDeclineAgreement = LocalizedString.Read(reader);
        
        return new(_Header,
            _Licence,
            _LicenceConsole,
            _SubLicence,
            _AcceptBtn,
            _DeclineBtn,
            _OkBtn,
            _AreYouReallyWantToDeclineAgreement);
    }
}

/* $UIDialog (24 fields) */
public record class UIDialog(
    LocalizedString SucccedeedCheckFormat /* NeedsAlign */,
    LocalizedString FailedCheckFormat /* NeedsAlign */,
    LocalizedString SoulMarkShiftFormat /* NeedsAlign */,
    LocalizedString Succeeded /* NeedsAlign */,
    LocalizedString Failed /* NeedsAlign */,
    LocalizedString AligmentShiftedFormat /* NeedsAlign */,
    LocalizedString AlignmentRequirementLabel /* NeedsAlign */,
    LocalizedString AnswerDialogueFormat /* NeedsAlign */,
    LocalizedString AnswerDialogueBeFormat /* NeedsAlign */,
    LocalizedString AnswerStringWithCheckFormat /* NeedsAlign */,
    LocalizedString AnswerStringWithCheckBeFormat /* NeedsAlign */,
    LocalizedString AnswerShowCheckFormat /* NeedsAlign */,
    LocalizedString AnswerYouNeedFullCargo /* NeedsAlign */,
    LocalizedString AnswerYouNeedItem /* NeedsAlign */,
    LocalizedString OpenGlossary /* NeedsAlign */,
    LocalizedString CloseGlossary /* NeedsAlign */,
    LocalizedString InterchapterSkip /* NeedsAlign */,
    LocalizedString InterchapterSkipConsole /* NeedsAlign */,
    LocalizedString ScrollToNew /* NeedsAlign */,
    LocalizedString CargoRequiredText /* NeedsAlign */,
    LocalizedString OperationOrConditionDesc /* NeedsAlign */,
    LocalizedString OperationAndConditionDesc /* NeedsAlign */,
    LocalizedString ShowVotes /* NeedsAlign */,
    LocalizedString HideVotes /* NeedsAlign */)
{
    public static UIDialog Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* SucccedeedCheckFormat */
        LocalizedString _SucccedeedCheckFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FailedCheckFormat */
        LocalizedString _FailedCheckFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkShiftFormat */
        LocalizedString _SoulMarkShiftFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Succeeded */
        LocalizedString _Succeeded = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Failed */
        LocalizedString _Failed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AligmentShiftedFormat */
        LocalizedString _AligmentShiftedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AlignmentRequirementLabel */
        LocalizedString _AlignmentRequirementLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerDialogueFormat */
        LocalizedString _AnswerDialogueFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerDialogueBeFormat */
        LocalizedString _AnswerDialogueBeFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerStringWithCheckFormat */
        LocalizedString _AnswerStringWithCheckFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerStringWithCheckBeFormat */
        LocalizedString _AnswerStringWithCheckBeFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerShowCheckFormat */
        LocalizedString _AnswerShowCheckFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerYouNeedFullCargo */
        LocalizedString _AnswerYouNeedFullCargo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerYouNeedItem */
        LocalizedString _AnswerYouNeedItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenGlossary */
        LocalizedString _OpenGlossary = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseGlossary */
        LocalizedString _CloseGlossary = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InterchapterSkip */
        LocalizedString _InterchapterSkip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InterchapterSkipConsole */
        LocalizedString _InterchapterSkipConsole = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScrollToNew */
        LocalizedString _ScrollToNew = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoRequiredText */
        LocalizedString _CargoRequiredText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OperationOrConditionDesc */
        LocalizedString _OperationOrConditionDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OperationAndConditionDesc */
        LocalizedString _OperationAndConditionDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowVotes */
        LocalizedString _ShowVotes = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideVotes */
        LocalizedString _HideVotes = LocalizedString.Read(reader);
        
        return new(_SucccedeedCheckFormat,
            _FailedCheckFormat,
            _SoulMarkShiftFormat,
            _Succeeded,
            _Failed,
            _AligmentShiftedFormat,
            _AlignmentRequirementLabel,
            _AnswerDialogueFormat,
            _AnswerDialogueBeFormat,
            _AnswerStringWithCheckFormat,
            _AnswerStringWithCheckBeFormat,
            _AnswerShowCheckFormat,
            _AnswerYouNeedFullCargo,
            _AnswerYouNeedItem,
            _OpenGlossary,
            _CloseGlossary,
            _InterchapterSkip,
            _InterchapterSkipConsole,
            _ScrollToNew,
            _CargoRequiredText,
            _OperationOrConditionDesc,
            _OperationAndConditionDesc,
            _ShowVotes,
            _HideVotes);
    }
}

/* $UISaveLoadTexts (21 fields) */
public record class UISaveLoadTexts(
    LocalizedString LoadSaveWarning /* NeedsAlign */,
    LocalizedString SaveLabel /* NeedsAlign */,
    LocalizedString LoadLabel /* NeedsAlign */,
    LocalizedString DeleteLabel /* NeedsAlign */,
    LocalizedString OverwriteWarning /* NeedsAlign */,
    LocalizedString DeleteWarning /* NeedsAlign */,
    LocalizedString SaveDefaultName /* NeedsAlign */,
    LocalizedString SavePrefixAuto /* NeedsAlign */,
    LocalizedString SavePrefixIronman /* NeedsAlign */,
    LocalizedString SavePrefixQuick /* NeedsAlign */,
    LocalizedString SaveClickToEdit /* NeedsAlign */,
    LocalizedString InGameFormat /* NeedsAlign */,
    LocalizedString DlcRequired /* NeedsAlign */,
    LocalizedString DlcListIsNotLoading /* NeedsAlign */,
    LocalizedString ClickToEdit /* NeedsAlign */,
    LocalizedString ShowScreenshot /* NeedsAlign */,
    LocalizedString AreYouSureDeleteAllSaves /* NeedsAlign */,
    LocalizedString RenameSave /* NeedsAlign */,
    LocalizedString EmptySaveListHint /* NeedsAlign */,
    LocalizedString DeleteCharacter /* NeedsAlign */,
    LocalizedString AreYouSureDeleteCharacter /* NeedsAlign */)
{
    public static UISaveLoadTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* LoadSaveWarning */
        LocalizedString _LoadSaveWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveLabel */
        LocalizedString _SaveLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadLabel */
        LocalizedString _LoadLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteLabel */
        LocalizedString _DeleteLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OverwriteWarning */
        LocalizedString _OverwriteWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteWarning */
        LocalizedString _DeleteWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveDefaultName */
        LocalizedString _SaveDefaultName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SavePrefixAuto */
        LocalizedString _SavePrefixAuto = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SavePrefixIronman */
        LocalizedString _SavePrefixIronman = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SavePrefixQuick */
        LocalizedString _SavePrefixQuick = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveClickToEdit */
        LocalizedString _SaveClickToEdit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InGameFormat */
        LocalizedString _InGameFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcRequired */
        LocalizedString _DlcRequired = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcListIsNotLoading */
        LocalizedString _DlcListIsNotLoading = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClickToEdit */
        LocalizedString _ClickToEdit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowScreenshot */
        LocalizedString _ShowScreenshot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureDeleteAllSaves */
        LocalizedString _AreYouSureDeleteAllSaves = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RenameSave */
        LocalizedString _RenameSave = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmptySaveListHint */
        LocalizedString _EmptySaveListHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteCharacter */
        LocalizedString _DeleteCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureDeleteCharacter */
        LocalizedString _AreYouSureDeleteCharacter = LocalizedString.Read(reader);
        
        return new(_LoadSaveWarning,
            _SaveLabel,
            _LoadLabel,
            _DeleteLabel,
            _OverwriteWarning,
            _DeleteWarning,
            _SaveDefaultName,
            _SavePrefixAuto,
            _SavePrefixIronman,
            _SavePrefixQuick,
            _SaveClickToEdit,
            _InGameFormat,
            _DlcRequired,
            _DlcListIsNotLoading,
            _ClickToEdit,
            _ShowScreenshot,
            _AreYouSureDeleteAllSaves,
            _RenameSave,
            _EmptySaveListHint,
            _DeleteCharacter,
            _AreYouSureDeleteCharacter);
    }
}

/* $UIVendor (18 fields) */
public record class UIVendor(
    LocalizedString BeforeClose /* NeedsAlign */,
    LocalizedString Trade /* NeedsAlign */,
    LocalizedString CargoCompartment /* NeedsAlign */,
    LocalizedString UnsupportedItem /* NeedsAlign */,
    LocalizedString RelationshipLevel /* NeedsAlign */,
    LocalizedString PointsToNextLevel /* NeedsAlign */,
    LocalizedString ProceedTransaction /* NeedsAlign */,
    LocalizedString DemandCargo /* NeedsAlign */,
    LocalizedString CantBuyItem /* NeedsAlign */,
    LocalizedString NotEnoughReputation /* NeedsAlign */,
    LocalizedString NotEnoughProfitFactor /* NeedsAlign */,
    LocalizedString ChooseVendorForTrade /* NeedsAlign */,
    LocalizedString Exchange /* NeedsAlign */,
    LocalizedString HideUnrelevant /* NeedsAlign */,
    LocalizedString SelectAllRelevant /* NeedsAlign */,
    LocalizedString UnselectAllRelevant /* NeedsAlign */,
    LocalizedString CargoSelectingMenu /* NeedsAlign */,
    LocalizedString NoValidCargos /* NeedsAlign */)
{
    public static UIVendor Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* BeforeClose */
        LocalizedString _BeforeClose = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Trade */
        LocalizedString _Trade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoCompartment */
        LocalizedString _CargoCompartment = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnsupportedItem */
        LocalizedString _UnsupportedItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RelationshipLevel */
        LocalizedString _RelationshipLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PointsToNextLevel */
        LocalizedString _PointsToNextLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProceedTransaction */
        LocalizedString _ProceedTransaction = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DemandCargo */
        LocalizedString _DemandCargo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantBuyItem */
        LocalizedString _CantBuyItem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughReputation */
        LocalizedString _NotEnoughReputation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughProfitFactor */
        LocalizedString _NotEnoughProfitFactor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseVendorForTrade */
        LocalizedString _ChooseVendorForTrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Exchange */
        LocalizedString _Exchange = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideUnrelevant */
        LocalizedString _HideUnrelevant = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectAllRelevant */
        LocalizedString _SelectAllRelevant = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnselectAllRelevant */
        LocalizedString _UnselectAllRelevant = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoSelectingMenu */
        LocalizedString _CargoSelectingMenu = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoValidCargos */
        LocalizedString _NoValidCargos = LocalizedString.Read(reader);
        
        return new(_BeforeClose,
            _Trade,
            _CargoCompartment,
            _UnsupportedItem,
            _RelationshipLevel,
            _PointsToNextLevel,
            _ProceedTransaction,
            _DemandCargo,
            _CantBuyItem,
            _NotEnoughReputation,
            _NotEnoughProfitFactor,
            _ChooseVendorForTrade,
            _Exchange,
            _HideUnrelevant,
            _SelectAllRelevant,
            _UnselectAllRelevant,
            _CargoSelectingMenu,
            _NoValidCargos);
    }
}

/* $UIShipCustomization (74 fields) */
public record class UIShipCustomization(
    LocalizedString PlasmaDrives /* NeedsAlign */,
    LocalizedString VoidShieldGenerator /* NeedsAlign */,
    LocalizedString ArmorPlating /* NeedsAlign */,
    LocalizedString ArmorPlatingDescription /* NeedsAlign */,
    LocalizedString AugerArray /* NeedsAlign */,
    LocalizedString ShipWeapon /* NeedsAlign */,
    LocalizedString Inertia /* NeedsAlign */,
    LocalizedString XP /* NeedsAlign */,
    LocalizedString Scrap /* NeedsAlign */,
    LocalizedString ScrapDescription /* NeedsAlign */,
    LocalizedString CurrentShipUpgradeScrapValue /* NeedsAlign */,
    LocalizedString CanUpgrade /* NeedsAlign */,
    LocalizedString CantUpgrade /* NeedsAlign */,
    LocalizedString CantDowngrade /* NeedsAlign */,
    LocalizedString CurrentUnitOnPost /* NeedsAlign */,
    LocalizedString SelectedUnit /* NeedsAlign */,
    LocalizedString AppointOnPost /* NeedsAlign */,
    LocalizedString RemoveFromPost /* NeedsAlign */,
    LocalizedString NotEnoughScrap /* NeedsAlign */,
    LocalizedString MinLevel /* NeedsAlign */,
    LocalizedString AlreadyMaximum /* NeedsAlign */,
    LocalizedString Upgraded /* NeedsAlign */,
    LocalizedString Downgraded /* NeedsAlign */,
    LocalizedString UpgradeInternalStructure /* NeedsAlign */,
    LocalizedString UpgradeProwRam /* NeedsAlign */,
    LocalizedString UpgradeInternalStructureDescription /* NeedsAlign */,
    LocalizedString UpgradeProwRamDescription /* NeedsAlign */,
    LocalizedString Engine /* NeedsAlign */,
    LocalizedString Shields /* NeedsAlign */,
    LocalizedString Auspex /* NeedsAlign */,
    LocalizedString Armor /* NeedsAlign */,
    LocalizedString Dorsal /* NeedsAlign */,
    LocalizedString Prow /* NeedsAlign */,
    LocalizedString Port /* NeedsAlign */,
    LocalizedString Starboard /* NeedsAlign */,
    LocalizedString Ram /* NeedsAlign */,
    LocalizedString Repair /* NeedsAlign */,
    LocalizedString RamDamageReduction /* NeedsAlign */,
    LocalizedString RamDamageBonus /* NeedsAlign */,
    LocalizedString CantInsertInThisWeaponSlot /* NeedsAlign */,
    LocalizedString NothingToInsertInThisSlot /* NeedsAlign */,
    LocalizedString PlaceEngineSlot /* NeedsAlign */,
    LocalizedString Post /* NeedsAlign */,
    LocalizedString Officer /* NeedsAlign */,
    LocalizedString NoOfficer /* NeedsAlign */,
    LocalizedString SkillRequired /* NeedsAlign */,
    LocalizedString NoSpecialAbilities /* NeedsAlign */,
    LocalizedString AvailableAttune /* NeedsAlign */,
    LocalizedString UseOnseCurrentAbility /* NeedsAlign */,
    LocalizedString ShipHasFullHP /* NeedsAlign */,
    LocalizedString Attune /* NeedsAlign */,
    LocalizedString HasPenalty /* NeedsAlign */,
    LocalizedString NoCharacterOnPost /* NeedsAlign */,
    LocalizedString AttunedAbility /* NeedsAlign */,
    LocalizedString AttuneSuccess /* NeedsAlign */,
    LocalizedString AttuneFailedNotFullHP /* NeedsAlign */,
    LocalizedString AllreadyAttuned /* NeedsAlign */,
    LocalizedString RoundCooldownTime /* NeedsAlign */,
    LocalizedString RoundsToUltimateAbility /* NeedsAlign */,
    LocalizedString UnableUltimateAbility /* NeedsAlign */,
    LocalizedString RamDamageReductionDescription /* NeedsAlign */,
    LocalizedString RamDamageBonusDescription /* NeedsAlign */,
    LocalizedString ShipExperienceDescription /* NeedsAlign */,
    LocalizedString PostAbilityDuration /* NeedsAlign */,
    LocalizedString PostAbilityDurationHint /* NeedsAlign */,
    LocalizedString PostAbilityStartingCooldown /* NeedsAlign */,
    LocalizedString PostAbilityStartingCooldownHint /* NeedsAlign */,
    LocalizedString AttunePrerequisitesNotCompleted /* NeedsAlign */,
    LocalizedString CurrentUpgradeLevel /* NeedsAlign */,
    LocalizedString ToDefaultPosition /* NeedsAlign */,
    LocalizedString RepairDescription /* NeedsAlign */,
    LocalizedString MenuItemUpgrade /* NeedsAlign */,
    LocalizedString MenuItemSkills /* NeedsAlign */,
    LocalizedString MenuItemComponents /* NeedsAlign */)
{
    public static UIShipCustomization Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* PlasmaDrives */
        LocalizedString _PlasmaDrives = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VoidShieldGenerator */
        LocalizedString _VoidShieldGenerator = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorPlating */
        LocalizedString _ArmorPlating = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorPlatingDescription */
        LocalizedString _ArmorPlatingDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AugerArray */
        LocalizedString _AugerArray = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipWeapon */
        LocalizedString _ShipWeapon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inertia */
        LocalizedString _Inertia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* XP */
        LocalizedString _XP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Scrap */
        LocalizedString _Scrap = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScrapDescription */
        LocalizedString _ScrapDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentShipUpgradeScrapValue */
        LocalizedString _CurrentShipUpgradeScrapValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanUpgrade */
        LocalizedString _CanUpgrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantUpgrade */
        LocalizedString _CantUpgrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantDowngrade */
        LocalizedString _CantDowngrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentUnitOnPost */
        LocalizedString _CurrentUnitOnPost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedUnit */
        LocalizedString _SelectedUnit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AppointOnPost */
        LocalizedString _AppointOnPost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RemoveFromPost */
        LocalizedString _RemoveFromPost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughScrap */
        LocalizedString _NotEnoughScrap = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinLevel */
        LocalizedString _MinLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AlreadyMaximum */
        LocalizedString _AlreadyMaximum = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Upgraded */
        LocalizedString _Upgraded = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Downgraded */
        LocalizedString _Downgraded = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeInternalStructure */
        LocalizedString _UpgradeInternalStructure = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeProwRam */
        LocalizedString _UpgradeProwRam = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeInternalStructureDescription */
        LocalizedString _UpgradeInternalStructureDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeProwRamDescription */
        LocalizedString _UpgradeProwRamDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Engine */
        LocalizedString _Engine = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Shields */
        LocalizedString _Shields = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Auspex */
        LocalizedString _Auspex = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armor */
        LocalizedString _Armor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dorsal */
        LocalizedString _Dorsal = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Prow */
        LocalizedString _Prow = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Port */
        LocalizedString _Port = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Starboard */
        LocalizedString _Starboard = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ram */
        LocalizedString _Ram = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Repair */
        LocalizedString _Repair = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageReduction */
        LocalizedString _RamDamageReduction = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageBonus */
        LocalizedString _RamDamageBonus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantInsertInThisWeaponSlot */
        LocalizedString _CantInsertInThisWeaponSlot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NothingToInsertInThisSlot */
        LocalizedString _NothingToInsertInThisSlot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlaceEngineSlot */
        LocalizedString _PlaceEngineSlot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Post */
        LocalizedString _Post = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Officer */
        LocalizedString _Officer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoOfficer */
        LocalizedString _NoOfficer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillRequired */
        LocalizedString _SkillRequired = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoSpecialAbilities */
        LocalizedString _NoSpecialAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableAttune */
        LocalizedString _AvailableAttune = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UseOnseCurrentAbility */
        LocalizedString _UseOnseCurrentAbility = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipHasFullHP */
        LocalizedString _ShipHasFullHP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Attune */
        LocalizedString _Attune = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasPenalty */
        LocalizedString _HasPenalty = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoCharacterOnPost */
        LocalizedString _NoCharacterOnPost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttunedAbility */
        LocalizedString _AttunedAbility = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttuneSuccess */
        LocalizedString _AttuneSuccess = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttuneFailedNotFullHP */
        LocalizedString _AttuneFailedNotFullHP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllreadyAttuned */
        LocalizedString _AllreadyAttuned = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RoundCooldownTime */
        LocalizedString _RoundCooldownTime = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RoundsToUltimateAbility */
        LocalizedString _RoundsToUltimateAbility = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnableUltimateAbility */
        LocalizedString _UnableUltimateAbility = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageReductionDescription */
        LocalizedString _RamDamageReductionDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageBonusDescription */
        LocalizedString _RamDamageBonusDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipExperienceDescription */
        LocalizedString _ShipExperienceDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityDuration */
        LocalizedString _PostAbilityDuration = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityDurationHint */
        LocalizedString _PostAbilityDurationHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityStartingCooldown */
        LocalizedString _PostAbilityStartingCooldown = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityStartingCooldownHint */
        LocalizedString _PostAbilityStartingCooldownHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttunePrerequisitesNotCompleted */
        LocalizedString _AttunePrerequisitesNotCompleted = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentUpgradeLevel */
        LocalizedString _CurrentUpgradeLevel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToDefaultPosition */
        LocalizedString _ToDefaultPosition = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairDescription */
        LocalizedString _RepairDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuItemUpgrade */
        LocalizedString _MenuItemUpgrade = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuItemSkills */
        LocalizedString _MenuItemSkills = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuItemComponents */
        LocalizedString _MenuItemComponents = LocalizedString.Read(reader);
        
        return new(_PlasmaDrives,
            _VoidShieldGenerator,
            _ArmorPlating,
            _ArmorPlatingDescription,
            _AugerArray,
            _ShipWeapon,
            _Inertia,
            _XP,
            _Scrap,
            _ScrapDescription,
            _CurrentShipUpgradeScrapValue,
            _CanUpgrade,
            _CantUpgrade,
            _CantDowngrade,
            _CurrentUnitOnPost,
            _SelectedUnit,
            _AppointOnPost,
            _RemoveFromPost,
            _NotEnoughScrap,
            _MinLevel,
            _AlreadyMaximum,
            _Upgraded,
            _Downgraded,
            _UpgradeInternalStructure,
            _UpgradeProwRam,
            _UpgradeInternalStructureDescription,
            _UpgradeProwRamDescription,
            _Engine,
            _Shields,
            _Auspex,
            _Armor,
            _Dorsal,
            _Prow,
            _Port,
            _Starboard,
            _Ram,
            _Repair,
            _RamDamageReduction,
            _RamDamageBonus,
            _CantInsertInThisWeaponSlot,
            _NothingToInsertInThisSlot,
            _PlaceEngineSlot,
            _Post,
            _Officer,
            _NoOfficer,
            _SkillRequired,
            _NoSpecialAbilities,
            _AvailableAttune,
            _UseOnseCurrentAbility,
            _ShipHasFullHP,
            _Attune,
            _HasPenalty,
            _NoCharacterOnPost,
            _AttunedAbility,
            _AttuneSuccess,
            _AttuneFailedNotFullHP,
            _AllreadyAttuned,
            _RoundCooldownTime,
            _RoundsToUltimateAbility,
            _UnableUltimateAbility,
            _RamDamageReductionDescription,
            _RamDamageBonusDescription,
            _ShipExperienceDescription,
            _PostAbilityDuration,
            _PostAbilityDurationHint,
            _PostAbilityStartingCooldown,
            _PostAbilityStartingCooldownHint,
            _AttunePrerequisitesNotCompleted,
            _CurrentUpgradeLevel,
            _ToDefaultPosition,
            _RepairDescription,
            _MenuItemUpgrade,
            _MenuItemSkills,
            _MenuItemComponents);
    }
}

/* $UICharGen (92 fields) */
public record class UICharGen(
    LocalizedString Skills /* NeedsAlign */,
    LocalizedString ChooseName /* NeedsAlign */,
    LocalizedString Complete /* NeedsAlign */,
    LocalizedString Next /* NeedsAlign */,
    LocalizedString Back /* NeedsAlign */,
    LocalizedString Voice /* NeedsAlign */,
    LocalizedString BodyType /* NeedsAlign */,
    LocalizedString BodyConstitution /* NeedsAlign */,
    LocalizedString Face /* NeedsAlign */,
    LocalizedString SkinTone /* NeedsAlign */,
    LocalizedString HairStyle /* NeedsAlign */,
    LocalizedString HairColor /* NeedsAlign */,
    LocalizedString TattooColor /* NeedsAlign */,
    LocalizedString PrimaryClothColor /* NeedsAlign */,
    LocalizedString SecondaryClothColor /* NeedsAlign */,
    LocalizedString HitPoints /* NeedsAlign */,
    LocalizedString Beard /* NeedsAlign */,
    LocalizedString BeardColor /* NeedsAlign */,
    LocalizedString Appearance /* NeedsAlign */,
    LocalizedString Eyebrows /* NeedsAlign */,
    LocalizedString EyebrowsColor /* NeedsAlign */,
    LocalizedString Scars /* NeedsAlign */,
    LocalizedString FacePaint /* NeedsAlign */,
    LocalizedString Implant /* NeedsAlign */,
    LocalizedString SoulMark /* NeedsAlign */,
    LocalizedString Homeworld /* NeedsAlign */,
    LocalizedString ImperialHomeworldChildSelection /* NeedsAlign */,
    LocalizedString ForgeHomeworldChildSelection /* NeedsAlign */,
    LocalizedString SanctionedPsykerSelection /* NeedsAlign */,
    LocalizedString Occupation /* NeedsAlign */,
    LocalizedString Navigator /* NeedsAlign */,
    LocalizedString DarkestHour /* NeedsAlign */,
    LocalizedString MomentOfTriumph /* NeedsAlign */,
    LocalizedString Careers /* NeedsAlign */,
    LocalizedString Attributes /* NeedsAlign */,
    LocalizedString Hair /* NeedsAlign */,
    LocalizedString Tattoo /* NeedsAlign */,
    LocalizedString Implants /* NeedsAlign */,
    LocalizedString Servoskull /* NeedsAlign */,
    LocalizedString NavigatorMutations /* NeedsAlign */,
    LocalizedString Ship /* NeedsAlign */,
    LocalizedString Summary /* NeedsAlign */,
    LocalizedString SureWantClose /* NeedsAlign */,
    LocalizedString EnterSearchTextHere /* NeedsAlign */,
    LocalizedString Pregen /* NeedsAlign */,
    LocalizedString CreateCustomCharacter /* NeedsAlign */,
    LocalizedString AvailableStatsPointLeft /* NeedsAlign */,
    LocalizedString NoAvailableStatsPointLeft /* NeedsAlign */,
    LocalizedString CannotAdvanceStatHint /* NeedsAlign */,
    LocalizedString ShowVisualSettings /* NeedsAlign */,
    LocalizedString HideVisualSettings /* NeedsAlign */,
    LocalizedString Background /* NeedsAlign */,
    LocalizedString BackgroundFeatures /* NeedsAlign */,
    LocalizedString BackgroundStatsBonuses /* NeedsAlign */,
    LocalizedString BackgroundSkillsBonuses /* NeedsAlign */,
    LocalizedString BackgroundUnlockedFeaturesForLevelUp /* NeedsAlign */,
    LocalizedString BackgroundStatsForLevelUp /* NeedsAlign */,
    LocalizedString BackgroundSkillsForLevelUp /* NeedsAlign */,
    LocalizedString BackgroundTalentsForLevelUp /* NeedsAlign */,
    LocalizedString EditName /* NeedsAlign */,
    LocalizedString SetRandomName /* NeedsAlign */,
    LocalizedString EditNameButton /* NeedsAlign */,
    LocalizedString SetRandomNameButton /* NeedsAlign */,
    LocalizedString PhaseNotCompleted /* NeedsAlign */,
    LocalizedString InspectCareer /* NeedsAlign */,
    LocalizedString RespecWindowHeader /* NeedsAlign */,
    LocalizedString RespecSelectCharacter /* NeedsAlign */,
    LocalizedString RespecCostPF /* NeedsAlign */,
    LocalizedString SwitchPageSet /* NeedsAlign */,
    LocalizedString PlayVoicePreview /* NeedsAlign */,
    LocalizedString SwitchPortraitsCategoryTab /* NeedsAlign */,
    LocalizedString ShouldSetAllAttributesPointsWarning /* NeedsAlign */,
    LocalizedString CharacterSkillPoints /* NeedsAlign */,
    LocalizedString SwitchToPantograph /* NeedsAlign */,
    LocalizedString SwitchToAppearance /* NeedsAlign */,
    LocalizedString NothingToChoose /* NeedsAlign */,
    LocalizedString Portrait /* NeedsAlign */,
    LocalizedString UploadPortraitManual /* NeedsAlign */,
    LocalizedString PortraitCategoryDefault /* NeedsAlign */,
    LocalizedString PortraitCategoryWarhammer /* NeedsAlign */,
    LocalizedString PortraitCategoryCustom /* NeedsAlign */,
    LocalizedString PortraitCategoryNavigator /* NeedsAlign */,
    LocalizedString ChangePortrait /* NeedsAlign */,
    LocalizedString ChangePortraitDescription /* NeedsAlign */,
    LocalizedString ChangePortraitDescriptionConsole /* NeedsAlign */,
    LocalizedString CustomPortraitHeader /* NeedsAlign */,
    LocalizedString OpenPortraitFolder /* NeedsAlign */,
    LocalizedString RefreshPortrait /* NeedsAlign */,
    LocalizedString AddPortrait /* NeedsAlign */,
    LocalizedString SelectDoctrineHint /* NeedsAlign */,
    LocalizedString SpreadOutPointsHint /* NeedsAlign */,
    LocalizedString SkillPointsContainerHint /* NeedsAlign */)
{
    public static UICharGen Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Skills */
        LocalizedString _Skills = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseName */
        LocalizedString _ChooseName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Complete */
        LocalizedString _Complete = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Next */
        LocalizedString _Next = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Back */
        LocalizedString _Back = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Voice */
        LocalizedString _Voice = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BodyType */
        LocalizedString _BodyType = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BodyConstitution */
        LocalizedString _BodyConstitution = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Face */
        LocalizedString _Face = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkinTone */
        LocalizedString _SkinTone = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HairStyle */
        LocalizedString _HairStyle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HairColor */
        LocalizedString _HairColor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TattooColor */
        LocalizedString _TattooColor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrimaryClothColor */
        LocalizedString _PrimaryClothColor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SecondaryClothColor */
        LocalizedString _SecondaryClothColor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitPoints */
        LocalizedString _HitPoints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Beard */
        LocalizedString _Beard = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BeardColor */
        LocalizedString _BeardColor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Appearance */
        LocalizedString _Appearance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Eyebrows */
        LocalizedString _Eyebrows = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EyebrowsColor */
        LocalizedString _EyebrowsColor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Scars */
        LocalizedString _Scars = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FacePaint */
        LocalizedString _FacePaint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Implant */
        LocalizedString _Implant = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMark */
        LocalizedString _SoulMark = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Homeworld */
        LocalizedString _Homeworld = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ImperialHomeworldChildSelection */
        LocalizedString _ImperialHomeworldChildSelection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ForgeHomeworldChildSelection */
        LocalizedString _ForgeHomeworldChildSelection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SanctionedPsykerSelection */
        LocalizedString _SanctionedPsykerSelection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Occupation */
        LocalizedString _Occupation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Navigator */
        LocalizedString _Navigator = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DarkestHour */
        LocalizedString _DarkestHour = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentOfTriumph */
        LocalizedString _MomentOfTriumph = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Careers */
        LocalizedString _Careers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Attributes */
        LocalizedString _Attributes = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Hair */
        LocalizedString _Hair = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tattoo */
        LocalizedString _Tattoo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Implants */
        LocalizedString _Implants = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Servoskull */
        LocalizedString _Servoskull = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorMutations */
        LocalizedString _NavigatorMutations = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ship */
        LocalizedString _Ship = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Summary */
        LocalizedString _Summary = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SureWantClose */
        LocalizedString _SureWantClose = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnterSearchTextHere */
        LocalizedString _EnterSearchTextHere = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pregen */
        LocalizedString _Pregen = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateCustomCharacter */
        LocalizedString _CreateCustomCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableStatsPointLeft */
        LocalizedString _AvailableStatsPointLeft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAvailableStatsPointLeft */
        LocalizedString _NoAvailableStatsPointLeft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotAdvanceStatHint */
        LocalizedString _CannotAdvanceStatHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowVisualSettings */
        LocalizedString _ShowVisualSettings = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideVisualSettings */
        LocalizedString _HideVisualSettings = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Background */
        LocalizedString _Background = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundFeatures */
        LocalizedString _BackgroundFeatures = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundStatsBonuses */
        LocalizedString _BackgroundStatsBonuses = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundSkillsBonuses */
        LocalizedString _BackgroundSkillsBonuses = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundUnlockedFeaturesForLevelUp */
        LocalizedString _BackgroundUnlockedFeaturesForLevelUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundStatsForLevelUp */
        LocalizedString _BackgroundStatsForLevelUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundSkillsForLevelUp */
        LocalizedString _BackgroundSkillsForLevelUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundTalentsForLevelUp */
        LocalizedString _BackgroundTalentsForLevelUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EditName */
        LocalizedString _EditName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetRandomName */
        LocalizedString _SetRandomName = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EditNameButton */
        LocalizedString _EditNameButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetRandomNameButton */
        LocalizedString _SetRandomNameButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhaseNotCompleted */
        LocalizedString _PhaseNotCompleted = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InspectCareer */
        LocalizedString _InspectCareer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecWindowHeader */
        LocalizedString _RespecWindowHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecSelectCharacter */
        LocalizedString _RespecSelectCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecCostPF */
        LocalizedString _RespecCostPF = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchPageSet */
        LocalizedString _SwitchPageSet = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayVoicePreview */
        LocalizedString _PlayVoicePreview = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchPortraitsCategoryTab */
        LocalizedString _SwitchPortraitsCategoryTab = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShouldSetAllAttributesPointsWarning */
        LocalizedString _ShouldSetAllAttributesPointsWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterSkillPoints */
        LocalizedString _CharacterSkillPoints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchToPantograph */
        LocalizedString _SwitchToPantograph = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchToAppearance */
        LocalizedString _SwitchToAppearance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NothingToChoose */
        LocalizedString _NothingToChoose = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Portrait */
        LocalizedString _Portrait = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UploadPortraitManual */
        LocalizedString _UploadPortraitManual = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryDefault */
        LocalizedString _PortraitCategoryDefault = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryWarhammer */
        LocalizedString _PortraitCategoryWarhammer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryCustom */
        LocalizedString _PortraitCategoryCustom = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryNavigator */
        LocalizedString _PortraitCategoryNavigator = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangePortrait */
        LocalizedString _ChangePortrait = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangePortraitDescription */
        LocalizedString _ChangePortraitDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangePortraitDescriptionConsole */
        LocalizedString _ChangePortraitDescriptionConsole = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CustomPortraitHeader */
        LocalizedString _CustomPortraitHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenPortraitFolder */
        LocalizedString _OpenPortraitFolder = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RefreshPortrait */
        LocalizedString _RefreshPortrait = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AddPortrait */
        LocalizedString _AddPortrait = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectDoctrineHint */
        LocalizedString _SelectDoctrineHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpreadOutPointsHint */
        LocalizedString _SpreadOutPointsHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillPointsContainerHint */
        LocalizedString _SkillPointsContainerHint = LocalizedString.Read(reader);
        
        return new(_Skills,
            _ChooseName,
            _Complete,
            _Next,
            _Back,
            _Voice,
            _BodyType,
            _BodyConstitution,
            _Face,
            _SkinTone,
            _HairStyle,
            _HairColor,
            _TattooColor,
            _PrimaryClothColor,
            _SecondaryClothColor,
            _HitPoints,
            _Beard,
            _BeardColor,
            _Appearance,
            _Eyebrows,
            _EyebrowsColor,
            _Scars,
            _FacePaint,
            _Implant,
            _SoulMark,
            _Homeworld,
            _ImperialHomeworldChildSelection,
            _ForgeHomeworldChildSelection,
            _SanctionedPsykerSelection,
            _Occupation,
            _Navigator,
            _DarkestHour,
            _MomentOfTriumph,
            _Careers,
            _Attributes,
            _Hair,
            _Tattoo,
            _Implants,
            _Servoskull,
            _NavigatorMutations,
            _Ship,
            _Summary,
            _SureWantClose,
            _EnterSearchTextHere,
            _Pregen,
            _CreateCustomCharacter,
            _AvailableStatsPointLeft,
            _NoAvailableStatsPointLeft,
            _CannotAdvanceStatHint,
            _ShowVisualSettings,
            _HideVisualSettings,
            _Background,
            _BackgroundFeatures,
            _BackgroundStatsBonuses,
            _BackgroundSkillsBonuses,
            _BackgroundUnlockedFeaturesForLevelUp,
            _BackgroundStatsForLevelUp,
            _BackgroundSkillsForLevelUp,
            _BackgroundTalentsForLevelUp,
            _EditName,
            _SetRandomName,
            _EditNameButton,
            _SetRandomNameButton,
            _PhaseNotCompleted,
            _InspectCareer,
            _RespecWindowHeader,
            _RespecSelectCharacter,
            _RespecCostPF,
            _SwitchPageSet,
            _PlayVoicePreview,
            _SwitchPortraitsCategoryTab,
            _ShouldSetAllAttributesPointsWarning,
            _CharacterSkillPoints,
            _SwitchToPantograph,
            _SwitchToAppearance,
            _NothingToChoose,
            _Portrait,
            _UploadPortraitManual,
            _PortraitCategoryDefault,
            _PortraitCategoryWarhammer,
            _PortraitCategoryCustom,
            _PortraitCategoryNavigator,
            _ChangePortrait,
            _ChangePortraitDescription,
            _ChangePortraitDescriptionConsole,
            _CustomPortraitHeader,
            _OpenPortraitFolder,
            _RefreshPortrait,
            _AddPortrait,
            _SelectDoctrineHint,
            _SpreadOutPointsHint,
            _SkillPointsContainerHint);
    }
}

/* $UINewGame (12 fields) */
public record class UINewGame(
    LocalizedString MenuTitleNewGame /* NeedsAlign */,
    LocalizedString ScenarioMenuLabel /* NeedsAlign */,
    LocalizedString DifficultyMenuLabel /* NeedsAlign */,
    LocalizedString SelectorStory /* NeedsAlign */,
    LocalizedString DlcDisable /* NeedsAlign */,
    LocalizedString ChoosePregen /* NeedsAlign */,
    LocalizedString CreateNewCharacter /* NeedsAlign */,
    LocalizedString CreateNewCharacterDescription /* NeedsAlign */,
    LocalizedString MainStoryLabel /* NeedsAlign */,
    LocalizedString MainStoryDescription /* NeedsAlign */,
    LocalizedString OtherModsAreComingSoon /* NeedsAlign */,
    LocalizedString AreYouSureChooseVeryHardDifficulty /* NeedsAlign */)
{
    public static UINewGame Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* MenuTitleNewGame */
        LocalizedString _MenuTitleNewGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScenarioMenuLabel */
        LocalizedString _ScenarioMenuLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyMenuLabel */
        LocalizedString _DifficultyMenuLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectorStory */
        LocalizedString _SelectorStory = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcDisable */
        LocalizedString _DlcDisable = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChoosePregen */
        LocalizedString _ChoosePregen = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewCharacter */
        LocalizedString _CreateNewCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewCharacterDescription */
        LocalizedString _CreateNewCharacterDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MainStoryLabel */
        LocalizedString _MainStoryLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MainStoryDescription */
        LocalizedString _MainStoryDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OtherModsAreComingSoon */
        LocalizedString _OtherModsAreComingSoon = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureChooseVeryHardDifficulty */
        LocalizedString _AreYouSureChooseVeryHardDifficulty = LocalizedString.Read(reader);
        
        return new(_MenuTitleNewGame,
            _ScenarioMenuLabel,
            _DifficultyMenuLabel,
            _SelectorStory,
            _DlcDisable,
            _ChoosePregen,
            _CreateNewCharacter,
            _CreateNewCharacterDescription,
            _MainStoryLabel,
            _MainStoryDescription,
            _OtherModsAreComingSoon,
            _AreYouSureChooseVeryHardDifficulty);
    }
}

/* $UIGameOverScreen (4 fields) */
public record class UIGameOverScreen(
    LocalizedString MaleDeadLabel /* NeedsAlign */,
    LocalizedString FemaleDeadLabel /* NeedsAlign */,
    LocalizedString PartyIsDefeatedLabel /* NeedsAlign */,
    LocalizedString QuestIsFailedLabel /* NeedsAlign */)
{
    public static UIGameOverScreen Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* MaleDeadLabel */
        LocalizedString _MaleDeadLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FemaleDeadLabel */
        LocalizedString _FemaleDeadLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PartyIsDefeatedLabel */
        LocalizedString _PartyIsDefeatedLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestIsFailedLabel */
        LocalizedString _QuestIsFailedLabel = LocalizedString.Read(reader);
        
        return new(_MaleDeadLabel,
            _FemaleDeadLabel,
            _PartyIsDefeatedLabel,
            _QuestIsFailedLabel);
    }
}

/* $UINotificationTexts (18 fields) */
public record class UINotificationTexts(
    LocalizedString ItemsLostFormat /* NeedsAlign */,
    LocalizedString ItemsRecievedFormat /* NeedsAlign */,
    LocalizedString XPGainedFormat /* NeedsAlign */,
    LocalizedString CargoAddedFormat /* NeedsAlign */,
    LocalizedString CargoLostFormat /* NeedsAlign */,
    LocalizedString VoidshipDamagedFormat /* NeedsAlign */,
    LocalizedString DamageDealtFormat /* NeedsAlign */,
    LocalizedString NavigatorResourceAddedFormat /* NeedsAlign */,
    LocalizedString NavigatorResourceLostFormat /* NeedsAlign */,
    LocalizedString SoulMarksShiftFormat /* NeedsAlign */,
    LocalizedString GainedProfitFactor /* NeedsAlign */,
    LocalizedString LostProfitFactor /* NeedsAlign */,
    LocalizedString FactionReputationLostFormat /* NeedsAlign */,
    LocalizedString FactionReputationReceivedFormat /* NeedsAlign */,
    LocalizedString FactionVendorDiscountLostFormat /* NeedsAlign */,
    LocalizedString FactionVendorDiscountReceivedFormat /* NeedsAlign */,
    LocalizedString AbilityAddedFormat /* NeedsAlign */,
    LocalizedString BuffAddedFormat /* NeedsAlign */)
{
    public static UINotificationTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ItemsLostFormat */
        LocalizedString _ItemsLostFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsRecievedFormat */
        LocalizedString _ItemsRecievedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* XPGainedFormat */
        LocalizedString _XPGainedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoAddedFormat */
        LocalizedString _CargoAddedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoLostFormat */
        LocalizedString _CargoLostFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VoidshipDamagedFormat */
        LocalizedString _VoidshipDamagedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDealtFormat */
        LocalizedString _DamageDealtFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResourceAddedFormat */
        LocalizedString _NavigatorResourceAddedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResourceLostFormat */
        LocalizedString _NavigatorResourceLostFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarksShiftFormat */
        LocalizedString _SoulMarksShiftFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GainedProfitFactor */
        LocalizedString _GainedProfitFactor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LostProfitFactor */
        LocalizedString _LostProfitFactor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionReputationLostFormat */
        LocalizedString _FactionReputationLostFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionReputationReceivedFormat */
        LocalizedString _FactionReputationReceivedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionVendorDiscountLostFormat */
        LocalizedString _FactionVendorDiscountLostFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionVendorDiscountReceivedFormat */
        LocalizedString _FactionVendorDiscountReceivedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AbilityAddedFormat */
        LocalizedString _AbilityAddedFormat = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuffAddedFormat */
        LocalizedString _BuffAddedFormat = LocalizedString.Read(reader);
        
        return new(_ItemsLostFormat,
            _ItemsRecievedFormat,
            _XPGainedFormat,
            _CargoAddedFormat,
            _CargoLostFormat,
            _VoidshipDamagedFormat,
            _DamageDealtFormat,
            _NavigatorResourceAddedFormat,
            _NavigatorResourceLostFormat,
            _SoulMarksShiftFormat,
            _GainedProfitFactor,
            _LostProfitFactor,
            _FactionReputationLostFormat,
            _FactionReputationReceivedFormat,
            _FactionVendorDiscountLostFormat,
            _FactionVendorDiscountReceivedFormat,
            _AbilityAddedFormat,
            _BuffAddedFormat);
    }
}

/* $UIQuestNotificationTexts (15 fields) */
public record class UIQuestNotificationTexts(
    LocalizedString QuestComplite /* NeedsAlign */,
    LocalizedString QuestFailed /* NeedsAlign */,
    LocalizedString QuestNew /* NeedsAlign */,
    LocalizedString QuestUpdate /* NeedsAlign */,
    LocalizedString QuestStarted /* NeedsAlign */,
    LocalizedString QuestPostponed /* NeedsAlign */,
    LocalizedString ToJournal /* NeedsAlign */,
    LocalizedString Quest /* NeedsAlign */,
    LocalizedString Rumour /* NeedsAlign */,
    LocalizedString Order /* NeedsAlign */,
    LocalizedString Failed /* NeedsAlign */,
    LocalizedString Completed /* NeedsAlign */,
    LocalizedString New /* NeedsAlign */,
    LocalizedString Updated /* NeedsAlign */,
    LocalizedString Postponed /* NeedsAlign */)
{
    public static UIQuestNotificationTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* QuestComplite */
        LocalizedString _QuestComplite = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestFailed */
        LocalizedString _QuestFailed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestNew */
        LocalizedString _QuestNew = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestUpdate */
        LocalizedString _QuestUpdate = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestStarted */
        LocalizedString _QuestStarted = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestPostponed */
        LocalizedString _QuestPostponed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToJournal */
        LocalizedString _ToJournal = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Quest */
        LocalizedString _Quest = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rumour */
        LocalizedString _Rumour = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Order */
        LocalizedString _Order = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Failed */
        LocalizedString _Failed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Completed */
        LocalizedString _Completed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* New */
        LocalizedString _New = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Updated */
        LocalizedString _Updated = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Postponed */
        LocalizedString _Postponed = LocalizedString.Read(reader);
        
        return new(_QuestComplite,
            _QuestFailed,
            _QuestNew,
            _QuestUpdate,
            _QuestStarted,
            _QuestPostponed,
            _ToJournal,
            _Quest,
            _Rumour,
            _Order,
            _Failed,
            _Completed,
            _New,
            _Updated,
            _Postponed);
    }
}

/* $KeyCodeName (2 fields) */
public record class KeyCodeName(
    int Code /* None */,
    AsciiString CodeString /* None */)
{
    public static KeyCodeName Read(EndianBinaryReader reader)
    {
        int _Code = reader.ReadS32();
        AsciiString _CodeString = BuiltInString.Read(reader);
        
        return new(_Code,
            _CodeString);
    }
}

/* $UIKeyboardTexts (1 fields) */
public record class UIKeyboardTexts(
    KeyCodeName[] KeyCodeNames /* NeedsAlign */)
{
    public static UIKeyboardTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* KeyCodeNames */
        KeyCodeName[] _KeyCodeNames = BuiltInArray<KeyCodeName>.Read(reader);
        
        return new(_KeyCodeNames);
    }
}

/* $UILoot (21 fields) */
public record class UILoot(
    LocalizedString Loot /* NeedsAlign */,
    LocalizedString LootPlayerChest /* NeedsAlign */,
    LocalizedString LootOnArea /* NeedsAlign */,
    LocalizedString CollectAll /* NeedsAlign */,
    LocalizedString LeaveZone /* NeedsAlign */,
    LocalizedString CollectAllAndLeaveZone /* NeedsAlign */,
    LocalizedString LootManager /* NeedsAlign */,
    LocalizedString SendToCargo /* NeedsAlign */,
    LocalizedString SendToInventory /* NeedsAlign */,
    LocalizedString SendAllToCargo /* NeedsAlign */,
    LocalizedString SendAllToInventory /* NeedsAlign */,
    LocalizedString ItemsLootObject /* NeedsAlign */,
    LocalizedString ItemsLootObjectDescr /* NeedsAlign */,
    LocalizedString TrashLootObject /* NeedsAlign */,
    LocalizedString TrashLootObjectDescr /* NeedsAlign */,
    LocalizedString CollectAllBeforeLeave /* NeedsAlign */,
    LocalizedString SkillCheckTitle /* NeedsAlign */,
    LocalizedString SkillCheckResult /* NeedsAlign */,
    LocalizedString SkillCheckValueAgainst /* NeedsAlign */,
    LocalizedString SkillCheckSkillValue /* NeedsAlign */,
    LocalizedString CargoCollectedFromLoot /* NeedsAlign */)
{
    public static UILoot Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Loot */
        LocalizedString _Loot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootPlayerChest */
        LocalizedString _LootPlayerChest = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootOnArea */
        LocalizedString _LootOnArea = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CollectAll */
        LocalizedString _CollectAll = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LeaveZone */
        LocalizedString _LeaveZone = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CollectAllAndLeaveZone */
        LocalizedString _CollectAllAndLeaveZone = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootManager */
        LocalizedString _LootManager = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendToCargo */
        LocalizedString _SendToCargo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendToInventory */
        LocalizedString _SendToInventory = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendAllToCargo */
        LocalizedString _SendAllToCargo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendAllToInventory */
        LocalizedString _SendAllToInventory = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsLootObject */
        LocalizedString _ItemsLootObject = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsLootObjectDescr */
        LocalizedString _ItemsLootObjectDescr = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrashLootObject */
        LocalizedString _TrashLootObject = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrashLootObjectDescr */
        LocalizedString _TrashLootObjectDescr = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CollectAllBeforeLeave */
        LocalizedString _CollectAllBeforeLeave = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckTitle */
        LocalizedString _SkillCheckTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckResult */
        LocalizedString _SkillCheckResult = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckValueAgainst */
        LocalizedString _SkillCheckValueAgainst = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckSkillValue */
        LocalizedString _SkillCheckSkillValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoCollectedFromLoot */
        LocalizedString _CargoCollectedFromLoot = LocalizedString.Read(reader);
        
        return new(_Loot,
            _LootPlayerChest,
            _LootOnArea,
            _CollectAll,
            _LeaveZone,
            _CollectAllAndLeaveZone,
            _LootManager,
            _SendToCargo,
            _SendToInventory,
            _SendAllToCargo,
            _SendAllToInventory,
            _ItemsLootObject,
            _ItemsLootObjectDescr,
            _TrashLootObject,
            _TrashLootObjectDescr,
            _CollectAllBeforeLeave,
            _SkillCheckTitle,
            _SkillCheckResult,
            _SkillCheckValueAgainst,
            _SkillCheckSkillValue,
            _CargoCollectedFromLoot);
    }
}

/* $UIQuesJournalTexts (18 fields) */
public record class UIQuesJournalTexts(
    LocalizedString QuestComplite /* NeedsAlign */,
    LocalizedString QuestFailed /* NeedsAlign */,
    LocalizedString QuestTimeToFail /* NeedsAlign */,
    LocalizedString QuestTimeToRealFail /* NeedsAlign */,
    LocalizedString RumourPlaceMarker /* NeedsAlign */,
    LocalizedString AllRumoursTitle /* NeedsAlign */,
    LocalizedString RumoursAboutUsTitle /* NeedsAlign */,
    LocalizedString OrderResourcesYourResources /* NeedsAlign */,
    LocalizedString NoData /* NeedsAlign */,
    LocalizedString RequiredResources /* NeedsAlign */,
    LocalizedString RewardsResources /* NeedsAlign */,
    LocalizedString CompleteOrder /* NeedsAlign */,
    LocalizedString ShowCompletedQuests /* NeedsAlign */,
    LocalizedString HideCompletedQuests /* NeedsAlign */,
    LocalizedString Quests /* NeedsAlign */,
    LocalizedString Rumours /* NeedsAlign */,
    LocalizedString Orders /* NeedsAlign */,
    LocalizedString NoNameOfTheListObjectsAvailable /* NeedsAlign */)
{
    public static UIQuesJournalTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* QuestComplite */
        LocalizedString _QuestComplite = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestFailed */
        LocalizedString _QuestFailed = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestTimeToFail */
        LocalizedString _QuestTimeToFail = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestTimeToRealFail */
        LocalizedString _QuestTimeToRealFail = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RumourPlaceMarker */
        LocalizedString _RumourPlaceMarker = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllRumoursTitle */
        LocalizedString _AllRumoursTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RumoursAboutUsTitle */
        LocalizedString _RumoursAboutUsTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OrderResourcesYourResources */
        LocalizedString _OrderResourcesYourResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoData */
        LocalizedString _NoData = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequiredResources */
        LocalizedString _RequiredResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardsResources */
        LocalizedString _RewardsResources = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompleteOrder */
        LocalizedString _CompleteOrder = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowCompletedQuests */
        LocalizedString _ShowCompletedQuests = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideCompletedQuests */
        LocalizedString _HideCompletedQuests = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Quests */
        LocalizedString _Quests = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rumours */
        LocalizedString _Rumours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Orders */
        LocalizedString _Orders = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoNameOfTheListObjectsAvailable */
        LocalizedString _NoNameOfTheListObjectsAvailable = LocalizedString.Read(reader);
        
        return new(_QuestComplite,
            _QuestFailed,
            _QuestTimeToFail,
            _QuestTimeToRealFail,
            _RumourPlaceMarker,
            _AllRumoursTitle,
            _RumoursAboutUsTitle,
            _OrderResourcesYourResources,
            _NoData,
            _RequiredResources,
            _RewardsResources,
            _CompleteOrder,
            _ShowCompletedQuests,
            _HideCompletedQuests,
            _Quests,
            _Rumours,
            _Orders,
            _NoNameOfTheListObjectsAvailable);
    }
}

/* $UITransitionTexts (1 fields) */
public record class UITransitionTexts(
    LocalizedString AvailableObjectives /* NeedsAlign */)
{
    public static UITransitionTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* AvailableObjectives */
        LocalizedString _AvailableObjectives = LocalizedString.Read(reader);
        
        return new(_AvailableObjectives);
    }
}

/* $GroupChangerTexts (3 fields) */
public record class GroupChangerTexts(
    LocalizedString MustBeInPartyHint /* NeedsAlign */,
    LocalizedString MaxGroupCountWarning /* NeedsAlign */,
    LocalizedString MaxNavigatorsCountWarning /* NeedsAlign */)
{
    public static GroupChangerTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* MustBeInPartyHint */
        LocalizedString _MustBeInPartyHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxGroupCountWarning */
        LocalizedString _MaxGroupCountWarning = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxNavigatorsCountWarning */
        LocalizedString _MaxNavigatorsCountWarning = LocalizedString.Read(reader);
        
        return new(_MustBeInPartyHint,
            _MaxGroupCountWarning,
            _MaxNavigatorsCountWarning);
    }
}

/* $UIContextMenu (15 fields) */
public record class UIContextMenu(
    LocalizedString ContextMenu /* NeedsAlign */,
    LocalizedString Back /* NeedsAlign */,
    LocalizedString Buy /* NeedsAlign */,
    LocalizedString Drop /* NeedsAlign */,
    LocalizedString Equip /* NeedsAlign */,
    LocalizedString Information /* NeedsAlign */,
    LocalizedString Sell /* NeedsAlign */,
    LocalizedString Split /* NeedsAlign */,
    LocalizedString TakeOff /* NeedsAlign */,
    LocalizedString Use /* NeedsAlign */,
    LocalizedString UpgradeInternalStructure /* NeedsAlign */,
    LocalizedString DowngradeInternalStructure /* NeedsAlign */,
    LocalizedString UpgradeProwRaw /* NeedsAlign */,
    LocalizedString DowngradeProwRaw /* NeedsAlign */,
    LocalizedString AutoAddToCargo /* NeedsAlign */)
{
    public static UIContextMenu Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ContextMenu */
        LocalizedString _ContextMenu = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Back */
        LocalizedString _Back = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Buy */
        LocalizedString _Buy = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Drop */
        LocalizedString _Drop = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Equip */
        LocalizedString _Equip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Information */
        LocalizedString _Information = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Sell */
        LocalizedString _Sell = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Split */
        LocalizedString _Split = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TakeOff */
        LocalizedString _TakeOff = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Use */
        LocalizedString _Use = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeInternalStructure */
        LocalizedString _UpgradeInternalStructure = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DowngradeInternalStructure */
        LocalizedString _DowngradeInternalStructure = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeProwRaw */
        LocalizedString _UpgradeProwRaw = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DowngradeProwRaw */
        LocalizedString _DowngradeProwRaw = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoAddToCargo */
        LocalizedString _AutoAddToCargo = LocalizedString.Read(reader);
        
        return new(_ContextMenu,
            _Back,
            _Buy,
            _Drop,
            _Equip,
            _Information,
            _Sell,
            _Split,
            _TakeOff,
            _Use,
            _UpgradeInternalStructure,
            _DowngradeInternalStructure,
            _UpgradeProwRaw,
            _DowngradeProwRaw,
            _AutoAddToCargo);
    }
}

/* $EncyclopediaTexts (16 fields) */
public record class EncyclopediaTexts(
    LocalizedString EncyclopediaGlossaryButton /* NeedsAlign */,
    LocalizedString TooltipOpenEncyclopedia /* NeedsAlign */,
    LocalizedString AddedToEncyclopedia /* NeedsAlign */,
    LocalizedString SeeInEncyclopedia /* NeedsAlign */,
    LocalizedString ToEncyclopedia /* NeedsAlign */,
    LocalizedString EncyclopediaIsReportedToAdministratum /* NeedsAlign */,
    LocalizedString EncyclopediaIsNotReportedToAdministratum /* NeedsAlign */,
    LocalizedString EncyclopediaPlanetPageSystem /* NeedsAlign */,
    LocalizedString EncyclopediaPlanetPageIsColonized /* NeedsAlign */,
    LocalizedString EncyclopediaPlanetPageHaveQuest /* NeedsAlign */,
    LocalizedString EncyclopediaPlanetPageSecurity /* NeedsAlign */,
    LocalizedString EncyclopediaNeedReportToAdministratumHint /* NeedsAlign */,
    LocalizedString AstropathBriefLocation /* NeedsAlign */,
    LocalizedString AstropathBriefDate /* NeedsAlign */,
    LocalizedString AstropathBriefSender /* NeedsAlign */,
    LocalizedString AstropathBriefIsRead /* NeedsAlign */)
{
    public static EncyclopediaTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* EncyclopediaGlossaryButton */
        LocalizedString _EncyclopediaGlossaryButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipOpenEncyclopedia */
        LocalizedString _TooltipOpenEncyclopedia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AddedToEncyclopedia */
        LocalizedString _AddedToEncyclopedia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SeeInEncyclopedia */
        LocalizedString _SeeInEncyclopedia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToEncyclopedia */
        LocalizedString _ToEncyclopedia = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaIsReportedToAdministratum */
        LocalizedString _EncyclopediaIsReportedToAdministratum = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaIsNotReportedToAdministratum */
        LocalizedString _EncyclopediaIsNotReportedToAdministratum = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageSystem */
        LocalizedString _EncyclopediaPlanetPageSystem = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageIsColonized */
        LocalizedString _EncyclopediaPlanetPageIsColonized = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageHaveQuest */
        LocalizedString _EncyclopediaPlanetPageHaveQuest = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageSecurity */
        LocalizedString _EncyclopediaPlanetPageSecurity = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaNeedReportToAdministratumHint */
        LocalizedString _EncyclopediaNeedReportToAdministratumHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefLocation */
        LocalizedString _AstropathBriefLocation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefDate */
        LocalizedString _AstropathBriefDate = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefSender */
        LocalizedString _AstropathBriefSender = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefIsRead */
        LocalizedString _AstropathBriefIsRead = LocalizedString.Read(reader);
        
        return new(_EncyclopediaGlossaryButton,
            _TooltipOpenEncyclopedia,
            _AddedToEncyclopedia,
            _SeeInEncyclopedia,
            _ToEncyclopedia,
            _EncyclopediaIsReportedToAdministratum,
            _EncyclopediaIsNotReportedToAdministratum,
            _EncyclopediaPlanetPageSystem,
            _EncyclopediaPlanetPageIsColonized,
            _EncyclopediaPlanetPageHaveQuest,
            _EncyclopediaPlanetPageSecurity,
            _EncyclopediaNeedReportToAdministratumHint,
            _AstropathBriefLocation,
            _AstropathBriefDate,
            _AstropathBriefSender,
            _AstropathBriefIsRead);
    }
}

/* $UIControllerModeTexts (8 fields) */
public record class UIControllerModeTexts(
    LocalizedString GamepadConnectedHeaderText /* NeedsAlign */,
    LocalizedString GamepadDisconnectedHeaderText /* NeedsAlign */,
    LocalizedString GamepadConnectedText /* NeedsAlign */,
    LocalizedString GamepadDisconnectedText /* NeedsAlign */,
    LocalizedString ConfirmSwitchText /* NeedsAlign */,
    LocalizedString CantChangeInput /* NeedsAlign */,
    LocalizedString ChangeInputProcess /* NeedsAlign */,
    LocalizedString PressAnyKeyText /* NeedsAlign */)
{
    public static UIControllerModeTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* GamepadConnectedHeaderText */
        LocalizedString _GamepadConnectedHeaderText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadDisconnectedHeaderText */
        LocalizedString _GamepadDisconnectedHeaderText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadConnectedText */
        LocalizedString _GamepadConnectedText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadDisconnectedText */
        LocalizedString _GamepadDisconnectedText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConfirmSwitchText */
        LocalizedString _ConfirmSwitchText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantChangeInput */
        LocalizedString _CantChangeInput = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeInputProcess */
        LocalizedString _ChangeInputProcess = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PressAnyKeyText */
        LocalizedString _PressAnyKeyText = LocalizedString.Read(reader);
        
        return new(_GamepadConnectedHeaderText,
            _GamepadDisconnectedHeaderText,
            _GamepadConnectedText,
            _GamepadDisconnectedText,
            _ConfirmSwitchText,
            _CantChangeInput,
            _ChangeInputProcess,
            _PressAnyKeyText);
    }
}

/* $ProfitFactorSourcePair (2 fields) */
public record class ProfitFactorSourcePair(
    int SourceType /* None */,
    LocalizedString SourceName /* None */)
{
    public static ProfitFactorSourcePair Read(EndianBinaryReader reader)
    {
        int _SourceType = reader.ReadS32();
        LocalizedString _SourceName = LocalizedString.Read(reader);
        
        return new(_SourceType,
            _SourceName);
    }
}

/* $UIProfitFactorTexts (9 fields) */
public record class UIProfitFactorTexts(
    LocalizedString Title /* NeedsAlign */,
    LocalizedString Description /* NeedsAlign */,
    LocalizedString Initial /* NeedsAlign */,
    LocalizedString TotalValue /* NeedsAlign */,
    LocalizedString Income /* NeedsAlign */,
    LocalizedString Loss /* NeedsAlign */,
    LocalizedString AvailableToUseValue /* NeedsAlign */,
    LocalizedString NoSourcesDesc /* NeedsAlign */,
    ProfitFactorSourcePair[] Sources /* NeedsAlign */)
{
    public static UIProfitFactorTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Title */
        LocalizedString _Title = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString _Description = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Initial */
        LocalizedString _Initial = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalValue */
        LocalizedString _TotalValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Income */
        LocalizedString _Income = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Loss */
        LocalizedString _Loss = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableToUseValue */
        LocalizedString _AvailableToUseValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoSourcesDesc */
        LocalizedString _NoSourcesDesc = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Sources */
        ProfitFactorSourcePair[] _Sources = BuiltInArray<ProfitFactorSourcePair>.Read(reader);
        
        return new(_Title,
            _Description,
            _Initial,
            _TotalValue,
            _Income,
            _Loss,
            _AvailableToUseValue,
            _NoSourcesDesc,
            _Sources);
    }
}

/* $UIBugReport (19 fields) */
public record class UIBugReport(
    LocalizedString DesctiptionHeader /* NeedsAlign */,
    LocalizedString Header /* NeedsAlign */,
    LocalizedString AspectHeader /* NeedsAlign */,
    LocalizedString ContextHeader /* NeedsAlign */,
    LocalizedString SendButton /* NeedsAlign */,
    LocalizedString HintText /* NeedsAlign */,
    LocalizedString SuggestionTogle /* NeedsAlign */,
    LocalizedString NormalTogle /* NeedsAlign */,
    LocalizedString CriticalTogle /* NeedsAlign */,
    LocalizedString EmailHeader /* NeedsAlign */,
    LocalizedString ButtomDescription /* NeedsAlign */,
    LocalizedString PrivacyCheckBoxDescription /* NeedsAlign */,
    LocalizedString EmailUpdatesCheckBoxDescription /* NeedsAlign */,
    LocalizedString DiscordHeader /* NeedsAlign */,
    LocalizedString OpenBugReportText /* NeedsAlign */,
    LocalizedString EditScreenShotTitleText /* NeedsAlign */,
    LocalizedString ClearButtonText /* NeedsAlign */,
    LocalizedString SaveButtonText /* NeedsAlign */,
    LocalizedString SendindIsNotAvailable /* NeedsAlign */)
{
    public static UIBugReport Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DesctiptionHeader */
        LocalizedString _DesctiptionHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Header */
        LocalizedString _Header = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AspectHeader */
        LocalizedString _AspectHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ContextHeader */
        LocalizedString _ContextHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendButton */
        LocalizedString _SendButton = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HintText */
        LocalizedString _HintText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SuggestionTogle */
        LocalizedString _SuggestionTogle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NormalTogle */
        LocalizedString _NormalTogle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalTogle */
        LocalizedString _CriticalTogle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmailHeader */
        LocalizedString _EmailHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ButtomDescription */
        LocalizedString _ButtomDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrivacyCheckBoxDescription */
        LocalizedString _PrivacyCheckBoxDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmailUpdatesCheckBoxDescription */
        LocalizedString _EmailUpdatesCheckBoxDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DiscordHeader */
        LocalizedString _DiscordHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenBugReportText */
        LocalizedString _OpenBugReportText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EditScreenShotTitleText */
        LocalizedString _EditScreenShotTitleText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClearButtonText */
        LocalizedString _ClearButtonText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveButtonText */
        LocalizedString _SaveButtonText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendindIsNotAvailable */
        LocalizedString _SendindIsNotAvailable = LocalizedString.Read(reader);
        
        return new(_DesctiptionHeader,
            _Header,
            _AspectHeader,
            _ContextHeader,
            _SendButton,
            _HintText,
            _SuggestionTogle,
            _NormalTogle,
            _CriticalTogle,
            _EmailHeader,
            _ButtomDescription,
            _PrivacyCheckBoxDescription,
            _EmailUpdatesCheckBoxDescription,
            _DiscordHeader,
            _OpenBugReportText,
            _EditScreenShotTitleText,
            _ClearButtonText,
            _SaveButtonText,
            _SendindIsNotAvailable);
    }
}

/* $UIFeedbackPopupTexts (5 fields) */
public record class UIFeedbackPopupTexts(
    LocalizedString Survey /* NeedsAlign */,
    LocalizedString Discord /* NeedsAlign */,
    LocalizedString Twitter /* NeedsAlign */,
    LocalizedString Facebook /* NeedsAlign */,
    LocalizedString Website /* NeedsAlign */)
{
    public static UIFeedbackPopupTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Survey */
        LocalizedString _Survey = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Discord */
        LocalizedString _Discord = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Twitter */
        LocalizedString _Twitter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Facebook */
        LocalizedString _Facebook = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Website */
        LocalizedString _Website = LocalizedString.Read(reader);
        
        return new(_Survey,
            _Discord,
            _Twitter,
            _Facebook,
            _Website);
    }
}

/* $UIAbilityTexts (4 fields) */
public record class UIAbilityTexts(
    LocalizedString SingleShot /* NeedsAlign */,
    LocalizedString Burst /* NeedsAlign */,
    LocalizedString Pattern /* NeedsAlign */,
    LocalizedString Melee /* NeedsAlign */)
{
    public static UIAbilityTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* SingleShot */
        LocalizedString _SingleShot = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Burst */
        LocalizedString _Burst = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pattern */
        LocalizedString _Pattern = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Melee */
        LocalizedString _Melee = LocalizedString.Read(reader);
        
        return new(_SingleShot,
            _Burst,
            _Pattern,
            _Melee);
    }
}

/* $UICargoTexts (33 fields) */
public record class UICargoTexts(
    LocalizedString Xeno /* NeedsAlign */,
    LocalizedString Chaos /* NeedsAlign */,
    LocalizedString ShipComponents /* NeedsAlign */,
    LocalizedString RangedWeaponry /* NeedsAlign */,
    LocalizedString MeleeWeaponry /* NeedsAlign */,
    LocalizedString Tech /* NeedsAlign */,
    LocalizedString Textile /* NeedsAlign */,
    LocalizedString Armours /* NeedsAlign */,
    LocalizedString Provision /* NeedsAlign */,
    LocalizedString Fuel /* NeedsAlign */,
    LocalizedString Holy /* NeedsAlign */,
    LocalizedString EnergyBattery /* NeedsAlign */,
    LocalizedString Transuranium /* NeedsAlign */,
    LocalizedString Jewelry /* NeedsAlign */,
    LocalizedString Miscellaneous /* NeedsAlign */,
    LocalizedString People /* NeedsAlign */,
    LocalizedString Torpedoes /* NeedsAlign */,
    LocalizedString SpacePirates /* NeedsAlign */,
    LocalizedString SpaceChaos /* NeedsAlign */,
    LocalizedString SpaceAeldari /* NeedsAlign */,
    LocalizedString SpaceDrukhari /* NeedsAlign */,
    LocalizedString SpaceNecrons /* NeedsAlign */,
    LocalizedString CargoUnusableFillValue /* NeedsAlign */,
    LocalizedString CargoUnusableFill /* NeedsAlign */,
    LocalizedString CargoTotalFill /* NeedsAlign */,
    LocalizedString TooltipShowDetails /* NeedsAlign */,
    LocalizedString CargoReceived /* NeedsAlign */,
    LocalizedString CargoCreated /* NeedsAlign */,
    LocalizedString Cargo /* NeedsAlign */,
    LocalizedString CargoRewardsHeader /* NeedsAlign */,
    LocalizedString CargoList /* NeedsAlign */,
    LocalizedString EmptyCargo /* NeedsAlign */,
    LocalizedString TrashItemCargo /* NeedsAlign */)
{
    public static UICargoTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Xeno */
        LocalizedString _Xeno = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Chaos */
        LocalizedString _Chaos = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipComponents */
        LocalizedString _ShipComponents = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RangedWeaponry */
        LocalizedString _RangedWeaponry = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MeleeWeaponry */
        LocalizedString _MeleeWeaponry = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tech */
        LocalizedString _Tech = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Textile */
        LocalizedString _Textile = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armours */
        LocalizedString _Armours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Provision */
        LocalizedString _Provision = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Fuel */
        LocalizedString _Fuel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Holy */
        LocalizedString _Holy = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnergyBattery */
        LocalizedString _EnergyBattery = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Transuranium */
        LocalizedString _Transuranium = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Jewelry */
        LocalizedString _Jewelry = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Miscellaneous */
        LocalizedString _Miscellaneous = LocalizedString.Read(reader);
        reader.AlignTo(4); /* People */
        LocalizedString _People = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Torpedoes */
        LocalizedString _Torpedoes = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpacePirates */
        LocalizedString _SpacePirates = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceChaos */
        LocalizedString _SpaceChaos = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceAeldari */
        LocalizedString _SpaceAeldari = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceDrukhari */
        LocalizedString _SpaceDrukhari = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceNecrons */
        LocalizedString _SpaceNecrons = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoUnusableFillValue */
        LocalizedString _CargoUnusableFillValue = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoUnusableFill */
        LocalizedString _CargoUnusableFill = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoTotalFill */
        LocalizedString _CargoTotalFill = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipShowDetails */
        LocalizedString _TooltipShowDetails = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoReceived */
        LocalizedString _CargoReceived = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoCreated */
        LocalizedString _CargoCreated = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cargo */
        LocalizedString _Cargo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoRewardsHeader */
        LocalizedString _CargoRewardsHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoList */
        LocalizedString _CargoList = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmptyCargo */
        LocalizedString _EmptyCargo = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrashItemCargo */
        LocalizedString _TrashItemCargo = LocalizedString.Read(reader);
        
        return new(_Xeno,
            _Chaos,
            _ShipComponents,
            _RangedWeaponry,
            _MeleeWeaponry,
            _Tech,
            _Textile,
            _Armours,
            _Provision,
            _Fuel,
            _Holy,
            _EnergyBattery,
            _Transuranium,
            _Jewelry,
            _Miscellaneous,
            _People,
            _Torpedoes,
            _SpacePirates,
            _SpaceChaos,
            _SpaceAeldari,
            _SpaceDrukhari,
            _SpaceNecrons,
            _CargoUnusableFillValue,
            _CargoUnusableFill,
            _CargoTotalFill,
            _TooltipShowDetails,
            _CargoReceived,
            _CargoCreated,
            _Cargo,
            _CargoRewardsHeader,
            _CargoList,
            _EmptyCargo,
            _TrashItemCargo);
    }
}

/* $UIPropertyNameEntry (2 fields) */
public record class UIPropertyNameEntry(
    int Type /* None */,
    LocalizedString Text /* None */)
{
    public static UIPropertyNameEntry Read(EndianBinaryReader reader)
    {
        int _Type = reader.ReadS32();
        LocalizedString _Text = LocalizedString.Read(reader);
        
        return new(_Type,
            _Text);
    }
}

/* $UIPropertyNames (1 fields) */
public record class UIPropertyNames(
    UIPropertyNameEntry[] Entries /* NeedsAlign */)
{
    public static UIPropertyNames Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Entries */
        UIPropertyNameEntry[] _Entries = BuiltInArray<UIPropertyNameEntry>.Read(reader);
        
        return new(_Entries);
    }
}

/* $HUDTexts (13 fields) */
public record class HUDTexts(
    LocalizedString ShowActionBar /* NeedsAlign */,
    LocalizedString HideActionBar /* NeedsAlign */,
    LocalizedString EndTurn /* NeedsAlign */,
    LocalizedString Pointer /* NeedsAlign */,
    LocalizedString Pause /* NeedsAlign */,
    LocalizedString SwitchCameraMode /* NeedsAlign */,
    LocalizedString FocusOnCurrentUnit /* NeedsAlign */,
    LocalizedString FocusOnCurrentShip /* NeedsAlign */,
    LocalizedString HighlightObjects /* NeedsAlign */,
    LocalizedString PostsBar /* NeedsAlign */,
    LocalizedString WeaponsBar /* NeedsAlign */,
    LocalizedString EnterCombatLog /* NeedsAlign */,
    LocalizedString ChangeWeaponSet /* NeedsAlign */)
{
    public static HUDTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShowActionBar */
        LocalizedString _ShowActionBar = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideActionBar */
        LocalizedString _HideActionBar = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EndTurn */
        LocalizedString _EndTurn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pointer */
        LocalizedString _Pointer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pause */
        LocalizedString _Pause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchCameraMode */
        LocalizedString _SwitchCameraMode = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FocusOnCurrentUnit */
        LocalizedString _FocusOnCurrentUnit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FocusOnCurrentShip */
        LocalizedString _FocusOnCurrentShip = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HighlightObjects */
        LocalizedString _HighlightObjects = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostsBar */
        LocalizedString _PostsBar = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponsBar */
        LocalizedString _WeaponsBar = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnterCombatLog */
        LocalizedString _EnterCombatLog = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeWeaponSet */
        LocalizedString _ChangeWeaponSet = LocalizedString.Read(reader);
        
        return new(_ShowActionBar,
            _HideActionBar,
            _EndTurn,
            _Pointer,
            _Pause,
            _SwitchCameraMode,
            _FocusOnCurrentUnit,
            _FocusOnCurrentShip,
            _HighlightObjects,
            _PostsBar,
            _WeaponsBar,
            _EnterCombatLog,
            _ChangeWeaponSet);
    }
}

/* $UIxBoxTexts (1 fields) */
public record class UIxBoxTexts(
    LocalizedString NoFreeSpace /* NeedsAlign */)
{
    public static UIxBoxTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* NoFreeSpace */
        LocalizedString _NoFreeSpace = LocalizedString.Read(reader);
        
        return new(_NoFreeSpace);
    }
}

/* $UICombatLogTexts (28 fields) */
public record class UICombatLogTexts(
    LocalizedString MomentumChanged /* NeedsAlign */,
    LocalizedString MomentumChangeReason /* NeedsAlign */,
    LocalizedString MomentumTypeCustom /* NeedsAlign */,
    LocalizedString MomentumTypeFallDeadOrUnconscious /* NeedsAlign */,
    LocalizedString MomentumTypeKillEnemy /* NeedsAlign */,
    LocalizedString MomentumTypeStartTurn /* NeedsAlign */,
    LocalizedString MomentumTypeAbilityCost /* NeedsAlign */,
    LocalizedString MomentumTypeWound /* NeedsAlign */,
    LocalizedString MomentumTypeTrauma /* NeedsAlign */,
    LocalizedString MomentumFlatBonus /* NeedsAlign */,
    LocalizedString MomentumResolveLostBase /* NeedsAlign */,
    LocalizedString MomentumSourceResolve /* NeedsAlign */,
    LocalizedString MomentumTargetResolveGained /* NeedsAlign */,
    LocalizedString MomentumFactor /* NeedsAlign */,
    LocalizedString ScatterShotHits /* NeedsAlign */,
    LocalizedString ScatterShotCoverHits /* NeedsAlign */,
    LocalizedString ScatterShotMiss /* NeedsAlign */,
    LocalizedString ShotDirectionDeviation /* NeedsAlign */,
    LocalizedString CentralShotDirection /* NeedsAlign */,
    LocalizedString SlightDeviationShotDirection /* NeedsAlign */,
    LocalizedString StrongDeviationShotDirection /* NeedsAlign */,
    LocalizedString DeviationDescription /* NeedsAlign */,
    LocalizedString DeviationHeader /* NeedsAlign */,
    LocalizedString ChangeSize /* NeedsAlign */,
    LocalizedString ShowModePin /* NeedsAlign */,
    LocalizedString ShowModeUnpin /* NeedsAlign */,
    LocalizedString ShowUnit /* NeedsAlign */,
    LocalizedString LanceResultTitle /* NeedsAlign */)
{
    public static UICombatLogTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* MomentumChanged */
        LocalizedString _MomentumChanged = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumChangeReason */
        LocalizedString _MomentumChangeReason = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeCustom */
        LocalizedString _MomentumTypeCustom = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeFallDeadOrUnconscious */
        LocalizedString _MomentumTypeFallDeadOrUnconscious = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeKillEnemy */
        LocalizedString _MomentumTypeKillEnemy = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeStartTurn */
        LocalizedString _MomentumTypeStartTurn = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeAbilityCost */
        LocalizedString _MomentumTypeAbilityCost = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeWound */
        LocalizedString _MomentumTypeWound = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeTrauma */
        LocalizedString _MomentumTypeTrauma = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumFlatBonus */
        LocalizedString _MomentumFlatBonus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumResolveLostBase */
        LocalizedString _MomentumResolveLostBase = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumSourceResolve */
        LocalizedString _MomentumSourceResolve = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTargetResolveGained */
        LocalizedString _MomentumTargetResolveGained = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumFactor */
        LocalizedString _MomentumFactor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterShotHits */
        LocalizedString _ScatterShotHits = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterShotCoverHits */
        LocalizedString _ScatterShotCoverHits = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterShotMiss */
        LocalizedString _ScatterShotMiss = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShotDirectionDeviation */
        LocalizedString _ShotDirectionDeviation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CentralShotDirection */
        LocalizedString _CentralShotDirection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SlightDeviationShotDirection */
        LocalizedString _SlightDeviationShotDirection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StrongDeviationShotDirection */
        LocalizedString _StrongDeviationShotDirection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeviationDescription */
        LocalizedString _DeviationDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeviationHeader */
        LocalizedString _DeviationHeader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeSize */
        LocalizedString _ChangeSize = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowModePin */
        LocalizedString _ShowModePin = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowModeUnpin */
        LocalizedString _ShowModeUnpin = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowUnit */
        LocalizedString _ShowUnit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LanceResultTitle */
        LocalizedString _LanceResultTitle = LocalizedString.Read(reader);
        
        return new(_MomentumChanged,
            _MomentumChangeReason,
            _MomentumTypeCustom,
            _MomentumTypeFallDeadOrUnconscious,
            _MomentumTypeKillEnemy,
            _MomentumTypeStartTurn,
            _MomentumTypeAbilityCost,
            _MomentumTypeWound,
            _MomentumTypeTrauma,
            _MomentumFlatBonus,
            _MomentumResolveLostBase,
            _MomentumSourceResolve,
            _MomentumTargetResolveGained,
            _MomentumFactor,
            _ScatterShotHits,
            _ScatterShotCoverHits,
            _ScatterShotMiss,
            _ShotDirectionDeviation,
            _CentralShotDirection,
            _SlightDeviationShotDirection,
            _StrongDeviationShotDirection,
            _DeviationDescription,
            _DeviationHeader,
            _ChangeSize,
            _ShowModePin,
            _ShowModeUnpin,
            _ShowUnit,
            _LanceResultTitle);
    }
}

/* $UIInspect (39 fields) */
public record class UIInspect(
    LocalizedString Wounds /* NeedsAlign */,
    LocalizedString DamageDeflection /* NeedsAlign */,
    LocalizedString Armor /* NeedsAlign */,
    LocalizedString Dodge /* NeedsAlign */,
    LocalizedString MovePoints /* NeedsAlign */,
    LocalizedString CharacterStatsTitle /* NeedsAlign */,
    LocalizedString StatusEffectsTitle /* NeedsAlign */,
    LocalizedString NoStatusEffects /* NeedsAlign */,
    LocalizedString WeaponsTitle /* NeedsAlign */,
    LocalizedString AbilitiesTitle /* NeedsAlign */,
    LocalizedString ActiveAbilitiesTitle /* NeedsAlign */,
    LocalizedString PassiveAbilitiesTitle /* NeedsAlign */,
    LocalizedString NoAbilities /* NeedsAlign */,
    LocalizedString FeaturesTitle /* NeedsAlign */,
    LocalizedString NoFeatures /* NeedsAlign */,
    LocalizedString UltimateAbilitiesTitle /* NeedsAlign */,
    LocalizedString ToggleSquad /* NeedsAlign */,
    LocalizedString UnconditionalModifiers /* NeedsAlign */,
    LocalizedString ShipHP /* NeedsAlign */,
    LocalizedString Number /* NeedsAlign */,
    LocalizedString Evasion /* NeedsAlign */,
    LocalizedString EvasionDescription /* NeedsAlign */,
    LocalizedString HitChance /* NeedsAlign */,
    LocalizedString HitChanceDescription /* NeedsAlign */,
    LocalizedString CriticalChance /* NeedsAlign */,
    LocalizedString CriticalChanceDescription /* NeedsAlign */,
    LocalizedString Armours /* NeedsAlign */,
    LocalizedString ArmourFore /* NeedsAlign */,
    LocalizedString ArmourAft /* NeedsAlign */,
    LocalizedString ArmourPort /* NeedsAlign */,
    LocalizedString ArmourStarboard /* NeedsAlign */,
    LocalizedString Shields /* NeedsAlign */,
    LocalizedString ShieldFore /* NeedsAlign */,
    LocalizedString ShieldAft /* NeedsAlign */,
    LocalizedString ShieldPort /* NeedsAlign */,
    LocalizedString ShieldStarboard /* NeedsAlign */,
    LocalizedString WeaponSlotPort /* NeedsAlign */,
    LocalizedString WeaponSlotStarboard /* NeedsAlign */,
    LocalizedString WeaponSlotKeel /* NeedsAlign */)
{
    public static UIInspect Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Wounds */
        LocalizedString _Wounds = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDeflection */
        LocalizedString _DamageDeflection = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armor */
        LocalizedString _Armor = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString _Dodge = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MovePoints */
        LocalizedString _MovePoints = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterStatsTitle */
        LocalizedString _CharacterStatsTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatusEffectsTitle */
        LocalizedString _StatusEffectsTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoStatusEffects */
        LocalizedString _NoStatusEffects = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponsTitle */
        LocalizedString _WeaponsTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AbilitiesTitle */
        LocalizedString _AbilitiesTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilitiesTitle */
        LocalizedString _ActiveAbilitiesTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PassiveAbilitiesTitle */
        LocalizedString _PassiveAbilitiesTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAbilities */
        LocalizedString _NoAbilities = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturesTitle */
        LocalizedString _FeaturesTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFeatures */
        LocalizedString _NoFeatures = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilitiesTitle */
        LocalizedString _UltimateAbilitiesTitle = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToggleSquad */
        LocalizedString _ToggleSquad = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnconditionalModifiers */
        LocalizedString _UnconditionalModifiers = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipHP */
        LocalizedString _ShipHP = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Number */
        LocalizedString _Number = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Evasion */
        LocalizedString _Evasion = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EvasionDescription */
        LocalizedString _EvasionDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChance */
        LocalizedString _HitChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChanceDescription */
        LocalizedString _HitChanceDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalChance */
        LocalizedString _CriticalChance = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalChanceDescription */
        LocalizedString _CriticalChanceDescription = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armours */
        LocalizedString _Armours = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourFore */
        LocalizedString _ArmourFore = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourAft */
        LocalizedString _ArmourAft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourPort */
        LocalizedString _ArmourPort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourStarboard */
        LocalizedString _ArmourStarboard = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Shields */
        LocalizedString _Shields = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldFore */
        LocalizedString _ShieldFore = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldAft */
        LocalizedString _ShieldAft = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldPort */
        LocalizedString _ShieldPort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldStarboard */
        LocalizedString _ShieldStarboard = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSlotPort */
        LocalizedString _WeaponSlotPort = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSlotStarboard */
        LocalizedString _WeaponSlotStarboard = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSlotKeel */
        LocalizedString _WeaponSlotKeel = LocalizedString.Read(reader);
        
        return new(_Wounds,
            _DamageDeflection,
            _Armor,
            _Dodge,
            _MovePoints,
            _CharacterStatsTitle,
            _StatusEffectsTitle,
            _NoStatusEffects,
            _WeaponsTitle,
            _AbilitiesTitle,
            _ActiveAbilitiesTitle,
            _PassiveAbilitiesTitle,
            _NoAbilities,
            _FeaturesTitle,
            _NoFeatures,
            _UltimateAbilitiesTitle,
            _ToggleSquad,
            _UnconditionalModifiers,
            _ShipHP,
            _Number,
            _Evasion,
            _EvasionDescription,
            _HitChance,
            _HitChanceDescription,
            _CriticalChance,
            _CriticalChanceDescription,
            _Armours,
            _ArmourFore,
            _ArmourAft,
            _ArmourPort,
            _ArmourStarboard,
            _Shields,
            _ShieldFore,
            _ShieldAft,
            _ShieldPort,
            _ShieldStarboard,
            _WeaponSlotPort,
            _WeaponSlotStarboard,
            _WeaponSlotKeel);
    }
}

/* $UIInteractableSettingsReasons (6 fields) */
public record class UIInteractableSettingsReasons(
    LocalizedString CannotChangeLanguageBecause /* NeedsAlign */,
    LocalizedString CannotChangeOnlyOneSaveBecause /* NeedsAlign */,
    LocalizedString CannotChangeFrameRateLimitEnabledBecause /* NeedsAlign */,
    LocalizedString CannotChangeFrameRateLimitBecause /* NeedsAlign */,
    LocalizedString CannotChangeFsrSharpnessBecause /* NeedsAlign */,
    LocalizedString CannotChangeAntialiasingQualityBecause /* NeedsAlign */)
{
    public static UIInteractableSettingsReasons Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* CannotChangeLanguageBecause */
        LocalizedString _CannotChangeLanguageBecause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeOnlyOneSaveBecause */
        LocalizedString _CannotChangeOnlyOneSaveBecause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeFrameRateLimitEnabledBecause */
        LocalizedString _CannotChangeFrameRateLimitEnabledBecause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeFrameRateLimitBecause */
        LocalizedString _CannotChangeFrameRateLimitBecause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeFsrSharpnessBecause */
        LocalizedString _CannotChangeFsrSharpnessBecause = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeAntialiasingQualityBecause */
        LocalizedString _CannotChangeAntialiasingQualityBecause = LocalizedString.Read(reader);
        
        return new(_CannotChangeLanguageBecause,
            _CannotChangeOnlyOneSaveBecause,
            _CannotChangeFrameRateLimitEnabledBecause,
            _CannotChangeFrameRateLimitBecause,
            _CannotChangeFsrSharpnessBecause,
            _CannotChangeAntialiasingQualityBecause);
    }
}

/* $UIOvertips (3 fields) */
public record class UIOvertips(
    LocalizedString RequiredResourceCount /* NeedsAlign */,
    LocalizedString HasResourceCount /* NeedsAlign */,
    LocalizedString NeedUnknownKey /* NeedsAlign */)
{
    public static UIOvertips Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RequiredResourceCount */
        LocalizedString _RequiredResourceCount = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasResourceCount */
        LocalizedString _HasResourceCount = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedUnknownKey */
        LocalizedString _NeedUnknownKey = LocalizedString.Read(reader);
        
        return new(_RequiredResourceCount,
            _HasResourceCount,
            _NeedUnknownKey);
    }
}

/* $UIFormationTexts (7 fields) */
public record class UIFormationTexts(
    LocalizedString RestoreToDefault /* NeedsAlign */,
    LocalizedString MoveCharacter /* NeedsAlign */,
    LocalizedString ChangeCharacter /* NeedsAlign */,
    LocalizedString MoveCharacterFree /* NeedsAlign */,
    LocalizedString FormationLabel /* NeedsAlign */,
    LocalizedString FormationPcHint /* NeedsAlign */,
    LocalizedString UneditableFormation /* NeedsAlign */)
{
    public static UIFormationTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* RestoreToDefault */
        LocalizedString _RestoreToDefault = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoveCharacter */
        LocalizedString _MoveCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeCharacter */
        LocalizedString _ChangeCharacter = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoveCharacterFree */
        LocalizedString _MoveCharacterFree = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FormationLabel */
        LocalizedString _FormationLabel = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FormationPcHint */
        LocalizedString _FormationPcHint = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UneditableFormation */
        LocalizedString _UneditableFormation = LocalizedString.Read(reader);
        
        return new(_RestoreToDefault,
            _MoveCharacter,
            _ChangeCharacter,
            _MoveCharacterFree,
            _FormationLabel,
            _FormationPcHint,
            _UneditableFormation);
    }
}

/* $UILocalMapTexts (5 fields) */
public record class UILocalMapTexts(
    LocalizedString ShowLegend /* NeedsAlign */,
    LocalizedString HideLegend /* NeedsAlign */,
    LocalizedString CenterOnRogueTrader /* NeedsAlign */,
    LocalizedString ZoomMapPlus /* NeedsAlign */,
    LocalizedString ZoomMapMinus /* NeedsAlign */)
{
    public static UILocalMapTexts Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* ShowLegend */
        LocalizedString _ShowLegend = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideLegend */
        LocalizedString _HideLegend = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CenterOnRogueTrader */
        LocalizedString _CenterOnRogueTrader = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ZoomMapPlus */
        LocalizedString _ZoomMapPlus = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ZoomMapMinus */
        LocalizedString _ZoomMapMinus = LocalizedString.Read(reader);
        
        return new(_ShowLegend,
            _HideLegend,
            _CenterOnRogueTrader,
            _ZoomMapPlus,
            _ZoomMapMinus);
    }
}

/* $UICredits (9 fields) */
public record class UICredits(
    LocalizedString PlayRoles /* NeedsAlign */,
    LocalizedString PreviousPage /* NeedsAlign */,
    LocalizedString NextPage /* NeedsAlign */,
    LocalizedString PreviousGroup /* NeedsAlign */,
    LocalizedString NextGroup /* NeedsAlign */,
    LocalizedString TheEndText /* NeedsAlign */,
    LocalizedString SpeedUp /* NeedsAlign */,
    LocalizedString EnterSearchNameHere /* NeedsAlign */,
    LocalizedString PersonNotFound /* NeedsAlign */)
{
    public static UICredits Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* PlayRoles */
        LocalizedString _PlayRoles = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PreviousPage */
        LocalizedString _PreviousPage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextPage */
        LocalizedString _NextPage = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PreviousGroup */
        LocalizedString _PreviousGroup = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextGroup */
        LocalizedString _NextGroup = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TheEndText */
        LocalizedString _TheEndText = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpeedUp */
        LocalizedString _SpeedUp = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnterSearchNameHere */
        LocalizedString _EnterSearchNameHere = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PersonNotFound */
        LocalizedString _PersonNotFound = LocalizedString.Read(reader);
        
        return new(_PlayRoles,
            _PreviousPage,
            _NextPage,
            _PreviousGroup,
            _NextGroup,
            _TheEndText,
            _SpeedUp,
            _EnterSearchNameHere,
            _PersonNotFound);
    }
}

/* $UIEscapeMenu (11 fields) */
public record class UIEscapeMenu(
    LocalizedString EscMenuSaveGame /* NeedsAlign */,
    LocalizedString EscMenuLoadGame /* NeedsAlign */,
    LocalizedString EscMenuMultiplayer /* NeedsAlign */,
    LocalizedString EscMenuRoles /* NeedsAlign */,
    LocalizedString EscMenuFormation /* NeedsAlign */,
    LocalizedString EscMenuOptions /* NeedsAlign */,
    LocalizedString EscMenuBugReport /* NeedsAlign */,
    LocalizedString EscMenuMainMenu /* NeedsAlign */,
    LocalizedString EscMenuExit /* NeedsAlign */,
    LocalizedString EscMenuQuickSave /* NeedsAlign */,
    LocalizedString EscMenuQuickLoad /* NeedsAlign */)
{
    public static UIEscapeMenu Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* EscMenuSaveGame */
        LocalizedString _EscMenuSaveGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuLoadGame */
        LocalizedString _EscMenuLoadGame = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuMultiplayer */
        LocalizedString _EscMenuMultiplayer = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuRoles */
        LocalizedString _EscMenuRoles = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuFormation */
        LocalizedString _EscMenuFormation = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuOptions */
        LocalizedString _EscMenuOptions = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuBugReport */
        LocalizedString _EscMenuBugReport = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuMainMenu */
        LocalizedString _EscMenuMainMenu = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuExit */
        LocalizedString _EscMenuExit = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuQuickSave */
        LocalizedString _EscMenuQuickSave = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuQuickLoad */
        LocalizedString _EscMenuQuickLoad = LocalizedString.Read(reader);
        
        return new(_EscMenuSaveGame,
            _EscMenuLoadGame,
            _EscMenuMultiplayer,
            _EscMenuRoles,
            _EscMenuFormation,
            _EscMenuOptions,
            _EscMenuBugReport,
            _EscMenuMainMenu,
            _EscMenuExit,
            _EscMenuQuickSave,
            _EscMenuQuickLoad);
    }
}

/* $ScrollEvent (1 fields) */
public record class ScrollEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static ScrollEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $ObjectMouseUniformScaleSettingsView (6 fields) */
public record class ObjectMouseUniformScaleSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectMouseUniformScaleSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $SerializableGameObjectHashSet (1 fields) */
public record class SerializableGameObjectHashSet(
    PPtr<GameObject>[] _serializedList /* NeedsAlign */)
{
    public static SerializableGameObjectHashSet Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _serializedList */
        PPtr<GameObject>[] __serializedList = BuiltInArray<PPtr<GameObject>>.Read(reader);
        
        return new(__serializedList);
    }
}

/* $ObjectCollectionMaskView (7 fields) */
public record class ObjectCollectionMaskView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<ObjectCollectionMaskViewData> _viewData /* NeedsAlign */)
{
    public static ObjectCollectionMaskView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<ObjectCollectionMaskViewData> __viewData = PPtr<ObjectCollectionMaskViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $ControllerTemplateElementIdentifier_Editor (10 fields) */
public record class ControllerTemplateElementIdentifier_Editor(
    int _id /* None */,
    AsciiString _name /* None */,
    AsciiString _positiveName /* NeedsAlign */,
    AsciiString _negativeName /* NeedsAlign */,
    int _elementType /* NeedsAlign */,
    AsciiString _scriptingName /* None */,
    AsciiString _alternateScriptingName /* NeedsAlign */,
    byte _excludeFromExport /* NeedsAlign */,
    byte _useEditorElementTypeOverride /* NeedsAlign */,
    int _editorElementTypeOverride /* NeedsAlign */)
{
    public static ControllerTemplateElementIdentifier_Editor Read(EndianBinaryReader reader)
    {
        int __id = reader.ReadS32();
        AsciiString __name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _positiveName */
        AsciiString __positiveName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _negativeName */
        AsciiString __negativeName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _elementType */
        int __elementType = reader.ReadS32();
        AsciiString __scriptingName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _alternateScriptingName */
        AsciiString __alternateScriptingName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _excludeFromExport */
        byte __excludeFromExport = reader.ReadU8();
        reader.AlignTo(4); /* _useEditorElementTypeOverride */
        byte __useEditorElementTypeOverride = reader.ReadU8();
        reader.AlignTo(4); /* _editorElementTypeOverride */
        int __editorElementTypeOverride = reader.ReadS32();
        
        return new(__id,
            __name,
            __positiveName,
            __negativeName,
            __elementType,
            __scriptingName,
            __alternateScriptingName,
            __excludeFromExport,
            __useEditorElementTypeOverride,
            __editorElementTypeOverride);
    }
}

/* $SpecialElementEntry (2 fields) */
public record class SpecialElementEntry(
    int elementIdentifierId /* None */,
    AsciiString data /* None */)
{
    public static SpecialElementEntry Read(EndianBinaryReader reader)
    {
        int _elementIdentifierId = reader.ReadS32();
        AsciiString _data = BuiltInString.Read(reader);
        
        return new(_elementIdentifierId,
            _data);
    }
}

/* $EffectSettings (5 fields) */
public readonly record struct EffectSettings(
    float FirstDelay /* None */,
    float SecondDelay /* None */,
    float FirstStay /* None */,
    float FadeInTime /* None */,
    float FadeOutTime /* None */)
{
    public static EffectSettings Read(EndianBinaryReader reader)
    {
        float _FirstDelay = reader.ReadF32();
        float _SecondDelay = reader.ReadF32();
        float _FirstStay = reader.ReadF32();
        float _FadeInTime = reader.ReadF32();
        float _FadeOutTime = reader.ReadF32();
        
        return new(_FirstDelay,
            _SecondDelay,
            _FirstStay,
            _FadeInTime,
            _FadeOutTime);
    }
}

/* $ShaderResources (1 fields) */
public record class ShaderResources(
    PPtr<Shader> BlurShader /* NeedsAlign */)
{
    public static ShaderResources Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* BlurShader */
        PPtr<Shader> _BlurShader = PPtr<Shader>.Read(reader);
        
        return new(_BlurShader);
    }
}

/* $AspectRatioPreset (3 fields) */
public record class AspectRatioPreset(
    int WidthProportion /* None */,
    int HeightProportion /* None */,
    PPtr<Transform> Anchor /* None */)
{
    public static AspectRatioPreset Read(EndianBinaryReader reader)
    {
        int _WidthProportion = reader.ReadS32();
        int _HeightProportion = reader.ReadS32();
        PPtr<Transform> _Anchor = PPtr<Transform>.Read(reader);
        
        return new(_WidthProportion,
            _HeightProportion,
            _Anchor);
    }
}

/* $RectInt (4 fields) */
public readonly record struct RectInt(
    int x /* None */,
    int y /* None */,
    int width /* None */,
    int height /* None */)
{
    public static RectInt Read(EndianBinaryReader reader)
    {
        int _x = reader.ReadS32();
        int _y = reader.ReadS32();
        int _width = reader.ReadS32();
        int _height = reader.ReadS32();
        
        return new(_x,
            _y,
            _width,
            _height);
    }
}

/* $GpuCoords (4 fields) */
public readonly record struct GpuCoords(
    int x /* None */,
    int y /* None */,
    int z /* None */,
    int w /* None */)
{
    public static GpuCoords Read(EndianBinaryReader reader)
    {
        int _x = reader.ReadS32();
        int _y = reader.ReadS32();
        int _z = reader.ReadS32();
        int _w = reader.ReadS32();
        
        return new(_x,
            _y,
            _z,
            _w);
    }
}

/* $BodyPartCoords (4 fields) */
public record class BodyPartCoords(
    long bodyPart /* None */,
    RectInt textureRectCoords /* None */,
    ColorRGBA color /* None */,
    GpuCoords gpuCoords /* None */)
{
    public static BodyPartCoords Read(EndianBinaryReader reader)
    {
        long _bodyPart = reader.ReadS64();
        RectInt _textureRectCoords = RectInt.Read(reader);
        ColorRGBA _color = ColorRGBA.Read(reader);
        GpuCoords _gpuCoords = GpuCoords.Read(reader);
        
        return new(_bodyPart,
            _textureRectCoords,
            _color,
            _gpuCoords);
    }
}

/* $ObjectPlacementPathTileConnectionSettingsView (6 fields) */
public record class ObjectPlacementPathTileConnectionSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectPlacementPathTileConnectionSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $DestructionStageToCover (2 fields) */
public readonly record struct DestructionStageToCover(
    int DestructionStage /* None */,
    int CoverType /* None */)
{
    public static DestructionStageToCover Read(EndianBinaryReader reader)
    {
        int _DestructionStage = reader.ReadS32();
        int _CoverType = reader.ReadS32();
        
        return new(_DestructionStage,
            _CoverType);
    }
}

/* $MapObjectForcedCoverSettings (2 fields) */
public record class MapObjectForcedCoverSettings(
    DestructionStageToCover[] DestructionStageToCovers /* NeedsAlign */,
    int CoverType /* None */)
{
    public static MapObjectForcedCoverSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* DestructionStageToCovers */
        DestructionStageToCover[] _DestructionStageToCovers = BuiltInArray<DestructionStageToCover>.Read(reader);
        int _CoverType = reader.ReadS32();
        
        return new(_DestructionStageToCovers,
            _CoverType);
    }
}

/* $ObjectColliderSnapSurfaceGrid (1 fields) */
public record class ObjectColliderSnapSurfaceGrid(
    PPtr<XZGrid> _grid /* NeedsAlign */)
{
    public static ObjectColliderSnapSurfaceGrid Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _grid */
        PPtr<XZGrid> __grid = PPtr<XZGrid>.Read(reader);
        
        return new(__grid);
    }
}

/* $CoordinateSystem (2 fields) */
public record class CoordinateSystem(
    Vector3f[] _localAxes /* None */,
    TransformMatrix _transformMatrix /* NeedsAlign */)
{
    public static CoordinateSystem Read(EndianBinaryReader reader)
    {
        Vector3f[] __localAxes = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _transformMatrix */
        TransformMatrix __transformMatrix = TransformMatrix.Read(reader);
        
        return new(__localAxes,
            __transformMatrix);
    }
}

/* $XZOrientedQuad3D (2 fields) */
public record class XZOrientedQuad3D(
    Vector2f _xzSize /* None */,
    CoordinateSystem _coordinateSystem /* None */)
{
    public static XZOrientedQuad3D Read(EndianBinaryReader reader)
    {
        Vector2f __xzSize = Vector2f.Read(reader);
        CoordinateSystem __coordinateSystem = CoordinateSystem.Read(reader);
        
        return new(__xzSize,
            __coordinateSystem);
    }
}

/* $SnapSurface (6 fields) */
public record class SnapSurface(
    byte _isValid /* None */,
    ObjectColliderSnapSurfaceGrid _objectBoxSnapSurfaceGrid /* NeedsAlign */,
    XZOrientedQuad3D _surfaceQuad /* None */,
    Vector3f _mouseCursorPickPoint /* NeedsAlign */,
    int _type /* None */,
    PPtr<GameObject> _surfaceObject /* None */)
{
    public static SnapSurface Read(EndianBinaryReader reader)
    {
        byte __isValid = reader.ReadU8();
        reader.AlignTo(4); /* _objectBoxSnapSurfaceGrid */
        ObjectColliderSnapSurfaceGrid __objectBoxSnapSurfaceGrid = ObjectColliderSnapSurfaceGrid.Read(reader);
        XZOrientedQuad3D __surfaceQuad = XZOrientedQuad3D.Read(reader);
        reader.AlignTo(4); /* _mouseCursorPickPoint */
        Vector3f __mouseCursorPickPoint = Vector3f.Read(reader);
        int __type = reader.ReadS32();
        PPtr<GameObject> __surfaceObject = PPtr<GameObject>.Read(reader);
        
        return new(__isValid,
            __objectBoxSnapSurfaceGrid,
            __surfaceQuad,
            __mouseCursorPickPoint,
            __type,
            __surfaceObject);
    }
}

/* $AnimationContainer (2 fields) */
public record class AnimationContainer(
    PPtr<AnimationClipWrapper> DeathAnimation /* None */,
    PPtr<AnimationClipWrapper> LyingAnimation /* None */)
{
    public static AnimationContainer Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> _DeathAnimation = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> _LyingAnimation = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(_DeathAnimation,
            _LyingAnimation);
    }
}

/* $LootEntry (3 fields) */
public record class LootEntry(
    BlueprintItemReference m_Item /* None */,
    int Count /* NeedsAlign */,
    int m_ReputationPointsToUnlock /* None */)
{
    public static LootEntry Read(EndianBinaryReader reader)
    {
        BlueprintItemReference _m_Item = BlueprintItemReference.Read(reader);
        reader.AlignTo(4); /* Count */
        int _Count = reader.ReadS32();
        int _m_ReputationPointsToUnlock = reader.ReadS32();
        
        return new(_m_Item,
            _Count,
            _m_ReputationPointsToUnlock);
    }
}

/* $DecorPaintObjectPlacementBrushCollection (2 fields) */
public record class DecorPaintObjectPlacementBrushCollection(
    PPtr<DecorPaintObjectPlacementBrush>[] _namedEntities /* NeedsAlign */,
    int _indexOfMarkedEntity /* None */)
{
    public static DecorPaintObjectPlacementBrushCollection Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _namedEntities */
        PPtr<DecorPaintObjectPlacementBrush>[] __namedEntities = BuiltInArray<PPtr<DecorPaintObjectPlacementBrush>>.Read(reader);
        int __indexOfMarkedEntity = reader.ReadS32();
        
        return new(__namedEntities,
            __indexOfMarkedEntity);
    }
}

/* $DecorPaintObjectPlacementBrushDatabaseView (7 fields) */
public record class DecorPaintObjectPlacementBrushDatabaseView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PPtr<DecorPaintObjectPlacementBrushDatabaseViewData> _viewData /* NeedsAlign */)
{
    public static DecorPaintObjectPlacementBrushDatabaseView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _viewData */
        PPtr<DecorPaintObjectPlacementBrushDatabaseViewData> __viewData = PPtr<DecorPaintObjectPlacementBrushDatabaseViewData>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __viewData);
    }
}

/* $BoolEvent (1 fields) */
public record class BoolEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static BoolEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $RectangleShapeRenderSettingsView (6 fields) */
public record class RectangleShapeRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static RectangleShapeRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $AxisRotationRandomizationSettingsView (6 fields) */
public record class AxisRotationRandomizationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static AxisRotationRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $TriggerEvent (1 fields) */
public record class TriggerEvent(
    PersistentCallGroup m_PersistentCalls /* None */)
{
    public static TriggerEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup _m_PersistentCalls = PersistentCallGroup.Read(reader);
        
        return new(_m_PersistentCalls);
    }
}

/* $SplineTrigger (7 fields) */
public record class SplineTrigger(
    AsciiString name /* None */,
    int type /* NeedsAlign */,
    byte workOnce /* None */,
    double position /* NeedsAlign */,
    byte enabled /* None */,
    ColorRGBA color /* NeedsAlign */,
    TriggerEvent onCross /* None */)
{
    public static SplineTrigger Read(EndianBinaryReader reader)
    {
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* type */
        int _type = reader.ReadS32();
        byte _workOnce = reader.ReadU8();
        reader.AlignTo(4); /* position */
        double _position = reader.ReadF64();
        byte _enabled = reader.ReadU8();
        reader.AlignTo(4); /* color */
        ColorRGBA _color = ColorRGBA.Read(reader);
        TriggerEvent _onCross = TriggerEvent.Read(reader);
        
        return new(_name,
            _type,
            _workOnce,
            _position,
            _enabled,
            _color,
            _onCross);
    }
}

/* $TriggerGroup (4 fields) */
public record class TriggerGroup(
    byte enabled /* None */,
    AsciiString name /* NeedsAlign */,
    ColorRGBA color /* NeedsAlign */,
    SplineTrigger[] triggers /* None */)
{
    public static TriggerGroup Read(EndianBinaryReader reader)
    {
        byte _enabled = reader.ReadU8();
        reader.AlignTo(4); /* name */
        AsciiString _name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* color */
        ColorRGBA _color = ColorRGBA.Read(reader);
        SplineTrigger[] _triggers = BuiltInArray<SplineTrigger>.Read(reader);
        
        return new(_enabled,
            _name,
            _color,
            _triggers);
    }
}

/* $SplinePoint (7 fields) */
public record class SplinePoint(
    int _type /* None */,
    Vector3f position /* None */,
    ColorRGBA color /* None */,
    Vector3f normal /* None */,
    float size /* None */,
    Vector3f tangent /* None */,
    Vector3f tangent2 /* None */)
{
    public static SplinePoint Read(EndianBinaryReader reader)
    {
        int __type = reader.ReadS32();
        Vector3f _position = Vector3f.Read(reader);
        ColorRGBA _color = ColorRGBA.Read(reader);
        Vector3f _normal = Vector3f.Read(reader);
        float _size = reader.ReadF32();
        Vector3f _tangent = Vector3f.Read(reader);
        Vector3f _tangent2 = Vector3f.Read(reader);
        
        return new(__type,
            _position,
            _color,
            _normal,
            _size,
            _tangent,
            _tangent2);
    }
}

/* $Spline (8 fields) */
public record class Spline(
    SplinePoint[] points /* NeedsAlign */,
    int type /* None */,
    byte linearAverageDirection /* None */,
    AnimationCurve customValueInterpolation /* NeedsAlign */,
    AnimationCurve customNormalInterpolation /* NeedsAlign */,
    int sampleRate /* NeedsAlign */,
    byte closed /* None */,
    float _knotParametrization /* NeedsAlign */)
{
    public static Spline Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* points */
        SplinePoint[] _points = BuiltInArray<SplinePoint>.Read(reader);
        int _type = reader.ReadS32();
        byte _linearAverageDirection = reader.ReadU8();
        reader.AlignTo(4); /* customValueInterpolation */
        AnimationCurve _customValueInterpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* customNormalInterpolation */
        AnimationCurve _customNormalInterpolation = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* sampleRate */
        int _sampleRate = reader.ReadS32();
        byte _closed = reader.ReadU8();
        reader.AlignTo(4); /* _knotParametrization */
        float __knotParametrization = reader.ReadF32();
        
        return new(_points,
            _type,
            _linearAverageDirection,
            _customValueInterpolation,
            _customNormalInterpolation,
            _sampleRate,
            _closed,
            __knotParametrization);
    }
}

/* $NodeLink (2 fields) */
public record class NodeLink(
    PPtr<Node> node /* None */,
    int pointIndex /* None */)
{
    public static NodeLink Read(EndianBinaryReader reader)
    {
        PPtr<Node> _node = PPtr<Node>.Read(reader);
        int _pointIndex = reader.ReadS32();
        
        return new(_node,
            _pointIndex);
    }
}

/* $PrefabFoldersToCategoryDropSettingsView (8 fields) */
public record class PrefabFoldersToCategoryDropSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */,
    PrefabTagSelectionView _tagSelectionForDroppedPrefabFolders /* NeedsAlign */,
    PPtr<PrefabTagFilter> _prefabTagFilterForTagSelection /* NeedsAlign */)
{
    public static PrefabFoldersToCategoryDropSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        reader.AlignTo(4); /* _tagSelectionForDroppedPrefabFolders */
        PrefabTagSelectionView __tagSelectionForDroppedPrefabFolders = PrefabTagSelectionView.Read(reader);
        reader.AlignTo(4); /* _prefabTagFilterForTagSelection */
        PPtr<PrefabTagFilter> __prefabTagFilterForTagSelection = PPtr<PrefabTagFilter>.Read(reader);
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox,
            __tagSelectionForDroppedPrefabFolders,
            __prefabTagFilterForTagSelection);
    }
}

/* $BlueprintLootReference (1 fields) */
public record class BlueprintLootReference(
    AsciiString guid /* None */)
{
    public static BlueprintLootReference Read(EndianBinaryReader reader)
    {
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $TriggerData (5 fields) */
public record class TriggerData(
    byte TriggerOnce /* NeedsAlign */,
    byte OnlyTriggerWhenEmpty /* NeedsAlign */,
    byte TriggerOnSpecificItem /* NeedsAlign */,
    BlueprintItemReference m_SpecificItem /* NeedsAlign */,
    ActionsReference Action /* NeedsAlign */)
{
    public static TriggerData Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* TriggerOnce */
        byte _TriggerOnce = reader.ReadU8();
        reader.AlignTo(4); /* OnlyTriggerWhenEmpty */
        byte _OnlyTriggerWhenEmpty = reader.ReadU8();
        reader.AlignTo(4); /* TriggerOnSpecificItem */
        byte _TriggerOnSpecificItem = reader.ReadU8();
        reader.AlignTo(4); /* m_SpecificItem */
        BlueprintItemReference _m_SpecificItem = BlueprintItemReference.Read(reader);
        reader.AlignTo(4); /* Action */
        ActionsReference _Action = ActionsReference.Read(reader);
        
        return new(_TriggerOnce,
            _OnlyTriggerWhenEmpty,
            _TriggerOnSpecificItem,
            _m_SpecificItem,
            _Action);
    }
}

/* $BlueprintSharedVendorTableReference (1 fields) */
public record class BlueprintSharedVendorTableReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintSharedVendorTableReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $InteractionLootSettings (31 fields) */
public record class InteractionLootSettings(
    int UIType /* NeedsAlign */,
    byte NotInCombat /* None */,
    byte ShowOvertip /* NeedsAlign */,
    byte AlwaysDisabled /* NeedsAlign */,
    byte ShowHighlight /* NeedsAlign */,
    int ProximityRadius /* NeedsAlign */,
    int Type /* None */,
    int UseAnimationState /* None */,
    BlueprintDialogReference m_Dialog /* None */,
    AsciiString InteractionSound /* NeedsAlign */,
    AsciiString InteractionDisabledSound /* NeedsAlign */,
    AsciiString InteractionStopSound /* NeedsAlign */,
    PPtr<TrapObjectView> Trap /* NeedsAlign */,
    byte DoNotNeedCollider /* None */,
    byte UnlimitedInteractionsPerRound /* NeedsAlign */,
    byte OverrideActionPointsCost /* NeedsAlign */,
    int ActionPointsCost /* NeedsAlign */,
    InteractWithToolFXData InteractWithMeltaChargeFXData /* None */,
    float OvertipVerticalCorrection /* NeedsAlign */,
    int LootContainerType /* None */,
    BlueprintLootReference[] m_LootTables /* None */,
    byte AddMapMarker /* NeedsAlign */,
    byte ShowOnMapWhenEmpty /* NeedsAlign */,
    byte DestroyWhenEmpty /* NeedsAlign */,
    PPtr<SharedStringAsset> MapMarkerName /* NeedsAlign */,
    PPtr<SharedStringAsset> Description /* None */,
    ConditionsReference ItemRestriction /* None */,
    TriggerData TakeItemTrigger /* NeedsAlign */,
    TriggerData PutItemTrigger /* NeedsAlign */,
    TriggerData CloseTrigger /* NeedsAlign */,
    BlueprintSharedVendorTableReference m_AttachedVendorTable /* NeedsAlign */)
{
    public static InteractionLootSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* UIType */
        int _UIType = reader.ReadS32();
        byte _NotInCombat = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte _ShowOvertip = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte _AlwaysDisabled = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        byte _ShowHighlight = reader.ReadU8();
        reader.AlignTo(4); /* ProximityRadius */
        int _ProximityRadius = reader.ReadS32();
        int _Type = reader.ReadS32();
        int _UseAnimationState = reader.ReadS32();
        BlueprintDialogReference _m_Dialog = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString _InteractionSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString _InteractionDisabledSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        AsciiString _InteractionStopSound = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trap */
        PPtr<TrapObjectView> _Trap = PPtr<TrapObjectView>.Read(reader);
        byte _DoNotNeedCollider = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte _UnlimitedInteractionsPerRound = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        byte _OverrideActionPointsCost = reader.ReadU8();
        reader.AlignTo(4); /* ActionPointsCost */
        int _ActionPointsCost = reader.ReadS32();
        InteractWithToolFXData _InteractWithMeltaChargeFXData = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* OvertipVerticalCorrection */
        float _OvertipVerticalCorrection = reader.ReadF32();
        int _LootContainerType = reader.ReadS32();
        BlueprintLootReference[] _m_LootTables = BuiltInArray<BlueprintLootReference>.Read(reader);
        reader.AlignTo(4); /* AddMapMarker */
        byte _AddMapMarker = reader.ReadU8();
        reader.AlignTo(4); /* ShowOnMapWhenEmpty */
        byte _ShowOnMapWhenEmpty = reader.ReadU8();
        reader.AlignTo(4); /* DestroyWhenEmpty */
        byte _DestroyWhenEmpty = reader.ReadU8();
        reader.AlignTo(4); /* MapMarkerName */
        PPtr<SharedStringAsset> _MapMarkerName = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> _Description = PPtr<SharedStringAsset>.Read(reader);
        ConditionsReference _ItemRestriction = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* TakeItemTrigger */
        TriggerData _TakeItemTrigger = TriggerData.Read(reader);
        reader.AlignTo(4); /* PutItemTrigger */
        TriggerData _PutItemTrigger = TriggerData.Read(reader);
        reader.AlignTo(4); /* CloseTrigger */
        TriggerData _CloseTrigger = TriggerData.Read(reader);
        reader.AlignTo(4); /* m_AttachedVendorTable */
        BlueprintSharedVendorTableReference _m_AttachedVendorTable = BlueprintSharedVendorTableReference.Read(reader);
        
        return new(_UIType,
            _NotInCombat,
            _ShowOvertip,
            _AlwaysDisabled,
            _ShowHighlight,
            _ProximityRadius,
            _Type,
            _UseAnimationState,
            _m_Dialog,
            _InteractionSound,
            _InteractionDisabledSound,
            _InteractionStopSound,
            _Trap,
            _DoNotNeedCollider,
            _UnlimitedInteractionsPerRound,
            _OverrideActionPointsCost,
            _ActionPointsCost,
            _InteractWithMeltaChargeFXData,
            _OvertipVerticalCorrection,
            _LootContainerType,
            _m_LootTables,
            _AddMapMarker,
            _ShowOnMapWhenEmpty,
            _DestroyWhenEmpty,
            _MapMarkerName,
            _Description,
            _ItemRestriction,
            _TakeItemTrigger,
            _PutItemTrigger,
            _CloseTrigger,
            _m_AttachedVendorTable);
    }
}

/* $EntityFilterProperty (2 fields) */
public record class EntityFilterProperty(
    byte _isActive /* None */,
    AsciiString _name /* NeedsAlign */)
{
    public static EntityFilterProperty Read(EndianBinaryReader reader)
    {
        byte __isActive = reader.ReadU8();
        reader.AlignTo(4); /* _name */
        AsciiString __name = BuiltInString.Read(reader);
        
        return new(__isActive,
            __name);
    }
}

/* $PrefabFilterView (6 fields) */
public record class PrefabFilterView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static PrefabFilterView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BlueprintQuestObjectiveReference (1 fields) */
public record class BlueprintQuestObjectiveReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintQuestObjectiveReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $RectangleObjectInteractionShape (1 fields) */
public record class RectangleObjectInteractionShape(
    PPtr<RectangleShapeRenderSettings> _renderSettings /* None */)
{
    public static RectangleObjectInteractionShape Read(EndianBinaryReader reader)
    {
        PPtr<RectangleShapeRenderSettings> __renderSettings = PPtr<RectangleShapeRenderSettings>.Read(reader);
        
        return new(__renderSettings);
    }
}

/* $ObjectSelectionShape (2 fields) */
public record class ObjectSelectionShape(
    RectangleObjectInteractionShape _rectangleShape /* None */,
    EllipseObjectInteractionShape _ellipseShape /* None */)
{
    public static ObjectSelectionShape Read(EndianBinaryReader reader)
    {
        RectangleObjectInteractionShape __rectangleShape = RectangleObjectInteractionShape.Read(reader);
        EllipseObjectInteractionShape __ellipseShape = EllipseObjectInteractionShape.Read(reader);
        
        return new(__rectangleShape,
            __ellipseShape);
    }
}

/* $Glyph (6 fields) */
public record class Glyph(
    uint m_Index /* None */,
    GlyphMetrics m_Metrics /* None */,
    GlyphRect m_GlyphRect /* None */,
    float m_Scale /* None */,
    int m_AtlasIndex /* None */,
    int m_ClassDefinitionType /* None */)
{
    public static Glyph Read(EndianBinaryReader reader)
    {
        uint _m_Index = reader.ReadU32();
        GlyphMetrics _m_Metrics = GlyphMetrics.Read(reader);
        GlyphRect _m_GlyphRect = GlyphRect.Read(reader);
        float _m_Scale = reader.ReadF32();
        int _m_AtlasIndex = reader.ReadS32();
        int _m_ClassDefinitionType = reader.ReadS32();
        
        return new(_m_Index,
            _m_Metrics,
            _m_GlyphRect,
            _m_Scale,
            _m_AtlasIndex,
            _m_ClassDefinitionType);
    }
}

/* $TMP_Character (4 fields) */
public readonly record struct TMP_Character(
    byte m_ElementType /* None */,
    uint m_Unicode /* NeedsAlign */,
    uint m_GlyphIndex /* None */,
    float m_Scale /* None */)
{
    public static TMP_Character Read(EndianBinaryReader reader)
    {
        byte _m_ElementType = reader.ReadU8();
        reader.AlignTo(4); /* m_Unicode */
        uint _m_Unicode = reader.ReadU32();
        uint _m_GlyphIndex = reader.ReadU32();
        float _m_Scale = reader.ReadF32();
        
        return new(_m_ElementType,
            _m_Unicode,
            _m_GlyphIndex,
            _m_Scale);
    }
}

/* $FaceInfo_Legacy (21 fields) */
public record class FaceInfo_Legacy(
    AsciiString Name /* None */,
    float PointSize /* NeedsAlign */,
    float Scale /* None */,
    int CharacterCount /* None */,
    float LineHeight /* None */,
    float Baseline /* None */,
    float Ascender /* None */,
    float CapHeight /* None */,
    float Descender /* None */,
    float CenterLine /* None */,
    float SuperscriptOffset /* None */,
    float SubscriptOffset /* None */,
    float SubSize /* None */,
    float Underline /* None */,
    float UnderlineThickness /* None */,
    float strikethrough /* None */,
    float strikethroughThickness /* None */,
    float TabWidth /* None */,
    float Padding /* None */,
    float AtlasWidth /* None */,
    float AtlasHeight /* None */)
{
    public static FaceInfo_Legacy Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* PointSize */
        float _PointSize = reader.ReadF32();
        float _Scale = reader.ReadF32();
        int _CharacterCount = reader.ReadS32();
        float _LineHeight = reader.ReadF32();
        float _Baseline = reader.ReadF32();
        float _Ascender = reader.ReadF32();
        float _CapHeight = reader.ReadF32();
        float _Descender = reader.ReadF32();
        float _CenterLine = reader.ReadF32();
        float _SuperscriptOffset = reader.ReadF32();
        float _SubscriptOffset = reader.ReadF32();
        float _SubSize = reader.ReadF32();
        float _Underline = reader.ReadF32();
        float _UnderlineThickness = reader.ReadF32();
        float _strikethrough = reader.ReadF32();
        float _strikethroughThickness = reader.ReadF32();
        float _TabWidth = reader.ReadF32();
        float _Padding = reader.ReadF32();
        float _AtlasWidth = reader.ReadF32();
        float _AtlasHeight = reader.ReadF32();
        
        return new(_Name,
            _PointSize,
            _Scale,
            _CharacterCount,
            _LineHeight,
            _Baseline,
            _Ascender,
            _CapHeight,
            _Descender,
            _CenterLine,
            _SuperscriptOffset,
            _SubscriptOffset,
            _SubSize,
            _Underline,
            _UnderlineThickness,
            _strikethrough,
            _strikethroughThickness,
            _TabWidth,
            _Padding,
            _AtlasWidth,
            _AtlasHeight);
    }
}

/* $TMP_Glyph (9 fields) */
public readonly record struct TMP_Glyph(
    int id /* None */,
    float x /* None */,
    float y /* None */,
    float width /* None */,
    float height /* None */,
    float xOffset /* None */,
    float yOffset /* None */,
    float xAdvance /* None */,
    float scale /* None */)
{
    public static TMP_Glyph Read(EndianBinaryReader reader)
    {
        int _id = reader.ReadS32();
        float _x = reader.ReadF32();
        float _y = reader.ReadF32();
        float _width = reader.ReadF32();
        float _height = reader.ReadF32();
        float _xOffset = reader.ReadF32();
        float _yOffset = reader.ReadF32();
        float _xAdvance = reader.ReadF32();
        float _scale = reader.ReadF32();
        
        return new(_id,
            _x,
            _y,
            _width,
            _height,
            _xOffset,
            _yOffset,
            _xAdvance,
            _scale);
    }
}

/* $GlyphValueRecord_Legacy (4 fields) */
public readonly record struct GlyphValueRecord_Legacy(
    float xPlacement /* None */,
    float yPlacement /* None */,
    float xAdvance /* None */,
    float yAdvance /* None */)
{
    public static GlyphValueRecord_Legacy Read(EndianBinaryReader reader)
    {
        float _xPlacement = reader.ReadF32();
        float _yPlacement = reader.ReadF32();
        float _xAdvance = reader.ReadF32();
        float _yAdvance = reader.ReadF32();
        
        return new(_xPlacement,
            _yPlacement,
            _xAdvance,
            _yAdvance);
    }
}

/* $KerningPair (6 fields) */
public record class KerningPair(
    uint m_FirstGlyph /* None */,
    GlyphValueRecord_Legacy m_FirstGlyphAdjustments /* None */,
    uint m_SecondGlyph /* None */,
    GlyphValueRecord_Legacy m_SecondGlyphAdjustments /* None */,
    float xOffset /* None */,
    byte m_IgnoreSpacingAdjustments /* None */)
{
    public static KerningPair Read(EndianBinaryReader reader)
    {
        uint _m_FirstGlyph = reader.ReadU32();
        GlyphValueRecord_Legacy _m_FirstGlyphAdjustments = GlyphValueRecord_Legacy.Read(reader);
        uint _m_SecondGlyph = reader.ReadU32();
        GlyphValueRecord_Legacy _m_SecondGlyphAdjustments = GlyphValueRecord_Legacy.Read(reader);
        float _xOffset = reader.ReadF32();
        byte _m_IgnoreSpacingAdjustments = reader.ReadU8();
        
        return new(_m_FirstGlyph,
            _m_FirstGlyphAdjustments,
            _m_SecondGlyph,
            _m_SecondGlyphAdjustments,
            _xOffset,
            _m_IgnoreSpacingAdjustments);
    }
}

/* $KerningTable (1 fields) */
public record class KerningTable(
    KerningPair[] kerningPairs /* None */)
{
    public static KerningTable Read(EndianBinaryReader reader)
    {
        KerningPair[] _kerningPairs = BuiltInArray<KerningPair>.Read(reader);
        
        return new(_kerningPairs);
    }
}

/* $TMP_GlyphValueRecord (4 fields) */
public readonly record struct TMP_GlyphValueRecord(
    float m_XPlacement /* None */,
    float m_YPlacement /* None */,
    float m_XAdvance /* None */,
    float m_YAdvance /* None */)
{
    public static TMP_GlyphValueRecord Read(EndianBinaryReader reader)
    {
        float _m_XPlacement = reader.ReadF32();
        float _m_YPlacement = reader.ReadF32();
        float _m_XAdvance = reader.ReadF32();
        float _m_YAdvance = reader.ReadF32();
        
        return new(_m_XPlacement,
            _m_YPlacement,
            _m_XAdvance,
            _m_YAdvance);
    }
}

/* $TMP_GlyphAdjustmentRecord (2 fields) */
public record class TMP_GlyphAdjustmentRecord(
    uint m_GlyphIndex /* None */,
    TMP_GlyphValueRecord m_GlyphValueRecord /* None */)
{
    public static TMP_GlyphAdjustmentRecord Read(EndianBinaryReader reader)
    {
        uint _m_GlyphIndex = reader.ReadU32();
        TMP_GlyphValueRecord _m_GlyphValueRecord = TMP_GlyphValueRecord.Read(reader);
        
        return new(_m_GlyphIndex,
            _m_GlyphValueRecord);
    }
}

/* $TMP_GlyphPairAdjustmentRecord (3 fields) */
public record class TMP_GlyphPairAdjustmentRecord(
    TMP_GlyphAdjustmentRecord m_FirstAdjustmentRecord /* None */,
    TMP_GlyphAdjustmentRecord m_SecondAdjustmentRecord /* None */,
    int m_FeatureLookupFlags /* None */)
{
    public static TMP_GlyphPairAdjustmentRecord Read(EndianBinaryReader reader)
    {
        TMP_GlyphAdjustmentRecord _m_FirstAdjustmentRecord = TMP_GlyphAdjustmentRecord.Read(reader);
        TMP_GlyphAdjustmentRecord _m_SecondAdjustmentRecord = TMP_GlyphAdjustmentRecord.Read(reader);
        int _m_FeatureLookupFlags = reader.ReadS32();
        
        return new(_m_FirstAdjustmentRecord,
            _m_SecondAdjustmentRecord,
            _m_FeatureLookupFlags);
    }
}

/* $TMP_FontFeatureTable (1 fields) */
public record class TMP_FontFeatureTable(
    TMP_GlyphPairAdjustmentRecord[] m_GlyphPairAdjustmentRecords /* NeedsAlign */)
{
    public static TMP_FontFeatureTable Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_GlyphPairAdjustmentRecords */
        TMP_GlyphPairAdjustmentRecord[] _m_GlyphPairAdjustmentRecords = BuiltInArray<TMP_GlyphPairAdjustmentRecord>.Read(reader);
        
        return new(_m_GlyphPairAdjustmentRecords);
    }
}

/* $FontAssetCreationSettings (16 fields) */
public record class FontAssetCreationSettings(
    AsciiString sourceFontFileName /* None */,
    AsciiString sourceFontFileGUID /* NeedsAlign */,
    int pointSizeSamplingMode /* NeedsAlign */,
    int pointSize /* None */,
    int padding /* None */,
    int packingMode /* None */,
    int atlasWidth /* None */,
    int atlasHeight /* None */,
    int characterSetSelectionMode /* None */,
    AsciiString characterSequence /* None */,
    AsciiString referencedFontAssetGUID /* NeedsAlign */,
    AsciiString referencedTextAssetGUID /* NeedsAlign */,
    int fontStyle /* NeedsAlign */,
    float fontStyleModifier /* None */,
    int renderMode /* None */,
    byte includeFontFeatures /* None */)
{
    public static FontAssetCreationSettings Read(EndianBinaryReader reader)
    {
        AsciiString _sourceFontFileName = BuiltInString.Read(reader);
        reader.AlignTo(4); /* sourceFontFileGUID */
        AsciiString _sourceFontFileGUID = BuiltInString.Read(reader);
        reader.AlignTo(4); /* pointSizeSamplingMode */
        int _pointSizeSamplingMode = reader.ReadS32();
        int _pointSize = reader.ReadS32();
        int _padding = reader.ReadS32();
        int _packingMode = reader.ReadS32();
        int _atlasWidth = reader.ReadS32();
        int _atlasHeight = reader.ReadS32();
        int _characterSetSelectionMode = reader.ReadS32();
        AsciiString _characterSequence = BuiltInString.Read(reader);
        reader.AlignTo(4); /* referencedFontAssetGUID */
        AsciiString _referencedFontAssetGUID = BuiltInString.Read(reader);
        reader.AlignTo(4); /* referencedTextAssetGUID */
        AsciiString _referencedTextAssetGUID = BuiltInString.Read(reader);
        reader.AlignTo(4); /* fontStyle */
        int _fontStyle = reader.ReadS32();
        float _fontStyleModifier = reader.ReadF32();
        int _renderMode = reader.ReadS32();
        byte _includeFontFeatures = reader.ReadU8();
        
        return new(_sourceFontFileName,
            _sourceFontFileGUID,
            _pointSizeSamplingMode,
            _pointSize,
            _padding,
            _packingMode,
            _atlasWidth,
            _atlasHeight,
            _characterSetSelectionMode,
            _characterSequence,
            _referencedFontAssetGUID,
            _referencedTextAssetGUID,
            _fontStyle,
            _fontStyleModifier,
            _renderMode,
            _includeFontFeatures);
    }
}

/* $TMP_FontWeightPair (2 fields) */
public record class TMP_FontWeightPair(
    PPtr<TMP_FontAsset> regularTypeface /* None */,
    PPtr<TMP_FontAsset> italicTypeface /* None */)
{
    public static TMP_FontWeightPair Read(EndianBinaryReader reader)
    {
        PPtr<TMP_FontAsset> _regularTypeface = PPtr<TMP_FontAsset>.Read(reader);
        PPtr<TMP_FontAsset> _italicTypeface = PPtr<TMP_FontAsset>.Read(reader);
        
        return new(_regularTypeface,
            _italicTypeface);
    }
}

/* $BlueprintLogicConnectorReference (1 fields) */
public record class BlueprintLogicConnectorReference(
    AsciiString guid /* NeedsAlign */)
{
    public static BlueprintLogicConnectorReference Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* guid */
        AsciiString _guid = BuiltInString.Read(reader);
        
        return new(_guid);
    }
}

/* $PolygonMeshEditorSettings (7 fields) */
public record class PolygonMeshEditorSettings(
    BitField RaycastLayers /* None */,
    float MeshHeight /* None */,
    float Resolution /* None */,
    float RaycastHeightOffset /* None */,
    float OutlineResolution /* None */,
    float OutlineWidth /* None */,
    float OutlineHeight /* None */)
{
    public static PolygonMeshEditorSettings Read(EndianBinaryReader reader)
    {
        BitField _RaycastLayers = BitField.Read(reader);
        float _MeshHeight = reader.ReadF32();
        float _Resolution = reader.ReadF32();
        float _RaycastHeightOffset = reader.ReadF32();
        float _OutlineResolution = reader.ReadF32();
        float _OutlineWidth = reader.ReadF32();
        float _OutlineHeight = reader.ReadF32();
        
        return new(_RaycastLayers,
            _MeshHeight,
            _Resolution,
            _RaycastHeightOffset,
            _OutlineResolution,
            _OutlineWidth,
            _OutlineHeight);
    }
}

/* $BookEventCueStyle (6 fields) */
public record class BookEventCueStyle(
    int m_FontStyle /* None */,
    ColorRGBA m_FontColor /* None */,
    float m_FontSize /* None */,
    float m_CharacterSpacing /* None */,
    float m_LineSpacing /* None */,
    RectOffset m_Margins /* None */)
{
    public static BookEventCueStyle Read(EndianBinaryReader reader)
    {
        int _m_FontStyle = reader.ReadS32();
        ColorRGBA _m_FontColor = ColorRGBA.Read(reader);
        float _m_FontSize = reader.ReadF32();
        float _m_CharacterSpacing = reader.ReadF32();
        float _m_LineSpacing = reader.ReadF32();
        RectOffset _m_Margins = RectOffset.Read(reader);
        
        return new(_m_FontStyle,
            _m_FontColor,
            _m_FontSize,
            _m_CharacterSpacing,
            _m_LineSpacing,
            _m_Margins);
    }
}

/* $IndexSet (3 fields) */
public record class IndexSet(
    AsciiString Name /* None */,
    int PrimaryIndex /* NeedsAlign */,
    int SecondaryIndex /* None */)
{
    public static IndexSet Read(EndianBinaryReader reader)
    {
        AsciiString _Name = BuiltInString.Read(reader);
        reader.AlignTo(4); /* PrimaryIndex */
        int _PrimaryIndex = reader.ReadS32();
        int _SecondaryIndex = reader.ReadS32();
        
        return new(_Name,
            _PrimaryIndex,
            _SecondaryIndex);
    }
}

/* $ObjectIntersectionSettingsView (6 fields) */
public record class ObjectIntersectionSettingsView(
    byte _isVisible /* NeedsAlign */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectIntersectionSettingsView Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* _isVisible */
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $BlockObjectPlacementSettingsView (6 fields) */
public record class BlockObjectPlacementSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static BlockObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $QualityParameter (2 fields) */
public readonly record struct QualityParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static QualityParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $DeinterleavingParameter (2 fields) */
public readonly record struct DeinterleavingParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static DeinterleavingParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $ResolutionParameter (2 fields) */
public readonly record struct ResolutionParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static ResolutionParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $NoiseTypeParameter (2 fields) */
public readonly record struct NoiseTypeParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static NoiseTypeParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $BlurParameter (2 fields) */
public readonly record struct BlurParameter(
    byte m_OverrideState /* NeedsAlign */,
    int m_Value /* NeedsAlign */)
{
    public static BlurParameter Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* m_OverrideState */
        byte _m_OverrideState = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        int _m_Value = reader.ReadS32();
        
        return new(_m_OverrideState,
            _m_Value);
    }
}

/* $AxisAlignmentSettingsView (6 fields) */
public record class AxisAlignmentSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static AxisAlignmentSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $CameraContourLightSettings (2 fields) */
public record class CameraContourLightSettings(
    float Intensity /* NeedsAlign */,
    ColorRGBA LightColor /* None */)
{
    public static CameraContourLightSettings Read(EndianBinaryReader reader)
    {
        reader.AlignTo(4); /* Intensity */
        float _Intensity = reader.ReadF32();
        ColorRGBA _LightColor = ColorRGBA.Read(reader);
        
        return new(_Intensity,
            _LightColor);
    }
}

/* $LightConfig (3 fields) */
public record class LightConfig(
    float intensity /* None */,
    ColorRGBA color /* None */,
    byte enabled /* None */)
{
    public static LightConfig Read(EndianBinaryReader reader)
    {
        float _intensity = reader.ReadF32();
        ColorRGBA _color = ColorRGBA.Read(reader);
        byte _enabled = reader.ReadU8();
        
        return new(_intensity,
            _color,
            _enabled);
    }
}

/* $LocalLightSettings (5 fields) */
public record class LocalLightSettings(
    PPtr<Light> Light /* None */,
    LightConfig MorningConfig /* None */,
    LightConfig DayConfig /* NeedsAlign */,
    LightConfig EveningConfig /* NeedsAlign */,
    LightConfig NightConfig /* NeedsAlign */)
{
    public static LocalLightSettings Read(EndianBinaryReader reader)
    {
        PPtr<Light> _Light = PPtr<Light>.Read(reader);
        LightConfig _MorningConfig = LightConfig.Read(reader);
        reader.AlignTo(4); /* DayConfig */
        LightConfig _DayConfig = LightConfig.Read(reader);
        reader.AlignTo(4); /* EveningConfig */
        LightConfig _EveningConfig = LightConfig.Read(reader);
        reader.AlignTo(4); /* NightConfig */
        LightConfig _NightConfig = LightConfig.Read(reader);
        
        return new(_Light,
            _MorningConfig,
            _DayConfig,
            _EveningConfig,
            _NightConfig);
    }
}

/* $ObjectConfig (1 fields) */
public readonly record struct ObjectConfig(
    byte enabled /* None */)
{
    public static ObjectConfig Read(EndianBinaryReader reader)
    {
        byte _enabled = reader.ReadU8();
        
        return new(_enabled);
    }
}

/* $LocalObjectsSettings (5 fields) */
public record class LocalObjectsSettings(
    PPtr<GameObject> Obj /* None */,
    ObjectConfig MorningConfig /* None */,
    ObjectConfig DayConfig /* NeedsAlign */,
    ObjectConfig EveningConfig /* NeedsAlign */,
    ObjectConfig NightConfig /* NeedsAlign */)
{
    public static LocalObjectsSettings Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _Obj = PPtr<GameObject>.Read(reader);
        ObjectConfig _MorningConfig = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* DayConfig */
        ObjectConfig _DayConfig = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* EveningConfig */
        ObjectConfig _EveningConfig = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* NightConfig */
        ObjectConfig _NightConfig = ObjectConfig.Read(reader);
        
        return new(_Obj,
            _MorningConfig,
            _DayConfig,
            _EveningConfig,
            _NightConfig);
    }
}

/* $ObjectRotationRandomizationSettingsView (6 fields) */
public record class ObjectRotationRandomizationSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static ObjectRotationRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $PivotPointCollection (2 fields) */
public record class PivotPointCollection(
    int _indexOfActivePoint /* None */,
    Vector3f[] _pivotPoints /* None */)
{
    public static PivotPointCollection Read(EndianBinaryReader reader)
    {
        int __indexOfActivePoint = reader.ReadS32();
        Vector3f[] __pivotPoints = BuiltInArray<Vector3f>.Read(reader);
        
        return new(__indexOfActivePoint,
            __pivotPoints);
    }
}

/* $ProjectedBoxFacePivotPoints (3 fields) */
public record class ProjectedBoxFacePivotPoints(
    PivotPointCollection _pivotPointCollection /* None */,
    Vector3f[] _unprojectedPivotPoints /* NeedsAlign */,
    float _area /* NeedsAlign */)
{
    public static ProjectedBoxFacePivotPoints Read(EndianBinaryReader reader)
    {
        PivotPointCollection __pivotPointCollection = PivotPointCollection.Read(reader);
        reader.AlignTo(4); /* _unprojectedPivotPoints */
        Vector3f[] __unprojectedPivotPoints = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _area */
        float __area = reader.ReadF32();
        
        return new(__pivotPointCollection,
            __unprojectedPivotPoints,
            __area);
    }
}

/* $PersistentObjectPlacementGuideData (1 fields) */
public record class PersistentObjectPlacementGuideData(
    Vector3f _lastUsedWorldPosition /* None */)
{
    public static PersistentObjectPlacementGuideData Read(EndianBinaryReader reader)
    {
        Vector3f __lastUsedWorldPosition = Vector3f.Read(reader);
        
        return new(__lastUsedWorldPosition);
    }
}

/* forward decl ?PointAndClickObjectPlacement (no type info) */
public record struct PointAndClickObjectPlacement;
/* $ObjectPlacementExtensionPlane (1 fields) */
public record class ObjectPlacementExtensionPlane(
    PPtr<ObjectPlacementExtensionPlaneRenderSettings> _renderSettings /* None */)
{
    public static ObjectPlacementExtensionPlane Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementExtensionPlaneRenderSettings> __renderSettings = PPtr<ObjectPlacementExtensionPlaneRenderSettings>.Read(reader);
        
        return new(__renderSettings);
    }
}

/* $ObjectPlacementPath (4 fields) */
public record class ObjectPlacementPath(
    PPtr<ObjectPlacementPathSettings> _settings /* None */,
    PPtr<ObjectPlacementPathRenderSettings> _renderSettings /* None */,
    int _extensionPlaneBoxFace /* None */,
    ObjectPlacementExtensionPlane _extensionPlane /* None */)
{
    public static ObjectPlacementPath Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementPathSettings> __settings = PPtr<ObjectPlacementPathSettings>.Read(reader);
        PPtr<ObjectPlacementPathRenderSettings> __renderSettings = PPtr<ObjectPlacementPathRenderSettings>.Read(reader);
        int __extensionPlaneBoxFace = reader.ReadS32();
        ObjectPlacementExtensionPlane __extensionPlane = ObjectPlacementExtensionPlane.Read(reader);
        
        return new(__settings,
            __renderSettings,
            __extensionPlaneBoxFace,
            __extensionPlane);
    }
}

/* $PathObjectPlacement (1 fields) */
public record class PathObjectPlacement(
    ObjectPlacementPath _objectPlacementPath /* None */)
{
    public static PathObjectPlacement Read(EndianBinaryReader reader)
    {
        ObjectPlacementPath __objectPlacementPath = ObjectPlacementPath.Read(reader);
        
        return new(__objectPlacementPath);
    }
}

/* $ObjectPlacementBlock (4 fields) */
public record class ObjectPlacementBlock(
    PPtr<ObjectPlacementBlockSettings> _settings /* None */,
    PPtr<ObjectPlacementBlockRenderSettings> _renderSettings /* None */,
    ObjectPlacementExtensionPlane _extensionPlane /* None */,
    int _extensionPlaneBoxFace /* None */)
{
    public static ObjectPlacementBlock Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementBlockSettings> __settings = PPtr<ObjectPlacementBlockSettings>.Read(reader);
        PPtr<ObjectPlacementBlockRenderSettings> __renderSettings = PPtr<ObjectPlacementBlockRenderSettings>.Read(reader);
        ObjectPlacementExtensionPlane __extensionPlane = ObjectPlacementExtensionPlane.Read(reader);
        int __extensionPlaneBoxFace = reader.ReadS32();
        
        return new(__settings,
            __renderSettings,
            __extensionPlane,
            __extensionPlaneBoxFace);
    }
}

/* $BlockObjectPlacement (1 fields) */
public record class BlockObjectPlacement(
    ObjectPlacementBlock _objectPlacementBlock /* None */)
{
    public static BlockObjectPlacement Read(EndianBinaryReader reader)
    {
        ObjectPlacementBlock __objectPlacementBlock = ObjectPlacementBlock.Read(reader);
        
        return new(__objectPlacementBlock);
    }
}

/* $Mirror (3 fields) */
public record class Mirror(
    Vector3f _planeNormal /* None */,
    float _planeDistanceFromOrigin /* None */,
    Vector3f _worldCenter /* None */)
{
    public static Mirror Read(EndianBinaryReader reader)
    {
        Vector3f __planeNormal = Vector3f.Read(reader);
        float __planeDistanceFromOrigin = reader.ReadF32();
        Vector3f __worldCenter = Vector3f.Read(reader);
        
        return new(__planeNormal,
            __planeDistanceFromOrigin,
            __worldCenter);
    }
}

/* $InteractableMirrorView (6 fields) */
public record class InteractableMirrorView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static InteractableMirrorView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* $CoordinateSystemAxisRenderSettingsView (6 fields) */
public record class CoordinateSystemAxisRenderSettingsView(
    byte _isVisible /* None */,
    byte _toggleVisibilityBeforeRender /* NeedsAlign */,
    AsciiString _visibilityToggleLabel /* NeedsAlign */,
    int _visibilityToggleIndent /* NeedsAlign */,
    byte _indentContent /* None */,
    byte _surroundWithBox /* NeedsAlign */)
{
    public static CoordinateSystemAxisRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte __isVisible = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        byte __toggleVisibilityBeforeRender = reader.ReadU8();
        reader.AlignTo(4); /* _visibilityToggleLabel */
        AsciiString __visibilityToggleLabel = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleIndent */
        int __visibilityToggleIndent = reader.ReadS32();
        byte __indentContent = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        byte __surroundWithBox = reader.ReadU8();
        
        return new(__isVisible,
            __toggleVisibilityBeforeRender,
            __visibilityToggleLabel,
            __visibilityToggleIndent,
            __indentContent,
            __surroundWithBox);
    }
}

/* forward decl ?RuntimeAnimatorController (no type info) */
public record struct RuntimeAnimatorController;
/* forward decl ?Texture (no type info) */
public record struct Texture;
/* forward decl ?NavMeshData (no type info) */
public record struct NavMeshData;
/* forward decl ?Object (no type info) */
public record struct Object;
/* forward decl ?Renderer (no type info) */
public record struct Renderer;
/* forward decl ?AudioSource (no type info) */
public record struct AudioSource;
/* forward decl ?ArticulationBody (no type info) */
public record struct ArticulationBody;
/* forward decl ?Flare (no type info) */
public record struct Flare;
/* forward decl ?Solver2D (no type info) */
public record struct Solver2D;
/* forward decl ?VirtualListComponent (no type info) */
public record struct VirtualListComponent;
/* forward decl ?ItemsFilterSearchBaseView (no type info) */
public record struct ItemsFilterSearchBaseView;
/* forward decl ?TMP_Text (no type info) */
public record struct TMP_Text;
/* forward decl ?StatCheckLootSmallUnitCardConsoleView (no type info) */
public record struct StatCheckLootSmallUnitCardConsoleView;
/* forward decl ?ExplorationVisualElementsWrapperBaseView (no type info) */
public record struct ExplorationVisualElementsWrapperBaseView;
/* forward decl ?ExplorationScanResultsWrapperBaseView (no type info) */
public record struct ExplorationScanResultsWrapperBaseView;
/* forward decl ?ExplorationPointOfInterestListWrapperBaseView (no type info) */
public record struct ExplorationPointOfInterestListWrapperBaseView;
/* forward decl ?ExplorationPlanetDollRoomWrapperBaseView (no type info) */
public record struct ExplorationPlanetDollRoomWrapperBaseView;
/* forward decl ?GroupChangerContextPCView (no type info) */
public record struct GroupChangerContextPCView;
/* forward decl ?GameOverPCView (no type info) */
public record struct GameOverPCView;
/* forward decl ?SystemMapSpaceResourcesPCView (no type info) */
public record struct SystemMapSpaceResourcesPCView;
/* forward decl ?ColonyNotificationPCView (no type info) */
public record struct ColonyNotificationPCView;
/* forward decl ?MiningNotificationPCView (no type info) */
public record struct MiningNotificationPCView;
/* forward decl ?InventorySlotView (no type info) */
public record struct InventorySlotView;
/* forward decl ?SurfaceActionBarSlotWeaponPCView (no type info) */
public record struct SurfaceActionBarSlotWeaponPCView;
/* forward decl ?GreedyWidgetList (no type info) */
public record struct GreedyWidgetList;
/* forward decl ?ConvictionBarBaseView (no type info) */
public record struct ConvictionBarBaseView;
/* forward decl ?Octave3DEditorWindow (no type info) */
public record struct Octave3DEditorWindow;
/* forward decl ?PrefabManagementWindow (no type info) */
public record struct PrefabManagementWindow;
/* forward decl ?ObjectPlacementSettingsWindow (no type info) */
public record struct ObjectPlacementSettingsWindow;
/* forward decl ?PrefabsToCategoryDropSettingsWindow (no type info) */
public record struct PrefabsToCategoryDropSettingsWindow;
/* forward decl ?PrefabTagsWindow (no type info) */
public record struct PrefabTagsWindow;
/* forward decl ?ObjectLayersWindow (no type info) */
public record struct ObjectLayersWindow;
/* forward decl ?ObjectGrabSettingsWindow (no type info) */
public record struct ObjectGrabSettingsWindow;
/* forward decl ?Octave3DConfigSaveWindow (no type info) */
public record struct Octave3DConfigSaveWindow;
/* forward decl ?Octave3DConfigLoadWindow (no type info) */
public record struct Octave3DConfigLoadWindow;
/* forward decl ?DecorPaintBrushViewLookAndFeelWindow (no type info) */
public record struct DecorPaintBrushViewLookAndFeelWindow;
/* forward decl ?CharInfoAbilityScoresBlockBaseView (no type info) */
public record struct CharInfoAbilityScoresBlockBaseView;
/* forward decl ?NewGameMenuEntityBaseView (no type info) */
public record struct NewGameMenuEntityBaseView;
/* forward decl ?InventoryEquipSlotView (no type info) */
public record struct InventoryEquipSlotView;
/* forward decl ?OvertipUnitView (no type info) */
public record struct OvertipUnitView;
/* forward decl ?TrapObjectView (no type info) */
public record struct TrapObjectView;
/* forward decl ?CharInfoFeatureBaseView (no type info) */
public record struct CharInfoFeatureBaseView;
/* forward decl ?Graphic (no type info) */
public record struct Graphic;
/* forward decl ?UnitProgressionCommonView (no type info) */
public record struct UnitProgressionCommonView;
/* forward decl ?VerticalLayoutGroup (no type info) */
public record struct VerticalLayoutGroup;
/* forward decl ?ActionBarBaseSlotView (no type info) */
public record struct ActionBarBaseSlotView;
/* forward decl ?InitiativeTrackerView (no type info) */
public record struct InitiativeTrackerView;
/* forward decl ?TextureSelectorItemView (no type info) */
public record struct TextureSelectorItemView;
/* forward decl ?CareerPathDescriptionPCView (no type info) */
public record struct CareerPathDescriptionPCView;
/* forward decl ?CareerPathSelectionsSummaryPCView (no type info) */
public record struct CareerPathSelectionsSummaryPCView;
/* forward decl ?BaseUnitMark (no type info) */
public record struct BaseUnitMark;
/* forward decl ?ServiceWindowsMenuEntityPCView (no type info) */
public record struct ServiceWindowsMenuEntityPCView;
/* forward decl ?AbstractUnitEntityView (no type info) */
public record struct AbstractUnitEntityView;
/* forward decl ?RagdollPostEventWithSurface (no type info) */
public record struct RagdollPostEventWithSurface;
/* forward decl ?ShipStatsPCView (no type info) */
public record struct ShipStatsPCView;
/* forward decl ?ScriptableObject (no type info) */
public record struct ScriptableObject;
/* forward decl ?MarkerTrack (no type info) */
public record struct MarkerTrack;
/* forward decl ?OvertipLightweightUnitNameView (no type info) */
public record struct OvertipLightweightUnitNameView;
/* forward decl ?InputManager_Base (no type info) */
public record struct InputManager_Base;
/* forward decl ?ColonyProjectsBuiltListAddElemConsoleView (no type info) */
public record struct ColonyProjectsBuiltListAddElemConsoleView;
/* forward decl ?WeaponSetSelectorPCView (no type info) */
public record struct WeaponSetSelectorPCView;
/* forward decl ?SaveLoadMenuEntityBaseView (no type info) */
public record struct SaveLoadMenuEntityBaseView;
/* forward decl ?SpaceCombatHealthPartTextPCView (no type info) */
public record struct SpaceCombatHealthPartTextPCView;
/* forward decl ?LayoutGroup (no type info) */
public record struct LayoutGroup;
/* forward decl ?CreditsBaseView (no type info) */
public record struct CreditsBaseView;
/* forward decl ?ExplorationResourceConsoleView (no type info) */
public record struct ExplorationResourceConsoleView;
/* forward decl ?MessageBoxBaseView (no type info) */
public record struct MessageBoxBaseView;
/* forward decl ?PBDColliderBase (no type info) */
public record struct PBDColliderBase;
/* forward decl ?Editor (no type info) */
public record struct Editor;
/* forward decl ?BrushDecorPaintModeObjectPlacementSettings (no type info) */
public record struct BrushDecorPaintModeObjectPlacementSettings;
/* forward decl ?ObjectSelectionPaintModeSettings (no type info) */
public record struct ObjectSelectionPaintModeSettings;
/* forward decl ?LootObjectView (no type info) */
public record struct LootObjectView;
/* forward decl ?CharacterBakedTextures (no type info) */
public record struct CharacterBakedTextures;
/* forward decl ?IK (no type info) */
public record struct IK;
/* forward decl ?VirtualListElementViewBase`1 (no type info) */
public record struct VirtualListElementViewBase_1;
/* forward decl ?CargoDetailedZoneBaseView (no type info) */
public record struct CargoDetailedZoneBaseView;
/* forward decl ?CharInfoProfitFactorItemBaseView (no type info) */
public record struct CharInfoProfitFactorItemBaseView;
/* forward decl ?CharGenPortraitSelectorItemView (no type info) */
public record struct CharGenPortraitSelectorItemView;
/* forward decl ?CharInfoFeatureSimpleBaseView (no type info) */
public record struct CharInfoFeatureSimpleBaseView;
/* forward decl ?DialogHistoryEntity (no type info) */
public record struct DialogHistoryEntity;
/* forward decl ?TMP_ScrollbarEventHandler (no type info) */
public record struct TMP_ScrollbarEventHandler;
/* forward decl ?TMP_InputValidator (no type info) */
public record struct TMP_InputValidator;
/* forward decl ?LootSlotView (no type info) */
public record struct LootSlotView;
/* forward decl ?ContextButtonFx (no type info) */
public record struct ContextButtonFx;
/* forward decl ?SurfaceMomentumEntityView (no type info) */
public record struct SurfaceMomentumEntityView;
/* forward decl ?SurfaceActionBarSlotAbilityView (no type info) */
public record struct SurfaceActionBarSlotAbilityView;
/* forward decl ?CharGenNameBaseView (no type info) */
public record struct CharGenNameBaseView;
/* forward decl ?CharInfoLevelClassScoresPCView (no type info) */
public record struct CharInfoLevelClassScoresPCView;
/* forward decl ?CharInfoSkillsBlockCommonView (no type info) */
public record struct CharInfoSkillsBlockCommonView;
/* forward decl ?OvertipRumourConsoleView (no type info) */
public record struct OvertipRumourConsoleView;
/* forward decl ?AkGameObjPosOffsetData (no type info) */
public record struct AkGameObjPosOffsetData;
/* forward decl ?FirstLaunchEntityLanguageItemPCView (no type info) */
public record struct FirstLaunchEntityLanguageItemPCView;
/* forward decl ?CharGenShipDollRoom (no type info) */
public record struct CharGenShipDollRoom;
/* forward decl ?SnapControllerBase (no type info) */
public record struct SnapControllerBase;
/* forward decl ?SnapMapBase (no type info) */
public record struct SnapMapBase;
/* forward decl ?CombatLogItemBaseView (no type info) */
public record struct CombatLogItemBaseView;
/* forward decl ?SettingsEntitySliderConsoleView (no type info) */
public record struct SettingsEntitySliderConsoleView;
/* forward decl ?ShipRankExpCounterPCView (no type info) */
public record struct ShipRankExpCounterPCView;
/* forward decl ?ObjectUniformScaleRandomizationSettings (no type info) */
public record struct ObjectUniformScaleRandomizationSettings;
/* forward decl ?ContextMenuEntityView (no type info) */
public record struct ContextMenuEntityView;
/* forward decl ?ContextMenuSeparatorView (no type info) */
public record struct ContextMenuSeparatorView;
/* forward decl ?EncyclopediaNotificationConsoleView (no type info) */
public record struct EncyclopediaNotificationConsoleView;
/* forward decl ?MiningNotificationConsoleView (no type info) */
public record struct MiningNotificationConsoleView;
/* forward decl ?CreditsHeaderElement (no type info) */
public record struct CreditsHeaderElement;
/* forward decl ?AnimationActionBase (no type info) */
public record struct AnimationActionBase;
/* forward decl ?VolumeComponent (no type info) */
public record struct VolumeComponent;
/* forward decl ?CharGenAttributesPhasePantographItemView (no type info) */
public record struct CharGenAttributesPhasePantographItemView;
/* forward decl ?CharGenPregenPhaseRoadmapView (no type info) */
public record struct CharGenPregenPhaseRoadmapView;
/* forward decl ?CharGenAppearancePhaseRoadmapView (no type info) */
public record struct CharGenAppearancePhaseRoadmapView;
/* forward decl ?CharGenBackgroundBasePhaseRoadmapView (no type info) */
public record struct CharGenBackgroundBasePhaseRoadmapView;
/* forward decl ?CharGenCareerPhaseRoadmapView (no type info) */
public record struct CharGenCareerPhaseRoadmapView;
/* forward decl ?CharGenAttributesPhaseRoadmapView (no type info) */
public record struct CharGenAttributesPhaseRoadmapView;
/* forward decl ?CharGenSummaryPhaseRoadmapView (no type info) */
public record struct CharGenSummaryPhaseRoadmapView;
/* forward decl ?ComparativeTooltipConsoleView (no type info) */
public record struct ComparativeTooltipConsoleView;
/* forward decl ?SaveSlotBaseView (no type info) */
public record struct SaveSlotBaseView;
/* forward decl ?Collider (no type info) */
public record struct Collider;
/* forward decl ?ScanPulseController (no type info) */
public record struct ScanPulseController;
/* forward decl ?ShipInventoryStashView (no type info) */
public record struct ShipInventoryStashView;
/* forward decl ?GroupChangerCharacterBaseView (no type info) */
public record struct GroupChangerCharacterBaseView;
/* forward decl ?AxisRotationRandomizationModeSettings (no type info) */
public record struct AxisRotationRandomizationModeSettings;
/* forward decl ?LimbIK (no type info) */
public record struct LimbIK;
/* forward decl ?GrounderBipedIK (no type info) */
public record struct GrounderBipedIK;
/* forward decl ?JournalResourcesBaseView (no type info) */
public record struct JournalResourcesBaseView;
/* forward decl ?FactionVendorInformationBaseView (no type info) */
public record struct FactionVendorInformationBaseView;
/* forward decl ?PlayableAsset (no type info) */
public record struct PlayableAsset;
/* forward decl ?OwlcatModificationsWindow (no type info) */
public record struct OwlcatModificationsWindow;
/* forward decl ?TitlesBaseView (no type info) */
public record struct TitlesBaseView;
/* forward decl ?CharGenShipPhaseSelectorItemView (no type info) */
public record struct CharGenShipPhaseSelectorItemView;
/* forward decl ?PageNavigationPoint (no type info) */
public record struct PageNavigationPoint;
/* forward decl ?InsertableLootSlotsGroupView (no type info) */
public record struct InsertableLootSlotsGroupView;
/* forward decl ?InsertableLootSlotView (no type info) */
public record struct InsertableLootSlotView;
/* forward decl ?InventoryDropZonePCView (no type info) */
public record struct InventoryDropZonePCView;
/* forward decl ?CharGenCustomPortraitCreatorView (no type info) */
public record struct CharGenCustomPortraitCreatorView;
/* forward decl ?CareerPathsListsCommonView (no type info) */
public record struct CareerPathsListsCommonView;
/* forward decl ?CareerPathProgressionCommonView (no type info) */
public record struct CareerPathProgressionCommonView;
/* forward decl ?ObjectPlacementBlockPaddingSettings (no type info) */
public record struct ObjectPlacementBlockPaddingSettings;
/* forward decl ?ObjectPlacementBlockHeightAdjustmentSettings (no type info) */
public record struct ObjectPlacementBlockHeightAdjustmentSettings;
/* forward decl ?ObjectPlacementBlockSubdivisionSettings (no type info) */
public record struct ObjectPlacementBlockSubdivisionSettings;
/* forward decl ?NonConvexColliderAsset (no type info) */
public record struct NonConvexColliderAsset;
/* forward decl ?VendorLevelItemsConsoleView (no type info) */
public record struct VendorLevelItemsConsoleView;
/* forward decl ?SystemMapPlanetResourcesPCView (no type info) */
public record struct SystemMapPlanetResourcesPCView;
/* forward decl ?ColorAnimator (no type info) */
public record struct ColorAnimator;
/* forward decl ?WidgetList (no type info) */
public record struct WidgetList;
/* forward decl ?DisintegrationAnimator (no type info) */
public record struct DisintegrationAnimator;
/* forward decl ?ObjectLayerDatabase (no type info) */
public record struct ObjectLayerDatabase;
/* forward decl ?ObjectPlacementPathHeightPatternDatabase (no type info) */
public record struct ObjectPlacementPathHeightPatternDatabase;
/* forward decl ?MeshCombineSettings (no type info) */
public record struct MeshCombineSettings;
/* forward decl ?ObjectPlacementPathManualConstructionSettings (no type info) */
public record struct ObjectPlacementPathManualConstructionSettings;
/* forward decl ?AkEventCallbackData (no type info) */
public record struct AkEventCallbackData;
/* forward decl ?ReasonBuffItemView (no type info) */
public record struct ReasonBuffItemView;
/* forward decl ?TooltipBaseView (no type info) */
public record struct TooltipBaseView;
/* forward decl ?WeaponSetBaseView (no type info) */
public record struct WeaponSetBaseView;
/* forward decl ?Rigidbody2D (no type info) */
public record struct Rigidbody2D;
/* forward decl ?RespecWindowCommonView (no type info) */
public record struct RespecWindowCommonView;
/* forward decl ?ShipComponentItemSlotPCView (no type info) */
public record struct ShipComponentItemSlotPCView;
/* forward decl ?PrefabTagFilter (no type info) */
public record struct PrefabTagFilter;
/* forward decl ?SaveLoadMenuBaseView (no type info) */
public record struct SaveLoadMenuBaseView;
/* forward decl ?SaveSlotCollectionVirtualBaseView (no type info) */
public record struct SaveSlotCollectionVirtualBaseView;
/* forward decl ?SaveFullScreenshotBaseView (no type info) */
public record struct SaveFullScreenshotBaseView;
/* forward decl ?VendorReputationForItemWindowConsoleView (no type info) */
public record struct VendorReputationForItemWindowConsoleView;
/* forward decl ?ContentSizeFitterExtended (no type info) */
public record struct ContentSizeFitterExtended;
/* forward decl ?CharInfoAbilityScoresBlockConsoleView (no type info) */
public record struct CharInfoAbilityScoresBlockConsoleView;
/* forward decl ?ColonyProjectsRequirementElementPCView (no type info) */
public record struct ColonyProjectsRequirementElementPCView;
/* forward decl ?ColonyProjectsRewardElementPCView (no type info) */
public record struct ColonyProjectsRewardElementPCView;
/* forward decl ?JournalOrderResourcesPCView (no type info) */
public record struct JournalOrderResourcesPCView;
/* forward decl ?JournalOrderProfitFactorPCView (no type info) */
public record struct JournalOrderProfitFactorPCView;
/* forward decl ?ColonyProjectsBuiltListAddElemPCView (no type info) */
public record struct ColonyProjectsBuiltListAddElemPCView;
/* forward decl ?ColonyProjectsBuiltListElemPCView (no type info) */
public record struct ColonyProjectsBuiltListElemPCView;
/* forward decl ?CharInfoSkillsAndWeaponsBaseView (no type info) */
public record struct CharInfoSkillsAndWeaponsBaseView;
/* forward decl ?CharInfoAbilitiesBaseView (no type info) */
public record struct CharInfoAbilitiesBaseView;
/* forward decl ?CharInfoSummaryPCView (no type info) */
public record struct CharInfoSummaryPCView;
/* forward decl ?InterchapterBaseView (no type info) */
public record struct InterchapterBaseView;
/* forward decl ?FormationCharacterPCView (no type info) */
public record struct FormationCharacterPCView;
/* forward decl ?EncyclopediaPageBlockImagePCView (no type info) */
public record struct EncyclopediaPageBlockImagePCView;
/* forward decl ?EncyclopediaPageBlockUnitPCView (no type info) */
public record struct EncyclopediaPageBlockUnitPCView;
/* forward decl ?EncyclopediaPageBlockChildPagesPCView (no type info) */
public record struct EncyclopediaPageBlockChildPagesPCView;
/* forward decl ?BookEventAnswerView (no type info) */
public record struct BookEventAnswerView;
/* forward decl ?ColonyStatPCView (no type info) */
public record struct ColonyStatPCView;
/* forward decl ?CharInfoPagesMenuEntityPCView (no type info) */
public record struct CharInfoPagesMenuEntityPCView;
/* forward decl ?LootInventorySlotView (no type info) */
public record struct LootInventorySlotView;
/* forward decl ?CareerPathSelectionTabsCommonView (no type info) */
public record struct CareerPathSelectionTabsCommonView;
/* forward decl ?CreditsCompanyElement (no type info) */
public record struct CreditsCompanyElement;
/* forward decl ?ExplorationSpaceResourcesPCView (no type info) */
public record struct ExplorationSpaceResourcesPCView;
/* forward decl ?ContextMenuConsoleView (no type info) */
public record struct ContextMenuConsoleView;
/* forward decl ?MessageBoxConsoleView (no type info) */
public record struct MessageBoxConsoleView;
/* forward decl ?BugReportBaseView (no type info) */
public record struct BugReportBaseView;
/* forward decl ?ShadowProxy (no type info) */
public record struct ShadowProxy;
/* forward decl ?ColonyProjectPCView (no type info) */
public record struct ColonyProjectPCView;
/* forward decl ?CargoDetailedBaseView (no type info) */
public record struct CargoDetailedBaseView;
/* forward decl ?TooltipBrickNonStackEntityView (no type info) */
public record struct TooltipBrickNonStackEntityView;
/* forward decl ?BakedAnimationParameters (no type info) */
public record struct BakedAnimationParameters;
/* forward decl ?ColonyTraitPCView (no type info) */
public record struct ColonyTraitPCView;
/* forward decl ?SpriteGlitchSurfaceOvertip (no type info) */
public record struct SpriteGlitchSurfaceOvertip;
/* forward decl ?CharInfoFeatureGroupPCView (no type info) */
public record struct CharInfoFeatureGroupPCView;
/* forward decl ?SurfaceActionBarPartAbilitiesBaseView (no type info) */
public record struct SurfaceActionBarPartAbilitiesBaseView;
/* forward decl ?PlanetResourceImageView (no type info) */
public record struct PlanetResourceImageView;
/* forward decl ?PlanetPointsOfInterestView (no type info) */
public record struct PlanetPointsOfInterestView;
/* forward decl ?TooltipBrickItemIconAndNameView (no type info) */
public record struct TooltipBrickItemIconAndNameView;
/* forward decl ?TooltipBrickColonyProjectProgressView (no type info) */
public record struct TooltipBrickColonyProjectProgressView;
/* forward decl ?TooltipBrickPFIconAndNameView (no type info) */
public record struct TooltipBrickPFIconAndNameView;
/* forward decl ?TooltipBrickHintView (no type info) */
public record struct TooltipBrickHintView;
/* forward decl ?TooltipBrickOtherObjectsInfoView (no type info) */
public record struct TooltipBrickOtherObjectsInfoView;
/* forward decl ?TooltipBrickRankEntrySelectionView (no type info) */
public record struct TooltipBrickRankEntrySelectionView;
/* forward decl ?TooltipBrickIconTextView (no type info) */
public record struct TooltipBrickIconTextView;
/* forward decl ?GroupChangerBaseView (no type info) */
public record struct GroupChangerBaseView;
/* forward decl ?Component (no type info) */
public record struct Component;
/* forward decl ?EquipSelectionSlotConsoleView (no type info) */
public record struct EquipSelectionSlotConsoleView;
/* forward decl ?CharInfoStatusEffectsView (no type info) */
public record struct CharInfoStatusEffectsView;
/* forward decl ?ColonyManagementNavigationElementPCView (no type info) */
public record struct ColonyManagementNavigationElementPCView;
/* forward decl ?JournalOrderProfitFactorConsoleView (no type info) */
public record struct JournalOrderProfitFactorConsoleView;
/* forward decl ?WeatherCustomEntitySettings (no type info) */
public record struct WeatherCustomEntitySettings;
/* forward decl ?ObjectRotationGizmo (no type info) */
public record struct ObjectRotationGizmo;
/* forward decl ?ObjectScaleGizmo (no type info) */
public record struct ObjectScaleGizmo;
/* forward decl ?ObjectSelectionExtrudeGizmo (no type info) */
public record struct ObjectSelectionExtrudeGizmo;
/* forward decl ?Toggle (no type info) */
public record struct Toggle;
/* forward decl ?ItemSlotBaseView (no type info) */
public record struct ItemSlotBaseView;
/* forward decl ?VFXBinderBase (no type info) */
public record struct VFXBinderBase;
/* forward decl ?SettingsEntityDropdownGameDifficultyItemPCView (no type info) */
public record struct SettingsEntityDropdownGameDifficultyItemPCView;
/* forward decl ?VendorSlotView (no type info) */
public record struct VendorSlotView;
/* forward decl ?SurfaceCombatUnitOrderView (no type info) */
public record struct SurfaceCombatUnitOrderView;
/* forward decl ?SurfaceCombatUnitOrderVerticalView (no type info) */
public record struct SurfaceCombatUnitOrderVerticalView;
/* forward decl ?NetLobbySaveSlotCollectionBaseView (no type info) */
public record struct NetLobbySaveSlotCollectionBaseView;
/* forward decl ?NetLobbyWaitingPartConsoleView (no type info) */
public record struct NetLobbyWaitingPartConsoleView;
/* forward decl ?JournalNavigationGroupElementPCView (no type info) */
public record struct JournalNavigationGroupElementPCView;
/* forward decl ?ObjectEraserSettings (no type info) */
public record struct ObjectEraserSettings;
/* forward decl ?UISettingsEntityBase (no type info) */
public record struct UISettingsEntityBase;
/* forward decl ?SaveLoadMenuSelectorBaseView (no type info) */
public record struct SaveLoadMenuSelectorBaseView;
/* forward decl ?VendorTradePartView`3 (no type info) */
public record struct VendorTradePartView_3;
/* forward decl ?VendorReputationPartView`2 (no type info) */
public record struct VendorReputationPartView_2;
/* forward decl ?WeaponAbilitiesGroupConsoleView (no type info) */
public record struct WeaponAbilitiesGroupConsoleView;
/* forward decl ?AbilitiesGroupConsoleView (no type info) */
public record struct AbilitiesGroupConsoleView;
/* forward decl ?CharacterVisualSettingsEntityPCView (no type info) */
public record struct CharacterVisualSettingsEntityPCView;
/* forward decl ?EpilogBaseView (no type info) */
public record struct EpilogBaseView;
/* forward decl ?CharInfoClassesListPCView (no type info) */
public record struct CharInfoClassesListPCView;
/* forward decl ?InteractionSlotPartPCView (no type info) */
public record struct InteractionSlotPartPCView;
/* forward decl ?ColonyEventPCView (no type info) */
public record struct ColonyEventPCView;
/* forward decl ?ExpandableCollapseMultiButtonConsole (no type info) */
public record struct ExpandableCollapseMultiButtonConsole;
/* forward decl ?SplineUser (no type info) */
public record struct SplineUser;
/* forward decl ?PostAbilityDetailedBaseView (no type info) */
public record struct PostAbilityDetailedBaseView;
/* forward decl ?ObjectGrabSettings (no type info) */
public record struct ObjectGrabSettings;
/* forward decl ?OvertipSystemObjectPCView (no type info) */
public record struct OvertipSystemObjectPCView;
/* forward decl ?CharGenPortraitTabView (no type info) */
public record struct CharGenPortraitTabView;
/* forward decl ?PrefabCategoryScrollViewLookAndFeelWindow (no type info) */
public record struct PrefabCategoryScrollViewLookAndFeelWindow;
/* forward decl ?SpaceCombatTorpedoPanelConsoleView (no type info) */
public record struct SpaceCombatTorpedoPanelConsoleView;
/* forward decl ?ShadowProxyCombinerBox (no type info) */
public record struct ShadowProxyCombinerBox;
/* forward decl ?DecalGeometryHolder (no type info) */
public record struct DecalGeometryHolder;
/* forward decl ?CharGenBackgroundBasePhaseSelectorItemView`1 (no type info) */
public record struct CharGenBackgroundBasePhaseSelectorItemView_1;
/* forward decl ?NamedObject (no type info) */
public record struct NamedObject;
/* forward decl ?ParticleSystemForceField (no type info) */
public record struct ParticleSystemForceField;
/* forward decl ?UnitSpawnerBase (no type info) */
public record struct UnitSpawnerBase;
/* forward decl ?VectorSpline (no type info) */
public record struct VectorSpline;
/* forward decl ?LocalMapMarkerPCView (no type info) */
public record struct LocalMapMarkerPCView;
/* forward decl ?Selectable (no type info) */
public record struct Selectable;
/* forward decl ?AkAudioListener (no type info) */
public record struct AkAudioListener;
/* forward decl ?PrefabInstantiationSettings (no type info) */
public record struct PrefabInstantiationSettings;
/* forward decl ?PrefabActivationSettings (no type info) */
public record struct PrefabActivationSettings;
/* forward decl ?PrefabTagAssociations (no type info) */
public record struct PrefabTagAssociations;
/* forward decl ?SignalAsset (no type info) */
public record struct SignalAsset;
/* forward decl ?PrefabTagSelectionViewData (no type info) */
public record struct PrefabTagSelectionViewData;
/* forward decl ?TrackAsset (no type info) */
public record struct TrackAsset;
/* forward decl ?StaticRendererLink (no type info) */
public record struct StaticRendererLink;
/* forward decl ?PrefabsToPathTileConectionButtonDropSettings (no type info) */
public record struct PrefabsToPathTileConectionButtonDropSettings;
/* forward decl ?WwiseEventReference (no type info) */
public record struct WwiseEventReference;
/* forward decl ?ObjectPlacementPathTileConnectionConfiguration (no type info) */
public record struct ObjectPlacementPathTileConnectionConfiguration;
/* forward decl ?ObjectPlacementPathTileConnectionConfigurationDatabaseViewData (no type info) */
public record struct ObjectPlacementPathTileConnectionConfigurationDatabaseViewData;
/* forward decl ?PrefabTag (no type info) */
public record struct PrefabTag;
/* forward decl ?PrefabTagDatabaseViewData (no type info) */
public record struct PrefabTagDatabaseViewData;
/* forward decl ?ObjectLayerObjectMaskViewData (no type info) */
public record struct ObjectLayerObjectMaskViewData;
/* forward decl ?CharGenCareerPhaseDetailedView (no type info) */
public record struct CharGenCareerPhaseDetailedView;
/* forward decl ?CharGenAttributesPhaseDetailedView (no type info) */
public record struct CharGenAttributesPhaseDetailedView;
/* forward decl ?CharGenSummaryPhaseDetailedView (no type info) */
public record struct CharGenSummaryPhaseDetailedView;
/* forward decl ?CharGenShipPhaseDetailedView (no type info) */
public record struct CharGenShipPhaseDetailedView;
/* forward decl ?UISettingsEntityGameDifficulty (no type info) */
public record struct UISettingsEntityGameDifficulty;
/* forward decl ?UISettingsEntityDropdownCombatEncountersCapacity (no type info) */
public record struct UISettingsEntityDropdownCombatEncountersCapacity;
/* forward decl ?UISettingsEntityDropdownAutoLevelUp (no type info) */
public record struct UISettingsEntityDropdownAutoLevelUp;
/* forward decl ?UISettingDropdownHardCrowdControlDurationLimit (no type info) */
public record struct UISettingDropdownHardCrowdControlDurationLimit;
/* forward decl ?UISettingsEntityDropdownSpaceCombatDifficulty (no type info) */
public record struct UISettingsEntityDropdownSpaceCombatDifficulty;
/* forward decl ?UISettingsEntityDropdownFullScreenMode (no type info) */
public record struct UISettingsEntityDropdownFullScreenMode;
/* forward decl ?UISettingsEntityDropdownGraphicsPreset (no type info) */
public record struct UISettingsEntityDropdownGraphicsPreset;
/* forward decl ?UISettingsEntityDropdownVSyncMode (no type info) */
public record struct UISettingsEntityDropdownVSyncMode;
/* forward decl ?UISettingsEntityDropdownFsrMode (no type info) */
public record struct UISettingsEntityDropdownFsrMode;
/* forward decl ?UISettingsEntitySliderFloat (no type info) */
public record struct UISettingsEntitySliderFloat;
/* forward decl ?UISettingsEntityDropdownQuality (no type info) */
public record struct UISettingsEntityDropdownQuality;
/* forward decl ?UISettingsEntityDropdownQualityDisactivatable (no type info) */
public record struct UISettingsEntityDropdownQualityDisactivatable;
/* forward decl ?UISettingsEntityDropdownAntialiasingMode (no type info) */
public record struct UISettingsEntityDropdownAntialiasingMode;
/* forward decl ?UISettingsEntityDropdownFootprintsMode (no type info) */
public record struct UISettingsEntityDropdownFootprintsMode;
/* forward decl ?UISettingsEntityDropdownCrowdQuality (no type info) */
public record struct UISettingsEntityDropdownCrowdQuality;
/* forward decl ?UISettingsEntityGammaCorrection (no type info) */
public record struct UISettingsEntityGammaCorrection;
/* forward decl ?UISettingsEntityDropdownLocale (no type info) */
public record struct UISettingsEntityDropdownLocale;
/* forward decl ?UISettingsEntityDropdownEntitiesType (no type info) */
public record struct UISettingsEntityDropdownEntitiesType;
/* forward decl ?UISettingsEntityDropdownSpeedUpMode (no type info) */
public record struct UISettingsEntityDropdownSpeedUpMode;
/* forward decl ?UISettingsEntityDropdownMouseRightButtonFunction (no type info) */
public record struct UISettingsEntityDropdownMouseRightButtonFunction;
/* forward decl ?ObjectCollectionMaskViewData (no type info) */
public record struct ObjectCollectionMaskViewData;
/* forward decl ?DecorPaintObjectPlacementBrush (no type info) */
public record struct DecorPaintObjectPlacementBrush;
/* forward decl ?DecorPaintObjectPlacementBrushDatabaseViewData (no type info) */
public record struct DecorPaintObjectPlacementBrushDatabaseViewData;
/* forward decl ?ObjectPlacementExtensionPlaneRenderSettings (no type info) */
public record struct ObjectPlacementExtensionPlaneRenderSettings;
/* forward decl ?ObjectPlacementPathRenderSettings (no type info) */
public record struct ObjectPlacementPathRenderSettings;
