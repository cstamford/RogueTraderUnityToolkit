namespace RogueTraderUnityToolkit.UnityGenerated.Types;

using Core;
using System.Text;
using Unity;
using Engine;
using Game;

/* $StreamedResource (3 fields) */
public record class StreamedResource (
    AsciiString m_Source,
    ulong m_Offset,
    ulong m_Size) : IUnityStructure
{
    public static StreamedResource Read(EndianBinaryReader reader)
    {
        AsciiString m_Source_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Source */
        ulong m_Offset_ = reader.ReadU64();
        ulong m_Size_ = reader.ReadU64();
        
        return new(m_Source_,
            m_Offset_,
            m_Size_);
    }

    public override string ToString() => $"StreamedResource\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Source: \"{m_Source}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Offset: {m_Offset}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Size: {m_Size}");
    }
}

/* $Vector4f (4 fields) */
public readonly record struct Vector4f (
    float x,
    float y,
    float z,
    float w) : IUnityStructure
{
    public static Vector4f Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float z_ = reader.ReadF32();
        float w_ = reader.ReadF32();
        
        return new(x_,
            y_,
            z_,
            w_);
    }

    public override string ToString() => $"Vector4f\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}z: {z}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}w: {w}");
    }
}

/* $StaticBatchInfo (2 fields) */
public readonly record struct StaticBatchInfo (
    ushort firstSubMesh,
    ushort subMeshCount) : IUnityStructure
{
    public static StaticBatchInfo Read(EndianBinaryReader reader)
    {
        ushort firstSubMesh_ = reader.ReadU16();
        ushort subMeshCount_ = reader.ReadU16();
        
        return new(firstSubMesh_,
            subMeshCount_);
    }

    public override string ToString() => $"StaticBatchInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}firstSubMesh: {firstSubMesh}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}subMeshCount: {subMeshCount}");
    }
}

/* $Quaternionf (4 fields) */
public readonly record struct Quaternionf (
    float x,
    float y,
    float z,
    float w) : IUnityStructure
{
    public static Quaternionf Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float z_ = reader.ReadF32();
        float w_ = reader.ReadF32();
        
        return new(x_,
            y_,
            z_,
            w_);
    }

    public override string ToString() => $"Quaternionf\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}z: {z}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}w: {w}");
    }
}

/* $Vector3f (3 fields) */
public readonly record struct Vector3f (
    float x,
    float y,
    float z) : IUnityStructure
{
    public static Vector3f Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float z_ = reader.ReadF32();
        
        return new(x_,
            y_,
            z_);
    }

    public override string ToString() => $"Vector3f\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}z: {z}");
    }
}

/* $ResourceManager_Dependency (2 fields) */
public record class ResourceManager_Dependency (
    PPtr<Object> m_Object,
    PPtr<Object>[] m_Dependencies) : IUnityStructure
{
    public static ResourceManager_Dependency Read(EndianBinaryReader reader)
    {
        PPtr<Object> m_Object_ = PPtr<Object>.Read(reader);
        PPtr<Object>[] m_Dependencies_ = BuiltInArray<PPtr<Object>>.Read(reader);
        reader.AlignTo(4); /* m_Dependencies */
        
        return new(m_Object_,
            m_Dependencies_);
    }

    public override string ToString() => $"ResourceManager_Dependency\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Object: {m_Object}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dependencies[{m_Dependencies.Length}] = {{");
        if (m_Dependencies.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Object> _4 in m_Dependencies)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Dependencies.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AABB (2 fields) */
public record class AABB (
    Vector3f m_Center,
    Vector3f m_Extent) : IUnityStructure
{
    public static AABB Read(EndianBinaryReader reader)
    {
        Vector3f m_Center_ = Vector3f.Read(reader);
        Vector3f m_Extent_ = Vector3f.Read(reader);
        
        return new(m_Center_,
            m_Extent_);
    }

    public override string ToString() => $"AABB\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Center: {{ x: {m_Center.x}, y: {m_Center.y}, z: {m_Center.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Extent: {{ x: {m_Extent.x}, y: {m_Extent.y}, z: {m_Extent.z} }}\n");
    }
}

/* $AnimationClipOverride (2 fields) */
public record class AnimationClipOverride (
    PPtr<AnimationClip> m_OriginalClip,
    PPtr<AnimationClip> m_OverrideClip) : IUnityStructure
{
    public static AnimationClipOverride Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClip> m_OriginalClip_ = PPtr<AnimationClip>.Read(reader);
        PPtr<AnimationClip> m_OverrideClip_ = PPtr<AnimationClip>.Read(reader);
        
        return new(m_OriginalClip_,
            m_OverrideClip_);
    }

    public override string ToString() => $"AnimationClipOverride\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OriginalClip: {m_OriginalClip}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideClip: {m_OverrideClip}");
    }
}

/* $LOD (3 fields) */
public record class LOD (
    float screenRelativeHeight,
    float fadeTransitionWidth,
    LODRenderer[] renderers) : IUnityStructure
{
    public static LOD Read(EndianBinaryReader reader)
    {
        float screenRelativeHeight_ = reader.ReadF32();
        float fadeTransitionWidth_ = reader.ReadF32();
        LODRenderer[] renderers_ = BuiltInArray<LODRenderer>.Read(reader);
        reader.AlignTo(4); /* renderers */
        
        return new(screenRelativeHeight_,
            fadeTransitionWidth_,
            renderers_);
    }

    public override string ToString() => $"LOD\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}screenRelativeHeight: {screenRelativeHeight}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fadeTransitionWidth: {fadeTransitionWidth}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}renderers[{renderers.Length}] = {{");
        if (renderers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LODRenderer _4 in renderers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (renderers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $LODRenderer (1 fields) */
public record class LODRenderer (
    PPtr<Renderer> renderer) : IUnityStructure
{
    public static LODRenderer Read(EndianBinaryReader reader)
    {
        PPtr<Renderer> renderer_ = PPtr<Renderer>.Read(reader);
        
        return new(renderer_);
    }

    public override string ToString() => $"LODRenderer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}renderer: {renderer}");
    }
}

/* $CharacterInfo (5 fields) */
public record class CharacterInfo (
    uint index,
    Rectf uv,
    Rectf vert,
    float advance,
    bool flipped) : IUnityStructure
{
    public static CharacterInfo Read(EndianBinaryReader reader)
    {
        uint index_ = reader.ReadU32();
        Rectf uv_ = Rectf.Read(reader);
        Rectf vert_ = Rectf.Read(reader);
        float advance_ = reader.ReadF32();
        bool flipped_ = reader.ReadBool();
        reader.AlignTo(4); /* flipped */
        
        return new(index_,
            uv_,
            vert_,
            advance_,
            flipped_);
    }

    public override string ToString() => $"CharacterInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index: {index}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uv: {{ x: {uv.x}, y: {uv.y}, width: {uv.width}, height: {uv.height} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vert: {{ x: {vert.x}, y: {vert.y}, width: {vert.width}, height: {vert.height} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}advance: {advance}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}flipped: {flipped}");
    }
}

/* $Rectf (4 fields) */
public readonly record struct Rectf (
    float x,
    float y,
    float width,
    float height) : IUnityStructure
{
    public static Rectf Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float width_ = reader.ReadF32();
        float height_ = reader.ReadF32();
        
        return new(x_,
            y_,
            width_,
            height_);
    }

    public override string ToString() => $"Rectf\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}width: {width}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}height: {height}");
    }
}

/* $pair (2 fields) */
public readonly record struct pair (
    ushort first,
    ushort second) : IUnityStructure
{
    public static pair Read(EndianBinaryReader reader)
    {
        ushort first_ = reader.ReadU16();
        ushort second_ = reader.ReadU16();
        
        return new(first_,
            second_);
    }

    public override string ToString() => $"pair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}first: {first}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}second: {second}");
    }
}

/* $BitField (1 fields) */
public readonly record struct BitField (
    uint m_Bits) : IUnityStructure
{
    public static BitField Read(EndianBinaryReader reader)
    {
        uint m_Bits_ = reader.ReadU32();
        
        return new(m_Bits_);
    }

    public override string ToString() => $"BitField\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Bits: {m_Bits}");
    }
}

/* $SubMesh (7 fields) */
public record class SubMesh (
    uint firstByte,
    uint indexCount,
    int topology,
    uint baseVertex,
    uint firstVertex,
    uint vertexCount,
    AABB localAABB) : IUnityStructure
{
    public static SubMesh Read(EndianBinaryReader reader)
    {
        uint firstByte_ = reader.ReadU32();
        uint indexCount_ = reader.ReadU32();
        int topology_ = reader.ReadS32();
        uint baseVertex_ = reader.ReadU32();
        uint firstVertex_ = reader.ReadU32();
        uint vertexCount_ = reader.ReadU32();
        AABB localAABB_ = AABB.Read(reader);
        
        return new(firstByte_,
            indexCount_,
            topology_,
            baseVertex_,
            firstVertex_,
            vertexCount_,
            localAABB_);
    }

    public override string ToString() => $"SubMesh\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}firstByte: {firstByte}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}indexCount: {indexCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}topology: {topology}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}baseVertex: {baseVertex}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}firstVertex: {firstVertex}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}vertexCount: {vertexCount}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}localAABB: {{ \n{localAABB.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlendShapeData (4 fields) */
public record class BlendShapeData (
    BlendShapeVertex[] vertices,
    MeshBlendShape[] shapes,
    MeshBlendShapeChannel[] channels,
    float[] fullWeights) : IUnityStructure
{
    public static BlendShapeData Read(EndianBinaryReader reader)
    {
        BlendShapeVertex[] vertices_ = BuiltInArray<BlendShapeVertex>.Read(reader);
        reader.AlignTo(4); /* vertices */
        MeshBlendShape[] shapes_ = BuiltInArray<MeshBlendShape>.Read(reader);
        reader.AlignTo(4); /* shapes */
        MeshBlendShapeChannel[] channels_ = BuiltInArray<MeshBlendShapeChannel>.Read(reader);
        reader.AlignTo(4); /* channels */
        float[] fullWeights_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* fullWeights */
        
        return new(vertices_,
            shapes_,
            channels_,
            fullWeights_);
    }

    public override string ToString() => $"BlendShapeData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vertices[{vertices.Length}] = {{");
        if (vertices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BlendShapeVertex _4 in vertices)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (vertices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}shapes[{shapes.Length}] = {{");
        if (shapes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MeshBlendShape _4 in shapes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ firstVertex: {_4.firstVertex}, vertexCount: {_4.vertexCount}, hasNormals: {_4.hasNormals}, hasTangents: {_4.hasTangents} }}\n");
            ++_4i;
        }
        if (shapes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}channels[{channels.Length}] = {{");
        if (channels.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MeshBlendShapeChannel _4 in channels)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (channels.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}fullWeights[{fullWeights.Length}] = {{");
        if (fullWeights.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in fullWeights)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (fullWeights.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $BlendShapeVertex (4 fields) */
public record class BlendShapeVertex (
    Vector3f vertex,
    Vector3f normal,
    Vector3f tangent,
    uint index) : IUnityStructure
{
    public static BlendShapeVertex Read(EndianBinaryReader reader)
    {
        Vector3f vertex_ = Vector3f.Read(reader);
        Vector3f normal_ = Vector3f.Read(reader);
        Vector3f tangent_ = Vector3f.Read(reader);
        uint index_ = reader.ReadU32();
        
        return new(vertex_,
            normal_,
            tangent_,
            index_);
    }

    public override string ToString() => $"BlendShapeVertex\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vertex: {{ x: {vertex.x}, y: {vertex.y}, z: {vertex.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}normal: {{ x: {normal.x}, y: {normal.y}, z: {normal.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}tangent: {{ x: {tangent.x}, y: {tangent.y}, z: {tangent.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index: {index}");
    }
}

/* $MeshBlendShape (4 fields) */
public readonly record struct MeshBlendShape (
    uint firstVertex,
    uint vertexCount,
    bool hasNormals,
    bool hasTangents) : IUnityStructure
{
    public static MeshBlendShape Read(EndianBinaryReader reader)
    {
        uint firstVertex_ = reader.ReadU32();
        uint vertexCount_ = reader.ReadU32();
        bool hasNormals_ = reader.ReadBool();
        bool hasTangents_ = reader.ReadBool();
        reader.AlignTo(4); /* hasTangents */
        
        return new(firstVertex_,
            vertexCount_,
            hasNormals_,
            hasTangents_);
    }

    public override string ToString() => $"MeshBlendShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}firstVertex: {firstVertex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}vertexCount: {vertexCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hasNormals: {hasNormals}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hasTangents: {hasTangents}");
    }
}

/* $MeshBlendShapeChannel (4 fields) */
public record class MeshBlendShapeChannel (
    AsciiString name,
    uint nameHash,
    int frameIndex,
    int frameCount) : IUnityStructure
{
    public static MeshBlendShapeChannel Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        uint nameHash_ = reader.ReadU32();
        int frameIndex_ = reader.ReadS32();
        int frameCount_ = reader.ReadS32();
        
        return new(name_,
            nameHash_,
            frameIndex_,
            frameCount_);
    }

    public override string ToString() => $"MeshBlendShapeChannel\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}nameHash: {nameHash}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}frameIndex: {frameIndex}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}frameCount: {frameCount}");
    }
}

/* $Matrix4x4f (16 fields) */
public readonly record struct Matrix4x4f (
    float e00,
    float e01,
    float e02,
    float e03,
    float e10,
    float e11,
    float e12,
    float e13,
    float e20,
    float e21,
    float e22,
    float e23,
    float e30,
    float e31,
    float e32,
    float e33) : IUnityStructure
{
    public static Matrix4x4f Read(EndianBinaryReader reader)
    {
        float e00_ = reader.ReadF32();
        float e01_ = reader.ReadF32();
        float e02_ = reader.ReadF32();
        float e03_ = reader.ReadF32();
        float e10_ = reader.ReadF32();
        float e11_ = reader.ReadF32();
        float e12_ = reader.ReadF32();
        float e13_ = reader.ReadF32();
        float e20_ = reader.ReadF32();
        float e21_ = reader.ReadF32();
        float e22_ = reader.ReadF32();
        float e23_ = reader.ReadF32();
        float e30_ = reader.ReadF32();
        float e31_ = reader.ReadF32();
        float e32_ = reader.ReadF32();
        float e33_ = reader.ReadF32();
        
        return new(e00_,
            e01_,
            e02_,
            e03_,
            e10_,
            e11_,
            e12_,
            e13_,
            e20_,
            e21_,
            e22_,
            e23_,
            e30_,
            e31_,
            e32_,
            e33_);
    }

    public override string ToString() => $"Matrix4x4f\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e00: {e00}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e01: {e01}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e02: {e02}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e03: {e03}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e10: {e10}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e11: {e11}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e12: {e12}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e13: {e13}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e20: {e20}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e21: {e21}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e22: {e22}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e23: {e23}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e30: {e30}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e31: {e31}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e32: {e32}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e33: {e33}");
    }
}

/* $MinMaxAABB (2 fields) */
public record class MinMaxAABB (
    Vector3f m_Min,
    Vector3f m_Max) : IUnityStructure
{
    public static MinMaxAABB Read(EndianBinaryReader reader)
    {
        Vector3f m_Min_ = Vector3f.Read(reader);
        Vector3f m_Max_ = Vector3f.Read(reader);
        
        return new(m_Min_,
            m_Max_);
    }

    public override string ToString() => $"MinMaxAABB\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Min: {{ x: {m_Min.x}, y: {m_Min.y}, z: {m_Min.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Max: {{ x: {m_Max.x}, y: {m_Max.y}, z: {m_Max.z} }}\n");
    }
}

/* $VariableBoneCountWeights (1 fields) */
public record class VariableBoneCountWeights (
    uint[] m_Data) : IUnityStructure
{
    public static VariableBoneCountWeights Read(EndianBinaryReader reader)
    {
        uint[] m_Data_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* m_Data */
        
        return new(m_Data_);
    }

    public override string ToString() => $"VariableBoneCountWeights\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Data[{m_Data.Length}] = {{");
        if (m_Data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_Data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VertexData (3 fields) */
public record class VertexData (
    uint m_VertexCount,
    ChannelInfo[] m_Channels,
    byte[] m_DataSize) : IUnityStructure
{
    public static VertexData Read(EndianBinaryReader reader)
    {
        uint m_VertexCount_ = reader.ReadU32();
        ChannelInfo[] m_Channels_ = BuiltInArray<ChannelInfo>.Read(reader);
        reader.AlignTo(4); /* m_Channels */
        byte[] m_DataSize_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_DataSize */
        
        return new(m_VertexCount_,
            m_Channels_,
            m_DataSize_);
    }

    public override string ToString() => $"VertexData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_VertexCount: {m_VertexCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Channels[{m_Channels.Length}] = {{");
        if (m_Channels.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ChannelInfo _4 in m_Channels)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ stream: {_4.stream}, offset: {_4.offset}, format: {_4.format}, dimension: {_4.dimension} }}\n");
            ++_4i;
        }
        if (m_Channels.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DataSize[{m_DataSize.Length}] = {{");
        if (m_DataSize.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_DataSize)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_DataSize.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ChannelInfo (4 fields) */
public readonly record struct ChannelInfo (
    byte stream,
    byte offset,
    byte format,
    byte dimension) : IUnityStructure
{
    public static ChannelInfo Read(EndianBinaryReader reader)
    {
        byte stream_ = reader.ReadU8();
        byte offset_ = reader.ReadU8();
        byte format_ = reader.ReadU8();
        byte dimension_ = reader.ReadU8();
        
        return new(stream_,
            offset_,
            format_,
            dimension_);
    }

    public override string ToString() => $"ChannelInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stream: {stream}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}offset: {offset}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}format: {format}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}dimension: {dimension}");
    }
}

/* $CompressedMesh (11 fields) */
public record class CompressedMesh (
    PackedBitVector_2 m_Vertices,
    PackedBitVector_2 m_UV,
    PackedBitVector_2 m_Normals,
    PackedBitVector_2 m_Tangents,
    PackedBitVector_1 m_Weights,
    PackedBitVector_1 m_NormalSigns,
    PackedBitVector_1 m_TangentSigns,
    PackedBitVector_2 m_FloatColors,
    PackedBitVector_1 m_BoneIndices,
    PackedBitVector_1 m_Triangles,
    uint m_UVInfo) : IUnityStructure
{
    public static CompressedMesh Read(EndianBinaryReader reader)
    {
        PackedBitVector_2 m_Vertices_ = PackedBitVector_2.Read(reader);
        reader.AlignTo(4); /* m_Vertices */
        PackedBitVector_2 m_UV_ = PackedBitVector_2.Read(reader);
        reader.AlignTo(4); /* m_UV */
        PackedBitVector_2 m_Normals_ = PackedBitVector_2.Read(reader);
        reader.AlignTo(4); /* m_Normals */
        PackedBitVector_2 m_Tangents_ = PackedBitVector_2.Read(reader);
        reader.AlignTo(4); /* m_Tangents */
        PackedBitVector_1 m_Weights_ = PackedBitVector_1.Read(reader);
        reader.AlignTo(4); /* m_Weights */
        PackedBitVector_1 m_NormalSigns_ = PackedBitVector_1.Read(reader);
        reader.AlignTo(4); /* m_NormalSigns */
        PackedBitVector_1 m_TangentSigns_ = PackedBitVector_1.Read(reader);
        reader.AlignTo(4); /* m_TangentSigns */
        PackedBitVector_2 m_FloatColors_ = PackedBitVector_2.Read(reader);
        reader.AlignTo(4); /* m_FloatColors */
        PackedBitVector_1 m_BoneIndices_ = PackedBitVector_1.Read(reader);
        reader.AlignTo(4); /* m_BoneIndices */
        PackedBitVector_1 m_Triangles_ = PackedBitVector_1.Read(reader);
        reader.AlignTo(4); /* m_Triangles */
        uint m_UVInfo_ = reader.ReadU32();
        
        return new(m_Vertices_,
            m_UV_,
            m_Normals_,
            m_Tangents_,
            m_Weights_,
            m_NormalSigns_,
            m_TangentSigns_,
            m_FloatColors_,
            m_BoneIndices_,
            m_Triangles_,
            m_UVInfo_);
    }

    public override string ToString() => $"CompressedMesh\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vertices: {{ \n{m_Vertices.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_UV: {{ \n{m_UV.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Normals: {{ \n{m_Normals.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Tangents: {{ \n{m_Tangents.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Weights: {{ \n{m_Weights.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NormalSigns: {{ \n{m_NormalSigns.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TangentSigns: {{ \n{m_TangentSigns.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_FloatColors: {{ \n{m_FloatColors.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BoneIndices: {{ \n{m_BoneIndices.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Triangles: {{ \n{m_Triangles.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UVInfo: {m_UVInfo}");
    }
}

/* $PackedBitVector_2 (5 fields) */
public record class PackedBitVector_2 (
    uint m_NumItems,
    float m_Range,
    float m_Start,
    byte[] m_Data,
    byte m_BitSize) : IUnityStructure
{
    public static PackedBitVector_2 Read(EndianBinaryReader reader)
    {
        uint m_NumItems_ = reader.ReadU32();
        float m_Range_ = reader.ReadF32();
        float m_Start_ = reader.ReadF32();
        byte[] m_Data_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_Data */
        byte m_BitSize_ = reader.ReadU8();
        reader.AlignTo(4); /* m_BitSize */
        
        return new(m_NumItems_,
            m_Range_,
            m_Start_,
            m_Data_,
            m_BitSize_);
    }

    public override string ToString() => $"PackedBitVector_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumItems: {m_NumItems}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Range: {m_Range}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Start: {m_Start}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Data[{m_Data.Length}] = {{");
        if (m_Data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_Data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BitSize: {m_BitSize}");
    }
}

/* $PackedBitVector_1 (3 fields) */
public record class PackedBitVector_1 (
    uint m_NumItems,
    byte[] m_Data,
    byte m_BitSize) : IUnityStructure
{
    public static PackedBitVector_1 Read(EndianBinaryReader reader)
    {
        uint m_NumItems_ = reader.ReadU32();
        byte[] m_Data_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_Data */
        byte m_BitSize_ = reader.ReadU8();
        reader.AlignTo(4); /* m_BitSize */
        
        return new(m_NumItems_,
            m_Data_,
            m_BitSize_);
    }

    public override string ToString() => $"PackedBitVector_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumItems: {m_NumItems}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Data[{m_Data.Length}] = {{");
        if (m_Data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_Data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BitSize: {m_BitSize}");
    }
}

/* $StreamingInfo (3 fields) */
public record class StreamingInfo (
    ulong offset,
    uint size,
    AsciiString path) : IUnityStructure
{
    public static StreamingInfo Read(EndianBinaryReader reader)
    {
        ulong offset_ = reader.ReadU64();
        uint size_ = reader.ReadU32();
        AsciiString path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        
        return new(offset_,
            size_,
            path_);
    }

    public override string ToString() => $"StreamingInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}offset: {offset}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}size: {size}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}path: \"{path}\"");
    }
}

/* $Vector2f (2 fields) */
public readonly record struct Vector2f (
    float x,
    float y) : IUnityStructure
{
    public static Vector2f Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        
        return new(x_,
            y_);
    }

    public override string ToString() => $"Vector2f\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }
}

/* $ColorRGBA_1 (4 fields) */
public readonly record struct ColorRGBA_1 (
    float r,
    float g,
    float b,
    float a) : IUnityStructure
{
    public static ColorRGBA_1 Read(EndianBinaryReader reader)
    {
        float r_ = reader.ReadF32();
        float g_ = reader.ReadF32();
        float b_ = reader.ReadF32();
        float a_ = reader.ReadF32();
        
        return new(r_,
            g_,
            b_,
            a_);
    }

    public override string ToString() => $"ColorRGBA_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}r: {r}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}g: {g}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}b: {b}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}a: {a}");
    }
}

/* $EnlightenSceneMapping (5 fields) */
public record class EnlightenSceneMapping (
    EnlightenRendererInformation[] m_Renderers,
    EnlightenSystemInformation[] m_Systems,
    Hash128[] m_Probesets,
    EnlightenSystemAtlasInformation[] m_SystemAtlases,
    EnlightenTerrainChunksInformation[] m_TerrainChunks) : IUnityStructure
{
    public static EnlightenSceneMapping Read(EndianBinaryReader reader)
    {
        EnlightenRendererInformation[] m_Renderers_ = BuiltInArray<EnlightenRendererInformation>.Read(reader);
        reader.AlignTo(4); /* m_Renderers */
        EnlightenSystemInformation[] m_Systems_ = BuiltInArray<EnlightenSystemInformation>.Read(reader);
        reader.AlignTo(4); /* m_Systems */
        Hash128[] m_Probesets_ = BuiltInArray<Hash128>.Read(reader);
        reader.AlignTo(4); /* m_Probesets */
        EnlightenSystemAtlasInformation[] m_SystemAtlases_ = BuiltInArray<EnlightenSystemAtlasInformation>.Read(reader);
        reader.AlignTo(4); /* m_SystemAtlases */
        EnlightenTerrainChunksInformation[] m_TerrainChunks_ = BuiltInArray<EnlightenTerrainChunksInformation>.Read(reader);
        reader.AlignTo(4); /* m_TerrainChunks */
        
        return new(m_Renderers_,
            m_Systems_,
            m_Probesets_,
            m_SystemAtlases_,
            m_TerrainChunks_);
    }

    public override string ToString() => $"EnlightenSceneMapping\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Renderers[{m_Renderers.Length}] = {{");
        if (m_Renderers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (EnlightenRendererInformation _4 in m_Renderers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Renderers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Systems[{m_Systems.Length}] = {{");
        if (m_Systems.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (EnlightenSystemInformation _4 in m_Systems)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Systems.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Probesets[{m_Probesets.Length}] = {{");
        if (m_Probesets.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Hash128 _4 in m_Probesets)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Probesets.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SystemAtlases[{m_SystemAtlases.Length}] = {{");
        if (m_SystemAtlases.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (EnlightenSystemAtlasInformation _4 in m_SystemAtlases)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_SystemAtlases.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TerrainChunks[{m_TerrainChunks.Length}] = {{");
        if (m_TerrainChunks.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (EnlightenTerrainChunksInformation _4 in m_TerrainChunks)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ firstSystemId: {_4.firstSystemId}, numChunksInX: {_4.numChunksInX}, numChunksInY: {_4.numChunksInY} }}\n");
            ++_4i;
        }
        if (m_TerrainChunks.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $EnlightenRendererInformation (4 fields) */
public record class EnlightenRendererInformation (
    PPtr<Object> renderer,
    Vector4f dynamicLightmapSTInSystem,
    int systemId,
    Hash128 instanceHash) : IUnityStructure
{
    public static EnlightenRendererInformation Read(EndianBinaryReader reader)
    {
        PPtr<Object> renderer_ = PPtr<Object>.Read(reader);
        Vector4f dynamicLightmapSTInSystem_ = Vector4f.Read(reader);
        int systemId_ = reader.ReadS32();
        Hash128 instanceHash_ = Hash128.Read(reader);
        
        return new(renderer_,
            dynamicLightmapSTInSystem_,
            systemId_,
            instanceHash_);
    }

    public override string ToString() => $"EnlightenRendererInformation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}renderer: {renderer}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}dynamicLightmapSTInSystem: {{ x: {dynamicLightmapSTInSystem.x}, y: {dynamicLightmapSTInSystem.y}, z: {dynamicLightmapSTInSystem.z}, w: {dynamicLightmapSTInSystem.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}systemId: {systemId}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}instanceHash: {instanceHash}");
    }
}

/* $EnlightenSystemInformation (7 fields) */
public record class EnlightenSystemInformation (
    uint rendererIndex,
    uint rendererSize,
    int atlasIndex,
    int atlasOffsetX,
    int atlasOffsetY,
    Hash128 inputSystemHash,
    Hash128 radiositySystemHash) : IUnityStructure
{
    public static EnlightenSystemInformation Read(EndianBinaryReader reader)
    {
        uint rendererIndex_ = reader.ReadU32();
        uint rendererSize_ = reader.ReadU32();
        int atlasIndex_ = reader.ReadS32();
        int atlasOffsetX_ = reader.ReadS32();
        int atlasOffsetY_ = reader.ReadS32();
        Hash128 inputSystemHash_ = Hash128.Read(reader);
        Hash128 radiositySystemHash_ = Hash128.Read(reader);
        
        return new(rendererIndex_,
            rendererSize_,
            atlasIndex_,
            atlasOffsetX_,
            atlasOffsetY_,
            inputSystemHash_,
            radiositySystemHash_);
    }

    public override string ToString() => $"EnlightenSystemInformation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rendererIndex: {rendererIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rendererSize: {rendererSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasIndex: {atlasIndex}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasOffsetX: {atlasOffsetX}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasOffsetY: {atlasOffsetY}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inputSystemHash: {inputSystemHash}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}radiositySystemHash: {radiositySystemHash}");
    }
}

/* $EnlightenSystemAtlasInformation (3 fields) */
public record class EnlightenSystemAtlasInformation (
    int atlasSize,
    Hash128 atlasHash,
    int firstSystemId) : IUnityStructure
{
    public static EnlightenSystemAtlasInformation Read(EndianBinaryReader reader)
    {
        int atlasSize_ = reader.ReadS32();
        Hash128 atlasHash_ = Hash128.Read(reader);
        int firstSystemId_ = reader.ReadS32();
        
        return new(atlasSize_,
            atlasHash_,
            firstSystemId_);
    }

    public override string ToString() => $"EnlightenSystemAtlasInformation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasSize: {atlasSize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasHash: {atlasHash}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}firstSystemId: {firstSystemId}");
    }
}

/* $EnlightenTerrainChunksInformation (3 fields) */
public readonly record struct EnlightenTerrainChunksInformation (
    int firstSystemId,
    int numChunksInX,
    int numChunksInY) : IUnityStructure
{
    public static EnlightenTerrainChunksInformation Read(EndianBinaryReader reader)
    {
        int firstSystemId_ = reader.ReadS32();
        int numChunksInX_ = reader.ReadS32();
        int numChunksInY_ = reader.ReadS32();
        
        return new(firstSystemId_,
            numChunksInX_,
            numChunksInY_);
    }

    public override string ToString() => $"EnlightenTerrainChunksInformation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}firstSystemId: {firstSystemId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}numChunksInX: {numChunksInX}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}numChunksInY: {numChunksInY}");
    }
}

/* $LightmapData (3 fields) */
public record class LightmapData (
    PPtr<Texture2D> m_Lightmap,
    PPtr<Texture2D> m_DirLightmap,
    PPtr<Texture2D> m_ShadowMask) : IUnityStructure
{
    public static LightmapData Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> m_Lightmap_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> m_DirLightmap_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> m_ShadowMask_ = PPtr<Texture2D>.Read(reader);
        
        return new(m_Lightmap_,
            m_DirLightmap_,
            m_ShadowMask_);
    }

    public override string ToString() => $"LightmapData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Lightmap: {m_Lightmap}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DirLightmap: {m_DirLightmap}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ShadowMask: {m_ShadowMask}");
    }
}

/* $GISettings (6 fields) */
public readonly record struct GISettings (
    float m_BounceScale,
    float m_IndirectOutputScale,
    float m_AlbedoBoost,
    uint m_EnvironmentLightingMode,
    bool m_EnableBakedLightmaps,
    bool m_EnableRealtimeLightmaps) : IUnityStructure
{
    public static GISettings Read(EndianBinaryReader reader)
    {
        float m_BounceScale_ = reader.ReadF32();
        float m_IndirectOutputScale_ = reader.ReadF32();
        float m_AlbedoBoost_ = reader.ReadF32();
        uint m_EnvironmentLightingMode_ = reader.ReadU32();
        bool m_EnableBakedLightmaps_ = reader.ReadBool();
        bool m_EnableRealtimeLightmaps_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableRealtimeLightmaps */
        
        return new(m_BounceScale_,
            m_IndirectOutputScale_,
            m_AlbedoBoost_,
            m_EnvironmentLightingMode_,
            m_EnableBakedLightmaps_,
            m_EnableRealtimeLightmaps_);
    }

    public override string ToString() => $"GISettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BounceScale: {m_BounceScale}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IndirectOutputScale: {m_IndirectOutputScale}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AlbedoBoost: {m_AlbedoBoost}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnvironmentLightingMode: {m_EnvironmentLightingMode}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableBakedLightmaps: {m_EnableBakedLightmaps}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableRealtimeLightmaps: {m_EnableRealtimeLightmaps}");
    }
}

/* $PhysicsJobOptions2D (17 fields) */
public readonly record struct PhysicsJobOptions2D (
    bool useMultithreading,
    bool useConsistencySorting,
    int m_InterpolationPosesPerJob,
    int m_NewContactsPerJob,
    int m_CollideContactsPerJob,
    int m_ClearFlagsPerJob,
    int m_ClearBodyForcesPerJob,
    int m_SyncDiscreteFixturesPerJob,
    int m_SyncContinuousFixturesPerJob,
    int m_FindNearestContactsPerJob,
    int m_UpdateTriggerContactsPerJob,
    int m_IslandSolverCostThreshold,
    int m_IslandSolverBodyCostScale,
    int m_IslandSolverContactCostScale,
    int m_IslandSolverJointCostScale,
    int m_IslandSolverBodiesPerJob,
    int m_IslandSolverContactsPerJob) : IUnityStructure
{
    public static PhysicsJobOptions2D Read(EndianBinaryReader reader)
    {
        bool useMultithreading_ = reader.ReadBool();
        bool useConsistencySorting_ = reader.ReadBool();
        reader.AlignTo(4); /* useConsistencySorting */
        int m_InterpolationPosesPerJob_ = reader.ReadS32();
        int m_NewContactsPerJob_ = reader.ReadS32();
        int m_CollideContactsPerJob_ = reader.ReadS32();
        int m_ClearFlagsPerJob_ = reader.ReadS32();
        int m_ClearBodyForcesPerJob_ = reader.ReadS32();
        int m_SyncDiscreteFixturesPerJob_ = reader.ReadS32();
        int m_SyncContinuousFixturesPerJob_ = reader.ReadS32();
        int m_FindNearestContactsPerJob_ = reader.ReadS32();
        int m_UpdateTriggerContactsPerJob_ = reader.ReadS32();
        int m_IslandSolverCostThreshold_ = reader.ReadS32();
        int m_IslandSolverBodyCostScale_ = reader.ReadS32();
        int m_IslandSolverContactCostScale_ = reader.ReadS32();
        int m_IslandSolverJointCostScale_ = reader.ReadS32();
        int m_IslandSolverBodiesPerJob_ = reader.ReadS32();
        int m_IslandSolverContactsPerJob_ = reader.ReadS32();
        
        return new(useMultithreading_,
            useConsistencySorting_,
            m_InterpolationPosesPerJob_,
            m_NewContactsPerJob_,
            m_CollideContactsPerJob_,
            m_ClearFlagsPerJob_,
            m_ClearBodyForcesPerJob_,
            m_SyncDiscreteFixturesPerJob_,
            m_SyncContinuousFixturesPerJob_,
            m_FindNearestContactsPerJob_,
            m_UpdateTriggerContactsPerJob_,
            m_IslandSolverCostThreshold_,
            m_IslandSolverBodyCostScale_,
            m_IslandSolverContactCostScale_,
            m_IslandSolverJointCostScale_,
            m_IslandSolverBodiesPerJob_,
            m_IslandSolverContactsPerJob_);
    }

    public override string ToString() => $"PhysicsJobOptions2D\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useMultithreading: {useMultithreading}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useConsistencySorting: {useConsistencySorting}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InterpolationPosesPerJob: {m_InterpolationPosesPerJob}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NewContactsPerJob: {m_NewContactsPerJob}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CollideContactsPerJob: {m_CollideContactsPerJob}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClearFlagsPerJob: {m_ClearFlagsPerJob}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClearBodyForcesPerJob: {m_ClearBodyForcesPerJob}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SyncDiscreteFixturesPerJob: {m_SyncDiscreteFixturesPerJob}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SyncContinuousFixturesPerJob: {m_SyncContinuousFixturesPerJob}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FindNearestContactsPerJob: {m_FindNearestContactsPerJob}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UpdateTriggerContactsPerJob: {m_UpdateTriggerContactsPerJob}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IslandSolverCostThreshold: {m_IslandSolverCostThreshold}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IslandSolverBodyCostScale: {m_IslandSolverBodyCostScale}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IslandSolverContactCostScale: {m_IslandSolverContactCostScale}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IslandSolverJointCostScale: {m_IslandSolverJointCostScale}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IslandSolverBodiesPerJob: {m_IslandSolverBodiesPerJob}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IslandSolverContactsPerJob: {m_IslandSolverContactsPerJob}");
    }
}

/* $AssetInfo (3 fields) */
public record class AssetInfo (
    int preloadIndex,
    int preloadSize,
    PPtr<Object> asset) : IUnityStructure
{
    public static AssetInfo Read(EndianBinaryReader reader)
    {
        int preloadIndex_ = reader.ReadS32();
        int preloadSize_ = reader.ReadS32();
        PPtr<Object> asset_ = PPtr<Object>.Read(reader);
        
        return new(preloadIndex_,
            preloadSize_,
            asset_);
    }

    public override string ToString() => $"AssetInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}preloadIndex: {preloadIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}preloadSize: {preloadSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}asset: {asset}");
    }
}

/* $VFXPropertySheetSerializedBase (11 fields) */
public record class VFXPropertySheetSerializedBase (
    VFXField m_Float,
    VFXField_1 m_Vector2f,
    VFXField_2 m_Vector3f,
    VFXField_3 m_Vector4f,
    VFXField_4 m_Uint,
    VFXField_5 m_Int,
    VFXField_6 m_Matrix4x4f,
    VFXField_7 m_AnimationCurve,
    VFXField_8 m_Gradient,
    VFXField_9 m_NamedObject,
    VFXField_10 m_Bool) : IUnityStructure
{
    public static VFXPropertySheetSerializedBase Read(EndianBinaryReader reader)
    {
        VFXField m_Float_ = VFXField.Read(reader);
        reader.AlignTo(4); /* m_Float */
        VFXField_1 m_Vector2f_ = VFXField_1.Read(reader);
        reader.AlignTo(4); /* m_Vector2f */
        VFXField_2 m_Vector3f_ = VFXField_2.Read(reader);
        reader.AlignTo(4); /* m_Vector3f */
        VFXField_3 m_Vector4f_ = VFXField_3.Read(reader);
        reader.AlignTo(4); /* m_Vector4f */
        VFXField_4 m_Uint_ = VFXField_4.Read(reader);
        reader.AlignTo(4); /* m_Uint */
        VFXField_5 m_Int_ = VFXField_5.Read(reader);
        reader.AlignTo(4); /* m_Int */
        VFXField_6 m_Matrix4x4f_ = VFXField_6.Read(reader);
        reader.AlignTo(4); /* m_Matrix4x4f */
        VFXField_7 m_AnimationCurve_ = VFXField_7.Read(reader);
        reader.AlignTo(4); /* m_AnimationCurve */
        VFXField_8 m_Gradient_ = VFXField_8.Read(reader);
        reader.AlignTo(4); /* m_Gradient */
        VFXField_9 m_NamedObject_ = VFXField_9.Read(reader);
        reader.AlignTo(4); /* m_NamedObject */
        VFXField_10 m_Bool_ = VFXField_10.Read(reader);
        reader.AlignTo(4); /* m_Bool */
        
        return new(m_Float_,
            m_Vector2f_,
            m_Vector3f_,
            m_Vector4f_,
            m_Uint_,
            m_Int_,
            m_Matrix4x4f_,
            m_AnimationCurve_,
            m_Gradient_,
            m_NamedObject_,
            m_Bool_);
    }

    public override string ToString() => $"VFXPropertySheetSerializedBase\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Float: {{ \n{m_Float.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vector2f: {{ \n{m_Vector2f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vector3f: {{ \n{m_Vector3f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vector4f: {{ \n{m_Vector4f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Uint: {{ \n{m_Uint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Int: {{ \n{m_Int.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Matrix4x4f: {{ \n{m_Matrix4x4f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AnimationCurve: {{ \n{m_AnimationCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Gradient: {{ \n{m_Gradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NamedObject: {{ \n{m_NamedObject.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Bool: {{ \n{m_Bool.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VFXField (1 fields) */
public record class VFXField (
    VFXEntryExposed[] m_Array) : IUnityStructure
{
    public static VFXField Read(EndianBinaryReader reader)
    {
        VFXEntryExposed[] m_Array_ = BuiltInArray<VFXEntryExposed>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed (3 fields) */
public record class VFXEntryExposed (
    float m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed Read(EndianBinaryReader reader)
    {
        float m_Value_ = reader.ReadF32();
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_1 (1 fields) */
public record class VFXField_1 (
    VFXEntryExposed_1[] m_Array) : IUnityStructure
{
    public static VFXField_1 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_1[] m_Array_ = BuiltInArray<VFXEntryExposed_1>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_1 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_1 (3 fields) */
public record class VFXEntryExposed_1 (
    Vector2f m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_1 Read(EndianBinaryReader reader)
    {
        Vector2f m_Value_ = Vector2f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_2 (1 fields) */
public record class VFXField_2 (
    VFXEntryExposed_2[] m_Array) : IUnityStructure
{
    public static VFXField_2 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_2[] m_Array_ = BuiltInArray<VFXEntryExposed_2>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_2 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_2 (3 fields) */
public record class VFXEntryExposed_2 (
    Vector3f m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_2 Read(EndianBinaryReader reader)
    {
        Vector3f m_Value_ = Vector3f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y}, z: {m_Value.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_3 (1 fields) */
public record class VFXField_3 (
    VFXEntryExposed_3[] m_Array) : IUnityStructure
{
    public static VFXField_3 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_3[] m_Array_ = BuiltInArray<VFXEntryExposed_3>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_3 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_3 (3 fields) */
public record class VFXEntryExposed_3 (
    Vector4f m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_3 Read(EndianBinaryReader reader)
    {
        Vector4f m_Value_ = Vector4f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y}, z: {m_Value.z}, w: {m_Value.w} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_4 (1 fields) */
public record class VFXField_4 (
    VFXEntryExposed_4[] m_Array) : IUnityStructure
{
    public static VFXField_4 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_4[] m_Array_ = BuiltInArray<VFXEntryExposed_4>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_4 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_4 (3 fields) */
public record class VFXEntryExposed_4 (
    uint m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_4 Read(EndianBinaryReader reader)
    {
        uint m_Value_ = reader.ReadU32();
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_5 (1 fields) */
public record class VFXField_5 (
    VFXEntryExposed_5[] m_Array) : IUnityStructure
{
    public static VFXField_5 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_5[] m_Array_ = BuiltInArray<VFXEntryExposed_5>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_5 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_5 (3 fields) */
public record class VFXEntryExposed_5 (
    int m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_5 Read(EndianBinaryReader reader)
    {
        int m_Value_ = reader.ReadS32();
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_6 (1 fields) */
public record class VFXField_6 (
    VFXEntryExposed_6[] m_Array) : IUnityStructure
{
    public static VFXField_6 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_6[] m_Array_ = BuiltInArray<VFXEntryExposed_6>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_6 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_6 (3 fields) */
public record class VFXEntryExposed_6 (
    Matrix4x4f m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_6 Read(EndianBinaryReader reader)
    {
        Matrix4x4f m_Value_ = Matrix4x4f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_7 (1 fields) */
public record class VFXField_7 (
    VFXEntryExposed_7[] m_Array) : IUnityStructure
{
    public static VFXField_7 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_7[] m_Array_ = BuiltInArray<VFXEntryExposed_7>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_7 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_7 (3 fields) */
public record class VFXEntryExposed_7 (
    AnimationCurve m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_7 Read(EndianBinaryReader reader)
    {
        AnimationCurve m_Value_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $AnimationCurve (4 fields) */
public record class AnimationCurve (
    Keyframe[] m_Curve,
    int m_PreInfinity,
    int m_PostInfinity,
    int m_RotationOrder) : IUnityStructure
{
    public static AnimationCurve Read(EndianBinaryReader reader)
    {
        Keyframe[] m_Curve_ = BuiltInArray<Keyframe>.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        int m_PreInfinity_ = reader.ReadS32();
        int m_PostInfinity_ = reader.ReadS32();
        int m_RotationOrder_ = reader.ReadS32();
        
        return new(m_Curve_,
            m_PreInfinity_,
            m_PostInfinity_,
            m_RotationOrder_);
    }

    public override string ToString() => $"AnimationCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve[{m_Curve.Length}] = {{");
        if (m_Curve.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Keyframe _4 in m_Curve)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Curve.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreInfinity: {m_PreInfinity}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PostInfinity: {m_PostInfinity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RotationOrder: {m_RotationOrder}");
    }
}

/* $Keyframe (7 fields) */
public readonly record struct Keyframe (
    float time,
    float @value,
    float inSlope,
    float outSlope,
    int weightedMode,
    float inWeight,
    float outWeight) : IUnityStructure
{
    public static Keyframe Read(EndianBinaryReader reader)
    {
        float time_ = reader.ReadF32();
        float @value_ = reader.ReadF32();
        float inSlope_ = reader.ReadF32();
        float outSlope_ = reader.ReadF32();
        int weightedMode_ = reader.ReadS32();
        float inWeight_ = reader.ReadF32();
        float outWeight_ = reader.ReadF32();
        
        return new(time_,
            @value_,
            inSlope_,
            outSlope_,
            weightedMode_,
            inWeight_,
            outWeight_);
    }

    public override string ToString() => $"Keyframe\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}time: {time}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inSlope: {inSlope}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}outSlope: {outSlope}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}weightedMode: {weightedMode}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inWeight: {inWeight}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}outWeight: {outWeight}");
    }
}

/* $VFXField_8 (1 fields) */
public record class VFXField_8 (
    VFXEntryExposed_8[] m_Array) : IUnityStructure
{
    public static VFXField_8 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_8[] m_Array_ = BuiltInArray<VFXEntryExposed_8>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_8 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_8 (3 fields) */
public record class VFXEntryExposed_8 (
    Gradient_1 m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_8 Read(EndianBinaryReader reader)
    {
        Gradient_1 m_Value_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $Gradient_1 (28 fields) */
public record class Gradient_1 (
    ColorRGBA_1 key0,
    ColorRGBA_1 key1,
    ColorRGBA_1 key2,
    ColorRGBA_1 key3,
    ColorRGBA_1 key4,
    ColorRGBA_1 key5,
    ColorRGBA_1 key6,
    ColorRGBA_1 key7,
    ushort ctime0,
    ushort ctime1,
    ushort ctime2,
    ushort ctime3,
    ushort ctime4,
    ushort ctime5,
    ushort ctime6,
    ushort ctime7,
    ushort atime0,
    ushort atime1,
    ushort atime2,
    ushort atime3,
    ushort atime4,
    ushort atime5,
    ushort atime6,
    ushort atime7,
    byte m_Mode,
    sbyte m_ColorSpace,
    byte m_NumColorKeys,
    byte m_NumAlphaKeys) : IUnityStructure
{
    public static Gradient_1 Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 key0_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key1_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key2_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key3_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key4_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key5_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key6_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 key7_ = ColorRGBA_1.Read(reader);
        ushort ctime0_ = reader.ReadU16();
        ushort ctime1_ = reader.ReadU16();
        ushort ctime2_ = reader.ReadU16();
        ushort ctime3_ = reader.ReadU16();
        ushort ctime4_ = reader.ReadU16();
        ushort ctime5_ = reader.ReadU16();
        ushort ctime6_ = reader.ReadU16();
        ushort ctime7_ = reader.ReadU16();
        ushort atime0_ = reader.ReadU16();
        ushort atime1_ = reader.ReadU16();
        ushort atime2_ = reader.ReadU16();
        ushort atime3_ = reader.ReadU16();
        ushort atime4_ = reader.ReadU16();
        ushort atime5_ = reader.ReadU16();
        ushort atime6_ = reader.ReadU16();
        ushort atime7_ = reader.ReadU16();
        byte m_Mode_ = reader.ReadU8();
        sbyte m_ColorSpace_ = reader.ReadS8();
        byte m_NumColorKeys_ = reader.ReadU8();
        byte m_NumAlphaKeys_ = reader.ReadU8();
        reader.AlignTo(4); /* m_NumAlphaKeys */
        
        return new(key0_,
            key1_,
            key2_,
            key3_,
            key4_,
            key5_,
            key6_,
            key7_,
            ctime0_,
            ctime1_,
            ctime2_,
            ctime3_,
            ctime4_,
            ctime5_,
            ctime6_,
            ctime7_,
            atime0_,
            atime1_,
            atime2_,
            atime3_,
            atime4_,
            atime5_,
            atime6_,
            atime7_,
            m_Mode_,
            m_ColorSpace_,
            m_NumColorKeys_,
            m_NumAlphaKeys_);
    }

    public override string ToString() => $"Gradient_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key0: {{ r: {key0.r}, g: {key0.g}, b: {key0.b}, a: {key0.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key1: {{ r: {key1.r}, g: {key1.g}, b: {key1.b}, a: {key1.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key2: {{ r: {key2.r}, g: {key2.g}, b: {key2.b}, a: {key2.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key3: {{ r: {key3.r}, g: {key3.g}, b: {key3.b}, a: {key3.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key4: {{ r: {key4.r}, g: {key4.g}, b: {key4.b}, a: {key4.a} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key5: {{ r: {key5.r}, g: {key5.g}, b: {key5.b}, a: {key5.a} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key6: {{ r: {key6.r}, g: {key6.g}, b: {key6.b}, a: {key6.a} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}key7: {{ r: {key7.r}, g: {key7.g}, b: {key7.b}, a: {key7.a} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime0: {ctime0}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime1: {ctime1}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime2: {ctime2}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime3: {ctime3}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime4: {ctime4}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime5: {ctime5}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime6: {ctime6}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ctime7: {ctime7}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime0: {atime0}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime1: {atime1}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime2: {atime2}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime3: {atime3}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime4: {atime4}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime5: {atime5}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime6: {atime6}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atime7: {atime7}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ColorSpace: {m_ColorSpace}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumColorKeys: {m_NumColorKeys}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumAlphaKeys: {m_NumAlphaKeys}");
    }
}

/* $VFXField_9 (1 fields) */
public record class VFXField_9 (
    VFXEntryExposed_9[] m_Array) : IUnityStructure
{
    public static VFXField_9 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_9[] m_Array_ = BuiltInArray<VFXEntryExposed_9>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_9 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_9 (3 fields) */
public record class VFXEntryExposed_9 (
    PPtr<Object> m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_9 Read(EndianBinaryReader reader)
    {
        PPtr<Object> m_Value_ = PPtr<Object>.Read(reader);
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $VFXField_10 (1 fields) */
public record class VFXField_10 (
    VFXEntryExposed_10[] m_Array) : IUnityStructure
{
    public static VFXField_10 Read(EndianBinaryReader reader)
    {
        VFXEntryExposed_10[] m_Array_ = BuiltInArray<VFXEntryExposed_10>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_10\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExposed_10 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExposed_10 (3 fields) */
public record class VFXEntryExposed_10 (
    bool m_Value,
    AsciiString m_Name,
    bool m_Overridden) : IUnityStructure
{
    public static VFXEntryExposed_10 Read(EndianBinaryReader reader)
    {
        bool m_Value_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Value */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        bool m_Overridden_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Overridden */
        
        return new(m_Value_,
            m_Name_,
            m_Overridden_);
    }

    public override string ToString() => $"VFXEntryExposed_10\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Overridden: {m_Overridden}");
    }
}

/* $pair_1 (2 fields) */
public record class pair_1 (
    GUID first,
    long second) : IUnityStructure
{
    public static pair_1 Read(EndianBinaryReader reader)
    {
        GUID first_ = GUID.Read(reader);
        long second_ = reader.ReadS64();
        
        return new(first_,
            second_);
    }

    public override string ToString() => $"pair_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}first: {{ data_0: {first.data_0}, data_1: {first.data_1}, data_2: {first.data_2}, data_3: {first.data_3} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}second: {second}");
    }
}

/* $GUID (4 fields) */
public readonly record struct GUID (
    uint data_0,
    uint data_1,
    uint data_2,
    uint data_3) : IUnityStructure
{
    public static GUID Read(EndianBinaryReader reader)
    {
        uint data_0_ = reader.ReadU32();
        uint data_1_ = reader.ReadU32();
        uint data_2_ = reader.ReadU32();
        uint data_3_ = reader.ReadU32();
        
        return new(data_0_,
            data_1_,
            data_2_,
            data_3_);
    }

    public override string ToString() => $"GUID\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_0: {data_0}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_1: {data_1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_2: {data_2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_3: {data_3}");
    }
}

/* $SpriteAtlasData (9 fields) */
public record class SpriteAtlasData (
    PPtr<Texture2D> texture,
    PPtr<Texture2D> alphaTexture,
    Rectf textureRect,
    Vector2f textureRectOffset,
    Vector2f atlasRectOffset,
    Vector4f uvTransform,
    float downscaleMultiplier,
    uint settingsRaw,
    SecondarySpriteTexture[] secondaryTextures) : IUnityStructure
{
    public static SpriteAtlasData Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> texture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> alphaTexture_ = PPtr<Texture2D>.Read(reader);
        Rectf textureRect_ = Rectf.Read(reader);
        Vector2f textureRectOffset_ = Vector2f.Read(reader);
        Vector2f atlasRectOffset_ = Vector2f.Read(reader);
        Vector4f uvTransform_ = Vector4f.Read(reader);
        float downscaleMultiplier_ = reader.ReadF32();
        uint settingsRaw_ = reader.ReadU32();
        SecondarySpriteTexture[] secondaryTextures_ = BuiltInArray<SecondarySpriteTexture>.Read(reader);
        reader.AlignTo(4); /* secondaryTextures */
        
        return new(texture_,
            alphaTexture_,
            textureRect_,
            textureRectOffset_,
            atlasRectOffset_,
            uvTransform_,
            downscaleMultiplier_,
            settingsRaw_,
            secondaryTextures_);
    }

    public override string ToString() => $"SpriteAtlasData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}texture: {texture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alphaTexture: {alphaTexture}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureRect: {{ x: {textureRect.x}, y: {textureRect.y}, width: {textureRect.width}, height: {textureRect.height} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureRectOffset: {{ x: {textureRectOffset.x}, y: {textureRectOffset.y} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}atlasRectOffset: {{ x: {atlasRectOffset.x}, y: {atlasRectOffset.y} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uvTransform: {{ x: {uvTransform.x}, y: {uvTransform.y}, z: {uvTransform.z}, w: {uvTransform.w} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}downscaleMultiplier: {downscaleMultiplier}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}settingsRaw: {settingsRaw}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}secondaryTextures[{secondaryTextures.Length}] = {{");
        if (secondaryTextures.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SecondarySpriteTexture _4 in secondaryTextures)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (secondaryTextures.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SecondarySpriteTexture (2 fields) */
public record class SecondarySpriteTexture (
    PPtr<Texture2D> texture,
    AsciiString name) : IUnityStructure
{
    public static SecondarySpriteTexture Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> texture_ = PPtr<Texture2D>.Read(reader);
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        
        return new(texture_,
            name_);
    }

    public override string ToString() => $"SecondarySpriteTexture\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}texture: {texture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }
}

/* $ClothConstrainCoefficients (2 fields) */
public readonly record struct ClothConstrainCoefficients (
    float maxDistance,
    float collisionSphereDistance) : IUnityStructure
{
    public static ClothConstrainCoefficients Read(EndianBinaryReader reader)
    {
        float maxDistance_ = reader.ReadF32();
        float collisionSphereDistance_ = reader.ReadF32();
        
        return new(maxDistance_,
            collisionSphereDistance_);
    }

    public override string ToString() => $"ClothConstrainCoefficients\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxDistance: {maxDistance}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}collisionSphereDistance: {collisionSphereDistance}");
    }
}

/* $ClothSphereColliderPair (2 fields) */
public record class ClothSphereColliderPair (
    PPtr<SphereCollider> first,
    PPtr<SphereCollider> second) : IUnityStructure
{
    public static ClothSphereColliderPair Read(EndianBinaryReader reader)
    {
        PPtr<SphereCollider> first_ = PPtr<SphereCollider>.Read(reader);
        PPtr<SphereCollider> second_ = PPtr<SphereCollider>.Read(reader);
        
        return new(first_,
            second_);
    }

    public override string ToString() => $"ClothSphereColliderPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}first: {first}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}second: {second}");
    }
}

/* $InputAxis (15 fields) */
public record class InputAxis (
    AsciiString m_Name,
    AsciiString descriptiveName,
    AsciiString descriptiveNegativeName,
    AsciiString negativeButton,
    AsciiString positiveButton,
    AsciiString altNegativeButton,
    AsciiString altPositiveButton,
    float gravity,
    float dead,
    float sensitivity,
    bool snap,
    bool invert,
    int type,
    int axis,
    int joyNum) : IUnityStructure
{
    public static InputAxis Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* descriptiveName */
        AsciiString descriptiveNegativeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* descriptiveNegativeName */
        AsciiString negativeButton_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* negativeButton */
        AsciiString positiveButton_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* positiveButton */
        AsciiString altNegativeButton_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* altNegativeButton */
        AsciiString altPositiveButton_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* altPositiveButton */
        float gravity_ = reader.ReadF32();
        float dead_ = reader.ReadF32();
        float sensitivity_ = reader.ReadF32();
        bool snap_ = reader.ReadBool();
        bool invert_ = reader.ReadBool();
        reader.AlignTo(4); /* invert */
        int type_ = reader.ReadS32();
        int axis_ = reader.ReadS32();
        int joyNum_ = reader.ReadS32();
        
        return new(m_Name_,
            descriptiveName_,
            descriptiveNegativeName_,
            negativeButton_,
            positiveButton_,
            altNegativeButton_,
            altPositiveButton_,
            gravity_,
            dead_,
            sensitivity_,
            snap_,
            invert_,
            type_,
            axis_,
            joyNum_);
    }

    public override string ToString() => $"InputAxis\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}descriptiveName: \"{descriptiveName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}descriptiveNegativeName: \"{descriptiveNegativeName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}negativeButton: \"{negativeButton}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}positiveButton: \"{positiveButton}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}altNegativeButton: \"{altNegativeButton}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}altPositiveButton: \"{altPositiveButton}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}gravity: {gravity}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}dead: {dead}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sensitivity: {sensitivity}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}snap: {snap}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axis: {axis}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joyNum: {joyNum}");
    }
}

/* $SerializedShader (10 fields) */
public record class SerializedShader (
    SerializedProperties m_PropInfo,
    SerializedSubShader[] m_SubShaders,
    AsciiString[] m_KeywordNames,
    byte[] m_KeywordFlags,
    AsciiString m_Name,
    AsciiString m_CustomEditorName,
    AsciiString m_FallbackName,
    SerializedShaderDependency[] m_Dependencies,
    SerializedCustomEditorForRenderPipeline[] m_CustomEditorForRenderPipelines,
    bool m_DisableNoSubshadersMessage) : IUnityStructure
{
    public static SerializedShader Read(EndianBinaryReader reader)
    {
        SerializedProperties m_PropInfo_ = SerializedProperties.Read(reader);
        reader.AlignTo(4); /* m_PropInfo */
        SerializedSubShader[] m_SubShaders_ = BuiltInArray<SerializedSubShader>.Read(reader);
        reader.AlignTo(4); /* m_SubShaders */
        AsciiString[] m_KeywordNames_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_KeywordNames */
        byte[] m_KeywordFlags_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_KeywordFlags */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString m_CustomEditorName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_CustomEditorName */
        AsciiString m_FallbackName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_FallbackName */
        SerializedShaderDependency[] m_Dependencies_ = BuiltInArray<SerializedShaderDependency>.Read(reader);
        reader.AlignTo(4); /* m_Dependencies */
        SerializedCustomEditorForRenderPipeline[] m_CustomEditorForRenderPipelines_ = BuiltInArray<SerializedCustomEditorForRenderPipeline>.Read(reader);
        reader.AlignTo(4); /* m_CustomEditorForRenderPipelines */
        bool m_DisableNoSubshadersMessage_ = reader.ReadBool();
        reader.AlignTo(4); /* m_DisableNoSubshadersMessage */
        
        return new(m_PropInfo_,
            m_SubShaders_,
            m_KeywordNames_,
            m_KeywordFlags_,
            m_Name_,
            m_CustomEditorName_,
            m_FallbackName_,
            m_Dependencies_,
            m_CustomEditorForRenderPipelines_,
            m_DisableNoSubshadersMessage_);
    }

    public override string ToString() => $"SerializedShader\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PropInfo: {{ \n{m_PropInfo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SubShaders[{m_SubShaders.Length}] = {{");
        if (m_SubShaders.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedSubShader _4 in m_SubShaders)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_SubShaders.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_KeywordNames[{m_KeywordNames.Length}] = {{");
        if (m_KeywordNames.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in m_KeywordNames)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (m_KeywordNames.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_KeywordFlags[{m_KeywordFlags.Length}] = {{");
        if (m_KeywordFlags.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_KeywordFlags)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_KeywordFlags.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CustomEditorName: \"{m_CustomEditorName}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FallbackName: \"{m_FallbackName}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dependencies[{m_Dependencies.Length}] = {{");
        if (m_Dependencies.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedShaderDependency _4 in m_Dependencies)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Dependencies.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_CustomEditorForRenderPipelines[{m_CustomEditorForRenderPipelines.Length}] = {{");
        if (m_CustomEditorForRenderPipelines.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedCustomEditorForRenderPipeline _4 in m_CustomEditorForRenderPipelines)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_CustomEditorForRenderPipelines.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisableNoSubshadersMessage: {m_DisableNoSubshadersMessage}");
    }
}

/* $SerializedProperties (1 fields) */
public record class SerializedProperties (
    SerializedProperty[] m_Props) : IUnityStructure
{
    public static SerializedProperties Read(EndianBinaryReader reader)
    {
        SerializedProperty[] m_Props_ = BuiltInArray<SerializedProperty>.Read(reader);
        reader.AlignTo(4); /* m_Props */
        
        return new(m_Props_);
    }

    public override string ToString() => $"SerializedProperties\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Props[{m_Props.Length}] = {{");
        if (m_Props.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedProperty _4 in m_Props)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Props.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SerializedProperty (10 fields) */
public record class SerializedProperty (
    AsciiString m_Name,
    AsciiString m_Description,
    AsciiString[] m_Attributes,
    int m_Type,
    uint m_Flags,
    float m_DefValue_0,
    float m_DefValue_1,
    float m_DefValue_2,
    float m_DefValue_3,
    SerializedTextureProperty m_DefTexture) : IUnityStructure
{
    public static SerializedProperty Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString m_Description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Description */
        AsciiString[] m_Attributes_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_Attributes */
        int m_Type_ = reader.ReadS32();
        uint m_Flags_ = reader.ReadU32();
        float m_DefValue_0_ = reader.ReadF32();
        float m_DefValue_1_ = reader.ReadF32();
        float m_DefValue_2_ = reader.ReadF32();
        float m_DefValue_3_ = reader.ReadF32();
        SerializedTextureProperty m_DefTexture_ = SerializedTextureProperty.Read(reader);
        reader.AlignTo(4); /* m_DefTexture */
        
        return new(m_Name_,
            m_Description_,
            m_Attributes_,
            m_Type_,
            m_Flags_,
            m_DefValue_0_,
            m_DefValue_1_,
            m_DefValue_2_,
            m_DefValue_3_,
            m_DefTexture_);
    }

    public override string ToString() => $"SerializedProperty\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Description: \"{m_Description}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Attributes[{m_Attributes.Length}] = {{");
        if (m_Attributes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in m_Attributes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (m_Attributes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Flags: {m_Flags}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefValue_0: {m_DefValue_0}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefValue_1: {m_DefValue_1}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefValue_2: {m_DefValue_2}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefValue_3: {m_DefValue_3}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DefTexture: {{ \n{m_DefTexture.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SerializedTextureProperty (2 fields) */
public record class SerializedTextureProperty (
    AsciiString m_DefaultName,
    int m_TexDim) : IUnityStructure
{
    public static SerializedTextureProperty Read(EndianBinaryReader reader)
    {
        AsciiString m_DefaultName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_DefaultName */
        int m_TexDim_ = reader.ReadS32();
        
        return new(m_DefaultName_,
            m_TexDim_);
    }

    public override string ToString() => $"SerializedTextureProperty\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultName: \"{m_DefaultName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TexDim: {m_TexDim}");
    }
}

/* $SerializedSubShader (3 fields) */
public record class SerializedSubShader (
    SerializedPass[] m_Passes,
    SerializedTagMap m_Tags,
    int m_LOD) : IUnityStructure
{
    public static SerializedSubShader Read(EndianBinaryReader reader)
    {
        SerializedPass[] m_Passes_ = BuiltInArray<SerializedPass>.Read(reader);
        reader.AlignTo(4); /* m_Passes */
        SerializedTagMap m_Tags_ = SerializedTagMap.Read(reader);
        reader.AlignTo(4); /* m_Tags */
        int m_LOD_ = reader.ReadS32();
        
        return new(m_Passes_,
            m_Tags_,
            m_LOD_);
    }

    public override string ToString() => $"SerializedSubShader\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Passes[{m_Passes.Length}] = {{");
        if (m_Passes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedPass _4 in m_Passes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Passes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Tags: {{ \n{m_Tags.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LOD: {m_LOD}");
    }
}

/* $SerializedPass (18 fields) */
public record class SerializedPass (
    Hash128[] m_EditorDataHash,
    byte[] m_Platforms,
    Dictionary<AsciiString, int> m_NameIndices,
    int m_Type,
    SerializedShaderState m_State,
    uint m_ProgramMask,
    SerializedProgram progVertex,
    SerializedProgram progFragment,
    SerializedProgram progGeometry,
    SerializedProgram progHull,
    SerializedProgram progDomain,
    SerializedProgram progRayTracing,
    bool m_HasInstancingVariant,
    bool m_HasProceduralInstancingVariant,
    AsciiString m_UseName,
    AsciiString m_Name,
    AsciiString m_TextureName,
    SerializedTagMap m_Tags) : IUnityStructure
{
    public static SerializedPass Read(EndianBinaryReader reader)
    {
        Hash128[] m_EditorDataHash_ = BuiltInArray<Hash128>.Read(reader);
        reader.AlignTo(4); /* m_EditorDataHash */
        byte[] m_Platforms_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_Platforms */
        Dictionary<AsciiString, int> m_NameIndices_ = BuiltInMap<AsciiString, int>.Read(reader);
        reader.AlignTo(4); /* m_NameIndices */
        int m_Type_ = reader.ReadS32();
        SerializedShaderState m_State_ = SerializedShaderState.Read(reader);
        reader.AlignTo(4); /* m_State */
        uint m_ProgramMask_ = reader.ReadU32();
        SerializedProgram progVertex_ = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progVertex */
        SerializedProgram progFragment_ = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progFragment */
        SerializedProgram progGeometry_ = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progGeometry */
        SerializedProgram progHull_ = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progHull */
        SerializedProgram progDomain_ = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progDomain */
        SerializedProgram progRayTracing_ = SerializedProgram.Read(reader);
        reader.AlignTo(4); /* progRayTracing */
        bool m_HasInstancingVariant_ = reader.ReadBool();
        bool m_HasProceduralInstancingVariant_ = reader.ReadBool();
        reader.AlignTo(4); /* m_HasProceduralInstancingVariant */
        AsciiString m_UseName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_UseName */
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString m_TextureName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_TextureName */
        SerializedTagMap m_Tags_ = SerializedTagMap.Read(reader);
        reader.AlignTo(4); /* m_Tags */
        
        return new(m_EditorDataHash_,
            m_Platforms_,
            m_NameIndices_,
            m_Type_,
            m_State_,
            m_ProgramMask_,
            progVertex_,
            progFragment_,
            progGeometry_,
            progHull_,
            progDomain_,
            progRayTracing_,
            m_HasInstancingVariant_,
            m_HasProceduralInstancingVariant_,
            m_UseName_,
            m_Name_,
            m_TextureName_,
            m_Tags_);
    }

    public override string ToString() => $"SerializedPass\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_EditorDataHash[{m_EditorDataHash.Length}] = {{");
        if (m_EditorDataHash.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Hash128 _4 in m_EditorDataHash)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_EditorDataHash.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Platforms[{m_Platforms.Length}] = {{");
        if (m_Platforms.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_Platforms)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Platforms.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NameIndices[{m_NameIndices.Count}] = {{");
        if (m_NameIndices.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, int> _4 in m_NameIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = {_4.Value}");
            ++_4i;
        }
        if (m_NameIndices.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_State: {{ \n{m_State.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ProgramMask: {m_ProgramMask}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}progVertex: {{ \n{progVertex.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}progFragment: {{ \n{progFragment.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}progGeometry: {{ \n{progGeometry.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}progHull: {{ \n{progHull.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}progDomain: {{ \n{progDomain.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}progRayTracing: {{ \n{progRayTracing.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasInstancingVariant: {m_HasInstancingVariant}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasProceduralInstancingVariant: {m_HasProceduralInstancingVariant}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseName: \"{m_UseName}\"");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureName: \"{m_TextureName}\"");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Tags: {{ \n{m_Tags.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SerializedShaderState (33 fields) */
public record class SerializedShaderState (
    AsciiString m_Name,
    SerializedShaderRTBlendState rtBlend0,
    SerializedShaderRTBlendState rtBlend1,
    SerializedShaderRTBlendState rtBlend2,
    SerializedShaderRTBlendState rtBlend3,
    SerializedShaderRTBlendState rtBlend4,
    SerializedShaderRTBlendState rtBlend5,
    SerializedShaderRTBlendState rtBlend6,
    SerializedShaderRTBlendState rtBlend7,
    bool rtSeparateBlend,
    SerializedShaderFloatValue zClip,
    SerializedShaderFloatValue zTest,
    SerializedShaderFloatValue zWrite,
    SerializedShaderFloatValue culling,
    SerializedShaderFloatValue conservative,
    SerializedShaderFloatValue offsetFactor,
    SerializedShaderFloatValue offsetUnits,
    SerializedShaderFloatValue alphaToMask,
    SerializedStencilOp stencilOp,
    SerializedStencilOp stencilOpFront,
    SerializedStencilOp stencilOpBack,
    SerializedShaderFloatValue stencilReadMask,
    SerializedShaderFloatValue stencilWriteMask,
    SerializedShaderFloatValue stencilRef,
    SerializedShaderFloatValue fogStart,
    SerializedShaderFloatValue fogEnd,
    SerializedShaderFloatValue fogDensity,
    SerializedShaderVectorValue fogColor,
    int fogMode,
    int gpuProgramID,
    SerializedTagMap m_Tags,
    int m_LOD,
    bool lighting) : IUnityStructure
{
    public static SerializedShaderState Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        SerializedShaderRTBlendState rtBlend0_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend0 */
        SerializedShaderRTBlendState rtBlend1_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend1 */
        SerializedShaderRTBlendState rtBlend2_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend2 */
        SerializedShaderRTBlendState rtBlend3_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend3 */
        SerializedShaderRTBlendState rtBlend4_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend4 */
        SerializedShaderRTBlendState rtBlend5_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend5 */
        SerializedShaderRTBlendState rtBlend6_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend6 */
        SerializedShaderRTBlendState rtBlend7_ = SerializedShaderRTBlendState.Read(reader);
        reader.AlignTo(4); /* rtBlend7 */
        bool rtSeparateBlend_ = reader.ReadBool();
        reader.AlignTo(4); /* rtSeparateBlend */
        SerializedShaderFloatValue zClip_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zClip */
        SerializedShaderFloatValue zTest_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zTest */
        SerializedShaderFloatValue zWrite_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zWrite */
        SerializedShaderFloatValue culling_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* culling */
        SerializedShaderFloatValue conservative_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* conservative */
        SerializedShaderFloatValue offsetFactor_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* offsetFactor */
        SerializedShaderFloatValue offsetUnits_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* offsetUnits */
        SerializedShaderFloatValue alphaToMask_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* alphaToMask */
        SerializedStencilOp stencilOp_ = SerializedStencilOp.Read(reader);
        reader.AlignTo(4); /* stencilOp */
        SerializedStencilOp stencilOpFront_ = SerializedStencilOp.Read(reader);
        reader.AlignTo(4); /* stencilOpFront */
        SerializedStencilOp stencilOpBack_ = SerializedStencilOp.Read(reader);
        reader.AlignTo(4); /* stencilOpBack */
        SerializedShaderFloatValue stencilReadMask_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* stencilReadMask */
        SerializedShaderFloatValue stencilWriteMask_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* stencilWriteMask */
        SerializedShaderFloatValue stencilRef_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* stencilRef */
        SerializedShaderFloatValue fogStart_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogStart */
        SerializedShaderFloatValue fogEnd_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogEnd */
        SerializedShaderFloatValue fogDensity_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fogDensity */
        SerializedShaderVectorValue fogColor_ = SerializedShaderVectorValue.Read(reader);
        reader.AlignTo(4); /* fogColor */
        int fogMode_ = reader.ReadS32();
        int gpuProgramID_ = reader.ReadS32();
        SerializedTagMap m_Tags_ = SerializedTagMap.Read(reader);
        reader.AlignTo(4); /* m_Tags */
        int m_LOD_ = reader.ReadS32();
        bool lighting_ = reader.ReadBool();
        reader.AlignTo(4); /* lighting */
        
        return new(m_Name_,
            rtBlend0_,
            rtBlend1_,
            rtBlend2_,
            rtBlend3_,
            rtBlend4_,
            rtBlend5_,
            rtBlend6_,
            rtBlend7_,
            rtSeparateBlend_,
            zClip_,
            zTest_,
            zWrite_,
            culling_,
            conservative_,
            offsetFactor_,
            offsetUnits_,
            alphaToMask_,
            stencilOp_,
            stencilOpFront_,
            stencilOpBack_,
            stencilReadMask_,
            stencilWriteMask_,
            stencilRef_,
            fogStart_,
            fogEnd_,
            fogDensity_,
            fogColor_,
            fogMode_,
            gpuProgramID_,
            m_Tags_,
            m_LOD_,
            lighting_);
    }

    public override string ToString() => $"SerializedShaderState\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend0: {{ \n{rtBlend0.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend1: {{ \n{rtBlend1.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend2: {{ \n{rtBlend2.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend3: {{ \n{rtBlend3.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend4: {{ \n{rtBlend4.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend5: {{ \n{rtBlend5.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend6: {{ \n{rtBlend6.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rtBlend7: {{ \n{rtBlend7.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rtSeparateBlend: {rtSeparateBlend}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}zClip: {{ \n{zClip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}zTest: {{ \n{zTest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}zWrite: {{ \n{zWrite.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}culling: {{ \n{culling.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}conservative: {{ \n{conservative.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}offsetFactor: {{ \n{offsetFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}offsetUnits: {{ \n{offsetUnits.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alphaToMask: {{ \n{alphaToMask.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stencilOp: {{ \n{stencilOp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stencilOpFront: {{ \n{stencilOpFront.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stencilOpBack: {{ \n{stencilOpBack.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stencilReadMask: {{ \n{stencilReadMask.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stencilWriteMask: {{ \n{stencilWriteMask.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stencilRef: {{ \n{stencilRef.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}fogStart: {{ \n{fogStart.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}fogEnd: {{ \n{fogEnd.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}fogDensity: {{ \n{fogDensity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}fogColor: {{ \n{fogColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fogMode: {fogMode}");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}gpuProgramID: {gpuProgramID}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Tags: {{ \n{m_Tags.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LOD: {m_LOD}");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lighting: {lighting}");
    }
}

/* $SerializedShaderRTBlendState (7 fields) */
public record class SerializedShaderRTBlendState (
    SerializedShaderFloatValue srcBlend,
    SerializedShaderFloatValue destBlend,
    SerializedShaderFloatValue srcBlendAlpha,
    SerializedShaderFloatValue destBlendAlpha,
    SerializedShaderFloatValue blendOp,
    SerializedShaderFloatValue blendOpAlpha,
    SerializedShaderFloatValue colMask) : IUnityStructure
{
    public static SerializedShaderRTBlendState Read(EndianBinaryReader reader)
    {
        SerializedShaderFloatValue srcBlend_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* srcBlend */
        SerializedShaderFloatValue destBlend_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* destBlend */
        SerializedShaderFloatValue srcBlendAlpha_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* srcBlendAlpha */
        SerializedShaderFloatValue destBlendAlpha_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* destBlendAlpha */
        SerializedShaderFloatValue blendOp_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* blendOp */
        SerializedShaderFloatValue blendOpAlpha_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* blendOpAlpha */
        SerializedShaderFloatValue colMask_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* colMask */
        
        return new(srcBlend_,
            destBlend_,
            srcBlendAlpha_,
            destBlendAlpha_,
            blendOp_,
            blendOpAlpha_,
            colMask_);
    }

    public override string ToString() => $"SerializedShaderRTBlendState\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}srcBlend: {{ \n{srcBlend.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}destBlend: {{ \n{destBlend.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}srcBlendAlpha: {{ \n{srcBlendAlpha.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}destBlendAlpha: {{ \n{destBlendAlpha.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}blendOp: {{ \n{blendOp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}blendOpAlpha: {{ \n{blendOpAlpha.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}colMask: {{ \n{colMask.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SerializedShaderFloatValue (2 fields) */
public record class SerializedShaderFloatValue (
    float val,
    AsciiString name) : IUnityStructure
{
    public static SerializedShaderFloatValue Read(EndianBinaryReader reader)
    {
        float val_ = reader.ReadF32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        
        return new(val_,
            name_);
    }

    public override string ToString() => $"SerializedShaderFloatValue\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}val: {val}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }
}

/* $SerializedStencilOp (4 fields) */
public record class SerializedStencilOp (
    SerializedShaderFloatValue pass,
    SerializedShaderFloatValue fail,
    SerializedShaderFloatValue zFail,
    SerializedShaderFloatValue comp) : IUnityStructure
{
    public static SerializedStencilOp Read(EndianBinaryReader reader)
    {
        SerializedShaderFloatValue pass_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* pass */
        SerializedShaderFloatValue fail_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* fail */
        SerializedShaderFloatValue zFail_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* zFail */
        SerializedShaderFloatValue comp_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* comp */
        
        return new(pass_,
            fail_,
            zFail_,
            comp_);
    }

    public override string ToString() => $"SerializedStencilOp\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}pass: {{ \n{pass.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}fail: {{ \n{fail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}zFail: {{ \n{zFail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}comp: {{ \n{comp.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SerializedShaderVectorValue (5 fields) */
public record class SerializedShaderVectorValue (
    SerializedShaderFloatValue x,
    SerializedShaderFloatValue y,
    SerializedShaderFloatValue z,
    SerializedShaderFloatValue w,
    AsciiString name) : IUnityStructure
{
    public static SerializedShaderVectorValue Read(EndianBinaryReader reader)
    {
        SerializedShaderFloatValue x_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* x */
        SerializedShaderFloatValue y_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* y */
        SerializedShaderFloatValue z_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* z */
        SerializedShaderFloatValue w_ = SerializedShaderFloatValue.Read(reader);
        reader.AlignTo(4); /* w */
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        
        return new(x_,
            y_,
            z_,
            w_,
            name_);
    }

    public override string ToString() => $"SerializedShaderVectorValue\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ \n{x.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ \n{z.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}w: {{ \n{w.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }
}

/* $SerializedTagMap (1 fields) */
public record class SerializedTagMap (
    Dictionary<AsciiString, AsciiString> tags) : IUnityStructure
{
    public static SerializedTagMap Read(EndianBinaryReader reader)
    {
        Dictionary<AsciiString, AsciiString> tags_ = BuiltInMap<AsciiString, AsciiString>.Read(reader);
        reader.AlignTo(4); /* tags */
        
        return new(tags_);
    }

    public override string ToString() => $"SerializedTagMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}tags[{tags.Count}] = {{");
        if (tags.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, AsciiString> _4 in tags)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = \"{_4.Value}\"");
            ++_4i;
        }
        if (tags.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SerializedProgram (5 fields) */
public record class SerializedProgram (
    SerializedSubProgram[] m_SubPrograms,
    SerializedPlayerSubProgram[][] m_PlayerSubPrograms,
    uint[][] m_ParameterBlobIndices,
    SerializedProgramParameters m_CommonParameters,
    ushort[] m_SerializedKeywordStateMask) : IUnityStructure
{
    public static SerializedProgram Read(EndianBinaryReader reader)
    {
        SerializedSubProgram[] m_SubPrograms_ = BuiltInArray<SerializedSubProgram>.Read(reader);
        reader.AlignTo(4); /* m_SubPrograms */
        SerializedPlayerSubProgram[][] m_PlayerSubPrograms_ = BuiltInArray<SerializedPlayerSubProgram[]>.Read(reader);
        reader.AlignTo(4); /* m_PlayerSubPrograms */
        uint[][] m_ParameterBlobIndices_ = BuiltInArray<uint[]>.Read(reader);
        reader.AlignTo(4); /* m_ParameterBlobIndices */
        SerializedProgramParameters m_CommonParameters_ = SerializedProgramParameters.Read(reader);
        reader.AlignTo(4); /* m_CommonParameters */
        ushort[] m_SerializedKeywordStateMask_ = BuiltInArray<ushort>.Read(reader);
        reader.AlignTo(4); /* m_SerializedKeywordStateMask */
        
        return new(m_SubPrograms_,
            m_PlayerSubPrograms_,
            m_ParameterBlobIndices_,
            m_CommonParameters_,
            m_SerializedKeywordStateMask_);
    }

    public override string ToString() => $"SerializedProgram\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SubPrograms[{m_SubPrograms.Length}] = {{");
        if (m_SubPrograms.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedSubProgram _4 in m_SubPrograms)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_SubPrograms.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PlayerSubPrograms[{m_PlayerSubPrograms.Length}] = {{");
        if (m_PlayerSubPrograms.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SerializedPlayerSubProgram[] _4 in m_PlayerSubPrograms)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = [{_4.Length}] = {{");
            if (_4.Length > 0) sb.AppendLine();
            int _8i = 0;
            foreach (SerializedPlayerSubProgram _8 in _4)
            {
                sb.Append($"{indent_ + ' '.Repeat(8)}[{_8i}] = {{ \n{_8.ToString(indent+12)}{indent_ + ' '.Repeat(8)}}}\n");
                ++_8i;
            }
            if (_4.Length > 0) sb.Append(indent_ + ' '.Repeat(4));
            sb.AppendLine("}");
            ++_4i;
        }
        if (m_PlayerSubPrograms.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ParameterBlobIndices[{m_ParameterBlobIndices.Length}] = {{");
        if (m_ParameterBlobIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint[] _4 in m_ParameterBlobIndices)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = [{_4.Length}] = {{");
            if (_4.Length > 0) sb.AppendLine();
            int _8i = 0;
            foreach (uint _8 in _4)
            {
                sb.AppendLine($"{indent_ + ' '.Repeat(8)}[{_8i}] = {_8}");
                ++_8i;
            }
            if (_4.Length > 0) sb.Append(indent_ + ' '.Repeat(4));
            sb.AppendLine("}");
            ++_4i;
        }
        if (m_ParameterBlobIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_CommonParameters: {{ \n{m_CommonParameters.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SerializedKeywordStateMask[{m_SerializedKeywordStateMask.Length}] = {{");
        if (m_SerializedKeywordStateMask.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ushort _4 in m_SerializedKeywordStateMask)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_SerializedKeywordStateMask.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SerializedSubProgram (7 fields) */
public record class SerializedSubProgram (
    uint m_BlobIndex,
    ParserBindChannels m_Channels,
    ushort[] m_KeywordIndices,
    sbyte m_ShaderHardwareTier,
    sbyte m_GpuProgramType,
    SerializedProgramParameters m_Parameters,
    long m_ShaderRequirements) : IUnityStructure
{
    public static SerializedSubProgram Read(EndianBinaryReader reader)
    {
        uint m_BlobIndex_ = reader.ReadU32();
        ParserBindChannels m_Channels_ = ParserBindChannels.Read(reader);
        reader.AlignTo(4); /* m_Channels */
        ushort[] m_KeywordIndices_ = BuiltInArray<ushort>.Read(reader);
        reader.AlignTo(4); /* m_KeywordIndices */
        sbyte m_ShaderHardwareTier_ = reader.ReadS8();
        sbyte m_GpuProgramType_ = reader.ReadS8();
        reader.AlignTo(4); /* m_GpuProgramType */
        SerializedProgramParameters m_Parameters_ = SerializedProgramParameters.Read(reader);
        reader.AlignTo(4); /* m_Parameters */
        long m_ShaderRequirements_ = reader.ReadS64();
        
        return new(m_BlobIndex_,
            m_Channels_,
            m_KeywordIndices_,
            m_ShaderHardwareTier_,
            m_GpuProgramType_,
            m_Parameters_,
            m_ShaderRequirements_);
    }

    public override string ToString() => $"SerializedSubProgram\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlobIndex: {m_BlobIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Channels: {{ \n{m_Channels.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_KeywordIndices[{m_KeywordIndices.Length}] = {{");
        if (m_KeywordIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ushort _4 in m_KeywordIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_KeywordIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ShaderHardwareTier: {m_ShaderHardwareTier}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GpuProgramType: {m_GpuProgramType}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Parameters: {{ \n{m_Parameters.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ShaderRequirements: {m_ShaderRequirements}");
    }
}

/* $ParserBindChannels (2 fields) */
public record class ParserBindChannels (
    ShaderBindChannel[] m_Channels,
    int m_SourceMap) : IUnityStructure
{
    public static ParserBindChannels Read(EndianBinaryReader reader)
    {
        ShaderBindChannel[] m_Channels_ = BuiltInArray<ShaderBindChannel>.Read(reader);
        reader.AlignTo(4); /* m_Channels */
        int m_SourceMap_ = reader.ReadS32();
        
        return new(m_Channels_,
            m_SourceMap_);
    }

    public override string ToString() => $"ParserBindChannels\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Channels[{m_Channels.Length}] = {{");
        if (m_Channels.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ShaderBindChannel _4 in m_Channels)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ source: {_4.source}, target: {_4.target} }}\n");
            ++_4i;
        }
        if (m_Channels.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SourceMap: {m_SourceMap}");
    }
}

/* $ShaderBindChannel (2 fields) */
public readonly record struct ShaderBindChannel (
    sbyte source,
    sbyte target) : IUnityStructure
{
    public static ShaderBindChannel Read(EndianBinaryReader reader)
    {
        sbyte source_ = reader.ReadS8();
        sbyte target_ = reader.ReadS8();
        
        return new(source_,
            target_);
    }

    public override string ToString() => $"ShaderBindChannel\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}source: {source}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}target: {target}");
    }
}

/* $SerializedProgramParameters (8 fields) */
public record class SerializedProgramParameters (
    VectorParameter[] m_VectorParams,
    MatrixParameter[] m_MatrixParams,
    TextureParameter_1[] m_TextureParams,
    BufferBinding[] m_BufferParams,
    ConstantBuffer[] m_ConstantBuffers,
    BufferBinding[] m_ConstantBufferBindings,
    UAVParameter[] m_UAVParams,
    SamplerParameter[] m_Samplers) : IUnityStructure
{
    public static SerializedProgramParameters Read(EndianBinaryReader reader)
    {
        VectorParameter[] m_VectorParams_ = BuiltInArray<VectorParameter>.Read(reader);
        reader.AlignTo(4); /* m_VectorParams */
        MatrixParameter[] m_MatrixParams_ = BuiltInArray<MatrixParameter>.Read(reader);
        reader.AlignTo(4); /* m_MatrixParams */
        TextureParameter_1[] m_TextureParams_ = BuiltInArray<TextureParameter_1>.Read(reader);
        reader.AlignTo(4); /* m_TextureParams */
        BufferBinding[] m_BufferParams_ = BuiltInArray<BufferBinding>.Read(reader);
        reader.AlignTo(4); /* m_BufferParams */
        ConstantBuffer[] m_ConstantBuffers_ = BuiltInArray<ConstantBuffer>.Read(reader);
        reader.AlignTo(4); /* m_ConstantBuffers */
        BufferBinding[] m_ConstantBufferBindings_ = BuiltInArray<BufferBinding>.Read(reader);
        reader.AlignTo(4); /* m_ConstantBufferBindings */
        UAVParameter[] m_UAVParams_ = BuiltInArray<UAVParameter>.Read(reader);
        reader.AlignTo(4); /* m_UAVParams */
        SamplerParameter[] m_Samplers_ = BuiltInArray<SamplerParameter>.Read(reader);
        reader.AlignTo(4); /* m_Samplers */
        
        return new(m_VectorParams_,
            m_MatrixParams_,
            m_TextureParams_,
            m_BufferParams_,
            m_ConstantBuffers_,
            m_ConstantBufferBindings_,
            m_UAVParams_,
            m_Samplers_);
    }

    public override string ToString() => $"SerializedProgramParameters\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_VectorParams[{m_VectorParams.Length}] = {{");
        if (m_VectorParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VectorParameter _4 in m_VectorParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_VectorParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MatrixParams[{m_MatrixParams.Length}] = {{");
        if (m_MatrixParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MatrixParameter _4 in m_MatrixParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_MatrixParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TextureParams[{m_TextureParams.Length}] = {{");
        if (m_TextureParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (TextureParameter_1 _4 in m_TextureParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TextureParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BufferParams[{m_BufferParams.Length}] = {{");
        if (m_BufferParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BufferBinding _4 in m_BufferParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_NameIndex: {_4.m_NameIndex}, m_Index: {_4.m_Index}, m_ArraySize: {_4.m_ArraySize} }}\n");
            ++_4i;
        }
        if (m_BufferParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ConstantBuffers[{m_ConstantBuffers.Length}] = {{");
        if (m_ConstantBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ConstantBuffer _4 in m_ConstantBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_ConstantBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ConstantBufferBindings[{m_ConstantBufferBindings.Length}] = {{");
        if (m_ConstantBufferBindings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BufferBinding _4 in m_ConstantBufferBindings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_NameIndex: {_4.m_NameIndex}, m_Index: {_4.m_Index}, m_ArraySize: {_4.m_ArraySize} }}\n");
            ++_4i;
        }
        if (m_ConstantBufferBindings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_UAVParams[{m_UAVParams.Length}] = {{");
        if (m_UAVParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (UAVParameter _4 in m_UAVParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_NameIndex: {_4.m_NameIndex}, m_Index: {_4.m_Index}, m_OriginalIndex: {_4.m_OriginalIndex} }}\n");
            ++_4i;
        }
        if (m_UAVParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Samplers[{m_Samplers.Length}] = {{");
        if (m_Samplers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SamplerParameter _4 in m_Samplers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ sampler: {_4.sampler}, bindPoint: {_4.bindPoint} }}\n");
            ++_4i;
        }
        if (m_Samplers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VectorParameter (5 fields) */
public readonly record struct VectorParameter (
    int m_NameIndex,
    int m_Index,
    int m_ArraySize,
    sbyte m_Type,
    sbyte m_Dim) : IUnityStructure
{
    public static VectorParameter Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        int m_Index_ = reader.ReadS32();
        int m_ArraySize_ = reader.ReadS32();
        sbyte m_Type_ = reader.ReadS8();
        sbyte m_Dim_ = reader.ReadS8();
        reader.AlignTo(4); /* m_Dim */
        
        return new(m_NameIndex_,
            m_Index_,
            m_ArraySize_,
            m_Type_,
            m_Dim_);
    }

    public override string ToString() => $"VectorParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArraySize: {m_ArraySize}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Dim: {m_Dim}");
    }
}

/* $MatrixParameter (5 fields) */
public readonly record struct MatrixParameter (
    int m_NameIndex,
    int m_Index,
    int m_ArraySize,
    sbyte m_Type,
    sbyte m_RowCount) : IUnityStructure
{
    public static MatrixParameter Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        int m_Index_ = reader.ReadS32();
        int m_ArraySize_ = reader.ReadS32();
        sbyte m_Type_ = reader.ReadS8();
        sbyte m_RowCount_ = reader.ReadS8();
        reader.AlignTo(4); /* m_RowCount */
        
        return new(m_NameIndex_,
            m_Index_,
            m_ArraySize_,
            m_Type_,
            m_RowCount_);
    }

    public override string ToString() => $"MatrixParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArraySize: {m_ArraySize}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RowCount: {m_RowCount}");
    }
}

/* $TextureParameter_1 (5 fields) */
public readonly record struct TextureParameter_1 (
    int m_NameIndex,
    int m_Index,
    int m_SamplerIndex,
    bool m_MultiSampled,
    sbyte m_Dim) : IUnityStructure
{
    public static TextureParameter_1 Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        int m_Index_ = reader.ReadS32();
        int m_SamplerIndex_ = reader.ReadS32();
        bool m_MultiSampled_ = reader.ReadBool();
        sbyte m_Dim_ = reader.ReadS8();
        reader.AlignTo(4); /* m_Dim */
        
        return new(m_NameIndex_,
            m_Index_,
            m_SamplerIndex_,
            m_MultiSampled_,
            m_Dim_);
    }

    public override string ToString() => $"TextureParameter_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SamplerIndex: {m_SamplerIndex}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MultiSampled: {m_MultiSampled}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Dim: {m_Dim}");
    }
}

/* $BufferBinding (3 fields) */
public readonly record struct BufferBinding (
    int m_NameIndex,
    int m_Index,
    int m_ArraySize) : IUnityStructure
{
    public static BufferBinding Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        int m_Index_ = reader.ReadS32();
        int m_ArraySize_ = reader.ReadS32();
        
        return new(m_NameIndex_,
            m_Index_,
            m_ArraySize_);
    }

    public override string ToString() => $"BufferBinding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArraySize: {m_ArraySize}");
    }
}

/* $ConstantBuffer (6 fields) */
public record class ConstantBuffer (
    int m_NameIndex,
    MatrixParameter[] m_MatrixParams,
    VectorParameter[] m_VectorParams,
    StructParameter[] m_StructParams,
    int m_Size,
    bool m_IsPartialCB) : IUnityStructure
{
    public static ConstantBuffer Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        MatrixParameter[] m_MatrixParams_ = BuiltInArray<MatrixParameter>.Read(reader);
        reader.AlignTo(4); /* m_MatrixParams */
        VectorParameter[] m_VectorParams_ = BuiltInArray<VectorParameter>.Read(reader);
        reader.AlignTo(4); /* m_VectorParams */
        StructParameter[] m_StructParams_ = BuiltInArray<StructParameter>.Read(reader);
        reader.AlignTo(4); /* m_StructParams */
        int m_Size_ = reader.ReadS32();
        bool m_IsPartialCB_ = reader.ReadBool();
        reader.AlignTo(4); /* m_IsPartialCB */
        
        return new(m_NameIndex_,
            m_MatrixParams_,
            m_VectorParams_,
            m_StructParams_,
            m_Size_,
            m_IsPartialCB_);
    }

    public override string ToString() => $"ConstantBuffer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MatrixParams[{m_MatrixParams.Length}] = {{");
        if (m_MatrixParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MatrixParameter _4 in m_MatrixParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_MatrixParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_VectorParams[{m_VectorParams.Length}] = {{");
        if (m_VectorParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VectorParameter _4 in m_VectorParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_VectorParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StructParams[{m_StructParams.Length}] = {{");
        if (m_StructParams.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (StructParameter _4 in m_StructParams)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_StructParams.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Size: {m_Size}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IsPartialCB: {m_IsPartialCB}");
    }
}

/* $StructParameter (6 fields) */
public record class StructParameter (
    int m_NameIndex,
    int m_Index,
    int m_ArraySize,
    int m_StructSize,
    VectorParameter[] m_VectorMembers,
    MatrixParameter[] m_MatrixMembers) : IUnityStructure
{
    public static StructParameter Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        int m_Index_ = reader.ReadS32();
        int m_ArraySize_ = reader.ReadS32();
        int m_StructSize_ = reader.ReadS32();
        VectorParameter[] m_VectorMembers_ = BuiltInArray<VectorParameter>.Read(reader);
        reader.AlignTo(4); /* m_VectorMembers */
        MatrixParameter[] m_MatrixMembers_ = BuiltInArray<MatrixParameter>.Read(reader);
        reader.AlignTo(4); /* m_MatrixMembers */
        
        return new(m_NameIndex_,
            m_Index_,
            m_ArraySize_,
            m_StructSize_,
            m_VectorMembers_,
            m_MatrixMembers_);
    }

    public override string ToString() => $"StructParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArraySize: {m_ArraySize}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StructSize: {m_StructSize}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_VectorMembers[{m_VectorMembers.Length}] = {{");
        if (m_VectorMembers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VectorParameter _4 in m_VectorMembers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_VectorMembers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MatrixMembers[{m_MatrixMembers.Length}] = {{");
        if (m_MatrixMembers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MatrixParameter _4 in m_MatrixMembers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_MatrixMembers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UAVParameter (3 fields) */
public readonly record struct UAVParameter (
    int m_NameIndex,
    int m_Index,
    int m_OriginalIndex) : IUnityStructure
{
    public static UAVParameter Read(EndianBinaryReader reader)
    {
        int m_NameIndex_ = reader.ReadS32();
        int m_Index_ = reader.ReadS32();
        int m_OriginalIndex_ = reader.ReadS32();
        
        return new(m_NameIndex_,
            m_Index_,
            m_OriginalIndex_);
    }

    public override string ToString() => $"UAVParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameIndex: {m_NameIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OriginalIndex: {m_OriginalIndex}");
    }
}

/* $SamplerParameter (2 fields) */
public readonly record struct SamplerParameter (
    uint sampler,
    int bindPoint) : IUnityStructure
{
    public static SamplerParameter Read(EndianBinaryReader reader)
    {
        uint sampler_ = reader.ReadU32();
        int bindPoint_ = reader.ReadS32();
        
        return new(sampler_,
            bindPoint_);
    }

    public override string ToString() => $"SamplerParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sampler: {sampler}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bindPoint: {bindPoint}");
    }
}

/* $SerializedPlayerSubProgram (4 fields) */
public record class SerializedPlayerSubProgram (
    uint m_BlobIndex,
    ushort[] m_KeywordIndices,
    long m_ShaderRequirements,
    sbyte m_GpuProgramType) : IUnityStructure
{
    public static SerializedPlayerSubProgram Read(EndianBinaryReader reader)
    {
        uint m_BlobIndex_ = reader.ReadU32();
        ushort[] m_KeywordIndices_ = BuiltInArray<ushort>.Read(reader);
        reader.AlignTo(4); /* m_KeywordIndices */
        long m_ShaderRequirements_ = reader.ReadS64();
        sbyte m_GpuProgramType_ = reader.ReadS8();
        reader.AlignTo(4); /* m_GpuProgramType */
        
        return new(m_BlobIndex_,
            m_KeywordIndices_,
            m_ShaderRequirements_,
            m_GpuProgramType_);
    }

    public override string ToString() => $"SerializedPlayerSubProgram\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlobIndex: {m_BlobIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_KeywordIndices[{m_KeywordIndices.Length}] = {{");
        if (m_KeywordIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ushort _4 in m_KeywordIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_KeywordIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ShaderRequirements: {m_ShaderRequirements}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GpuProgramType: {m_GpuProgramType}");
    }
}

/* $SerializedShaderDependency (2 fields) */
public record class SerializedShaderDependency (
    AsciiString @from,
    AsciiString to) : IUnityStructure
{
    public static SerializedShaderDependency Read(EndianBinaryReader reader)
    {
        AsciiString @from_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* @from */
        AsciiString to_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* to */
        
        return new(@from_,
            to_);
    }

    public override string ToString() => $"SerializedShaderDependency\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@from: \"{@from}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}to: \"{to}\"");
    }
}

/* $SerializedCustomEditorForRenderPipeline (2 fields) */
public record class SerializedCustomEditorForRenderPipeline (
    AsciiString customEditorName,
    AsciiString renderPipelineType) : IUnityStructure
{
    public static SerializedCustomEditorForRenderPipeline Read(EndianBinaryReader reader)
    {
        AsciiString customEditorName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* customEditorName */
        AsciiString renderPipelineType_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* renderPipelineType */
        
        return new(customEditorName_,
            renderPipelineType_);
    }

    public override string ToString() => $"SerializedCustomEditorForRenderPipeline\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customEditorName: \"{customEditorName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}renderPipelineType: \"{renderPipelineType}\"");
    }
}

/* $LightProbeData (4 fields) */
public record class LightProbeData (
    ProbeSetTetrahedralization m_Tetrahedralization,
    ProbeSetIndex[] m_ProbeSets,
    Vector3f[] m_Positions,
    Dictionary<Hash128, int> m_NonTetrahedralizedProbeSetIndexMap) : IUnityStructure
{
    public static LightProbeData Read(EndianBinaryReader reader)
    {
        ProbeSetTetrahedralization m_Tetrahedralization_ = ProbeSetTetrahedralization.Read(reader);
        reader.AlignTo(4); /* m_Tetrahedralization */
        ProbeSetIndex[] m_ProbeSets_ = BuiltInArray<ProbeSetIndex>.Read(reader);
        reader.AlignTo(4); /* m_ProbeSets */
        Vector3f[] m_Positions_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* m_Positions */
        Dictionary<Hash128, int> m_NonTetrahedralizedProbeSetIndexMap_ = BuiltInMap<Hash128, int>.Read(reader);
        
        return new(m_Tetrahedralization_,
            m_ProbeSets_,
            m_Positions_,
            m_NonTetrahedralizedProbeSetIndexMap_);
    }

    public override string ToString() => $"LightProbeData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Tetrahedralization: {{ \n{m_Tetrahedralization.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ProbeSets[{m_ProbeSets.Length}] = {{");
        if (m_ProbeSets.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ProbeSetIndex _4 in m_ProbeSets)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_ProbeSets.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Positions[{m_Positions.Length}] = {{");
        if (m_Positions.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in m_Positions)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (m_Positions.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NonTetrahedralizedProbeSetIndexMap[{m_NonTetrahedralizedProbeSetIndexMap.Count}] = {{");
        if (m_NonTetrahedralizedProbeSetIndexMap.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<Hash128, int> _4 in m_NonTetrahedralizedProbeSetIndexMap)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4.Key}] = {_4.Value}");
            ++_4i;
        }
        if (m_NonTetrahedralizedProbeSetIndexMap.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ProbeSetTetrahedralization (2 fields) */
public record class ProbeSetTetrahedralization (
    Tetrahedron[] m_Tetrahedra,
    Vector3f[] m_HullRays) : IUnityStructure
{
    public static ProbeSetTetrahedralization Read(EndianBinaryReader reader)
    {
        Tetrahedron[] m_Tetrahedra_ = BuiltInArray<Tetrahedron>.Read(reader);
        reader.AlignTo(4); /* m_Tetrahedra */
        Vector3f[] m_HullRays_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* m_HullRays */
        
        return new(m_Tetrahedra_,
            m_HullRays_);
    }

    public override string ToString() => $"ProbeSetTetrahedralization\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Tetrahedra[{m_Tetrahedra.Length}] = {{");
        if (m_Tetrahedra.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Tetrahedron _4 in m_Tetrahedra)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Tetrahedra.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HullRays[{m_HullRays.Length}] = {{");
        if (m_HullRays.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in m_HullRays)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (m_HullRays.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Tetrahedron (9 fields) */
public record class Tetrahedron (
    int indices_0,
    int indices_1,
    int indices_2,
    int indices_3,
    int neighbors_0,
    int neighbors_1,
    int neighbors_2,
    int neighbors_3,
    Matrix3x4f matrix) : IUnityStructure
{
    public static Tetrahedron Read(EndianBinaryReader reader)
    {
        int indices_0_ = reader.ReadS32();
        int indices_1_ = reader.ReadS32();
        int indices_2_ = reader.ReadS32();
        int indices_3_ = reader.ReadS32();
        int neighbors_0_ = reader.ReadS32();
        int neighbors_1_ = reader.ReadS32();
        int neighbors_2_ = reader.ReadS32();
        int neighbors_3_ = reader.ReadS32();
        Matrix3x4f matrix_ = Matrix3x4f.Read(reader);
        
        return new(indices_0_,
            indices_1_,
            indices_2_,
            indices_3_,
            neighbors_0_,
            neighbors_1_,
            neighbors_2_,
            neighbors_3_,
            matrix_);
    }

    public override string ToString() => $"Tetrahedron\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}indices_0: {indices_0}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}indices_1: {indices_1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}indices_2: {indices_2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}indices_3: {indices_3}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}neighbors_0: {neighbors_0}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}neighbors_1: {neighbors_1}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}neighbors_2: {neighbors_2}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}neighbors_3: {neighbors_3}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matrix: {{ \n{matrix.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Matrix3x4f (12 fields) */
public readonly record struct Matrix3x4f (
    float e00,
    float e01,
    float e02,
    float e03,
    float e10,
    float e11,
    float e12,
    float e13,
    float e20,
    float e21,
    float e22,
    float e23) : IUnityStructure
{
    public static Matrix3x4f Read(EndianBinaryReader reader)
    {
        float e00_ = reader.ReadF32();
        float e01_ = reader.ReadF32();
        float e02_ = reader.ReadF32();
        float e03_ = reader.ReadF32();
        float e10_ = reader.ReadF32();
        float e11_ = reader.ReadF32();
        float e12_ = reader.ReadF32();
        float e13_ = reader.ReadF32();
        float e20_ = reader.ReadF32();
        float e21_ = reader.ReadF32();
        float e22_ = reader.ReadF32();
        float e23_ = reader.ReadF32();
        
        return new(e00_,
            e01_,
            e02_,
            e03_,
            e10_,
            e11_,
            e12_,
            e13_,
            e20_,
            e21_,
            e22_,
            e23_);
    }

    public override string ToString() => $"Matrix3x4f\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e00: {e00}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e01: {e01}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e02: {e02}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e03: {e03}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e10: {e10}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e11: {e11}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e12: {e12}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e13: {e13}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e20: {e20}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e21: {e21}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e22: {e22}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}e23: {e23}");
    }
}

/* $ProbeSetIndex (3 fields) */
public record class ProbeSetIndex (
    Hash128 m_Hash,
    int m_Offset,
    int m_Size) : IUnityStructure
{
    public static ProbeSetIndex Read(EndianBinaryReader reader)
    {
        Hash128 m_Hash_ = Hash128.Read(reader);
        int m_Offset_ = reader.ReadS32();
        int m_Size_ = reader.ReadS32();
        
        return new(m_Hash_,
            m_Offset_,
            m_Size_);
    }

    public override string ToString() => $"ProbeSetIndex\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Hash: {m_Hash}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Offset: {m_Offset}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Size: {m_Size}");
    }
}

/* $SphericalHarmonicsL2 (27 fields) */
public readonly record struct SphericalHarmonicsL2 (
    float sh_0,
    float sh_1,
    float sh_2,
    float sh_3,
    float sh_4,
    float sh_5,
    float sh_6,
    float sh_7,
    float sh_8,
    float sh_9,
    float sh_10,
    float sh_11,
    float sh_12,
    float sh_13,
    float sh_14,
    float sh_15,
    float sh_16,
    float sh_17,
    float sh_18,
    float sh_19,
    float sh_20,
    float sh_21,
    float sh_22,
    float sh_23,
    float sh_24,
    float sh_25,
    float sh_26) : IUnityStructure
{
    public static SphericalHarmonicsL2 Read(EndianBinaryReader reader)
    {
        float sh_0_ = reader.ReadF32();
        float sh_1_ = reader.ReadF32();
        float sh_2_ = reader.ReadF32();
        float sh_3_ = reader.ReadF32();
        float sh_4_ = reader.ReadF32();
        float sh_5_ = reader.ReadF32();
        float sh_6_ = reader.ReadF32();
        float sh_7_ = reader.ReadF32();
        float sh_8_ = reader.ReadF32();
        float sh_9_ = reader.ReadF32();
        float sh_10_ = reader.ReadF32();
        float sh_11_ = reader.ReadF32();
        float sh_12_ = reader.ReadF32();
        float sh_13_ = reader.ReadF32();
        float sh_14_ = reader.ReadF32();
        float sh_15_ = reader.ReadF32();
        float sh_16_ = reader.ReadF32();
        float sh_17_ = reader.ReadF32();
        float sh_18_ = reader.ReadF32();
        float sh_19_ = reader.ReadF32();
        float sh_20_ = reader.ReadF32();
        float sh_21_ = reader.ReadF32();
        float sh_22_ = reader.ReadF32();
        float sh_23_ = reader.ReadF32();
        float sh_24_ = reader.ReadF32();
        float sh_25_ = reader.ReadF32();
        float sh_26_ = reader.ReadF32();
        
        return new(sh_0_,
            sh_1_,
            sh_2_,
            sh_3_,
            sh_4_,
            sh_5_,
            sh_6_,
            sh_7_,
            sh_8_,
            sh_9_,
            sh_10_,
            sh_11_,
            sh_12_,
            sh_13_,
            sh_14_,
            sh_15_,
            sh_16_,
            sh_17_,
            sh_18_,
            sh_19_,
            sh_20_,
            sh_21_,
            sh_22_,
            sh_23_,
            sh_24_,
            sh_25_,
            sh_26_);
    }

    public override string ToString() => $"SphericalHarmonicsL2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_0: {sh_0}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_1: {sh_1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_2: {sh_2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_3: {sh_3}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_4: {sh_4}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_5: {sh_5}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_6: {sh_6}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_7: {sh_7}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_8: {sh_8}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_9: {sh_9}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_10: {sh_10}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_11: {sh_11}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_12: {sh_12}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_13: {sh_13}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_14: {sh_14}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_15: {sh_15}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_16: {sh_16}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_17: {sh_17}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_18: {sh_18}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_19: {sh_19}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_20: {sh_20}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_21: {sh_21}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_22: {sh_22}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_23: {sh_23}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_24: {sh_24}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_25: {sh_25}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sh_26: {sh_26}");
    }
}

/* $LightProbeOcclusion (3 fields) */
public record class LightProbeOcclusion (
    int[] m_ProbeOcclusionLightIndex,
    float[] m_Occlusion,
    sbyte[] m_OcclusionMaskChannel) : IUnityStructure
{
    public static LightProbeOcclusion Read(EndianBinaryReader reader)
    {
        int[] m_ProbeOcclusionLightIndex_ = BuiltInArray<int>.Read(reader);
        float[] m_Occlusion_ = BuiltInArray<float>.Read(reader);
        sbyte[] m_OcclusionMaskChannel_ = BuiltInArray<sbyte>.Read(reader);
        
        return new(m_ProbeOcclusionLightIndex_,
            m_Occlusion_,
            m_OcclusionMaskChannel_);
    }

    public override string ToString() => $"LightProbeOcclusion\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ProbeOcclusionLightIndex[{m_ProbeOcclusionLightIndex.Length}] = {{");
        if (m_ProbeOcclusionLightIndex.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_ProbeOcclusionLightIndex)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ProbeOcclusionLightIndex.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Occlusion[{m_Occlusion.Length}] = {{");
        if (m_Occlusion.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_Occlusion)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Occlusion.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OcclusionMaskChannel[{m_OcclusionMaskChannel.Length}] = {{");
        if (m_OcclusionMaskChannel.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (sbyte _4 in m_OcclusionMaskChannel)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_OcclusionMaskChannel.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $GLTextureSettings (6 fields) */
public readonly record struct GLTextureSettings (
    int m_FilterMode,
    int m_Aniso,
    float m_MipBias,
    int m_WrapU,
    int m_WrapV,
    int m_WrapW) : IUnityStructure
{
    public static GLTextureSettings Read(EndianBinaryReader reader)
    {
        int m_FilterMode_ = reader.ReadS32();
        int m_Aniso_ = reader.ReadS32();
        float m_MipBias_ = reader.ReadF32();
        int m_WrapU_ = reader.ReadS32();
        int m_WrapV_ = reader.ReadS32();
        int m_WrapW_ = reader.ReadS32();
        
        return new(m_FilterMode_,
            m_Aniso_,
            m_MipBias_,
            m_WrapU_,
            m_WrapV_,
            m_WrapW_);
    }

    public override string ToString() => $"GLTextureSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FilterMode: {m_FilterMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Aniso: {m_Aniso}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MipBias: {m_MipBias}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WrapU: {m_WrapU}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WrapV: {m_WrapV}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WrapW: {m_WrapW}");
    }
}

/* $SplashScreenLogo (2 fields) */
public record class SplashScreenLogo (
    PPtr<Sprite> logo,
    float duration) : IUnityStructure
{
    public static SplashScreenLogo Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> logo_ = PPtr<Sprite>.Read(reader);
        float duration_ = reader.ReadF32();
        reader.AlignTo(4); /* duration */
        
        return new(logo_,
            duration_);
    }

    public override string ToString() => $"SplashScreenLogo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}logo: {logo}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}duration: {duration}");
    }
}

/* $VRSettings (1 fields) */
public readonly record struct VRSettings (
    bool enable360StereoCapture) : IUnityStructure
{
    public static VRSettings Read(EndianBinaryReader reader)
    {
        bool enable360StereoCapture_ = reader.ReadBool();
        reader.AlignTo(4); /* enable360StereoCapture */
        
        return new(enable360StereoCapture_);
    }

    public override string ToString() => $"VRSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enable360StereoCapture: {enable360StereoCapture}");
    }
}

/* $AvatarConstant (12 fields) */
public record class AvatarConstant (
    OffsetPtr m_AvatarSkeleton,
    OffsetPtr_1 m_AvatarSkeletonPose,
    OffsetPtr_1 m_DefaultPose,
    uint[] m_SkeletonNameIDArray,
    OffsetPtr_2 m_Human,
    int[] m_HumanSkeletonIndexArray,
    int[] m_HumanSkeletonReverseIndexArray,
    int m_RootMotionBoneIndex,
    xform m_RootMotionBoneX,
    OffsetPtr m_RootMotionSkeleton,
    OffsetPtr_1 m_RootMotionSkeletonPose,
    int[] m_RootMotionSkeletonIndexArray) : IUnityStructure
{
    public static AvatarConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr m_AvatarSkeleton_ = OffsetPtr.Read(reader);
        OffsetPtr_1 m_AvatarSkeletonPose_ = OffsetPtr_1.Read(reader);
        OffsetPtr_1 m_DefaultPose_ = OffsetPtr_1.Read(reader);
        uint[] m_SkeletonNameIDArray_ = BuiltInArray<uint>.Read(reader);
        OffsetPtr_2 m_Human_ = OffsetPtr_2.Read(reader);
        reader.AlignTo(4); /* m_Human */
        int[] m_HumanSkeletonIndexArray_ = BuiltInArray<int>.Read(reader);
        int[] m_HumanSkeletonReverseIndexArray_ = BuiltInArray<int>.Read(reader);
        int m_RootMotionBoneIndex_ = reader.ReadS32();
        xform m_RootMotionBoneX_ = xform.Read(reader);
        OffsetPtr m_RootMotionSkeleton_ = OffsetPtr.Read(reader);
        OffsetPtr_1 m_RootMotionSkeletonPose_ = OffsetPtr_1.Read(reader);
        int[] m_RootMotionSkeletonIndexArray_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_RootMotionSkeletonIndexArray */
        
        return new(m_AvatarSkeleton_,
            m_AvatarSkeletonPose_,
            m_DefaultPose_,
            m_SkeletonNameIDArray_,
            m_Human_,
            m_HumanSkeletonIndexArray_,
            m_HumanSkeletonReverseIndexArray_,
            m_RootMotionBoneIndex_,
            m_RootMotionBoneX_,
            m_RootMotionSkeleton_,
            m_RootMotionSkeletonPose_,
            m_RootMotionSkeletonIndexArray_);
    }

    public override string ToString() => $"AvatarConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AvatarSkeleton: {{ \n{m_AvatarSkeleton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AvatarSkeletonPose: {{ \n{m_AvatarSkeletonPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DefaultPose: {{ \n{m_DefaultPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SkeletonNameIDArray[{m_SkeletonNameIDArray.Length}] = {{");
        if (m_SkeletonNameIDArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_SkeletonNameIDArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_SkeletonNameIDArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Human: {{ \n{m_Human.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HumanSkeletonIndexArray[{m_HumanSkeletonIndexArray.Length}] = {{");
        if (m_HumanSkeletonIndexArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_HumanSkeletonIndexArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_HumanSkeletonIndexArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HumanSkeletonReverseIndexArray[{m_HumanSkeletonReverseIndexArray.Length}] = {{");
        if (m_HumanSkeletonReverseIndexArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_HumanSkeletonReverseIndexArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_HumanSkeletonReverseIndexArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RootMotionBoneIndex: {m_RootMotionBoneIndex}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RootMotionBoneX: {{ \n{m_RootMotionBoneX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RootMotionSkeleton: {{ \n{m_RootMotionSkeleton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RootMotionSkeletonPose: {{ \n{m_RootMotionSkeletonPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RootMotionSkeletonIndexArray[{m_RootMotionSkeletonIndexArray.Length}] = {{");
        if (m_RootMotionSkeletonIndexArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_RootMotionSkeletonIndexArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_RootMotionSkeletonIndexArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OffsetPtr (1 fields) */
public record class OffsetPtr (
    Skeleton_1 data) : IUnityStructure
{
    public static OffsetPtr Read(EndianBinaryReader reader)
    {
        Skeleton_1 data_ = Skeleton_1.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Skeleton_1 (3 fields) */
public record class Skeleton_1 (
    Node_1[] m_Node,
    uint[] m_ID,
    Axes[] m_AxesArray) : IUnityStructure
{
    public static Skeleton_1 Read(EndianBinaryReader reader)
    {
        Node_1[] m_Node_ = BuiltInArray<Node_1>.Read(reader);
        uint[] m_ID_ = BuiltInArray<uint>.Read(reader);
        Axes[] m_AxesArray_ = BuiltInArray<Axes>.Read(reader);
        
        return new(m_Node_,
            m_ID_,
            m_AxesArray_);
    }

    public override string ToString() => $"Skeleton_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Node[{m_Node.Length}] = {{");
        if (m_Node.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Node_1 _4 in m_Node)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_ParentId: {_4.m_ParentId}, m_AxesId: {_4.m_AxesId} }}\n");
            ++_4i;
        }
        if (m_Node.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ID[{m_ID.Length}] = {{");
        if (m_ID.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_ID)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ID.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AxesArray[{m_AxesArray.Length}] = {{");
        if (m_AxesArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axes _4 in m_AxesArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_AxesArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Node_1 (2 fields) */
public readonly record struct Node_1 (
    int m_ParentId,
    int m_AxesId) : IUnityStructure
{
    public static Node_1 Read(EndianBinaryReader reader)
    {
        int m_ParentId_ = reader.ReadS32();
        int m_AxesId_ = reader.ReadS32();
        
        return new(m_ParentId_,
            m_AxesId_);
    }

    public override string ToString() => $"Node_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ParentId: {m_ParentId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AxesId: {m_AxesId}");
    }
}

/* $Axes (6 fields) */
public record class Axes (
    float4 m_PreQ,
    float4 m_PostQ,
    float3 m_Sgn,
    Limit m_Limit,
    float m_Length,
    uint m_Type) : IUnityStructure
{
    public static Axes Read(EndianBinaryReader reader)
    {
        float4 m_PreQ_ = float4.Read(reader);
        float4 m_PostQ_ = float4.Read(reader);
        float3 m_Sgn_ = float3.Read(reader);
        Limit m_Limit_ = Limit.Read(reader);
        float m_Length_ = reader.ReadF32();
        uint m_Type_ = reader.ReadU32();
        
        return new(m_PreQ_,
            m_PostQ_,
            m_Sgn_,
            m_Limit_,
            m_Length_,
            m_Type_);
    }

    public override string ToString() => $"Axes\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PreQ: {{ x: {m_PreQ.x}, y: {m_PreQ.y}, z: {m_PreQ.z}, w: {m_PreQ.w} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PostQ: {{ x: {m_PostQ.x}, y: {m_PostQ.y}, z: {m_PostQ.z}, w: {m_PostQ.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Sgn: {{ x: {m_Sgn.x}, y: {m_Sgn.y}, z: {m_Sgn.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Limit: {{ \n{m_Limit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Length: {m_Length}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }
}

/* $float4 (4 fields) */
public readonly record struct float4 (
    float x,
    float y,
    float z,
    float w) : IUnityStructure
{
    public static float4 Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float z_ = reader.ReadF32();
        float w_ = reader.ReadF32();
        
        return new(x_,
            y_,
            z_,
            w_);
    }

    public override string ToString() => $"float4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}z: {z}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}w: {w}");
    }
}

/* $float3 (3 fields) */
public readonly record struct float3 (
    float x,
    float y,
    float z) : IUnityStructure
{
    public static float3 Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float z_ = reader.ReadF32();
        
        return new(x_,
            y_,
            z_);
    }

    public override string ToString() => $"float3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}z: {z}");
    }
}

/* $Limit (2 fields) */
public record class Limit (
    float3 m_Min,
    float3 m_Max) : IUnityStructure
{
    public static Limit Read(EndianBinaryReader reader)
    {
        float3 m_Min_ = float3.Read(reader);
        float3 m_Max_ = float3.Read(reader);
        
        return new(m_Min_,
            m_Max_);
    }

    public override string ToString() => $"Limit\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Min: {{ x: {m_Min.x}, y: {m_Min.y}, z: {m_Min.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Max: {{ x: {m_Max.x}, y: {m_Max.y}, z: {m_Max.z} }}\n");
    }
}

/* $OffsetPtr_1 (1 fields) */
public record class OffsetPtr_1 (
    SkeletonPose data) : IUnityStructure
{
    public static OffsetPtr_1 Read(EndianBinaryReader reader)
    {
        SkeletonPose data_ = SkeletonPose.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SkeletonPose (1 fields) */
public record class SkeletonPose (
    xform[] m_X) : IUnityStructure
{
    public static SkeletonPose Read(EndianBinaryReader reader)
    {
        xform[] m_X_ = BuiltInArray<xform>.Read(reader);
        
        return new(m_X_);
    }

    public override string ToString() => $"SkeletonPose\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_X[{m_X.Length}] = {{");
        if (m_X.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (xform _4 in m_X)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_X.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $xform (3 fields) */
public record class xform (
    float3 t,
    float4 q,
    float3 s) : IUnityStructure
{
    public static xform Read(EndianBinaryReader reader)
    {
        float3 t_ = float3.Read(reader);
        float4 q_ = float4.Read(reader);
        float3 s_ = float3.Read(reader);
        
        return new(t_,
            q_,
            s_);
    }

    public override string ToString() => $"xform\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}t: {{ x: {t.x}, y: {t.y}, z: {t.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}q: {{ x: {q.x}, y: {q.y}, z: {q.z}, w: {q.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}s: {{ x: {s.x}, y: {s.y}, z: {s.z} }}\n");
    }
}

/* $OffsetPtr_2 (1 fields) */
public record class OffsetPtr_2 (
    Human data) : IUnityStructure
{
    public static OffsetPtr_2 Read(EndianBinaryReader reader)
    {
        Human data_ = Human.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Human (18 fields) */
public record class Human (
    xform m_RootX,
    OffsetPtr m_Skeleton,
    OffsetPtr_1 m_SkeletonPose,
    OffsetPtr_3 m_LeftHand,
    OffsetPtr_3 m_RightHand,
    int[] m_HumanBoneIndex,
    float[] m_HumanBoneMass,
    float m_Scale,
    float m_ArmTwist,
    float m_ForeArmTwist,
    float m_UpperLegTwist,
    float m_LegTwist,
    float m_ArmStretch,
    float m_LegStretch,
    float m_FeetSpacing,
    bool m_HasLeftHand,
    bool m_HasRightHand,
    bool m_HasTDoF) : IUnityStructure
{
    public static Human Read(EndianBinaryReader reader)
    {
        xform m_RootX_ = xform.Read(reader);
        OffsetPtr m_Skeleton_ = OffsetPtr.Read(reader);
        OffsetPtr_1 m_SkeletonPose_ = OffsetPtr_1.Read(reader);
        OffsetPtr_3 m_LeftHand_ = OffsetPtr_3.Read(reader);
        OffsetPtr_3 m_RightHand_ = OffsetPtr_3.Read(reader);
        int[] m_HumanBoneIndex_ = BuiltInArray<int>.Read(reader);
        float[] m_HumanBoneMass_ = BuiltInArray<float>.Read(reader);
        float m_Scale_ = reader.ReadF32();
        float m_ArmTwist_ = reader.ReadF32();
        float m_ForeArmTwist_ = reader.ReadF32();
        float m_UpperLegTwist_ = reader.ReadF32();
        float m_LegTwist_ = reader.ReadF32();
        float m_ArmStretch_ = reader.ReadF32();
        float m_LegStretch_ = reader.ReadF32();
        float m_FeetSpacing_ = reader.ReadF32();
        bool m_HasLeftHand_ = reader.ReadBool();
        bool m_HasRightHand_ = reader.ReadBool();
        bool m_HasTDoF_ = reader.ReadBool();
        reader.AlignTo(4); /* m_HasTDoF */
        
        return new(m_RootX_,
            m_Skeleton_,
            m_SkeletonPose_,
            m_LeftHand_,
            m_RightHand_,
            m_HumanBoneIndex_,
            m_HumanBoneMass_,
            m_Scale_,
            m_ArmTwist_,
            m_ForeArmTwist_,
            m_UpperLegTwist_,
            m_LegTwist_,
            m_ArmStretch_,
            m_LegStretch_,
            m_FeetSpacing_,
            m_HasLeftHand_,
            m_HasRightHand_,
            m_HasTDoF_);
    }

    public override string ToString() => $"Human\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RootX: {{ \n{m_RootX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Skeleton: {{ \n{m_Skeleton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SkeletonPose: {{ \n{m_SkeletonPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LeftHand: {{ \n{m_LeftHand.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RightHand: {{ \n{m_RightHand.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HumanBoneIndex[{m_HumanBoneIndex.Length}] = {{");
        if (m_HumanBoneIndex.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_HumanBoneIndex)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_HumanBoneIndex.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HumanBoneMass[{m_HumanBoneMass.Length}] = {{");
        if (m_HumanBoneMass.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_HumanBoneMass)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_HumanBoneMass.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Scale: {m_Scale}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArmTwist: {m_ArmTwist}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ForeArmTwist: {m_ForeArmTwist}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UpperLegTwist: {m_UpperLegTwist}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LegTwist: {m_LegTwist}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArmStretch: {m_ArmStretch}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LegStretch: {m_LegStretch}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FeetSpacing: {m_FeetSpacing}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasLeftHand: {m_HasLeftHand}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasRightHand: {m_HasRightHand}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasTDoF: {m_HasTDoF}");
    }
}

/* $OffsetPtr_3 (1 fields) */
public record class OffsetPtr_3 (
    Hand data) : IUnityStructure
{
    public static OffsetPtr_3 Read(EndianBinaryReader reader)
    {
        Hand data_ = Hand.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Hand (1 fields) */
public record class Hand (
    int[] m_HandBoneIndex) : IUnityStructure
{
    public static Hand Read(EndianBinaryReader reader)
    {
        int[] m_HandBoneIndex_ = BuiltInArray<int>.Read(reader);
        
        return new(m_HandBoneIndex_);
    }

    public override string ToString() => $"Hand\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HandBoneIndex[{m_HandBoneIndex.Length}] = {{");
        if (m_HandBoneIndex.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_HandBoneIndex)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_HandBoneIndex.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $HumanDescription (14 fields) */
public record class HumanDescription (
    HumanBone[] m_Human,
    SkeletonBone[] m_Skeleton,
    float m_ArmTwist,
    float m_ForeArmTwist,
    float m_UpperLegTwist,
    float m_LegTwist,
    float m_ArmStretch,
    float m_LegStretch,
    float m_FeetSpacing,
    float m_GlobalScale,
    AsciiString m_RootMotionBoneName,
    bool m_HasTranslationDoF,
    bool m_HasExtraRoot,
    bool m_SkeletonHasParents) : IUnityStructure
{
    public static HumanDescription Read(EndianBinaryReader reader)
    {
        HumanBone[] m_Human_ = BuiltInArray<HumanBone>.Read(reader);
        reader.AlignTo(4); /* m_Human */
        SkeletonBone[] m_Skeleton_ = BuiltInArray<SkeletonBone>.Read(reader);
        reader.AlignTo(4); /* m_Skeleton */
        float m_ArmTwist_ = reader.ReadF32();
        float m_ForeArmTwist_ = reader.ReadF32();
        float m_UpperLegTwist_ = reader.ReadF32();
        float m_LegTwist_ = reader.ReadF32();
        float m_ArmStretch_ = reader.ReadF32();
        float m_LegStretch_ = reader.ReadF32();
        float m_FeetSpacing_ = reader.ReadF32();
        float m_GlobalScale_ = reader.ReadF32();
        AsciiString m_RootMotionBoneName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_RootMotionBoneName */
        bool m_HasTranslationDoF_ = reader.ReadBool();
        bool m_HasExtraRoot_ = reader.ReadBool();
        bool m_SkeletonHasParents_ = reader.ReadBool();
        reader.AlignTo(4); /* m_SkeletonHasParents */
        
        return new(m_Human_,
            m_Skeleton_,
            m_ArmTwist_,
            m_ForeArmTwist_,
            m_UpperLegTwist_,
            m_LegTwist_,
            m_ArmStretch_,
            m_LegStretch_,
            m_FeetSpacing_,
            m_GlobalScale_,
            m_RootMotionBoneName_,
            m_HasTranslationDoF_,
            m_HasExtraRoot_,
            m_SkeletonHasParents_);
    }

    public override string ToString() => $"HumanDescription\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Human[{m_Human.Length}] = {{");
        if (m_Human.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (HumanBone _4 in m_Human)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Human.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Skeleton[{m_Skeleton.Length}] = {{");
        if (m_Skeleton.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SkeletonBone _4 in m_Skeleton)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Skeleton.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArmTwist: {m_ArmTwist}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ForeArmTwist: {m_ForeArmTwist}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UpperLegTwist: {m_UpperLegTwist}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LegTwist: {m_LegTwist}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ArmStretch: {m_ArmStretch}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LegStretch: {m_LegStretch}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FeetSpacing: {m_FeetSpacing}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GlobalScale: {m_GlobalScale}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RootMotionBoneName: \"{m_RootMotionBoneName}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasTranslationDoF: {m_HasTranslationDoF}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasExtraRoot: {m_HasExtraRoot}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SkeletonHasParents: {m_SkeletonHasParents}");
    }
}

/* $HumanBone (3 fields) */
public record class HumanBone (
    AsciiString m_BoneName,
    AsciiString m_HumanName,
    SkeletonBoneLimit m_Limit) : IUnityStructure
{
    public static HumanBone Read(EndianBinaryReader reader)
    {
        AsciiString m_BoneName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_BoneName */
        AsciiString m_HumanName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HumanName */
        SkeletonBoneLimit m_Limit_ = SkeletonBoneLimit.Read(reader);
        reader.AlignTo(4); /* m_Limit */
        
        return new(m_BoneName_,
            m_HumanName_,
            m_Limit_);
    }

    public override string ToString() => $"HumanBone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoneName: \"{m_BoneName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HumanName: \"{m_HumanName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Limit: {{ \n{m_Limit.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SkeletonBoneLimit (5 fields) */
public record class SkeletonBoneLimit (
    Vector3f m_Min,
    Vector3f m_Max,
    Vector3f m_Value,
    float m_Length,
    bool m_Modified) : IUnityStructure
{
    public static SkeletonBoneLimit Read(EndianBinaryReader reader)
    {
        Vector3f m_Min_ = Vector3f.Read(reader);
        Vector3f m_Max_ = Vector3f.Read(reader);
        Vector3f m_Value_ = Vector3f.Read(reader);
        float m_Length_ = reader.ReadF32();
        bool m_Modified_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Modified */
        
        return new(m_Min_,
            m_Max_,
            m_Value_,
            m_Length_,
            m_Modified_);
    }

    public override string ToString() => $"SkeletonBoneLimit\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Min: {{ x: {m_Min.x}, y: {m_Min.y}, z: {m_Min.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Max: {{ x: {m_Max.x}, y: {m_Max.y}, z: {m_Max.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y}, z: {m_Value.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Length: {m_Length}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Modified: {m_Modified}");
    }
}

/* $SkeletonBone (5 fields) */
public record class SkeletonBone (
    AsciiString m_Name,
    AsciiString m_ParentName,
    Vector3f m_Position,
    Quaternionf m_Rotation,
    Vector3f m_Scale) : IUnityStructure
{
    public static SkeletonBone Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString m_ParentName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ParentName */
        Vector3f m_Position_ = Vector3f.Read(reader);
        Quaternionf m_Rotation_ = Quaternionf.Read(reader);
        Vector3f m_Scale_ = Vector3f.Read(reader);
        
        return new(m_Name_,
            m_ParentName_,
            m_Position_,
            m_Rotation_,
            m_Scale_);
    }

    public override string ToString() => $"SkeletonBone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ParentName: \"{m_ParentName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Position: {{ x: {m_Position.x}, y: {m_Position.y}, z: {m_Position.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Rotation: {{ x: {m_Rotation.x}, y: {m_Rotation.y}, z: {m_Rotation.z}, w: {m_Rotation.w} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Scale: {{ x: {m_Scale.x}, y: {m_Scale.y}, z: {m_Scale.z} }}\n");
    }
}

/* $BuiltinShaderSettings (2 fields) */
public record class BuiltinShaderSettings (
    int m_Mode,
    PPtr<Shader> m_Shader) : IUnityStructure
{
    public static BuiltinShaderSettings Read(EndianBinaryReader reader)
    {
        int m_Mode_ = reader.ReadS32();
        PPtr<Shader> m_Shader_ = PPtr<Shader>.Read(reader);
        
        return new(m_Mode_,
            m_Shader_);
    }

    public override string ToString() => $"BuiltinShaderSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Shader: {m_Shader}");
    }
}

/* $TierGraphicsSettings (7 fields) */
public readonly record struct TierGraphicsSettings (
    int renderingPath,
    int hdrMode,
    int realtimeGICPUUsage,
    bool useCascadedShadowMaps,
    bool prefer32BitShadowMaps,
    bool enableLPPV,
    bool useHDR) : IUnityStructure
{
    public static TierGraphicsSettings Read(EndianBinaryReader reader)
    {
        int renderingPath_ = reader.ReadS32();
        int hdrMode_ = reader.ReadS32();
        int realtimeGICPUUsage_ = reader.ReadS32();
        bool useCascadedShadowMaps_ = reader.ReadBool();
        bool prefer32BitShadowMaps_ = reader.ReadBool();
        bool enableLPPV_ = reader.ReadBool();
        bool useHDR_ = reader.ReadBool();
        reader.AlignTo(4); /* useHDR */
        
        return new(renderingPath_,
            hdrMode_,
            realtimeGICPUUsage_,
            useCascadedShadowMaps_,
            prefer32BitShadowMaps_,
            enableLPPV_,
            useHDR_);
    }

    public override string ToString() => $"TierGraphicsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}renderingPath: {renderingPath}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hdrMode: {hdrMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}realtimeGICPUUsage: {realtimeGICPUUsage}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useCascadedShadowMaps: {useCascadedShadowMaps}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}prefer32BitShadowMaps: {prefer32BitShadowMaps}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enableLPPV: {enableLPPV}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useHDR: {useHDR}");
    }
}

/* $PlatformShaderDefines (4 fields) */
public record class PlatformShaderDefines (
    int shaderPlatform,
    uint[] defines_Tier1,
    uint[] defines_Tier2,
    uint[] defines_Tier3) : IUnityStructure
{
    public static PlatformShaderDefines Read(EndianBinaryReader reader)
    {
        int shaderPlatform_ = reader.ReadS32();
        uint[] defines_Tier1_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* defines_Tier1 */
        uint[] defines_Tier2_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* defines_Tier2 */
        uint[] defines_Tier3_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* defines_Tier3 */
        
        return new(shaderPlatform_,
            defines_Tier1_,
            defines_Tier2_,
            defines_Tier3_);
    }

    public override string ToString() => $"PlatformShaderDefines\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shaderPlatform: {shaderPlatform}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defines_Tier1[{defines_Tier1.Length}] = {{");
        if (defines_Tier1.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in defines_Tier1)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (defines_Tier1.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defines_Tier2[{defines_Tier2.Length}] = {{");
        if (defines_Tier2.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in defines_Tier2)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (defines_Tier2.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defines_Tier3[{defines_Tier3.Length}] = {{");
        if (defines_Tier3.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in defines_Tier3)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (defines_Tier3.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SoftJointLimitSpring (2 fields) */
public readonly record struct SoftJointLimitSpring (
    float spring,
    float damper) : IUnityStructure
{
    public static SoftJointLimitSpring Read(EndianBinaryReader reader)
    {
        float spring_ = reader.ReadF32();
        float damper_ = reader.ReadF32();
        
        return new(spring_,
            damper_);
    }

    public override string ToString() => $"SoftJointLimitSpring\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}spring: {spring}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}damper: {damper}");
    }
}

/* $SoftJointLimit (3 fields) */
public readonly record struct SoftJointLimit (
    float limit,
    float bounciness,
    float contactDistance) : IUnityStructure
{
    public static SoftJointLimit Read(EndianBinaryReader reader)
    {
        float limit_ = reader.ReadF32();
        float bounciness_ = reader.ReadF32();
        float contactDistance_ = reader.ReadF32();
        
        return new(limit_,
            bounciness_,
            contactDistance_);
    }

    public override string ToString() => $"SoftJointLimit\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}limit: {limit}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bounciness: {bounciness}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}contactDistance: {contactDistance}");
    }
}

/* $ControllerConstant (4 fields) */
public record class ControllerConstant (
    OffsetPtr_4[] m_LayerArray,
    OffsetPtr_6[] m_StateMachineArray,
    OffsetPtr_17 m_Values,
    OffsetPtr_18 m_DefaultValues) : IUnityStructure
{
    public static ControllerConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr_4[] m_LayerArray_ = BuiltInArray<OffsetPtr_4>.Read(reader);
        reader.AlignTo(4); /* m_LayerArray */
        OffsetPtr_6[] m_StateMachineArray_ = BuiltInArray<OffsetPtr_6>.Read(reader);
        reader.AlignTo(4); /* m_StateMachineArray */
        OffsetPtr_17 m_Values_ = OffsetPtr_17.Read(reader);
        OffsetPtr_18 m_DefaultValues_ = OffsetPtr_18.Read(reader);
        reader.AlignTo(4); /* m_DefaultValues */
        
        return new(m_LayerArray_,
            m_StateMachineArray_,
            m_Values_,
            m_DefaultValues_);
    }

    public override string ToString() => $"ControllerConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LayerArray[{m_LayerArray.Length}] = {{");
        if (m_LayerArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_4 _4 in m_LayerArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_LayerArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StateMachineArray[{m_StateMachineArray.Length}] = {{");
        if (m_StateMachineArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_6 _4 in m_StateMachineArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_StateMachineArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Values: {{ \n{m_Values.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DefaultValues: {{ \n{m_DefaultValues.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $OffsetPtr_4 (1 fields) */
public record class OffsetPtr_4 (
    LayerConstant data) : IUnityStructure
{
    public static OffsetPtr_4 Read(EndianBinaryReader reader)
    {
        LayerConstant data_ = LayerConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $LayerConstant (9 fields) */
public record class LayerConstant (
    uint m_StateMachineIndex,
    uint m_StateMachineSynchronizedLayerIndex,
    HumanPoseMask m_BodyMask,
    OffsetPtr_5 m_SkeletonMask,
    uint m_Binding,
    int _intRef_m_LayerBlendingMode,
    float m_DefaultWeight,
    bool m_IKPass,
    bool m_SyncedLayerAffectsTiming) : IUnityStructure
{
    public static LayerConstant Read(EndianBinaryReader reader)
    {
        uint m_StateMachineIndex_ = reader.ReadU32();
        uint m_StateMachineSynchronizedLayerIndex_ = reader.ReadU32();
        HumanPoseMask m_BodyMask_ = HumanPoseMask.Read(reader);
        OffsetPtr_5 m_SkeletonMask_ = OffsetPtr_5.Read(reader);
        uint m_Binding_ = reader.ReadU32();
        int _intRef_m_LayerBlendingMode_ = reader.ReadS32();
        float m_DefaultWeight_ = reader.ReadF32();
        bool m_IKPass_ = reader.ReadBool();
        bool m_SyncedLayerAffectsTiming_ = reader.ReadBool();
        reader.AlignTo(4); /* m_SyncedLayerAffectsTiming */
        
        return new(m_StateMachineIndex_,
            m_StateMachineSynchronizedLayerIndex_,
            m_BodyMask_,
            m_SkeletonMask_,
            m_Binding_,
            _intRef_m_LayerBlendingMode_,
            m_DefaultWeight_,
            m_IKPass_,
            m_SyncedLayerAffectsTiming_);
    }

    public override string ToString() => $"LayerConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StateMachineIndex: {m_StateMachineIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StateMachineSynchronizedLayerIndex: {m_StateMachineSynchronizedLayerIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BodyMask: {{ word0: {m_BodyMask.word0}, word1: {m_BodyMask.word1}, word2: {m_BodyMask.word2} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SkeletonMask: {{ \n{m_SkeletonMask.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Binding: {m_Binding}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_intRef_m_LayerBlendingMode: {_intRef_m_LayerBlendingMode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultWeight: {m_DefaultWeight}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IKPass: {m_IKPass}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SyncedLayerAffectsTiming: {m_SyncedLayerAffectsTiming}");
    }
}

/* $HumanPoseMask (3 fields) */
public readonly record struct HumanPoseMask (
    uint word0,
    uint word1,
    uint word2) : IUnityStructure
{
    public static HumanPoseMask Read(EndianBinaryReader reader)
    {
        uint word0_ = reader.ReadU32();
        uint word1_ = reader.ReadU32();
        uint word2_ = reader.ReadU32();
        
        return new(word0_,
            word1_,
            word2_);
    }

    public override string ToString() => $"HumanPoseMask\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}word0: {word0}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}word1: {word1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}word2: {word2}");
    }
}

/* $OffsetPtr_5 (1 fields) */
public record class OffsetPtr_5 (
    SkeletonMask data) : IUnityStructure
{
    public static OffsetPtr_5 Read(EndianBinaryReader reader)
    {
        SkeletonMask data_ = SkeletonMask.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SkeletonMask (1 fields) */
public record class SkeletonMask (
    SkeletonMaskElement[] m_Data) : IUnityStructure
{
    public static SkeletonMask Read(EndianBinaryReader reader)
    {
        SkeletonMaskElement[] m_Data_ = BuiltInArray<SkeletonMaskElement>.Read(reader);
        
        return new(m_Data_);
    }

    public override string ToString() => $"SkeletonMask\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Data[{m_Data.Length}] = {{");
        if (m_Data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SkeletonMaskElement _4 in m_Data)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_PathHash: {_4.m_PathHash}, m_Weight: {_4.m_Weight} }}\n");
            ++_4i;
        }
        if (m_Data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SkeletonMaskElement (2 fields) */
public readonly record struct SkeletonMaskElement (
    uint m_PathHash,
    float m_Weight) : IUnityStructure
{
    public static SkeletonMaskElement Read(EndianBinaryReader reader)
    {
        uint m_PathHash_ = reader.ReadU32();
        float m_Weight_ = reader.ReadF32();
        
        return new(m_PathHash_,
            m_Weight_);
    }

    public override string ToString() => $"SkeletonMaskElement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PathHash: {m_PathHash}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight: {m_Weight}");
    }
}

/* $OffsetPtr_6 (1 fields) */
public record class OffsetPtr_6 (
    StateMachineConstant data) : IUnityStructure
{
    public static OffsetPtr_6 Read(EndianBinaryReader reader)
    {
        StateMachineConstant data_ = StateMachineConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StateMachineConstant (5 fields) */
public record class StateMachineConstant (
    OffsetPtr_7[] m_StateConstantArray,
    OffsetPtr_8[] m_AnyStateTransitionConstantArray,
    OffsetPtr_15[] m_SelectorStateConstantArray,
    uint m_DefaultState,
    uint m_SynchronizedLayerCount) : IUnityStructure
{
    public static StateMachineConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr_7[] m_StateConstantArray_ = BuiltInArray<OffsetPtr_7>.Read(reader);
        reader.AlignTo(4); /* m_StateConstantArray */
        OffsetPtr_8[] m_AnyStateTransitionConstantArray_ = BuiltInArray<OffsetPtr_8>.Read(reader);
        reader.AlignTo(4); /* m_AnyStateTransitionConstantArray */
        OffsetPtr_15[] m_SelectorStateConstantArray_ = BuiltInArray<OffsetPtr_15>.Read(reader);
        reader.AlignTo(4); /* m_SelectorStateConstantArray */
        uint m_DefaultState_ = reader.ReadU32();
        uint m_SynchronizedLayerCount_ = reader.ReadU32();
        
        return new(m_StateConstantArray_,
            m_AnyStateTransitionConstantArray_,
            m_SelectorStateConstantArray_,
            m_DefaultState_,
            m_SynchronizedLayerCount_);
    }

    public override string ToString() => $"StateMachineConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StateConstantArray[{m_StateConstantArray.Length}] = {{");
        if (m_StateConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_7 _4 in m_StateConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_StateConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AnyStateTransitionConstantArray[{m_AnyStateTransitionConstantArray.Length}] = {{");
        if (m_AnyStateTransitionConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_8 _4 in m_AnyStateTransitionConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_AnyStateTransitionConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SelectorStateConstantArray[{m_SelectorStateConstantArray.Length}] = {{");
        if (m_SelectorStateConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_15 _4 in m_SelectorStateConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_SelectorStateConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultState: {m_DefaultState}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SynchronizedLayerCount: {m_SynchronizedLayerCount}");
    }
}

/* $OffsetPtr_7 (1 fields) */
public record class OffsetPtr_7 (
    StateConstant data) : IUnityStructure
{
    public static OffsetPtr_7 Read(EndianBinaryReader reader)
    {
        StateConstant data_ = StateConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StateConstant (17 fields) */
public record class StateConstant (
    OffsetPtr_8[] m_TransitionConstantArray,
    int[] m_BlendTreeConstantIndexArray,
    OffsetPtr_10[] m_BlendTreeConstantArray,
    uint m_NameID,
    uint m_PathID,
    uint m_FullPathID,
    uint m_TagID,
    uint m_SpeedParamID,
    uint m_MirrorParamID,
    uint m_CycleOffsetParamID,
    uint m_TimeParamID,
    float m_Speed,
    float m_CycleOffset,
    bool m_IKOnFeet,
    bool m_WriteDefaultValues,
    bool m_Loop,
    bool m_Mirror) : IUnityStructure
{
    public static StateConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr_8[] m_TransitionConstantArray_ = BuiltInArray<OffsetPtr_8>.Read(reader);
        reader.AlignTo(4); /* m_TransitionConstantArray */
        int[] m_BlendTreeConstantIndexArray_ = BuiltInArray<int>.Read(reader);
        OffsetPtr_10[] m_BlendTreeConstantArray_ = BuiltInArray<OffsetPtr_10>.Read(reader);
        reader.AlignTo(4); /* m_BlendTreeConstantArray */
        uint m_NameID_ = reader.ReadU32();
        uint m_PathID_ = reader.ReadU32();
        uint m_FullPathID_ = reader.ReadU32();
        uint m_TagID_ = reader.ReadU32();
        uint m_SpeedParamID_ = reader.ReadU32();
        uint m_MirrorParamID_ = reader.ReadU32();
        uint m_CycleOffsetParamID_ = reader.ReadU32();
        uint m_TimeParamID_ = reader.ReadU32();
        float m_Speed_ = reader.ReadF32();
        float m_CycleOffset_ = reader.ReadF32();
        bool m_IKOnFeet_ = reader.ReadBool();
        bool m_WriteDefaultValues_ = reader.ReadBool();
        bool m_Loop_ = reader.ReadBool();
        bool m_Mirror_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Mirror */
        
        return new(m_TransitionConstantArray_,
            m_BlendTreeConstantIndexArray_,
            m_BlendTreeConstantArray_,
            m_NameID_,
            m_PathID_,
            m_FullPathID_,
            m_TagID_,
            m_SpeedParamID_,
            m_MirrorParamID_,
            m_CycleOffsetParamID_,
            m_TimeParamID_,
            m_Speed_,
            m_CycleOffset_,
            m_IKOnFeet_,
            m_WriteDefaultValues_,
            m_Loop_,
            m_Mirror_);
    }

    public override string ToString() => $"StateConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TransitionConstantArray[{m_TransitionConstantArray.Length}] = {{");
        if (m_TransitionConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_8 _4 in m_TransitionConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TransitionConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BlendTreeConstantIndexArray[{m_BlendTreeConstantIndexArray.Length}] = {{");
        if (m_BlendTreeConstantIndexArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_BlendTreeConstantIndexArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_BlendTreeConstantIndexArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BlendTreeConstantArray[{m_BlendTreeConstantArray.Length}] = {{");
        if (m_BlendTreeConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_10 _4 in m_BlendTreeConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_BlendTreeConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NameID: {m_NameID}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PathID: {m_PathID}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FullPathID: {m_FullPathID}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TagID: {m_TagID}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SpeedParamID: {m_SpeedParamID}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MirrorParamID: {m_MirrorParamID}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CycleOffsetParamID: {m_CycleOffsetParamID}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TimeParamID: {m_TimeParamID}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Speed: {m_Speed}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CycleOffset: {m_CycleOffset}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IKOnFeet: {m_IKOnFeet}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WriteDefaultValues: {m_WriteDefaultValues}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Loop: {m_Loop}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mirror: {m_Mirror}");
    }
}

/* $OffsetPtr_8 (1 fields) */
public record class OffsetPtr_8 (
    TransitionConstant data) : IUnityStructure
{
    public static OffsetPtr_8 Read(EndianBinaryReader reader)
    {
        TransitionConstant data_ = TransitionConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TransitionConstant (13 fields) */
public record class TransitionConstant (
    OffsetPtr_9[] m_ConditionConstantArray,
    uint m_DestinationState,
    uint m_FullPathID,
    uint m_ID,
    uint m_UserID,
    float m_TransitionDuration,
    float m_TransitionOffset,
    float m_ExitTime,
    bool m_HasExitTime,
    bool m_HasFixedDuration,
    int m_InterruptionSource,
    bool m_OrderedInterruption,
    bool m_CanTransitionToSelf) : IUnityStructure
{
    public static TransitionConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr_9[] m_ConditionConstantArray_ = BuiltInArray<OffsetPtr_9>.Read(reader);
        uint m_DestinationState_ = reader.ReadU32();
        uint m_FullPathID_ = reader.ReadU32();
        uint m_ID_ = reader.ReadU32();
        uint m_UserID_ = reader.ReadU32();
        float m_TransitionDuration_ = reader.ReadF32();
        float m_TransitionOffset_ = reader.ReadF32();
        float m_ExitTime_ = reader.ReadF32();
        bool m_HasExitTime_ = reader.ReadBool();
        bool m_HasFixedDuration_ = reader.ReadBool();
        reader.AlignTo(4); /* m_HasFixedDuration */
        int m_InterruptionSource_ = reader.ReadS32();
        bool m_OrderedInterruption_ = reader.ReadBool();
        bool m_CanTransitionToSelf_ = reader.ReadBool();
        reader.AlignTo(4); /* m_CanTransitionToSelf */
        
        return new(m_ConditionConstantArray_,
            m_DestinationState_,
            m_FullPathID_,
            m_ID_,
            m_UserID_,
            m_TransitionDuration_,
            m_TransitionOffset_,
            m_ExitTime_,
            m_HasExitTime_,
            m_HasFixedDuration_,
            m_InterruptionSource_,
            m_OrderedInterruption_,
            m_CanTransitionToSelf_);
    }

    public override string ToString() => $"TransitionConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ConditionConstantArray[{m_ConditionConstantArray.Length}] = {{");
        if (m_ConditionConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_9 _4 in m_ConditionConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_ConditionConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DestinationState: {m_DestinationState}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FullPathID: {m_FullPathID}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ID: {m_ID}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UserID: {m_UserID}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TransitionDuration: {m_TransitionDuration}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TransitionOffset: {m_TransitionOffset}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExitTime: {m_ExitTime}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasExitTime: {m_HasExitTime}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HasFixedDuration: {m_HasFixedDuration}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InterruptionSource: {m_InterruptionSource}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OrderedInterruption: {m_OrderedInterruption}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CanTransitionToSelf: {m_CanTransitionToSelf}");
    }
}

/* $OffsetPtr_9 (1 fields) */
public record class OffsetPtr_9 (
    ConditionConstant data) : IUnityStructure
{
    public static OffsetPtr_9 Read(EndianBinaryReader reader)
    {
        ConditionConstant data_ = ConditionConstant.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ m_ConditionMode: {data.m_ConditionMode}, m_EventID: {data.m_EventID}, m_EventThreshold: {data.m_EventThreshold}, m_ExitTime: {data.m_ExitTime} }}\n");
    }
}

/* $ConditionConstant (4 fields) */
public readonly record struct ConditionConstant (
    uint m_ConditionMode,
    uint m_EventID,
    float m_EventThreshold,
    float m_ExitTime) : IUnityStructure
{
    public static ConditionConstant Read(EndianBinaryReader reader)
    {
        uint m_ConditionMode_ = reader.ReadU32();
        uint m_EventID_ = reader.ReadU32();
        float m_EventThreshold_ = reader.ReadF32();
        float m_ExitTime_ = reader.ReadF32();
        
        return new(m_ConditionMode_,
            m_EventID_,
            m_EventThreshold_,
            m_ExitTime_);
    }

    public override string ToString() => $"ConditionConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ConditionMode: {m_ConditionMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EventID: {m_EventID}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EventThreshold: {m_EventThreshold}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExitTime: {m_ExitTime}");
    }
}

/* $OffsetPtr_10 (1 fields) */
public record class OffsetPtr_10 (
    BlendTreeConstant data) : IUnityStructure
{
    public static OffsetPtr_10 Read(EndianBinaryReader reader)
    {
        BlendTreeConstant data_ = BlendTreeConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_10\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlendTreeConstant (1 fields) */
public record class BlendTreeConstant (
    OffsetPtr_11[] m_NodeArray) : IUnityStructure
{
    public static BlendTreeConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr_11[] m_NodeArray_ = BuiltInArray<OffsetPtr_11>.Read(reader);
        reader.AlignTo(4); /* m_NodeArray */
        
        return new(m_NodeArray_);
    }

    public override string ToString() => $"BlendTreeConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NodeArray[{m_NodeArray.Length}] = {{");
        if (m_NodeArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_11 _4 in m_NodeArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_NodeArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OffsetPtr_11 (1 fields) */
public record class OffsetPtr_11 (
    BlendTreeNodeConstant data) : IUnityStructure
{
    public static OffsetPtr_11 Read(EndianBinaryReader reader)
    {
        BlendTreeNodeConstant data_ = BlendTreeNodeConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_11\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlendTreeNodeConstant (11 fields) */
public record class BlendTreeNodeConstant (
    uint m_BlendType,
    uint m_BlendEventID,
    uint m_BlendEventYID,
    uint[] m_ChildIndices,
    OffsetPtr_12 m_Blend1dData,
    OffsetPtr_13 m_Blend2dData,
    OffsetPtr_14 m_BlendDirectData,
    uint m_ClipID,
    float m_Duration,
    float m_CycleOffset,
    bool m_Mirror) : IUnityStructure
{
    public static BlendTreeNodeConstant Read(EndianBinaryReader reader)
    {
        uint m_BlendType_ = reader.ReadU32();
        uint m_BlendEventID_ = reader.ReadU32();
        uint m_BlendEventYID_ = reader.ReadU32();
        uint[] m_ChildIndices_ = BuiltInArray<uint>.Read(reader);
        OffsetPtr_12 m_Blend1dData_ = OffsetPtr_12.Read(reader);
        OffsetPtr_13 m_Blend2dData_ = OffsetPtr_13.Read(reader);
        OffsetPtr_14 m_BlendDirectData_ = OffsetPtr_14.Read(reader);
        reader.AlignTo(4); /* m_BlendDirectData */
        uint m_ClipID_ = reader.ReadU32();
        float m_Duration_ = reader.ReadF32();
        float m_CycleOffset_ = reader.ReadF32();
        bool m_Mirror_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Mirror */
        
        return new(m_BlendType_,
            m_BlendEventID_,
            m_BlendEventYID_,
            m_ChildIndices_,
            m_Blend1dData_,
            m_Blend2dData_,
            m_BlendDirectData_,
            m_ClipID_,
            m_Duration_,
            m_CycleOffset_,
            m_Mirror_);
    }

    public override string ToString() => $"BlendTreeNodeConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendType: {m_BlendType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendEventID: {m_BlendEventID}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendEventYID: {m_BlendEventYID}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildIndices[{m_ChildIndices.Length}] = {{");
        if (m_ChildIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_ChildIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ChildIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Blend1dData: {{ \n{m_Blend1dData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Blend2dData: {{ \n{m_Blend2dData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BlendDirectData: {{ \n{m_BlendDirectData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipID: {m_ClipID}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CycleOffset: {m_CycleOffset}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mirror: {m_Mirror}");
    }
}

/* $OffsetPtr_12 (1 fields) */
public record class OffsetPtr_12 (
    Blend1dDataConstant data) : IUnityStructure
{
    public static OffsetPtr_12 Read(EndianBinaryReader reader)
    {
        Blend1dDataConstant data_ = Blend1dDataConstant.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_12\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Blend1dDataConstant (1 fields) */
public record class Blend1dDataConstant (
    float[] m_ChildThresholdArray) : IUnityStructure
{
    public static Blend1dDataConstant Read(EndianBinaryReader reader)
    {
        float[] m_ChildThresholdArray_ = BuiltInArray<float>.Read(reader);
        
        return new(m_ChildThresholdArray_);
    }

    public override string ToString() => $"Blend1dDataConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildThresholdArray[{m_ChildThresholdArray.Length}] = {{");
        if (m_ChildThresholdArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_ChildThresholdArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ChildThresholdArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OffsetPtr_13 (1 fields) */
public record class OffsetPtr_13 (
    Blend2dDataConstant data) : IUnityStructure
{
    public static OffsetPtr_13 Read(EndianBinaryReader reader)
    {
        Blend2dDataConstant data_ = Blend2dDataConstant.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_13\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Blend2dDataConstant (5 fields) */
public record class Blend2dDataConstant (
    Vector2f[] m_ChildPositionArray,
    float[] m_ChildMagnitudeArray,
    Vector2f[] m_ChildPairVectorArray,
    float[] m_ChildPairAvgMagInvArray,
    MotionNeighborList[] m_ChildNeighborListArray) : IUnityStructure
{
    public static Blend2dDataConstant Read(EndianBinaryReader reader)
    {
        Vector2f[] m_ChildPositionArray_ = BuiltInArray<Vector2f>.Read(reader);
        float[] m_ChildMagnitudeArray_ = BuiltInArray<float>.Read(reader);
        Vector2f[] m_ChildPairVectorArray_ = BuiltInArray<Vector2f>.Read(reader);
        float[] m_ChildPairAvgMagInvArray_ = BuiltInArray<float>.Read(reader);
        MotionNeighborList[] m_ChildNeighborListArray_ = BuiltInArray<MotionNeighborList>.Read(reader);
        
        return new(m_ChildPositionArray_,
            m_ChildMagnitudeArray_,
            m_ChildPairVectorArray_,
            m_ChildPairAvgMagInvArray_,
            m_ChildNeighborListArray_);
    }

    public override string ToString() => $"Blend2dDataConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildPositionArray[{m_ChildPositionArray.Length}] = {{");
        if (m_ChildPositionArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in m_ChildPositionArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (m_ChildPositionArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildMagnitudeArray[{m_ChildMagnitudeArray.Length}] = {{");
        if (m_ChildMagnitudeArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_ChildMagnitudeArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ChildMagnitudeArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildPairVectorArray[{m_ChildPairVectorArray.Length}] = {{");
        if (m_ChildPairVectorArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in m_ChildPairVectorArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (m_ChildPairVectorArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildPairAvgMagInvArray[{m_ChildPairAvgMagInvArray.Length}] = {{");
        if (m_ChildPairAvgMagInvArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_ChildPairAvgMagInvArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ChildPairAvgMagInvArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildNeighborListArray[{m_ChildNeighborListArray.Length}] = {{");
        if (m_ChildNeighborListArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MotionNeighborList _4 in m_ChildNeighborListArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_ChildNeighborListArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MotionNeighborList (1 fields) */
public record class MotionNeighborList (
    uint[] m_NeighborArray) : IUnityStructure
{
    public static MotionNeighborList Read(EndianBinaryReader reader)
    {
        uint[] m_NeighborArray_ = BuiltInArray<uint>.Read(reader);
        
        return new(m_NeighborArray_);
    }

    public override string ToString() => $"MotionNeighborList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NeighborArray[{m_NeighborArray.Length}] = {{");
        if (m_NeighborArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_NeighborArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_NeighborArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OffsetPtr_14 (1 fields) */
public record class OffsetPtr_14 (
    BlendDirectDataConstant data) : IUnityStructure
{
    public static OffsetPtr_14 Read(EndianBinaryReader reader)
    {
        BlendDirectDataConstant data_ = BlendDirectDataConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_14\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlendDirectDataConstant (2 fields) */
public record class BlendDirectDataConstant (
    uint[] m_ChildBlendEventIDArray,
    bool m_NormalizedBlendValues) : IUnityStructure
{
    public static BlendDirectDataConstant Read(EndianBinaryReader reader)
    {
        uint[] m_ChildBlendEventIDArray_ = BuiltInArray<uint>.Read(reader);
        bool m_NormalizedBlendValues_ = reader.ReadBool();
        reader.AlignTo(4); /* m_NormalizedBlendValues */
        
        return new(m_ChildBlendEventIDArray_,
            m_NormalizedBlendValues_);
    }

    public override string ToString() => $"BlendDirectDataConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChildBlendEventIDArray[{m_ChildBlendEventIDArray.Length}] = {{");
        if (m_ChildBlendEventIDArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_ChildBlendEventIDArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ChildBlendEventIDArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NormalizedBlendValues: {m_NormalizedBlendValues}");
    }
}

/* $OffsetPtr_15 (1 fields) */
public record class OffsetPtr_15 (
    SelectorStateConstant data) : IUnityStructure
{
    public static OffsetPtr_15 Read(EndianBinaryReader reader)
    {
        SelectorStateConstant data_ = SelectorStateConstant.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_15\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SelectorStateConstant (3 fields) */
public record class SelectorStateConstant (
    OffsetPtr_16[] m_TransitionConstantArray,
    uint m_FullPathID,
    bool m_IsEntry) : IUnityStructure
{
    public static SelectorStateConstant Read(EndianBinaryReader reader)
    {
        OffsetPtr_16[] m_TransitionConstantArray_ = BuiltInArray<OffsetPtr_16>.Read(reader);
        uint m_FullPathID_ = reader.ReadU32();
        bool m_IsEntry_ = reader.ReadBool();
        reader.AlignTo(4); /* m_IsEntry */
        
        return new(m_TransitionConstantArray_,
            m_FullPathID_,
            m_IsEntry_);
    }

    public override string ToString() => $"SelectorStateConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TransitionConstantArray[{m_TransitionConstantArray.Length}] = {{");
        if (m_TransitionConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_16 _4 in m_TransitionConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TransitionConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FullPathID: {m_FullPathID}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IsEntry: {m_IsEntry}");
    }
}

/* $OffsetPtr_16 (1 fields) */
public record class OffsetPtr_16 (
    SelectorTransitionConstant data) : IUnityStructure
{
    public static OffsetPtr_16 Read(EndianBinaryReader reader)
    {
        SelectorTransitionConstant data_ = SelectorTransitionConstant.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_16\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SelectorTransitionConstant (2 fields) */
public record class SelectorTransitionConstant (
    uint m_Destination,
    OffsetPtr_9[] m_ConditionConstantArray) : IUnityStructure
{
    public static SelectorTransitionConstant Read(EndianBinaryReader reader)
    {
        uint m_Destination_ = reader.ReadU32();
        OffsetPtr_9[] m_ConditionConstantArray_ = BuiltInArray<OffsetPtr_9>.Read(reader);
        
        return new(m_Destination_,
            m_ConditionConstantArray_);
    }

    public override string ToString() => $"SelectorTransitionConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Destination: {m_Destination}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ConditionConstantArray[{m_ConditionConstantArray.Length}] = {{");
        if (m_ConditionConstantArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetPtr_9 _4 in m_ConditionConstantArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_ConditionConstantArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OffsetPtr_17 (1 fields) */
public record class OffsetPtr_17 (
    ValueArrayConstant data) : IUnityStructure
{
    public static OffsetPtr_17 Read(EndianBinaryReader reader)
    {
        ValueArrayConstant data_ = ValueArrayConstant.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_17\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ValueArrayConstant (1 fields) */
public record class ValueArrayConstant (
    ValueConstant[] m_ValueArray) : IUnityStructure
{
    public static ValueArrayConstant Read(EndianBinaryReader reader)
    {
        ValueConstant[] m_ValueArray_ = BuiltInArray<ValueConstant>.Read(reader);
        
        return new(m_ValueArray_);
    }

    public override string ToString() => $"ValueArrayConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ValueArray[{m_ValueArray.Length}] = {{");
        if (m_ValueArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ValueConstant _4 in m_ValueArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_ID: {_4.m_ID}, m_Type: {_4.m_Type}, m_Index: {_4.m_Index} }}\n");
            ++_4i;
        }
        if (m_ValueArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ValueConstant (3 fields) */
public readonly record struct ValueConstant (
    uint m_ID,
    uint m_Type,
    uint m_Index) : IUnityStructure
{
    public static ValueConstant Read(EndianBinaryReader reader)
    {
        uint m_ID_ = reader.ReadU32();
        uint m_Type_ = reader.ReadU32();
        uint m_Index_ = reader.ReadU32();
        
        return new(m_ID_,
            m_Type_,
            m_Index_);
    }

    public override string ToString() => $"ValueConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ID: {m_ID}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }
}

/* $OffsetPtr_18 (1 fields) */
public record class OffsetPtr_18 (
    ValueArray data) : IUnityStructure
{
    public static OffsetPtr_18 Read(EndianBinaryReader reader)
    {
        ValueArray data_ = ValueArray.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_18\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ValueArray (6 fields) */
public record class ValueArray (
    float3[] m_PositionValues,
    float4[] m_QuaternionValues,
    float3[] m_ScaleValues,
    float[] m_FloatValues,
    int[] m_IntValues,
    bool[] m_BoolValues) : IUnityStructure
{
    public static ValueArray Read(EndianBinaryReader reader)
    {
        float3[] m_PositionValues_ = BuiltInArray<float3>.Read(reader);
        float4[] m_QuaternionValues_ = BuiltInArray<float4>.Read(reader);
        float3[] m_ScaleValues_ = BuiltInArray<float3>.Read(reader);
        float[] m_FloatValues_ = BuiltInArray<float>.Read(reader);
        int[] m_IntValues_ = BuiltInArray<int>.Read(reader);
        bool[] m_BoolValues_ = BuiltInArray<bool>.Read(reader);
        reader.AlignTo(4); /* m_BoolValues */
        
        return new(m_PositionValues_,
            m_QuaternionValues_,
            m_ScaleValues_,
            m_FloatValues_,
            m_IntValues_,
            m_BoolValues_);
    }

    public override string ToString() => $"ValueArray\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PositionValues[{m_PositionValues.Length}] = {{");
        if (m_PositionValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float3 _4 in m_PositionValues)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (m_PositionValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_QuaternionValues[{m_QuaternionValues.Length}] = {{");
        if (m_QuaternionValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float4 _4 in m_QuaternionValues)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z}, w: {_4.w} }}\n");
            ++_4i;
        }
        if (m_QuaternionValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ScaleValues[{m_ScaleValues.Length}] = {{");
        if (m_ScaleValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float3 _4 in m_ScaleValues)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (m_ScaleValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_FloatValues[{m_FloatValues.Length}] = {{");
        if (m_FloatValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_FloatValues)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_FloatValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_IntValues[{m_IntValues.Length}] = {{");
        if (m_IntValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_IntValues)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_IntValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_BoolValues[{m_BoolValues.Length}] = {{");
        if (m_BoolValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (bool _4 in m_BoolValues)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_BoolValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $StateMachineBehaviourVectorDescription (2 fields) */
public record class StateMachineBehaviourVectorDescription (
    Dictionary<StateKey, StateRange> m_StateMachineBehaviourRanges,
    uint[] m_StateMachineBehaviourIndices) : IUnityStructure
{
    public static StateMachineBehaviourVectorDescription Read(EndianBinaryReader reader)
    {
        Dictionary<StateKey, StateRange> m_StateMachineBehaviourRanges_ = BuiltInMap<StateKey, StateRange>.Read(reader);
        uint[] m_StateMachineBehaviourIndices_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* m_StateMachineBehaviourIndices */
        
        return new(m_StateMachineBehaviourRanges_,
            m_StateMachineBehaviourIndices_);
    }

    public override string ToString() => $"StateMachineBehaviourVectorDescription\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StateMachineBehaviourRanges[{m_StateMachineBehaviourRanges.Count}] = {{");
        if (m_StateMachineBehaviourRanges.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<StateKey, StateRange> _4 in m_StateMachineBehaviourRanges)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4.Key}] = {{ m_StartIndex: {_4.Value.m_StartIndex}, m_Count: {_4.Value.m_Count} }}\n");
            ++_4i;
        }
        if (m_StateMachineBehaviourRanges.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StateMachineBehaviourIndices[{m_StateMachineBehaviourIndices.Length}] = {{");
        if (m_StateMachineBehaviourIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_StateMachineBehaviourIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_StateMachineBehaviourIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $StateKey (2 fields) */
public readonly record struct StateKey (
    uint m_StateID,
    int m_LayerIndex) : IUnityStructure
{
    public static StateKey Read(EndianBinaryReader reader)
    {
        uint m_StateID_ = reader.ReadU32();
        int m_LayerIndex_ = reader.ReadS32();
        
        return new(m_StateID_,
            m_LayerIndex_);
    }

    public override string ToString() => $"StateKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StateID: {m_StateID}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LayerIndex: {m_LayerIndex}");
    }
}

/* $StateRange (2 fields) */
public readonly record struct StateRange (
    uint m_StartIndex,
    uint m_Count) : IUnityStructure
{
    public static StateRange Read(EndianBinaryReader reader)
    {
        uint m_StartIndex_ = reader.ReadU32();
        uint m_Count_ = reader.ReadU32();
        
        return new(m_StartIndex_,
            m_Count_);
    }

    public override string ToString() => $"StateRange\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StartIndex: {m_StartIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Count: {m_Count}");
    }
}

/* $TransformMaskElement (2 fields) */
public record class TransformMaskElement (
    AsciiString m_Path,
    float m_Weight) : IUnityStructure
{
    public static TransformMaskElement Read(EndianBinaryReader reader)
    {
        AsciiString m_Path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Path */
        float m_Weight_ = reader.ReadF32();
        
        return new(m_Path_,
            m_Weight_);
    }

    public override string ToString() => $"TransformMaskElement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Path: \"{m_Path}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight: {m_Weight}");
    }
}

/* $VisualEffectInfo (18 fields) */
public record class VisualEffectInfo (
    VFXRendererSettings m_RendererSettings,
    int m_CullingFlags,
    int m_UpdateMode,
    float m_PreWarmDeltaTime,
    uint m_PreWarmStepCount,
    AsciiString m_InitialEventName,
    int m_InstancingMode,
    uint m_InstancingCapacity,
    VFXExpressionContainer m_Expressions,
    VFXPropertySheetSerializedBase_1 m_PropertySheet,
    VFXMapping[] m_ExposedExpressions,
    VFXGPUBufferDesc[] m_Buffers,
    VFXTemporaryGPUBufferDesc[] m_TemporaryBuffers,
    VFXCPUBufferDesc[] m_CPUBuffers,
    VFXEventDesc[] m_Events,
    int m_InstancingDisabledReason,
    uint m_RuntimeVersion,
    uint m_CompilationVersion) : IUnityStructure
{
    public static VisualEffectInfo Read(EndianBinaryReader reader)
    {
        VFXRendererSettings m_RendererSettings_ = VFXRendererSettings.Read(reader);
        reader.AlignTo(4); /* m_RendererSettings */
        int m_CullingFlags_ = reader.ReadS32();
        int m_UpdateMode_ = reader.ReadS32();
        float m_PreWarmDeltaTime_ = reader.ReadF32();
        uint m_PreWarmStepCount_ = reader.ReadU32();
        AsciiString m_InitialEventName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_InitialEventName */
        int m_InstancingMode_ = reader.ReadS32();
        uint m_InstancingCapacity_ = reader.ReadU32();
        VFXExpressionContainer m_Expressions_ = VFXExpressionContainer.Read(reader);
        reader.AlignTo(4); /* m_Expressions */
        VFXPropertySheetSerializedBase_1 m_PropertySheet_ = VFXPropertySheetSerializedBase_1.Read(reader);
        reader.AlignTo(4); /* m_PropertySheet */
        VFXMapping[] m_ExposedExpressions_ = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* m_ExposedExpressions */
        VFXGPUBufferDesc[] m_Buffers_ = BuiltInArray<VFXGPUBufferDesc>.Read(reader);
        reader.AlignTo(4); /* m_Buffers */
        VFXTemporaryGPUBufferDesc[] m_TemporaryBuffers_ = BuiltInArray<VFXTemporaryGPUBufferDesc>.Read(reader);
        reader.AlignTo(4); /* m_TemporaryBuffers */
        VFXCPUBufferDesc[] m_CPUBuffers_ = BuiltInArray<VFXCPUBufferDesc>.Read(reader);
        reader.AlignTo(4); /* m_CPUBuffers */
        VFXEventDesc[] m_Events_ = BuiltInArray<VFXEventDesc>.Read(reader);
        reader.AlignTo(4); /* m_Events */
        int m_InstancingDisabledReason_ = reader.ReadS32();
        uint m_RuntimeVersion_ = reader.ReadU32();
        uint m_CompilationVersion_ = reader.ReadU32();
        
        return new(m_RendererSettings_,
            m_CullingFlags_,
            m_UpdateMode_,
            m_PreWarmDeltaTime_,
            m_PreWarmStepCount_,
            m_InitialEventName_,
            m_InstancingMode_,
            m_InstancingCapacity_,
            m_Expressions_,
            m_PropertySheet_,
            m_ExposedExpressions_,
            m_Buffers_,
            m_TemporaryBuffers_,
            m_CPUBuffers_,
            m_Events_,
            m_InstancingDisabledReason_,
            m_RuntimeVersion_,
            m_CompilationVersion_);
    }

    public override string ToString() => $"VisualEffectInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RendererSettings: {{ \n{m_RendererSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CullingFlags: {m_CullingFlags}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UpdateMode: {m_UpdateMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreWarmDeltaTime: {m_PreWarmDeltaTime}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreWarmStepCount: {m_PreWarmStepCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InitialEventName: \"{m_InitialEventName}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InstancingMode: {m_InstancingMode}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InstancingCapacity: {m_InstancingCapacity}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Expressions: {{ \n{m_Expressions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PropertySheet: {{ \n{m_PropertySheet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ExposedExpressions[{m_ExposedExpressions.Length}] = {{");
        if (m_ExposedExpressions.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMapping _4 in m_ExposedExpressions)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_ExposedExpressions.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Buffers[{m_Buffers.Length}] = {{");
        if (m_Buffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXGPUBufferDesc _4 in m_Buffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Buffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TemporaryBuffers[{m_TemporaryBuffers.Length}] = {{");
        if (m_TemporaryBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXTemporaryGPUBufferDesc _4 in m_TemporaryBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TemporaryBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_CPUBuffers[{m_CPUBuffers.Length}] = {{");
        if (m_CPUBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXCPUBufferDesc _4 in m_CPUBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_CPUBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Events[{m_Events.Length}] = {{");
        if (m_Events.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEventDesc _4 in m_Events)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Events.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InstancingDisabledReason: {m_InstancingDisabledReason}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RuntimeVersion: {m_RuntimeVersion}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CompilationVersion: {m_CompilationVersion}");
    }
}

/* $VFXRendererSettings (5 fields) */
public readonly record struct VFXRendererSettings (
    int motionVectorGenerationMode,
    int shadowCastingMode,
    bool receiveShadows,
    int reflectionProbeUsage,
    int lightProbeUsage) : IUnityStructure
{
    public static VFXRendererSettings Read(EndianBinaryReader reader)
    {
        int motionVectorGenerationMode_ = reader.ReadS32();
        int shadowCastingMode_ = reader.ReadS32();
        bool receiveShadows_ = reader.ReadBool();
        reader.AlignTo(4); /* receiveShadows */
        int reflectionProbeUsage_ = reader.ReadS32();
        int lightProbeUsage_ = reader.ReadS32();
        
        return new(motionVectorGenerationMode_,
            shadowCastingMode_,
            receiveShadows_,
            reflectionProbeUsage_,
            lightProbeUsage_);
    }

    public override string ToString() => $"VFXRendererSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}motionVectorGenerationMode: {motionVectorGenerationMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowCastingMode: {shadowCastingMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}receiveShadows: {receiveShadows}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}reflectionProbeUsage: {reflectionProbeUsage}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lightProbeUsage: {lightProbeUsage}");
    }
}

/* $VFXExpressionContainer (10 fields) */
public record class VFXExpressionContainer (
    Expression[] m_Expressions,
    uint m_MaxCommonExpressionsIndex,
    uint m_ConstantBakeCurveCount,
    uint m_ConstantBakeGradientCount,
    uint m_DynamicBakeCurveCount,
    uint m_DynamicBakeGradientCount,
    bool m_NeedsLocalToWorld,
    bool m_NeedsWorldToLocal,
    bool m_NeedsMainCamera,
    int m_NeededMainCameraBuffers) : IUnityStructure
{
    public static VFXExpressionContainer Read(EndianBinaryReader reader)
    {
        Expression[] m_Expressions_ = BuiltInArray<Expression>.Read(reader);
        reader.AlignTo(4); /* m_Expressions */
        uint m_MaxCommonExpressionsIndex_ = reader.ReadU32();
        uint m_ConstantBakeCurveCount_ = reader.ReadU32();
        uint m_ConstantBakeGradientCount_ = reader.ReadU32();
        uint m_DynamicBakeCurveCount_ = reader.ReadU32();
        uint m_DynamicBakeGradientCount_ = reader.ReadU32();
        bool m_NeedsLocalToWorld_ = reader.ReadBool();
        bool m_NeedsWorldToLocal_ = reader.ReadBool();
        bool m_NeedsMainCamera_ = reader.ReadBool();
        reader.AlignTo(4); /* m_NeedsMainCamera */
        int m_NeededMainCameraBuffers_ = reader.ReadS32();
        
        return new(m_Expressions_,
            m_MaxCommonExpressionsIndex_,
            m_ConstantBakeCurveCount_,
            m_ConstantBakeGradientCount_,
            m_DynamicBakeCurveCount_,
            m_DynamicBakeGradientCount_,
            m_NeedsLocalToWorld_,
            m_NeedsWorldToLocal_,
            m_NeedsMainCamera_,
            m_NeededMainCameraBuffers_);
    }

    public override string ToString() => $"VFXExpressionContainer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Expressions[{m_Expressions.Length}] = {{");
        if (m_Expressions.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Expression _4 in m_Expressions)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Expressions.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxCommonExpressionsIndex: {m_MaxCommonExpressionsIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ConstantBakeCurveCount: {m_ConstantBakeCurveCount}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ConstantBakeGradientCount: {m_ConstantBakeGradientCount}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DynamicBakeCurveCount: {m_DynamicBakeCurveCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DynamicBakeGradientCount: {m_DynamicBakeGradientCount}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NeedsLocalToWorld: {m_NeedsLocalToWorld}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NeedsWorldToLocal: {m_NeedsWorldToLocal}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NeedsMainCamera: {m_NeedsMainCamera}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NeededMainCameraBuffers: {m_NeededMainCameraBuffers}");
    }
}

/* $Expression (6 fields) */
public readonly record struct Expression (
    int op,
    int valueIndex,
    int data_0,
    int data_1,
    int data_2,
    int data_3) : IUnityStructure
{
    public static Expression Read(EndianBinaryReader reader)
    {
        int op_ = reader.ReadS32();
        int valueIndex_ = reader.ReadS32();
        int data_0_ = reader.ReadS32();
        int data_1_ = reader.ReadS32();
        int data_2_ = reader.ReadS32();
        int data_3_ = reader.ReadS32();
        
        return new(op_,
            valueIndex_,
            data_0_,
            data_1_,
            data_2_,
            data_3_);
    }

    public override string ToString() => $"Expression\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}op: {op}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}valueIndex: {valueIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_0: {data_0}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_1: {data_1}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_2: {data_2}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data_3: {data_3}");
    }
}

/* $VFXPropertySheetSerializedBase_1 (11 fields) */
public record class VFXPropertySheetSerializedBase_1 (
    VFXField_11 m_Float,
    VFXField_12 m_Vector2f,
    VFXField_13 m_Vector3f,
    VFXField_14 m_Vector4f,
    VFXField_15 m_Uint,
    VFXField_16 m_Int,
    VFXField_17 m_Matrix4x4f,
    VFXField_18 m_AnimationCurve,
    VFXField_19 m_Gradient,
    VFXField_20 m_NamedObject,
    VFXField_21 m_Bool) : IUnityStructure
{
    public static VFXPropertySheetSerializedBase_1 Read(EndianBinaryReader reader)
    {
        VFXField_11 m_Float_ = VFXField_11.Read(reader);
        reader.AlignTo(4); /* m_Float */
        VFXField_12 m_Vector2f_ = VFXField_12.Read(reader);
        reader.AlignTo(4); /* m_Vector2f */
        VFXField_13 m_Vector3f_ = VFXField_13.Read(reader);
        reader.AlignTo(4); /* m_Vector3f */
        VFXField_14 m_Vector4f_ = VFXField_14.Read(reader);
        reader.AlignTo(4); /* m_Vector4f */
        VFXField_15 m_Uint_ = VFXField_15.Read(reader);
        reader.AlignTo(4); /* m_Uint */
        VFXField_16 m_Int_ = VFXField_16.Read(reader);
        reader.AlignTo(4); /* m_Int */
        VFXField_17 m_Matrix4x4f_ = VFXField_17.Read(reader);
        reader.AlignTo(4); /* m_Matrix4x4f */
        VFXField_18 m_AnimationCurve_ = VFXField_18.Read(reader);
        reader.AlignTo(4); /* m_AnimationCurve */
        VFXField_19 m_Gradient_ = VFXField_19.Read(reader);
        reader.AlignTo(4); /* m_Gradient */
        VFXField_20 m_NamedObject_ = VFXField_20.Read(reader);
        reader.AlignTo(4); /* m_NamedObject */
        VFXField_21 m_Bool_ = VFXField_21.Read(reader);
        reader.AlignTo(4); /* m_Bool */
        
        return new(m_Float_,
            m_Vector2f_,
            m_Vector3f_,
            m_Vector4f_,
            m_Uint_,
            m_Int_,
            m_Matrix4x4f_,
            m_AnimationCurve_,
            m_Gradient_,
            m_NamedObject_,
            m_Bool_);
    }

    public override string ToString() => $"VFXPropertySheetSerializedBase_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Float: {{ \n{m_Float.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vector2f: {{ \n{m_Vector2f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vector3f: {{ \n{m_Vector3f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vector4f: {{ \n{m_Vector4f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Uint: {{ \n{m_Uint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Int: {{ \n{m_Int.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Matrix4x4f: {{ \n{m_Matrix4x4f.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AnimationCurve: {{ \n{m_AnimationCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Gradient: {{ \n{m_Gradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NamedObject: {{ \n{m_NamedObject.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Bool: {{ \n{m_Bool.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VFXField_11 (1 fields) */
public record class VFXField_11 (
    VFXEntryExpressionValue[] m_Array) : IUnityStructure
{
    public static VFXField_11 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue[] m_Array_ = BuiltInArray<VFXEntryExpressionValue>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_11\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_ExpressionIndex: {_4.m_ExpressionIndex}, m_Value: {_4.m_Value} }}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue (2 fields) */
public readonly record struct VFXEntryExpressionValue (
    uint m_ExpressionIndex,
    float m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        float m_Value_ = reader.ReadF32();
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $VFXField_12 (1 fields) */
public record class VFXField_12 (
    VFXEntryExpressionValue_1[] m_Array) : IUnityStructure
{
    public static VFXField_12 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_1[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_1>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_12\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_1 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_1 (2 fields) */
public record class VFXEntryExpressionValue_1 (
    uint m_ExpressionIndex,
    Vector2f m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_1 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        Vector2f m_Value_ = Vector2f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y} }}\n");
    }
}

/* $VFXField_13 (1 fields) */
public record class VFXField_13 (
    VFXEntryExpressionValue_2[] m_Array) : IUnityStructure
{
    public static VFXField_13 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_2[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_2>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_13\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_2 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_2 (2 fields) */
public record class VFXEntryExpressionValue_2 (
    uint m_ExpressionIndex,
    Vector3f m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_2 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        Vector3f m_Value_ = Vector3f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y}, z: {m_Value.z} }}\n");
    }
}

/* $VFXField_14 (1 fields) */
public record class VFXField_14 (
    VFXEntryExpressionValue_3[] m_Array) : IUnityStructure
{
    public static VFXField_14 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_3[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_3>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_14\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_3 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_3 (2 fields) */
public record class VFXEntryExpressionValue_3 (
    uint m_ExpressionIndex,
    Vector4f m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_3 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        Vector4f m_Value_ = Vector4f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y}, z: {m_Value.z}, w: {m_Value.w} }}\n");
    }
}

/* $VFXField_15 (1 fields) */
public record class VFXField_15 (
    VFXEntryExpressionValue_4[] m_Array) : IUnityStructure
{
    public static VFXField_15 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_4[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_4>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_15\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_4 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_ExpressionIndex: {_4.m_ExpressionIndex}, m_Value: {_4.m_Value} }}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_4 (2 fields) */
public readonly record struct VFXEntryExpressionValue_4 (
    uint m_ExpressionIndex,
    uint m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_4 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        uint m_Value_ = reader.ReadU32();
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $VFXField_16 (1 fields) */
public record class VFXField_16 (
    VFXEntryExpressionValue_5[] m_Array) : IUnityStructure
{
    public static VFXField_16 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_5[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_5>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_16\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_5 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_ExpressionIndex: {_4.m_ExpressionIndex}, m_Value: {_4.m_Value} }}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_5 (2 fields) */
public readonly record struct VFXEntryExpressionValue_5 (
    uint m_ExpressionIndex,
    int m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_5 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        int m_Value_ = reader.ReadS32();
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $VFXField_17 (1 fields) */
public record class VFXField_17 (
    VFXEntryExpressionValue_6[] m_Array) : IUnityStructure
{
    public static VFXField_17 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_6[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_6>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_17\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_6 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_6 (2 fields) */
public record class VFXEntryExpressionValue_6 (
    uint m_ExpressionIndex,
    Matrix4x4f m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_6 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        Matrix4x4f m_Value_ = Matrix4x4f.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VFXField_18 (1 fields) */
public record class VFXField_18 (
    VFXEntryExpressionValue_7[] m_Array) : IUnityStructure
{
    public static VFXField_18 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_7[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_7>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_18\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_7 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_7 (2 fields) */
public record class VFXEntryExpressionValue_7 (
    uint m_ExpressionIndex,
    AnimationCurve m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_7 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        AnimationCurve m_Value_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VFXField_19 (1 fields) */
public record class VFXField_19 (
    VFXEntryExpressionValue_8[] m_Array) : IUnityStructure
{
    public static VFXField_19 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_8[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_8>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_19\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_8 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_8 (2 fields) */
public record class VFXEntryExpressionValue_8 (
    uint m_ExpressionIndex,
    Gradient_1 m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_8 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        Gradient_1 m_Value_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VFXField_20 (1 fields) */
public record class VFXField_20 (
    VFXEntryExpressionValue_9[] m_Array) : IUnityStructure
{
    public static VFXField_20 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_9[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_9>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_20\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_9 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_9 (2 fields) */
public record class VFXEntryExpressionValue_9 (
    uint m_ExpressionIndex,
    PPtr<Object> m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_9 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        PPtr<Object> m_Value_ = PPtr<Object>.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $VFXField_21 (1 fields) */
public record class VFXField_21 (
    VFXEntryExpressionValue_10[] m_Array) : IUnityStructure
{
    public static VFXField_21 Read(EndianBinaryReader reader)
    {
        VFXEntryExpressionValue_10[] m_Array_ = BuiltInArray<VFXEntryExpressionValue_10>.Read(reader);
        reader.AlignTo(4); /* m_Array */
        
        return new(m_Array_);
    }

    public override string ToString() => $"VFXField_21\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Array[{m_Array.Length}] = {{");
        if (m_Array.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXEntryExpressionValue_10 _4 in m_Array)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_ExpressionIndex: {_4.m_ExpressionIndex}, m_Value: {_4.m_Value} }}\n");
            ++_4i;
        }
        if (m_Array.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEntryExpressionValue_10 (2 fields) */
public readonly record struct VFXEntryExpressionValue_10 (
    uint m_ExpressionIndex,
    bool m_Value) : IUnityStructure
{
    public static VFXEntryExpressionValue_10 Read(EndianBinaryReader reader)
    {
        uint m_ExpressionIndex_ = reader.ReadU32();
        bool m_Value_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Value */
        
        return new(m_ExpressionIndex_,
            m_Value_);
    }

    public override string ToString() => $"VFXEntryExpressionValue_10\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ExpressionIndex: {m_ExpressionIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $VFXMapping (2 fields) */
public record class VFXMapping (
    AsciiString nameId,
    int index) : IUnityStructure
{
    public static VFXMapping Read(EndianBinaryReader reader)
    {
        AsciiString nameId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* nameId */
        int index_ = reader.ReadS32();
        
        return new(nameId_,
            index_);
    }

    public override string ToString() => $"VFXMapping\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}nameId: \"{nameId}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index: {index}");
    }
}

/* $VFXGPUBufferDesc (5 fields) */
public record class VFXGPUBufferDesc (
    int type,
    uint size,
    VFXLayoutElementDesc[] layout,
    uint capacity,
    uint stride) : IUnityStructure
{
    public static VFXGPUBufferDesc Read(EndianBinaryReader reader)
    {
        int type_ = reader.ReadS32();
        uint size_ = reader.ReadU32();
        VFXLayoutElementDesc[] layout_ = BuiltInArray<VFXLayoutElementDesc>.Read(reader);
        reader.AlignTo(4); /* layout */
        uint capacity_ = reader.ReadU32();
        uint stride_ = reader.ReadU32();
        
        return new(type_,
            size_,
            layout_,
            capacity_,
            stride_);
    }

    public override string ToString() => $"VFXGPUBufferDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}size: {size}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}layout[{layout.Length}] = {{");
        if (layout.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXLayoutElementDesc _4 in layout)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (layout.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}capacity: {capacity}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stride: {stride}");
    }
}

/* $VFXLayoutElementDesc (3 fields) */
public record class VFXLayoutElementDesc (
    AsciiString name,
    int type,
    VFXLayoutOffset offset) : IUnityStructure
{
    public static VFXLayoutElementDesc Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int type_ = reader.ReadS32();
        VFXLayoutOffset offset_ = VFXLayoutOffset.Read(reader);
        
        return new(name_,
            type_,
            offset_);
    }

    public override string ToString() => $"VFXLayoutElementDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}offset: {{ bucket: {offset.bucket}, structure: {offset.structure}, element: {offset.element} }}\n");
    }
}

/* $VFXLayoutOffset (3 fields) */
public readonly record struct VFXLayoutOffset (
    uint bucket,
    uint structure,
    uint element) : IUnityStructure
{
    public static VFXLayoutOffset Read(EndianBinaryReader reader)
    {
        uint bucket_ = reader.ReadU32();
        uint structure_ = reader.ReadU32();
        uint element_ = reader.ReadU32();
        
        return new(bucket_,
            structure_,
            element_);
    }

    public override string ToString() => $"VFXLayoutOffset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bucket: {bucket}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}structure: {structure}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}element: {element}");
    }
}

/* $VFXTemporaryGPUBufferDesc (2 fields) */
public record class VFXTemporaryGPUBufferDesc (
    VFXGPUBufferDesc desc,
    uint frameCount) : IUnityStructure
{
    public static VFXTemporaryGPUBufferDesc Read(EndianBinaryReader reader)
    {
        VFXGPUBufferDesc desc_ = VFXGPUBufferDesc.Read(reader);
        reader.AlignTo(4); /* desc */
        uint frameCount_ = reader.ReadU32();
        
        return new(desc_,
            frameCount_);
    }

    public override string ToString() => $"VFXTemporaryGPUBufferDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}desc: {{ \n{desc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}frameCount: {frameCount}");
    }
}

/* $VFXCPUBufferDesc (4 fields) */
public record class VFXCPUBufferDesc (
    uint capacity,
    uint stride,
    VFXLayoutElementDesc[] layout,
    VFXCPUBufferData initialData) : IUnityStructure
{
    public static VFXCPUBufferDesc Read(EndianBinaryReader reader)
    {
        uint capacity_ = reader.ReadU32();
        uint stride_ = reader.ReadU32();
        VFXLayoutElementDesc[] layout_ = BuiltInArray<VFXLayoutElementDesc>.Read(reader);
        reader.AlignTo(4); /* layout */
        VFXCPUBufferData initialData_ = VFXCPUBufferData.Read(reader);
        reader.AlignTo(4); /* initialData */
        
        return new(capacity_,
            stride_,
            layout_,
            initialData_);
    }

    public override string ToString() => $"VFXCPUBufferDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}capacity: {capacity}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stride: {stride}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}layout[{layout.Length}] = {{");
        if (layout.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXLayoutElementDesc _4 in layout)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (layout.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}initialData: {{ \n{initialData.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VFXCPUBufferData (1 fields) */
public record class VFXCPUBufferData (
    uint[] data) : IUnityStructure
{
    public static VFXCPUBufferData Read(EndianBinaryReader reader)
    {
        uint[] data_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(data_);
    }

    public override string ToString() => $"VFXCPUBufferData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data[{data.Length}] = {{");
        if (data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXEventDesc (4 fields) */
public record class VFXEventDesc (
    AsciiString name,
    uint[] playSystems,
    uint[] stopSystems,
    uint[] initSystems) : IUnityStructure
{
    public static VFXEventDesc Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        uint[] playSystems_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* playSystems */
        uint[] stopSystems_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* stopSystems */
        uint[] initSystems_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* initSystems */
        
        return new(name_,
            playSystems_,
            stopSystems_,
            initSystems_);
    }

    public override string ToString() => $"VFXEventDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}playSystems[{playSystems.Length}] = {{");
        if (playSystems.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in playSystems)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (playSystems.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}stopSystems[{stopSystems.Length}] = {{");
        if (stopSystems.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in stopSystems)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (stopSystems.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}initSystems[{initSystems.Length}] = {{");
        if (initSystems.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in initSystems)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (initSystems.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXSystemDesc (9 fields) */
public record class VFXSystemDesc (
    int type,
    int flags,
    uint capacity,
    uint layer,
    AsciiString name,
    VFXMapping[] buffers,
    VFXMapping[] values,
    VFXTaskDesc[] tasks,
    VFXInstanceSplitDesc[] instanceSplitDescs) : IUnityStructure
{
    public static VFXSystemDesc Read(EndianBinaryReader reader)
    {
        int type_ = reader.ReadS32();
        int flags_ = reader.ReadS32();
        uint capacity_ = reader.ReadU32();
        uint layer_ = reader.ReadU32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        VFXMapping[] buffers_ = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* buffers */
        VFXMapping[] values_ = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* values */
        VFXTaskDesc[] tasks_ = BuiltInArray<VFXTaskDesc>.Read(reader);
        reader.AlignTo(4); /* tasks */
        VFXInstanceSplitDesc[] instanceSplitDescs_ = BuiltInArray<VFXInstanceSplitDesc>.Read(reader);
        reader.AlignTo(4); /* instanceSplitDescs */
        
        return new(type_,
            flags_,
            capacity_,
            layer_,
            name_,
            buffers_,
            values_,
            tasks_,
            instanceSplitDescs_);
    }

    public override string ToString() => $"VFXSystemDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}flags: {flags}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}capacity: {capacity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}layer: {layer}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buffers[{buffers.Length}] = {{");
        if (buffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMapping _4 in buffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}values[{values.Length}] = {{");
        if (values.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMapping _4 in values)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (values.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}tasks[{tasks.Length}] = {{");
        if (tasks.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXTaskDesc _4 in tasks)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (tasks.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}instanceSplitDescs[{instanceSplitDescs.Length}] = {{");
        if (instanceSplitDescs.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXInstanceSplitDesc _4 in instanceSplitDescs)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (instanceSplitDescs.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXTaskDesc (7 fields) */
public record class VFXTaskDesc (
    int type,
    VFXMapping[] buffers,
    VFXMappingTemporary[] temporaryBuffers,
    VFXMapping[] values,
    VFXMapping[] @params,
    PPtr<NamedObject> processor,
    uint instanceSplitIndex) : IUnityStructure
{
    public static VFXTaskDesc Read(EndianBinaryReader reader)
    {
        int type_ = reader.ReadS32();
        VFXMapping[] buffers_ = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* buffers */
        VFXMappingTemporary[] temporaryBuffers_ = BuiltInArray<VFXMappingTemporary>.Read(reader);
        reader.AlignTo(4); /* temporaryBuffers */
        VFXMapping[] values_ = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* values */
        VFXMapping[] @params_ = BuiltInArray<VFXMapping>.Read(reader);
        reader.AlignTo(4); /* @params */
        PPtr<NamedObject> processor_ = PPtr<NamedObject>.Read(reader);
        uint instanceSplitIndex_ = reader.ReadU32();
        
        return new(type_,
            buffers_,
            temporaryBuffers_,
            values_,
            @params_,
            processor_,
            instanceSplitIndex_);
    }

    public override string ToString() => $"VFXTaskDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buffers[{buffers.Length}] = {{");
        if (buffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMapping _4 in buffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}temporaryBuffers[{temporaryBuffers.Length}] = {{");
        if (temporaryBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMappingTemporary _4 in temporaryBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (temporaryBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}values[{values.Length}] = {{");
        if (values.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMapping _4 in values)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (values.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}@params[{@params.Length}] = {{");
        if (@params.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VFXMapping _4 in @params)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (@params.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}processor: {processor}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}instanceSplitIndex: {instanceSplitIndex}");
    }
}

/* $VFXMappingTemporary (3 fields) */
public record class VFXMappingTemporary (
    VFXMapping mapping,
    uint pastFrameIndex,
    bool perCameraBuffer) : IUnityStructure
{
    public static VFXMappingTemporary Read(EndianBinaryReader reader)
    {
        VFXMapping mapping_ = VFXMapping.Read(reader);
        reader.AlignTo(4); /* mapping */
        uint pastFrameIndex_ = reader.ReadU32();
        bool perCameraBuffer_ = reader.ReadBool();
        reader.AlignTo(4); /* perCameraBuffer */
        
        return new(mapping_,
            pastFrameIndex_,
            perCameraBuffer_);
    }

    public override string ToString() => $"VFXMappingTemporary\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mapping: {{ \n{mapping.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pastFrameIndex: {pastFrameIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}perCameraBuffer: {perCameraBuffer}");
    }
}

/* $VFXInstanceSplitDesc (1 fields) */
public record class VFXInstanceSplitDesc (
    uint[] values) : IUnityStructure
{
    public static VFXInstanceSplitDesc Read(EndianBinaryReader reader)
    {
        uint[] values_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* values */
        
        return new(values_);
    }

    public override string ToString() => $"VFXInstanceSplitDesc\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}values[{values.Length}] = {{");
        if (values.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in values)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (values.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $QuaternionCurve (2 fields) */
public record class QuaternionCurve (
    AnimationCurve_1 curve,
    AsciiString path) : IUnityStructure
{
    public static QuaternionCurve Read(EndianBinaryReader reader)
    {
        AnimationCurve_1 curve_ = AnimationCurve_1.Read(reader);
        reader.AlignTo(4); /* curve */
        AsciiString path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        
        return new(curve_,
            path_);
    }

    public override string ToString() => $"QuaternionCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}path: \"{path}\"");
    }
}

/* $AnimationCurve_1 (4 fields) */
public record class AnimationCurve_1 (
    Keyframe_1[] m_Curve,
    int m_PreInfinity,
    int m_PostInfinity,
    int m_RotationOrder) : IUnityStructure
{
    public static AnimationCurve_1 Read(EndianBinaryReader reader)
    {
        Keyframe_1[] m_Curve_ = BuiltInArray<Keyframe_1>.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        int m_PreInfinity_ = reader.ReadS32();
        int m_PostInfinity_ = reader.ReadS32();
        int m_RotationOrder_ = reader.ReadS32();
        
        return new(m_Curve_,
            m_PreInfinity_,
            m_PostInfinity_,
            m_RotationOrder_);
    }

    public override string ToString() => $"AnimationCurve_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve[{m_Curve.Length}] = {{");
        if (m_Curve.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Keyframe_1 _4 in m_Curve)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Curve.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreInfinity: {m_PreInfinity}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PostInfinity: {m_PostInfinity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RotationOrder: {m_RotationOrder}");
    }
}

/* $Keyframe_1 (7 fields) */
public record class Keyframe_1 (
    float time,
    Quaternionf @value,
    Quaternionf inSlope,
    Quaternionf outSlope,
    int weightedMode,
    Quaternionf inWeight,
    Quaternionf outWeight) : IUnityStructure
{
    public static Keyframe_1 Read(EndianBinaryReader reader)
    {
        float time_ = reader.ReadF32();
        Quaternionf @value_ = Quaternionf.Read(reader);
        Quaternionf inSlope_ = Quaternionf.Read(reader);
        Quaternionf outSlope_ = Quaternionf.Read(reader);
        int weightedMode_ = reader.ReadS32();
        Quaternionf inWeight_ = Quaternionf.Read(reader);
        Quaternionf outWeight_ = Quaternionf.Read(reader);
        
        return new(time_,
            @value_,
            inSlope_,
            outSlope_,
            weightedMode_,
            inWeight_,
            outWeight_);
    }

    public override string ToString() => $"Keyframe_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}time: {time}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}@value: {{ x: {@value.x}, y: {@value.y}, z: {@value.z}, w: {@value.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}inSlope: {{ x: {inSlope.x}, y: {inSlope.y}, z: {inSlope.z}, w: {inSlope.w} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}outSlope: {{ x: {outSlope.x}, y: {outSlope.y}, z: {outSlope.z}, w: {outSlope.w} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}weightedMode: {weightedMode}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}inWeight: {{ x: {inWeight.x}, y: {inWeight.y}, z: {inWeight.z}, w: {inWeight.w} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}outWeight: {{ x: {outWeight.x}, y: {outWeight.y}, z: {outWeight.z}, w: {outWeight.w} }}\n");
    }
}

/* $CompressedAnimationCurve (6 fields) */
public record class CompressedAnimationCurve (
    AsciiString m_Path,
    PackedBitVector_1 m_Times,
    PackedBitVector m_Values,
    PackedBitVector_2 m_Slopes,
    int m_PreInfinity,
    int m_PostInfinity) : IUnityStructure
{
    public static CompressedAnimationCurve Read(EndianBinaryReader reader)
    {
        AsciiString m_Path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Path */
        PackedBitVector_1 m_Times_ = PackedBitVector_1.Read(reader);
        reader.AlignTo(4); /* m_Times */
        PackedBitVector m_Values_ = PackedBitVector.Read(reader);
        reader.AlignTo(4); /* m_Values */
        PackedBitVector_2 m_Slopes_ = PackedBitVector_2.Read(reader);
        reader.AlignTo(4); /* m_Slopes */
        int m_PreInfinity_ = reader.ReadS32();
        int m_PostInfinity_ = reader.ReadS32();
        
        return new(m_Path_,
            m_Times_,
            m_Values_,
            m_Slopes_,
            m_PreInfinity_,
            m_PostInfinity_);
    }

    public override string ToString() => $"CompressedAnimationCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Path: \"{m_Path}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Times: {{ \n{m_Times.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Values: {{ \n{m_Values.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Slopes: {{ \n{m_Slopes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreInfinity: {m_PreInfinity}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PostInfinity: {m_PostInfinity}");
    }
}

/* $PackedBitVector (2 fields) */
public record class PackedBitVector (
    uint m_NumItems,
    byte[] m_Data) : IUnityStructure
{
    public static PackedBitVector Read(EndianBinaryReader reader)
    {
        uint m_NumItems_ = reader.ReadU32();
        byte[] m_Data_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_Data */
        
        return new(m_NumItems_,
            m_Data_);
    }

    public override string ToString() => $"PackedBitVector\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumItems: {m_NumItems}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Data[{m_Data.Length}] = {{");
        if (m_Data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_Data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Vector3Curve (2 fields) */
public record class Vector3Curve (
    AnimationCurve_2 curve,
    AsciiString path) : IUnityStructure
{
    public static Vector3Curve Read(EndianBinaryReader reader)
    {
        AnimationCurve_2 curve_ = AnimationCurve_2.Read(reader);
        reader.AlignTo(4); /* curve */
        AsciiString path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        
        return new(curve_,
            path_);
    }

    public override string ToString() => $"Vector3Curve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}path: \"{path}\"");
    }
}

/* $AnimationCurve_2 (4 fields) */
public record class AnimationCurve_2 (
    Keyframe_2[] m_Curve,
    int m_PreInfinity,
    int m_PostInfinity,
    int m_RotationOrder) : IUnityStructure
{
    public static AnimationCurve_2 Read(EndianBinaryReader reader)
    {
        Keyframe_2[] m_Curve_ = BuiltInArray<Keyframe_2>.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        int m_PreInfinity_ = reader.ReadS32();
        int m_PostInfinity_ = reader.ReadS32();
        int m_RotationOrder_ = reader.ReadS32();
        
        return new(m_Curve_,
            m_PreInfinity_,
            m_PostInfinity_,
            m_RotationOrder_);
    }

    public override string ToString() => $"AnimationCurve_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve[{m_Curve.Length}] = {{");
        if (m_Curve.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Keyframe_2 _4 in m_Curve)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Curve.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreInfinity: {m_PreInfinity}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PostInfinity: {m_PostInfinity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RotationOrder: {m_RotationOrder}");
    }
}

/* $Keyframe_2 (7 fields) */
public record class Keyframe_2 (
    float time,
    Vector3f @value,
    Vector3f inSlope,
    Vector3f outSlope,
    int weightedMode,
    Vector3f inWeight,
    Vector3f outWeight) : IUnityStructure
{
    public static Keyframe_2 Read(EndianBinaryReader reader)
    {
        float time_ = reader.ReadF32();
        Vector3f @value_ = Vector3f.Read(reader);
        Vector3f inSlope_ = Vector3f.Read(reader);
        Vector3f outSlope_ = Vector3f.Read(reader);
        int weightedMode_ = reader.ReadS32();
        Vector3f inWeight_ = Vector3f.Read(reader);
        Vector3f outWeight_ = Vector3f.Read(reader);
        
        return new(time_,
            @value_,
            inSlope_,
            outSlope_,
            weightedMode_,
            inWeight_,
            outWeight_);
    }

    public override string ToString() => $"Keyframe_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}time: {time}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}@value: {{ x: {@value.x}, y: {@value.y}, z: {@value.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}inSlope: {{ x: {inSlope.x}, y: {inSlope.y}, z: {inSlope.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}outSlope: {{ x: {outSlope.x}, y: {outSlope.y}, z: {outSlope.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}weightedMode: {weightedMode}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}inWeight: {{ x: {inWeight.x}, y: {inWeight.y}, z: {inWeight.z} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}outWeight: {{ x: {outWeight.x}, y: {outWeight.y}, z: {outWeight.z} }}\n");
    }
}

/* $FloatCurve (6 fields) */
public record class FloatCurve (
    AnimationCurve curve,
    AsciiString attribute,
    AsciiString path,
    int classID,
    PPtr<MonoScript> script,
    int flags) : IUnityStructure
{
    public static FloatCurve Read(EndianBinaryReader reader)
    {
        AnimationCurve curve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        AsciiString attribute_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* attribute */
        AsciiString path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        int classID_ = reader.ReadS32();
        PPtr<MonoScript> script_ = PPtr<MonoScript>.Read(reader);
        int flags_ = reader.ReadS32();
        
        return new(curve_,
            attribute_,
            path_,
            classID_,
            script_,
            flags_);
    }

    public override string ToString() => $"FloatCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}attribute: \"{attribute}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}path: \"{path}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}classID: {classID}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}script: {script}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}flags: {flags}");
    }
}

/* $PPtrCurve (6 fields) */
public record class PPtrCurve (
    PPtrKeyframe[] curve,
    AsciiString attribute,
    AsciiString path,
    int classID,
    PPtr<MonoScript> script,
    int flags) : IUnityStructure
{
    public static PPtrCurve Read(EndianBinaryReader reader)
    {
        PPtrKeyframe[] curve_ = BuiltInArray<PPtrKeyframe>.Read(reader);
        reader.AlignTo(4); /* curve */
        AsciiString attribute_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* attribute */
        AsciiString path_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* path */
        int classID_ = reader.ReadS32();
        PPtr<MonoScript> script_ = PPtr<MonoScript>.Read(reader);
        int flags_ = reader.ReadS32();
        
        return new(curve_,
            attribute_,
            path_,
            classID_,
            script_,
            flags_);
    }

    public override string ToString() => $"PPtrCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve[{curve.Length}] = {{");
        if (curve.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtrKeyframe _4 in curve)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (curve.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}attribute: \"{attribute}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}path: \"{path}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}classID: {classID}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}script: {script}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}flags: {flags}");
    }
}

/* $PPtrKeyframe (2 fields) */
public record class PPtrKeyframe (
    float time,
    PPtr<Object> @value) : IUnityStructure
{
    public static PPtrKeyframe Read(EndianBinaryReader reader)
    {
        float time_ = reader.ReadF32();
        PPtr<Object> @value_ = PPtr<Object>.Read(reader);
        
        return new(time_,
            @value_);
    }

    public override string ToString() => $"PPtrKeyframe\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}time: {time}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }
}

/* $ClipMuscleConstant (27 fields) */
public record class ClipMuscleConstant (
    HumanPose m_DeltaPose,
    xform m_StartX,
    xform m_StopX,
    xform m_LeftFootStartX,
    xform m_RightFootStartX,
    float3 m_AverageSpeed,
    OffsetPtr_19 m_Clip,
    float m_StartTime,
    float m_StopTime,
    float m_OrientationOffsetY,
    float m_Level,
    float m_CycleOffset,
    float m_AverageAngularSpeed,
    int[] m_IndexArray,
    ValueDelta[] m_ValueArrayDelta,
    float[] m_ValueArrayReferencePose,
    bool m_Mirror,
    bool m_LoopTime,
    bool m_LoopBlend,
    bool m_LoopBlendOrientation,
    bool m_LoopBlendPositionY,
    bool m_LoopBlendPositionXZ,
    bool m_StartAtOrigin,
    bool m_KeepOriginalOrientation,
    bool m_KeepOriginalPositionY,
    bool m_KeepOriginalPositionXZ,
    bool m_HeightFromFeet) : IUnityStructure
{
    public static ClipMuscleConstant Read(EndianBinaryReader reader)
    {
        HumanPose m_DeltaPose_ = HumanPose.Read(reader);
        xform m_StartX_ = xform.Read(reader);
        xform m_StopX_ = xform.Read(reader);
        xform m_LeftFootStartX_ = xform.Read(reader);
        xform m_RightFootStartX_ = xform.Read(reader);
        float3 m_AverageSpeed_ = float3.Read(reader);
        OffsetPtr_19 m_Clip_ = OffsetPtr_19.Read(reader);
        float m_StartTime_ = reader.ReadF32();
        float m_StopTime_ = reader.ReadF32();
        float m_OrientationOffsetY_ = reader.ReadF32();
        float m_Level_ = reader.ReadF32();
        float m_CycleOffset_ = reader.ReadF32();
        float m_AverageAngularSpeed_ = reader.ReadF32();
        int[] m_IndexArray_ = BuiltInArray<int>.Read(reader);
        ValueDelta[] m_ValueArrayDelta_ = BuiltInArray<ValueDelta>.Read(reader);
        float[] m_ValueArrayReferencePose_ = BuiltInArray<float>.Read(reader);
        bool m_Mirror_ = reader.ReadBool();
        bool m_LoopTime_ = reader.ReadBool();
        bool m_LoopBlend_ = reader.ReadBool();
        bool m_LoopBlendOrientation_ = reader.ReadBool();
        bool m_LoopBlendPositionY_ = reader.ReadBool();
        bool m_LoopBlendPositionXZ_ = reader.ReadBool();
        bool m_StartAtOrigin_ = reader.ReadBool();
        bool m_KeepOriginalOrientation_ = reader.ReadBool();
        bool m_KeepOriginalPositionY_ = reader.ReadBool();
        bool m_KeepOriginalPositionXZ_ = reader.ReadBool();
        bool m_HeightFromFeet_ = reader.ReadBool();
        reader.AlignTo(4); /* m_HeightFromFeet */
        
        return new(m_DeltaPose_,
            m_StartX_,
            m_StopX_,
            m_LeftFootStartX_,
            m_RightFootStartX_,
            m_AverageSpeed_,
            m_Clip_,
            m_StartTime_,
            m_StopTime_,
            m_OrientationOffsetY_,
            m_Level_,
            m_CycleOffset_,
            m_AverageAngularSpeed_,
            m_IndexArray_,
            m_ValueArrayDelta_,
            m_ValueArrayReferencePose_,
            m_Mirror_,
            m_LoopTime_,
            m_LoopBlend_,
            m_LoopBlendOrientation_,
            m_LoopBlendPositionY_,
            m_LoopBlendPositionXZ_,
            m_StartAtOrigin_,
            m_KeepOriginalOrientation_,
            m_KeepOriginalPositionY_,
            m_KeepOriginalPositionXZ_,
            m_HeightFromFeet_);
    }

    public override string ToString() => $"ClipMuscleConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DeltaPose: {{ \n{m_DeltaPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StartX: {{ \n{m_StartX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StopX: {{ \n{m_StopX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LeftFootStartX: {{ \n{m_LeftFootStartX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RightFootStartX: {{ \n{m_RightFootStartX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AverageSpeed: {{ x: {m_AverageSpeed.x}, y: {m_AverageSpeed.y}, z: {m_AverageSpeed.z} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Clip: {{ \n{m_Clip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StartTime: {m_StartTime}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StopTime: {m_StopTime}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OrientationOffsetY: {m_OrientationOffsetY}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Level: {m_Level}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CycleOffset: {m_CycleOffset}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AverageAngularSpeed: {m_AverageAngularSpeed}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_IndexArray[{m_IndexArray.Length}] = {{");
        if (m_IndexArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_IndexArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_IndexArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ValueArrayDelta[{m_ValueArrayDelta.Length}] = {{");
        if (m_ValueArrayDelta.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ValueDelta _4 in m_ValueArrayDelta)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ m_Start: {_4.m_Start}, m_Stop: {_4.m_Stop} }}\n");
            ++_4i;
        }
        if (m_ValueArrayDelta.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ValueArrayReferencePose[{m_ValueArrayReferencePose.Length}] = {{");
        if (m_ValueArrayReferencePose.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_ValueArrayReferencePose)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ValueArrayReferencePose.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mirror: {m_Mirror}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LoopTime: {m_LoopTime}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LoopBlend: {m_LoopBlend}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LoopBlendOrientation: {m_LoopBlendOrientation}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LoopBlendPositionY: {m_LoopBlendPositionY}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LoopBlendPositionXZ: {m_LoopBlendPositionXZ}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StartAtOrigin: {m_StartAtOrigin}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_KeepOriginalOrientation: {m_KeepOriginalOrientation}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_KeepOriginalPositionY: {m_KeepOriginalPositionY}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_KeepOriginalPositionXZ: {m_KeepOriginalPositionXZ}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HeightFromFeet: {m_HeightFromFeet}");
    }
}

/* $HumanPose (8 fields) */
public record class HumanPose (
    xform m_RootX,
    float3 m_LookAtPosition,
    float4 m_LookAtWeight,
    HumanGoal[] m_GoalArray,
    HandPose m_LeftHandPose,
    HandPose m_RightHandPose,
    float[] m_DoFArray,
    float3[] m_TDoFArray) : IUnityStructure
{
    public static HumanPose Read(EndianBinaryReader reader)
    {
        xform m_RootX_ = xform.Read(reader);
        float3 m_LookAtPosition_ = float3.Read(reader);
        float4 m_LookAtWeight_ = float4.Read(reader);
        HumanGoal[] m_GoalArray_ = BuiltInArray<HumanGoal>.Read(reader);
        HandPose m_LeftHandPose_ = HandPose.Read(reader);
        HandPose m_RightHandPose_ = HandPose.Read(reader);
        float[] m_DoFArray_ = BuiltInArray<float>.Read(reader);
        float3[] m_TDoFArray_ = BuiltInArray<float3>.Read(reader);
        
        return new(m_RootX_,
            m_LookAtPosition_,
            m_LookAtWeight_,
            m_GoalArray_,
            m_LeftHandPose_,
            m_RightHandPose_,
            m_DoFArray_,
            m_TDoFArray_);
    }

    public override string ToString() => $"HumanPose\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RootX: {{ \n{m_RootX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LookAtPosition: {{ x: {m_LookAtPosition.x}, y: {m_LookAtPosition.y}, z: {m_LookAtPosition.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LookAtWeight: {{ x: {m_LookAtWeight.x}, y: {m_LookAtWeight.y}, z: {m_LookAtWeight.z}, w: {m_LookAtWeight.w} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_GoalArray[{m_GoalArray.Length}] = {{");
        if (m_GoalArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (HumanGoal _4 in m_GoalArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_GoalArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LeftHandPose: {{ \n{m_LeftHandPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_RightHandPose: {{ \n{m_RightHandPose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DoFArray[{m_DoFArray.Length}] = {{");
        if (m_DoFArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_DoFArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_DoFArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TDoFArray[{m_TDoFArray.Length}] = {{");
        if (m_TDoFArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float3 _4 in m_TDoFArray)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (m_TDoFArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $HumanGoal (5 fields) */
public record class HumanGoal (
    xform m_X,
    float m_WeightT,
    float m_WeightR,
    float3 m_HintT,
    float m_HintWeightT) : IUnityStructure
{
    public static HumanGoal Read(EndianBinaryReader reader)
    {
        xform m_X_ = xform.Read(reader);
        float m_WeightT_ = reader.ReadF32();
        float m_WeightR_ = reader.ReadF32();
        float3 m_HintT_ = float3.Read(reader);
        float m_HintWeightT_ = reader.ReadF32();
        
        return new(m_X_,
            m_WeightT_,
            m_WeightR_,
            m_HintT_,
            m_HintWeightT_);
    }

    public override string ToString() => $"HumanGoal\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_X: {{ \n{m_X.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WeightT: {m_WeightT}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WeightR: {m_WeightR}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HintT: {{ x: {m_HintT.x}, y: {m_HintT.y}, z: {m_HintT.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HintWeightT: {m_HintWeightT}");
    }
}

/* $HandPose (6 fields) */
public record class HandPose (
    xform m_GrabX,
    float[] m_DoFArray,
    float m_Override,
    float m_CloseOpen,
    float m_InOut,
    float m_Grab) : IUnityStructure
{
    public static HandPose Read(EndianBinaryReader reader)
    {
        xform m_GrabX_ = xform.Read(reader);
        float[] m_DoFArray_ = BuiltInArray<float>.Read(reader);
        float m_Override_ = reader.ReadF32();
        float m_CloseOpen_ = reader.ReadF32();
        float m_InOut_ = reader.ReadF32();
        float m_Grab_ = reader.ReadF32();
        
        return new(m_GrabX_,
            m_DoFArray_,
            m_Override_,
            m_CloseOpen_,
            m_InOut_,
            m_Grab_);
    }

    public override string ToString() => $"HandPose\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_GrabX: {{ \n{m_GrabX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DoFArray[{m_DoFArray.Length}] = {{");
        if (m_DoFArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_DoFArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_DoFArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Override: {m_Override}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CloseOpen: {m_CloseOpen}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InOut: {m_InOut}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Grab: {m_Grab}");
    }
}

/* $OffsetPtr_19 (1 fields) */
public record class OffsetPtr_19 (
    Clip data) : IUnityStructure
{
    public static OffsetPtr_19 Read(EndianBinaryReader reader)
    {
        Clip data_ = Clip.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"OffsetPtr_19\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data: {{ \n{data.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Clip (3 fields) */
public record class Clip (
    StreamedClip m_StreamedClip,
    DenseClip m_DenseClip,
    ConstantClip m_ConstantClip) : IUnityStructure
{
    public static Clip Read(EndianBinaryReader reader)
    {
        StreamedClip m_StreamedClip_ = StreamedClip.Read(reader);
        DenseClip m_DenseClip_ = DenseClip.Read(reader);
        ConstantClip m_ConstantClip_ = ConstantClip.Read(reader);
        
        return new(m_StreamedClip_,
            m_DenseClip_,
            m_ConstantClip_);
    }

    public override string ToString() => $"Clip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StreamedClip: {{ \n{m_StreamedClip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DenseClip: {{ \n{m_DenseClip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ConstantClip: {{ \n{m_ConstantClip.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StreamedClip (3 fields) */
public record class StreamedClip (
    uint[] data,
    ushort curveCount,
    ushort discreteCurveCount) : IUnityStructure
{
    public static StreamedClip Read(EndianBinaryReader reader)
    {
        uint[] data_ = BuiltInArray<uint>.Read(reader);
        ushort curveCount_ = reader.ReadU16();
        ushort discreteCurveCount_ = reader.ReadU16();
        
        return new(data_,
            curveCount_,
            discreteCurveCount_);
    }

    public override string ToString() => $"StreamedClip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data[{data.Length}] = {{");
        if (data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}curveCount: {curveCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}discreteCurveCount: {discreteCurveCount}");
    }
}

/* $DenseClip (5 fields) */
public record class DenseClip (
    int m_FrameCount,
    uint m_CurveCount,
    float m_SampleRate,
    float m_BeginTime,
    float[] m_SampleArray) : IUnityStructure
{
    public static DenseClip Read(EndianBinaryReader reader)
    {
        int m_FrameCount_ = reader.ReadS32();
        uint m_CurveCount_ = reader.ReadU32();
        float m_SampleRate_ = reader.ReadF32();
        float m_BeginTime_ = reader.ReadF32();
        float[] m_SampleArray_ = BuiltInArray<float>.Read(reader);
        
        return new(m_FrameCount_,
            m_CurveCount_,
            m_SampleRate_,
            m_BeginTime_,
            m_SampleArray_);
    }

    public override string ToString() => $"DenseClip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FrameCount: {m_FrameCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CurveCount: {m_CurveCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SampleRate: {m_SampleRate}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BeginTime: {m_BeginTime}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SampleArray[{m_SampleArray.Length}] = {{");
        if (m_SampleArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_SampleArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_SampleArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ConstantClip (1 fields) */
public record class ConstantClip (
    float[] data) : IUnityStructure
{
    public static ConstantClip Read(EndianBinaryReader reader)
    {
        float[] data_ = BuiltInArray<float>.Read(reader);
        
        return new(data_);
    }

    public override string ToString() => $"ConstantClip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data[{data.Length}] = {{");
        if (data.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in data)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (data.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ValueDelta (2 fields) */
public readonly record struct ValueDelta (
    float m_Start,
    float m_Stop) : IUnityStructure
{
    public static ValueDelta Read(EndianBinaryReader reader)
    {
        float m_Start_ = reader.ReadF32();
        float m_Stop_ = reader.ReadF32();
        
        return new(m_Start_,
            m_Stop_);
    }

    public override string ToString() => $"ValueDelta\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Start: {m_Start}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Stop: {m_Stop}");
    }
}

/* $AnimationClipBindingConstant (2 fields) */
public record class AnimationClipBindingConstant (
    GenericBinding[] genericBindings,
    PPtr<Object>[] pptrCurveMapping) : IUnityStructure
{
    public static AnimationClipBindingConstant Read(EndianBinaryReader reader)
    {
        GenericBinding[] genericBindings_ = BuiltInArray<GenericBinding>.Read(reader);
        reader.AlignTo(4); /* genericBindings */
        PPtr<Object>[] pptrCurveMapping_ = BuiltInArray<PPtr<Object>>.Read(reader);
        reader.AlignTo(4); /* pptrCurveMapping */
        
        return new(genericBindings_,
            pptrCurveMapping_);
    }

    public override string ToString() => $"AnimationClipBindingConstant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}genericBindings[{genericBindings.Length}] = {{");
        if (genericBindings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (GenericBinding _4 in genericBindings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (genericBindings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}pptrCurveMapping[{pptrCurveMapping.Length}] = {{");
        if (pptrCurveMapping.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Object> _4 in pptrCurveMapping)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (pptrCurveMapping.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $GenericBinding (8 fields) */
public record class GenericBinding (
    uint path,
    uint attribute,
    PPtr<Object> script,
    int typeID,
    byte customType,
    byte isPPtrCurve,
    byte isIntCurve,
    byte isSerializeReferenceCurve) : IUnityStructure
{
    public static GenericBinding Read(EndianBinaryReader reader)
    {
        uint path_ = reader.ReadU32();
        uint attribute_ = reader.ReadU32();
        PPtr<Object> script_ = PPtr<Object>.Read(reader);
        int typeID_ = reader.ReadS32();
        byte customType_ = reader.ReadU8();
        byte isPPtrCurve_ = reader.ReadU8();
        byte isIntCurve_ = reader.ReadU8();
        byte isSerializeReferenceCurve_ = reader.ReadU8();
        reader.AlignTo(4); /* isSerializeReferenceCurve */
        
        return new(path_,
            attribute_,
            script_,
            typeID_,
            customType_,
            isPPtrCurve_,
            isIntCurve_,
            isSerializeReferenceCurve_);
    }

    public override string ToString() => $"GenericBinding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}path: {path}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}attribute: {attribute}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}script: {script}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}typeID: {typeID}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customType: {customType}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}isPPtrCurve: {isPPtrCurve}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}isIntCurve: {isIntCurve}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}isSerializeReferenceCurve: {isSerializeReferenceCurve}");
    }
}

/* $AnimationEvent (7 fields) */
public record class AnimationEvent (
    float time,
    AsciiString functionName,
    AsciiString data,
    PPtr<Object> objectReferenceParameter,
    float floatParameter,
    int intParameter,
    int messageOptions) : IUnityStructure
{
    public static AnimationEvent Read(EndianBinaryReader reader)
    {
        float time_ = reader.ReadF32();
        AsciiString functionName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* functionName */
        AsciiString data_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* data */
        PPtr<Object> objectReferenceParameter_ = PPtr<Object>.Read(reader);
        float floatParameter_ = reader.ReadF32();
        int intParameter_ = reader.ReadS32();
        int messageOptions_ = reader.ReadS32();
        
        return new(time_,
            functionName_,
            data_,
            objectReferenceParameter_,
            floatParameter_,
            intParameter_,
            messageOptions_);
    }

    public override string ToString() => $"AnimationEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}time: {time}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}functionName: \"{functionName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data: \"{data}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}objectReferenceParameter: {objectReferenceParameter}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}floatParameter: {floatParameter}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}intParameter: {intParameter}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}messageOptions: {messageOptions}");
    }
}

/* $LineParameters (10 fields) */
public record class LineParameters (
    float widthMultiplier,
    AnimationCurve widthCurve,
    Gradient_1 colorGradient,
    int numCornerVertices,
    int numCapVertices,
    int alignment,
    int textureMode,
    Vector2f textureScale,
    float shadowBias,
    bool generateLightingData) : IUnityStructure
{
    public static LineParameters Read(EndianBinaryReader reader)
    {
        float widthMultiplier_ = reader.ReadF32();
        AnimationCurve widthCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* widthCurve */
        Gradient_1 colorGradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* colorGradient */
        int numCornerVertices_ = reader.ReadS32();
        int numCapVertices_ = reader.ReadS32();
        int alignment_ = reader.ReadS32();
        int textureMode_ = reader.ReadS32();
        Vector2f textureScale_ = Vector2f.Read(reader);
        float shadowBias_ = reader.ReadF32();
        bool generateLightingData_ = reader.ReadBool();
        reader.AlignTo(4); /* generateLightingData */
        
        return new(widthMultiplier_,
            widthCurve_,
            colorGradient_,
            numCornerVertices_,
            numCapVertices_,
            alignment_,
            textureMode_,
            textureScale_,
            shadowBias_,
            generateLightingData_);
    }

    public override string ToString() => $"LineParameters\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}widthMultiplier: {widthMultiplier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}widthCurve: {{ \n{widthCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}colorGradient: {{ \n{colorGradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}numCornerVertices: {numCornerVertices}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}numCapVertices: {numCapVertices}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alignment: {alignment}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}textureMode: {textureMode}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureScale: {{ x: {textureScale.x}, y: {textureScale.y} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowBias: {shadowBias}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}generateLightingData: {generateLightingData}");
    }
}

/* $ComputeShaderPlatformVariant (5 fields) */
public record class ComputeShaderPlatformVariant (
    int targetRenderer,
    int targetLevel,
    ComputeShaderKernelParent[] kernels,
    ComputeShaderCB[] constantBuffers,
    bool resourcesResolved) : IUnityStructure
{
    public static ComputeShaderPlatformVariant Read(EndianBinaryReader reader)
    {
        int targetRenderer_ = reader.ReadS32();
        int targetLevel_ = reader.ReadS32();
        ComputeShaderKernelParent[] kernels_ = BuiltInArray<ComputeShaderKernelParent>.Read(reader);
        reader.AlignTo(4); /* kernels */
        ComputeShaderCB[] constantBuffers_ = BuiltInArray<ComputeShaderCB>.Read(reader);
        reader.AlignTo(4); /* constantBuffers */
        bool resourcesResolved_ = reader.ReadBool();
        reader.AlignTo(4); /* resourcesResolved */
        
        return new(targetRenderer_,
            targetLevel_,
            kernels_,
            constantBuffers_,
            resourcesResolved_);
    }

    public override string ToString() => $"ComputeShaderPlatformVariant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}targetRenderer: {targetRenderer}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}targetLevel: {targetLevel}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}kernels[{kernels.Length}] = {{");
        if (kernels.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderKernelParent _4 in kernels)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (kernels.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}constantBuffers[{constantBuffers.Length}] = {{");
        if (constantBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderCB _4 in constantBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (constantBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}resourcesResolved: {resourcesResolved}");
    }
}

/* $ComputeShaderKernelParent (6 fields) */
public record class ComputeShaderKernelParent (
    AsciiString name,
    ComputeShaderKernel[] uniqueVariants,
    pair_2[] variantIndices,
    AsciiString[] globalKeywords,
    AsciiString[] localKeywords,
    AsciiString[] dynamicKeywords) : IUnityStructure
{
    public static ComputeShaderKernelParent Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        ComputeShaderKernel[] uniqueVariants_ = BuiltInArray<ComputeShaderKernel>.Read(reader);
        reader.AlignTo(4); /* uniqueVariants */
        pair_2[] variantIndices_ = BuiltInArray<pair_2>.Read(reader);
        reader.AlignTo(4); /* variantIndices */
        AsciiString[] globalKeywords_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* globalKeywords */
        AsciiString[] localKeywords_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* localKeywords */
        AsciiString[] dynamicKeywords_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* dynamicKeywords */
        
        return new(name_,
            uniqueVariants_,
            variantIndices_,
            globalKeywords_,
            localKeywords_,
            dynamicKeywords_);
    }

    public override string ToString() => $"ComputeShaderKernelParent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uniqueVariants[{uniqueVariants.Length}] = {{");
        if (uniqueVariants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderKernel _4 in uniqueVariants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (uniqueVariants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variantIndices[{variantIndices.Length}] = {{");
        if (variantIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (pair_2 _4 in variantIndices)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variantIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}globalKeywords[{globalKeywords.Length}] = {{");
        if (globalKeywords.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in globalKeywords)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (globalKeywords.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}localKeywords[{localKeywords.Length}] = {{");
        if (localKeywords.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in localKeywords)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (localKeywords.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}dynamicKeywords[{dynamicKeywords.Length}] = {{");
        if (dynamicKeywords.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in dynamicKeywords)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (dynamicKeywords.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ComputeShaderKernel (9 fields) */
public record class ComputeShaderKernel (
    uint[] cbVariantIndices,
    ComputeShaderResource[] cbs,
    ComputeShaderResource[] textures,
    ComputeShaderBuiltinSampler[] builtinSamplers,
    ComputeShaderResource[] inBuffers,
    ComputeShaderResource[] outBuffers,
    byte[] code,
    uint[] threadGroupSize,
    long requirements) : IUnityStructure
{
    public static ComputeShaderKernel Read(EndianBinaryReader reader)
    {
        uint[] cbVariantIndices_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* cbVariantIndices */
        ComputeShaderResource[] cbs_ = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* cbs */
        ComputeShaderResource[] textures_ = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* textures */
        ComputeShaderBuiltinSampler[] builtinSamplers_ = BuiltInArray<ComputeShaderBuiltinSampler>.Read(reader);
        reader.AlignTo(4); /* builtinSamplers */
        ComputeShaderResource[] inBuffers_ = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* inBuffers */
        ComputeShaderResource[] outBuffers_ = BuiltInArray<ComputeShaderResource>.Read(reader);
        reader.AlignTo(4); /* outBuffers */
        byte[] code_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* code */
        uint[] threadGroupSize_ = BuiltInArray<uint>.Read(reader);
        long requirements_ = reader.ReadS64();
        
        return new(cbVariantIndices_,
            cbs_,
            textures_,
            builtinSamplers_,
            inBuffers_,
            outBuffers_,
            code_,
            threadGroupSize_,
            requirements_);
    }

    public override string ToString() => $"ComputeShaderKernel\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}cbVariantIndices[{cbVariantIndices.Length}] = {{");
        if (cbVariantIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in cbVariantIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (cbVariantIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}cbs[{cbs.Length}] = {{");
        if (cbs.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderResource _4 in cbs)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (cbs.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textures[{textures.Length}] = {{");
        if (textures.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderResource _4 in textures)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (textures.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}builtinSamplers[{builtinSamplers.Length}] = {{");
        if (builtinSamplers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderBuiltinSampler _4 in builtinSamplers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ sampler: {_4.sampler}, bindPoint: {_4.bindPoint} }}\n");
            ++_4i;
        }
        if (builtinSamplers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}inBuffers[{inBuffers.Length}] = {{");
        if (inBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderResource _4 in inBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (inBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}outBuffers[{outBuffers.Length}] = {{");
        if (outBuffers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderResource _4 in outBuffers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (outBuffers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}code[{code.Length}] = {{");
        if (code.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in code)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (code.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}threadGroupSize[{threadGroupSize.Length}] = {{");
        if (threadGroupSize.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in threadGroupSize)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (threadGroupSize.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requirements: {requirements}");
    }
}

/* $ComputeShaderResource (5 fields) */
public record class ComputeShaderResource (
    AsciiString name,
    AsciiString generatedName,
    int bindPoint,
    int samplerBindPoint,
    int texDimension) : IUnityStructure
{
    public static ComputeShaderResource Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString generatedName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* generatedName */
        int bindPoint_ = reader.ReadS32();
        int samplerBindPoint_ = reader.ReadS32();
        int texDimension_ = reader.ReadS32();
        
        return new(name_,
            generatedName_,
            bindPoint_,
            samplerBindPoint_,
            texDimension_);
    }

    public override string ToString() => $"ComputeShaderResource\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}generatedName: \"{generatedName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bindPoint: {bindPoint}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}samplerBindPoint: {samplerBindPoint}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}texDimension: {texDimension}");
    }
}

/* $ComputeShaderBuiltinSampler (2 fields) */
public readonly record struct ComputeShaderBuiltinSampler (
    uint sampler,
    int bindPoint) : IUnityStructure
{
    public static ComputeShaderBuiltinSampler Read(EndianBinaryReader reader)
    {
        uint sampler_ = reader.ReadU32();
        int bindPoint_ = reader.ReadS32();
        
        return new(sampler_,
            bindPoint_);
    }

    public override string ToString() => $"ComputeShaderBuiltinSampler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sampler: {sampler}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bindPoint: {bindPoint}");
    }
}

/* $pair_2 (2 fields) */
public record class pair_2 (
    AsciiString first,
    uint second) : IUnityStructure
{
    public static pair_2 Read(EndianBinaryReader reader)
    {
        AsciiString first_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* first */
        uint second_ = reader.ReadU32();
        
        return new(first_,
            second_);
    }

    public override string ToString() => $"pair_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}first: \"{first}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}second: {second}");
    }
}

/* $ComputeShaderCB (3 fields) */
public record class ComputeShaderCB (
    AsciiString name,
    int byteSize,
    ComputeShaderParam[] @params) : IUnityStructure
{
    public static ComputeShaderCB Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int byteSize_ = reader.ReadS32();
        ComputeShaderParam[] @params_ = BuiltInArray<ComputeShaderParam>.Read(reader);
        reader.AlignTo(4); /* @params */
        
        return new(name_,
            byteSize_,
            @params_);
    }

    public override string ToString() => $"ComputeShaderCB\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}byteSize: {byteSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}@params[{@params.Length}] = {{");
        if (@params.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ComputeShaderParam _4 in @params)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (@params.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ComputeShaderParam (6 fields) */
public record class ComputeShaderParam (
    AsciiString name,
    int type,
    uint offset,
    uint arraySize,
    uint rowCount,
    uint colCount) : IUnityStructure
{
    public static ComputeShaderParam Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int type_ = reader.ReadS32();
        uint offset_ = reader.ReadU32();
        uint arraySize_ = reader.ReadU32();
        uint rowCount_ = reader.ReadU32();
        uint colCount_ = reader.ReadU32();
        
        return new(name_,
            type_,
            offset_,
            arraySize_,
            rowCount_,
            colCount_);
    }

    public override string ToString() => $"ComputeShaderParam\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}offset: {offset}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}arraySize: {arraySize}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rowCount: {rowCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}colCount: {colCount}");
    }
}

/* $UnityPropertySheet (4 fields) */
public record class UnityPropertySheet (
    Dictionary<AsciiString, UnityTexEnv> m_TexEnvs,
    Dictionary<AsciiString, int> m_Ints,
    Dictionary<AsciiString, float> m_Floats,
    Dictionary<AsciiString, ColorRGBA_1> m_Colors) : IUnityStructure
{
    public static UnityPropertySheet Read(EndianBinaryReader reader)
    {
        Dictionary<AsciiString, UnityTexEnv> m_TexEnvs_ = BuiltInMap<AsciiString, UnityTexEnv>.Read(reader);
        reader.AlignTo(4); /* m_TexEnvs */
        Dictionary<AsciiString, int> m_Ints_ = BuiltInMap<AsciiString, int>.Read(reader);
        reader.AlignTo(4); /* m_Ints */
        Dictionary<AsciiString, float> m_Floats_ = BuiltInMap<AsciiString, float>.Read(reader);
        reader.AlignTo(4); /* m_Floats */
        Dictionary<AsciiString, ColorRGBA_1> m_Colors_ = BuiltInMap<AsciiString, ColorRGBA_1>.Read(reader);
        reader.AlignTo(4); /* m_Colors */
        
        return new(m_TexEnvs_,
            m_Ints_,
            m_Floats_,
            m_Colors_);
    }

    public override string ToString() => $"UnityPropertySheet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TexEnvs[{m_TexEnvs.Count}] = {{");
        if (m_TexEnvs.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, UnityTexEnv> _4 in m_TexEnvs)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = {{ \n{_4.Value.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TexEnvs.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Ints[{m_Ints.Count}] = {{");
        if (m_Ints.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, int> _4 in m_Ints)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = {_4.Value}");
            ++_4i;
        }
        if (m_Ints.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Floats[{m_Floats.Count}] = {{");
        if (m_Floats.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, float> _4 in m_Floats)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = {_4.Value}");
            ++_4i;
        }
        if (m_Floats.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Colors[{m_Colors.Count}] = {{");
        if (m_Colors.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, ColorRGBA_1> _4 in m_Colors)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = {{ r: {_4.Value.r}, g: {_4.Value.g}, b: {_4.Value.b}, a: {_4.Value.a} }}\n");
            ++_4i;
        }
        if (m_Colors.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UnityTexEnv (3 fields) */
public record class UnityTexEnv (
    PPtr<Texture> m_Texture,
    Vector2f m_Scale,
    Vector2f m_Offset) : IUnityStructure
{
    public static UnityTexEnv Read(EndianBinaryReader reader)
    {
        PPtr<Texture> m_Texture_ = PPtr<Texture>.Read(reader);
        Vector2f m_Scale_ = Vector2f.Read(reader);
        Vector2f m_Offset_ = Vector2f.Read(reader);
        
        return new(m_Texture_,
            m_Scale_,
            m_Offset_);
    }

    public override string ToString() => $"UnityTexEnv\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Texture: {m_Texture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Scale: {{ x: {m_Scale.x}, y: {m_Scale.y} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Offset: {{ x: {m_Offset.x}, y: {m_Offset.y} }}\n");
    }
}

/* $BuildTextureStackReference (2 fields) */
public record class BuildTextureStackReference (
    AsciiString groupName,
    AsciiString itemName) : IUnityStructure
{
    public static BuildTextureStackReference Read(EndianBinaryReader reader)
    {
        AsciiString groupName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* groupName */
        AsciiString itemName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* itemName */
        
        return new(groupName_,
            itemName_);
    }

    public override string ToString() => $"BuildTextureStackReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}groupName: \"{groupName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemName: \"{itemName}\"");
    }
}

/* $ComponentPair (1 fields) */
public record class ComponentPair (
    PPtr<Component> component) : IUnityStructure
{
    public static ComponentPair Read(EndianBinaryReader reader)
    {
        PPtr<Component> component_ = PPtr<Component>.Read(reader);
        
        return new(component_);
    }

    public override string ToString() => $"ComponentPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}component: {component}");
    }
}

/* $QualitySetting (47 fields) */
public record class QualitySetting (
    AsciiString name,
    int pixelLightCount,
    int shadows,
    int shadowResolution,
    int shadowProjection,
    int shadowCascades,
    float shadowDistance,
    float shadowNearPlaneOffset,
    float shadowCascade2Split,
    Vector3f shadowCascade4Split,
    int shadowmaskMode,
    int skinWeights,
    int globalTextureMipmapLimit,
    MipmapLimitSettings[] textureMipmapLimitSettings,
    int anisotropicTextures,
    int antiAliasing,
    bool softParticles,
    bool softVegetation,
    bool realtimeReflectionProbes,
    bool billboardsFaceCameraPosition,
    bool useLegacyDetailDistribution,
    int vSyncCount,
    int realtimeGICPUUsage,
    float lodBias,
    int maximumLODLevel,
    bool enableLODCrossFade,
    bool streamingMipmapsActive,
    bool streamingMipmapsAddAllCameras,
    float streamingMipmapsMemoryBudget,
    int streamingMipmapsRenderersPerFrame,
    int streamingMipmapsMaxLevelReduction,
    int streamingMipmapsMaxFileIORequests,
    int particleRaycastBudget,
    int asyncUploadTimeSlice,
    int asyncUploadBufferSize,
    bool asyncUploadPersistentBuffer,
    float resolutionScalingFixedDPIFactor,
    PPtr<MonoBehaviour> customRenderPipeline,
    int terrainQualityOverrides,
    float terrainPixelError,
    float terrainDetailDensityScale,
    float terrainBasemapDistance,
    float terrainDetailDistance,
    float terrainTreeDistance,
    float terrainBillboardStart,
    float terrainFadeLength,
    int terrainMaxTrees) : IUnityStructure
{
    public static QualitySetting Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int pixelLightCount_ = reader.ReadS32();
        int shadows_ = reader.ReadS32();
        int shadowResolution_ = reader.ReadS32();
        int shadowProjection_ = reader.ReadS32();
        int shadowCascades_ = reader.ReadS32();
        float shadowDistance_ = reader.ReadF32();
        float shadowNearPlaneOffset_ = reader.ReadF32();
        float shadowCascade2Split_ = reader.ReadF32();
        Vector3f shadowCascade4Split_ = Vector3f.Read(reader);
        int shadowmaskMode_ = reader.ReadS32();
        int skinWeights_ = reader.ReadS32();
        int globalTextureMipmapLimit_ = reader.ReadS32();
        MipmapLimitSettings[] textureMipmapLimitSettings_ = BuiltInArray<MipmapLimitSettings>.Read(reader);
        reader.AlignTo(4); /* textureMipmapLimitSettings */
        int anisotropicTextures_ = reader.ReadS32();
        int antiAliasing_ = reader.ReadS32();
        bool softParticles_ = reader.ReadBool();
        bool softVegetation_ = reader.ReadBool();
        bool realtimeReflectionProbes_ = reader.ReadBool();
        bool billboardsFaceCameraPosition_ = reader.ReadBool();
        bool useLegacyDetailDistribution_ = reader.ReadBool();
        reader.AlignTo(4); /* useLegacyDetailDistribution */
        int vSyncCount_ = reader.ReadS32();
        int realtimeGICPUUsage_ = reader.ReadS32();
        float lodBias_ = reader.ReadF32();
        int maximumLODLevel_ = reader.ReadS32();
        bool enableLODCrossFade_ = reader.ReadBool();
        bool streamingMipmapsActive_ = reader.ReadBool();
        bool streamingMipmapsAddAllCameras_ = reader.ReadBool();
        reader.AlignTo(4); /* streamingMipmapsAddAllCameras */
        float streamingMipmapsMemoryBudget_ = reader.ReadF32();
        int streamingMipmapsRenderersPerFrame_ = reader.ReadS32();
        int streamingMipmapsMaxLevelReduction_ = reader.ReadS32();
        int streamingMipmapsMaxFileIORequests_ = reader.ReadS32();
        int particleRaycastBudget_ = reader.ReadS32();
        int asyncUploadTimeSlice_ = reader.ReadS32();
        int asyncUploadBufferSize_ = reader.ReadS32();
        bool asyncUploadPersistentBuffer_ = reader.ReadBool();
        reader.AlignTo(4); /* asyncUploadPersistentBuffer */
        float resolutionScalingFixedDPIFactor_ = reader.ReadF32();
        PPtr<MonoBehaviour> customRenderPipeline_ = PPtr<MonoBehaviour>.Read(reader);
        reader.AlignTo(4); /* customRenderPipeline */
        int terrainQualityOverrides_ = reader.ReadS32();
        float terrainPixelError_ = reader.ReadF32();
        float terrainDetailDensityScale_ = reader.ReadF32();
        float terrainBasemapDistance_ = reader.ReadF32();
        float terrainDetailDistance_ = reader.ReadF32();
        float terrainTreeDistance_ = reader.ReadF32();
        float terrainBillboardStart_ = reader.ReadF32();
        float terrainFadeLength_ = reader.ReadF32();
        int terrainMaxTrees_ = reader.ReadS32();
        reader.AlignTo(4); /* terrainMaxTrees */
        
        return new(name_,
            pixelLightCount_,
            shadows_,
            shadowResolution_,
            shadowProjection_,
            shadowCascades_,
            shadowDistance_,
            shadowNearPlaneOffset_,
            shadowCascade2Split_,
            shadowCascade4Split_,
            shadowmaskMode_,
            skinWeights_,
            globalTextureMipmapLimit_,
            textureMipmapLimitSettings_,
            anisotropicTextures_,
            antiAliasing_,
            softParticles_,
            softVegetation_,
            realtimeReflectionProbes_,
            billboardsFaceCameraPosition_,
            useLegacyDetailDistribution_,
            vSyncCount_,
            realtimeGICPUUsage_,
            lodBias_,
            maximumLODLevel_,
            enableLODCrossFade_,
            streamingMipmapsActive_,
            streamingMipmapsAddAllCameras_,
            streamingMipmapsMemoryBudget_,
            streamingMipmapsRenderersPerFrame_,
            streamingMipmapsMaxLevelReduction_,
            streamingMipmapsMaxFileIORequests_,
            particleRaycastBudget_,
            asyncUploadTimeSlice_,
            asyncUploadBufferSize_,
            asyncUploadPersistentBuffer_,
            resolutionScalingFixedDPIFactor_,
            customRenderPipeline_,
            terrainQualityOverrides_,
            terrainPixelError_,
            terrainDetailDensityScale_,
            terrainBasemapDistance_,
            terrainDetailDistance_,
            terrainTreeDistance_,
            terrainBillboardStart_,
            terrainFadeLength_,
            terrainMaxTrees_);
    }

    public override string ToString() => $"QualitySetting\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pixelLightCount: {pixelLightCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadows: {shadows}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowResolution: {shadowResolution}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowProjection: {shadowProjection}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowCascades: {shadowCascades}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowDistance: {shadowDistance}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowNearPlaneOffset: {shadowNearPlaneOffset}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowCascade2Split: {shadowCascade2Split}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}shadowCascade4Split: {{ x: {shadowCascade4Split.x}, y: {shadowCascade4Split.y}, z: {shadowCascade4Split.z} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowmaskMode: {shadowmaskMode}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}skinWeights: {skinWeights}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}globalTextureMipmapLimit: {globalTextureMipmapLimit}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureMipmapLimitSettings[{textureMipmapLimitSettings.Length}] = {{");
        if (textureMipmapLimitSettings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MipmapLimitSettings _4 in textureMipmapLimitSettings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ limitBiasMode: {_4.limitBiasMode}, limitBias: {_4.limitBias} }}\n");
            ++_4i;
        }
        if (textureMipmapLimitSettings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}anisotropicTextures: {anisotropicTextures}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}antiAliasing: {antiAliasing}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}softParticles: {softParticles}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}softVegetation: {softVegetation}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}realtimeReflectionProbes: {realtimeReflectionProbes}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}billboardsFaceCameraPosition: {billboardsFaceCameraPosition}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useLegacyDetailDistribution: {useLegacyDetailDistribution}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}vSyncCount: {vSyncCount}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}realtimeGICPUUsage: {realtimeGICPUUsage}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lodBias: {lodBias}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maximumLODLevel: {maximumLODLevel}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enableLODCrossFade: {enableLODCrossFade}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}streamingMipmapsActive: {streamingMipmapsActive}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}streamingMipmapsAddAllCameras: {streamingMipmapsAddAllCameras}");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}streamingMipmapsMemoryBudget: {streamingMipmapsMemoryBudget}");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}streamingMipmapsRenderersPerFrame: {streamingMipmapsRenderersPerFrame}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}streamingMipmapsMaxLevelReduction: {streamingMipmapsMaxLevelReduction}");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}streamingMipmapsMaxFileIORequests: {streamingMipmapsMaxFileIORequests}");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}particleRaycastBudget: {particleRaycastBudget}");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}asyncUploadTimeSlice: {asyncUploadTimeSlice}");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}asyncUploadBufferSize: {asyncUploadBufferSize}");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}asyncUploadPersistentBuffer: {asyncUploadPersistentBuffer}");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}resolutionScalingFixedDPIFactor: {resolutionScalingFixedDPIFactor}");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customRenderPipeline: {customRenderPipeline}");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainQualityOverrides: {terrainQualityOverrides}");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainPixelError: {terrainPixelError}");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainDetailDensityScale: {terrainDetailDensityScale}");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainBasemapDistance: {terrainBasemapDistance}");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainDetailDistance: {terrainDetailDistance}");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainTreeDistance: {terrainTreeDistance}");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainBillboardStart: {terrainBillboardStart}");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainFadeLength: {terrainFadeLength}");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}terrainMaxTrees: {terrainMaxTrees}");
    }
}

/* $MipmapLimitSettings (2 fields) */
public readonly record struct MipmapLimitSettings (
    int limitBiasMode,
    int limitBias) : IUnityStructure
{
    public static MipmapLimitSettings Read(EndianBinaryReader reader)
    {
        int limitBiasMode_ = reader.ReadS32();
        int limitBias_ = reader.ReadS32();
        
        return new(limitBiasMode_,
            limitBias_);
    }

    public override string ToString() => $"MipmapLimitSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}limitBiasMode: {limitBiasMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}limitBias: {limitBias}");
    }
}

/* $ShadowSettings (9 fields) */
public record class ShadowSettings (
    int m_Type,
    int m_Resolution,
    int m_CustomResolution,
    float m_Strength,
    float m_Bias,
    float m_NormalBias,
    float m_NearPlane,
    Matrix4x4f m_CullingMatrixOverride,
    bool m_UseCullingMatrixOverride) : IUnityStructure
{
    public static ShadowSettings Read(EndianBinaryReader reader)
    {
        int m_Type_ = reader.ReadS32();
        int m_Resolution_ = reader.ReadS32();
        int m_CustomResolution_ = reader.ReadS32();
        float m_Strength_ = reader.ReadF32();
        float m_Bias_ = reader.ReadF32();
        float m_NormalBias_ = reader.ReadF32();
        float m_NearPlane_ = reader.ReadF32();
        Matrix4x4f m_CullingMatrixOverride_ = Matrix4x4f.Read(reader);
        bool m_UseCullingMatrixOverride_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseCullingMatrixOverride */
        
        return new(m_Type_,
            m_Resolution_,
            m_CustomResolution_,
            m_Strength_,
            m_Bias_,
            m_NormalBias_,
            m_NearPlane_,
            m_CullingMatrixOverride_,
            m_UseCullingMatrixOverride_);
    }

    public override string ToString() => $"ShadowSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Resolution: {m_Resolution}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CustomResolution: {m_CustomResolution}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Strength: {m_Strength}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Bias: {m_Bias}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NormalBias: {m_NormalBias}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NearPlane: {m_NearPlane}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_CullingMatrixOverride: {{ \n{m_CullingMatrixOverride.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseCullingMatrixOverride: {m_UseCullingMatrixOverride}");
    }
}

/* $LightBakingOutput (4 fields) */
public record class LightBakingOutput (
    int probeOcclusionLightIndex,
    int occlusionMaskChannel,
    LightmapBakeMode lightmapBakeMode,
    bool isBaked) : IUnityStructure
{
    public static LightBakingOutput Read(EndianBinaryReader reader)
    {
        int probeOcclusionLightIndex_ = reader.ReadS32();
        int occlusionMaskChannel_ = reader.ReadS32();
        LightmapBakeMode lightmapBakeMode_ = LightmapBakeMode.Read(reader);
        bool isBaked_ = reader.ReadBool();
        reader.AlignTo(4); /* isBaked */
        
        return new(probeOcclusionLightIndex_,
            occlusionMaskChannel_,
            lightmapBakeMode_,
            isBaked_);
    }

    public override string ToString() => $"LightBakingOutput\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}probeOcclusionLightIndex: {probeOcclusionLightIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}occlusionMaskChannel: {occlusionMaskChannel}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}lightmapBakeMode: {{ lightmapBakeType: {lightmapBakeMode.lightmapBakeType}, mixedLightingMode: {lightmapBakeMode.mixedLightingMode} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}isBaked: {isBaked}");
    }
}

/* $LightmapBakeMode (2 fields) */
public readonly record struct LightmapBakeMode (
    int lightmapBakeType,
    int mixedLightingMode) : IUnityStructure
{
    public static LightmapBakeMode Read(EndianBinaryReader reader)
    {
        int lightmapBakeType_ = reader.ReadS32();
        int mixedLightingMode_ = reader.ReadS32();
        
        return new(lightmapBakeType_,
            mixedLightingMode_);
    }

    public override string ToString() => $"LightmapBakeMode\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lightmapBakeType: {lightmapBakeType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mixedLightingMode: {mixedLightingMode}");
    }
}

/* $SortingLayerEntry (2 fields) */
public record class SortingLayerEntry (
    AsciiString name,
    uint uniqueID) : IUnityStructure
{
    public static SortingLayerEntry Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        uint uniqueID_ = reader.ReadU32();
        reader.AlignTo(4); /* uniqueID */
        
        return new(name_,
            uniqueID_);
    }

    public override string ToString() => $"SortingLayerEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}uniqueID: {uniqueID}");
    }
}

/* $DirectorGenericBinding (2 fields) */
public record class DirectorGenericBinding (
    PPtr<Object> key,
    PPtr<Object> @value) : IUnityStructure
{
    public static DirectorGenericBinding Read(EndianBinaryReader reader)
    {
        PPtr<Object> key_ = PPtr<Object>.Read(reader);
        PPtr<Object> @value_ = PPtr<Object>.Read(reader);
        
        return new(key_,
            @value_);
    }

    public override string ToString() => $"DirectorGenericBinding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}key: {key}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }
}

/* $ExposedReferenceTable (1 fields) */
public record class ExposedReferenceTable (
    Dictionary<AsciiString, PPtr<Object>> m_References) : IUnityStructure
{
    public static ExposedReferenceTable Read(EndianBinaryReader reader)
    {
        Dictionary<AsciiString, PPtr<Object>> m_References_ = BuiltInMap<AsciiString, PPtr<Object>>.Read(reader);
        reader.AlignTo(4); /* m_References */
        
        return new(m_References_);
    }

    public override string ToString() => $"ExposedReferenceTable\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_References[{m_References.Count}] = {{");
        if (m_References.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<AsciiString, PPtr<Object>> _4 in m_References)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[\"{_4.Key}\"] = {_4.Value}");
            ++_4i;
        }
        if (m_References.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CrashReportingSettings (3 fields) */
public record class CrashReportingSettings (
    AsciiString m_EventUrl,
    bool m_Enabled,
    uint m_LogBufferSize) : IUnityStructure
{
    public static CrashReportingSettings Read(EndianBinaryReader reader)
    {
        AsciiString m_EventUrl_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_EventUrl */
        bool m_Enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Enabled */
        uint m_LogBufferSize_ = reader.ReadU32();
        reader.AlignTo(4); /* m_LogBufferSize */
        
        return new(m_EventUrl_,
            m_Enabled_,
            m_LogBufferSize_);
    }

    public override string ToString() => $"CrashReportingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EventUrl: \"{m_EventUrl}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Enabled: {m_Enabled}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LogBufferSize: {m_LogBufferSize}");
    }
}

/* $UnityPurchasingSettings (2 fields) */
public readonly record struct UnityPurchasingSettings (
    bool m_Enabled,
    bool m_TestMode) : IUnityStructure
{
    public static UnityPurchasingSettings Read(EndianBinaryReader reader)
    {
        bool m_Enabled_ = reader.ReadBool();
        bool m_TestMode_ = reader.ReadBool();
        reader.AlignTo(4); /* m_TestMode */
        
        return new(m_Enabled_,
            m_TestMode_);
    }

    public override string ToString() => $"UnityPurchasingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Enabled: {m_Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TestMode: {m_TestMode}");
    }
}

/* $UnityAnalyticsSettings (4 fields) */
public readonly record struct UnityAnalyticsSettings (
    bool m_Enabled,
    bool m_TestMode,
    bool m_InitializeOnStartup,
    bool m_PackageRequiringCoreStatsPresent) : IUnityStructure
{
    public static UnityAnalyticsSettings Read(EndianBinaryReader reader)
    {
        bool m_Enabled_ = reader.ReadBool();
        bool m_TestMode_ = reader.ReadBool();
        bool m_InitializeOnStartup_ = reader.ReadBool();
        bool m_PackageRequiringCoreStatsPresent_ = reader.ReadBool();
        reader.AlignTo(4); /* m_PackageRequiringCoreStatsPresent */
        
        return new(m_Enabled_,
            m_TestMode_,
            m_InitializeOnStartup_,
            m_PackageRequiringCoreStatsPresent_);
    }

    public override string ToString() => $"UnityAnalyticsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Enabled: {m_Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TestMode: {m_TestMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InitializeOnStartup: {m_InitializeOnStartup}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PackageRequiringCoreStatsPresent: {m_PackageRequiringCoreStatsPresent}");
    }
}

/* $UnityAdsSettings (4 fields) */
public record class UnityAdsSettings (
    bool m_Enabled,
    bool m_InitializeOnStartup,
    bool m_TestMode,
    AsciiString m_GameId) : IUnityStructure
{
    public static UnityAdsSettings Read(EndianBinaryReader reader)
    {
        bool m_Enabled_ = reader.ReadBool();
        bool m_InitializeOnStartup_ = reader.ReadBool();
        bool m_TestMode_ = reader.ReadBool();
        reader.AlignTo(4); /* m_TestMode */
        AsciiString m_GameId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_GameId */
        
        return new(m_Enabled_,
            m_InitializeOnStartup_,
            m_TestMode_,
            m_GameId_);
    }

    public override string ToString() => $"UnityAdsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Enabled: {m_Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InitializeOnStartup: {m_InitializeOnStartup}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TestMode: {m_TestMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GameId: \"{m_GameId}\"");
    }
}

/* $PerformanceReportingSettings (1 fields) */
public readonly record struct PerformanceReportingSettings (
    bool m_Enabled) : IUnityStructure
{
    public static PerformanceReportingSettings Read(EndianBinaryReader reader)
    {
        bool m_Enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* m_Enabled */
        
        return new(m_Enabled_);
    }

    public override string ToString() => $"PerformanceReportingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Enabled: {m_Enabled}");
    }
}

/* $NameToObjectMap (1 fields) */
public record class NameToObjectMap (
    Dictionary<PPtr<Shader>, AsciiString> m_ObjectToName) : IUnityStructure
{
    public static NameToObjectMap Read(EndianBinaryReader reader)
    {
        Dictionary<PPtr<Shader>, AsciiString> m_ObjectToName_ = BuiltInMap<PPtr<Shader>, AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_ObjectToName */
        
        return new(m_ObjectToName_);
    }

    public override string ToString() => $"NameToObjectMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ObjectToName[{m_ObjectToName.Count}] = {{");
        if (m_ObjectToName.Count > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyValuePair<PPtr<Shader>, AsciiString> _4 in m_ObjectToName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4.Key}] = \"{_4.Value}\"");
            ++_4i;
        }
        if (m_ObjectToName.Count > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SpriteRenderData (13 fields) */
public record class SpriteRenderData (
    PPtr<Texture2D> texture,
    PPtr<Texture2D> alphaTexture,
    SecondarySpriteTexture[] secondaryTextures,
    SubMesh[] m_SubMeshes,
    byte[] m_IndexBuffer,
    VertexData m_VertexData,
    Matrix4x4f[] m_Bindpose,
    Rectf textureRect,
    Vector2f textureRectOffset,
    Vector2f atlasRectOffset,
    uint settingsRaw,
    Vector4f uvTransform,
    float downscaleMultiplier) : IUnityStructure
{
    public static SpriteRenderData Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> texture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> alphaTexture_ = PPtr<Texture2D>.Read(reader);
        SecondarySpriteTexture[] secondaryTextures_ = BuiltInArray<SecondarySpriteTexture>.Read(reader);
        reader.AlignTo(4); /* secondaryTextures */
        SubMesh[] m_SubMeshes_ = BuiltInArray<SubMesh>.Read(reader);
        reader.AlignTo(4); /* m_SubMeshes */
        byte[] m_IndexBuffer_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_IndexBuffer */
        VertexData m_VertexData_ = VertexData.Read(reader);
        reader.AlignTo(4); /* m_VertexData */
        Matrix4x4f[] m_Bindpose_ = BuiltInArray<Matrix4x4f>.Read(reader);
        reader.AlignTo(4); /* m_Bindpose */
        Rectf textureRect_ = Rectf.Read(reader);
        Vector2f textureRectOffset_ = Vector2f.Read(reader);
        Vector2f atlasRectOffset_ = Vector2f.Read(reader);
        uint settingsRaw_ = reader.ReadU32();
        Vector4f uvTransform_ = Vector4f.Read(reader);
        float downscaleMultiplier_ = reader.ReadF32();
        
        return new(texture_,
            alphaTexture_,
            secondaryTextures_,
            m_SubMeshes_,
            m_IndexBuffer_,
            m_VertexData_,
            m_Bindpose_,
            textureRect_,
            textureRectOffset_,
            atlasRectOffset_,
            settingsRaw_,
            uvTransform_,
            downscaleMultiplier_);
    }

    public override string ToString() => $"SpriteRenderData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}texture: {texture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alphaTexture: {alphaTexture}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}secondaryTextures[{secondaryTextures.Length}] = {{");
        if (secondaryTextures.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SecondarySpriteTexture _4 in secondaryTextures)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (secondaryTextures.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SubMeshes[{m_SubMeshes.Length}] = {{");
        if (m_SubMeshes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SubMesh _4 in m_SubMeshes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_SubMeshes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_IndexBuffer[{m_IndexBuffer.Length}] = {{");
        if (m_IndexBuffer.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_IndexBuffer)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_IndexBuffer.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_VertexData: {{ \n{m_VertexData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Bindpose[{m_Bindpose.Length}] = {{");
        if (m_Bindpose.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Matrix4x4f _4 in m_Bindpose)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Bindpose.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureRect: {{ x: {textureRect.x}, y: {textureRect.y}, width: {textureRect.width}, height: {textureRect.height} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureRectOffset: {{ x: {textureRectOffset.x}, y: {textureRectOffset.y} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}atlasRectOffset: {{ x: {atlasRectOffset.x}, y: {atlasRectOffset.y} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}settingsRaw: {settingsRaw}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uvTransform: {{ x: {uvTransform.x}, y: {uvTransform.y}, z: {uvTransform.z}, w: {uvTransform.w} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}downscaleMultiplier: {downscaleMultiplier}");
    }
}

/* $SpriteBone (7 fields) */
public record class SpriteBone (
    AsciiString name,
    AsciiString guid,
    Vector3f position,
    Quaternionf rotation,
    float length,
    int parentId,
    ColorRGBA color) : IUnityStructure
{
    public static SpriteBone Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        Vector3f position_ = Vector3f.Read(reader);
        Quaternionf rotation_ = Quaternionf.Read(reader);
        float length_ = reader.ReadF32();
        int parentId_ = reader.ReadS32();
        ColorRGBA color_ = ColorRGBA.Read(reader);
        
        return new(name_,
            guid_,
            position_,
            rotation_,
            length_,
            parentId_,
            color_);
    }

    public override string ToString() => $"SpriteBone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}position: {{ x: {position.x}, y: {position.y}, z: {position.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rotation: {{ x: {rotation.x}, y: {rotation.y}, z: {rotation.z}, w: {rotation.w} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}length: {length}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}parentId: {parentId}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ rgba: {color.rgba} }}\n");
    }
}

/* $ColorRGBA (1 fields) */
public readonly record struct ColorRGBA (
    uint rgba) : IUnityStructure
{
    public static ColorRGBA Read(EndianBinaryReader reader)
    {
        uint rgba_ = reader.ReadU32();
        
        return new(rgba_);
    }

    public override string ToString() => $"ColorRGBA\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rgba: {rgba}");
    }
}

/* $SplatDatabase (4 fields) */
public record class SplatDatabase (
    PPtr<TerrainLayer>[] m_TerrainLayers,
    PPtr<Texture2D>[] m_AlphaTextures,
    int m_AlphamapResolution,
    int m_BaseMapResolution) : IUnityStructure
{
    public static SplatDatabase Read(EndianBinaryReader reader)
    {
        PPtr<TerrainLayer>[] m_TerrainLayers_ = BuiltInArray<PPtr<TerrainLayer>>.Read(reader);
        reader.AlignTo(4); /* m_TerrainLayers */
        PPtr<Texture2D>[] m_AlphaTextures_ = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* m_AlphaTextures */
        int m_AlphamapResolution_ = reader.ReadS32();
        int m_BaseMapResolution_ = reader.ReadS32();
        
        return new(m_TerrainLayers_,
            m_AlphaTextures_,
            m_AlphamapResolution_,
            m_BaseMapResolution_);
    }

    public override string ToString() => $"SplatDatabase\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TerrainLayers[{m_TerrainLayers.Length}] = {{");
        if (m_TerrainLayers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<TerrainLayer> _4 in m_TerrainLayers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_TerrainLayers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AlphaTextures[{m_AlphaTextures.Length}] = {{");
        if (m_AlphaTextures.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Texture2D> _4 in m_AlphaTextures)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_AlphaTextures.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AlphamapResolution: {m_AlphamapResolution}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BaseMapResolution: {m_BaseMapResolution}");
    }
}

/* $DetailDatabase (15 fields) */
public record class DetailDatabase (
    DetailPatch[] m_Patches,
    DetailPrototype[] m_DetailPrototypes,
    int m_PatchCount,
    int m_PatchSamples,
    ColorRGBA_1 WavingGrassTint,
    float m_WavingGrassStrength,
    float m_WavingGrassAmount,
    float m_WavingGrassSpeed,
    int m_DetailScatterMode,
    TreeInstance[] m_TreeInstances,
    TreePrototype[] m_TreePrototypes,
    PPtr<Texture2D>[] m_PreloadTextureAtlasData,
    PPtr<Shader> m_DefaultShaders_0,
    PPtr<Shader> m_DefaultShaders_1,
    PPtr<Shader> m_DefaultShaders_2) : IUnityStructure
{
    public static DetailDatabase Read(EndianBinaryReader reader)
    {
        DetailPatch[] m_Patches_ = BuiltInArray<DetailPatch>.Read(reader);
        reader.AlignTo(4); /* m_Patches */
        DetailPrototype[] m_DetailPrototypes_ = BuiltInArray<DetailPrototype>.Read(reader);
        reader.AlignTo(4); /* m_DetailPrototypes */
        int m_PatchCount_ = reader.ReadS32();
        int m_PatchSamples_ = reader.ReadS32();
        ColorRGBA_1 WavingGrassTint_ = ColorRGBA_1.Read(reader);
        float m_WavingGrassStrength_ = reader.ReadF32();
        float m_WavingGrassAmount_ = reader.ReadF32();
        float m_WavingGrassSpeed_ = reader.ReadF32();
        int m_DetailScatterMode_ = reader.ReadS32();
        TreeInstance[] m_TreeInstances_ = BuiltInArray<TreeInstance>.Read(reader);
        reader.AlignTo(4); /* m_TreeInstances */
        TreePrototype[] m_TreePrototypes_ = BuiltInArray<TreePrototype>.Read(reader);
        reader.AlignTo(4); /* m_TreePrototypes */
        PPtr<Texture2D>[] m_PreloadTextureAtlasData_ = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* m_PreloadTextureAtlasData */
        PPtr<Shader> m_DefaultShaders_0_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> m_DefaultShaders_1_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> m_DefaultShaders_2_ = PPtr<Shader>.Read(reader);
        
        return new(m_Patches_,
            m_DetailPrototypes_,
            m_PatchCount_,
            m_PatchSamples_,
            WavingGrassTint_,
            m_WavingGrassStrength_,
            m_WavingGrassAmount_,
            m_WavingGrassSpeed_,
            m_DetailScatterMode_,
            m_TreeInstances_,
            m_TreePrototypes_,
            m_PreloadTextureAtlasData_,
            m_DefaultShaders_0_,
            m_DefaultShaders_1_,
            m_DefaultShaders_2_);
    }

    public override string ToString() => $"DetailDatabase\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Patches[{m_Patches.Length}] = {{");
        if (m_Patches.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (DetailPatch _4 in m_Patches)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Patches.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DetailPrototypes[{m_DetailPrototypes.Length}] = {{");
        if (m_DetailPrototypes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (DetailPrototype _4 in m_DetailPrototypes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_DetailPrototypes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PatchCount: {m_PatchCount}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PatchSamples: {m_PatchSamples}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WavingGrassTint: {{ r: {WavingGrassTint.r}, g: {WavingGrassTint.g}, b: {WavingGrassTint.b}, a: {WavingGrassTint.a} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WavingGrassStrength: {m_WavingGrassStrength}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WavingGrassAmount: {m_WavingGrassAmount}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WavingGrassSpeed: {m_WavingGrassSpeed}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DetailScatterMode: {m_DetailScatterMode}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TreeInstances[{m_TreeInstances.Length}] = {{");
        if (m_TreeInstances.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (TreeInstance _4 in m_TreeInstances)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TreeInstances.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TreePrototypes[{m_TreePrototypes.Length}] = {{");
        if (m_TreePrototypes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (TreePrototype _4 in m_TreePrototypes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_TreePrototypes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PreloadTextureAtlasData[{m_PreloadTextureAtlasData.Length}] = {{");
        if (m_PreloadTextureAtlasData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Texture2D> _4 in m_PreloadTextureAtlasData)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_PreloadTextureAtlasData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultShaders_0: {m_DefaultShaders_0}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultShaders_1: {m_DefaultShaders_1}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultShaders_2: {m_DefaultShaders_2}");
    }
}

/* $DetailPatch (2 fields) */
public record class DetailPatch (
    byte[] layerIndices,
    byte[] coverage) : IUnityStructure
{
    public static DetailPatch Read(EndianBinaryReader reader)
    {
        byte[] layerIndices_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* layerIndices */
        byte[] coverage_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* coverage */
        
        return new(layerIndices_,
            coverage_);
    }

    public override string ToString() => $"DetailPatch\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}layerIndices[{layerIndices.Length}] = {{");
        if (layerIndices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in layerIndices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (layerIndices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}coverage[{coverage.Length}] = {{");
        if (coverage.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in coverage)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (coverage.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $DetailPrototype (19 fields) */
public record class DetailPrototype (
    PPtr<GameObject> prototype,
    PPtr<Texture2D> prototypeTexture,
    float minWidth,
    float maxWidth,
    float minHeight,
    float maxHeight,
    int noiseSeed,
    float noiseSpread,
    float holeTestRadius,
    float density,
    ColorRGBA_1 healthyColor,
    ColorRGBA_1 dryColor,
    int renderMode,
    int usePrototypeMesh,
    int useInstancing,
    int useDensityScaling,
    float alignToGround,
    float positionJitter,
    float targetCoverage) : IUnityStructure
{
    public static DetailPrototype Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> prototype_ = PPtr<GameObject>.Read(reader);
        PPtr<Texture2D> prototypeTexture_ = PPtr<Texture2D>.Read(reader);
        float minWidth_ = reader.ReadF32();
        float maxWidth_ = reader.ReadF32();
        float minHeight_ = reader.ReadF32();
        float maxHeight_ = reader.ReadF32();
        int noiseSeed_ = reader.ReadS32();
        float noiseSpread_ = reader.ReadF32();
        float holeTestRadius_ = reader.ReadF32();
        float density_ = reader.ReadF32();
        ColorRGBA_1 healthyColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 dryColor_ = ColorRGBA_1.Read(reader);
        int renderMode_ = reader.ReadS32();
        int usePrototypeMesh_ = reader.ReadS32();
        int useInstancing_ = reader.ReadS32();
        int useDensityScaling_ = reader.ReadS32();
        float alignToGround_ = reader.ReadF32();
        float positionJitter_ = reader.ReadF32();
        float targetCoverage_ = reader.ReadF32();
        
        return new(prototype_,
            prototypeTexture_,
            minWidth_,
            maxWidth_,
            minHeight_,
            maxHeight_,
            noiseSeed_,
            noiseSpread_,
            holeTestRadius_,
            density_,
            healthyColor_,
            dryColor_,
            renderMode_,
            usePrototypeMesh_,
            useInstancing_,
            useDensityScaling_,
            alignToGround_,
            positionJitter_,
            targetCoverage_);
    }

    public override string ToString() => $"DetailPrototype\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}prototype: {prototype}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}prototypeTexture: {prototypeTexture}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minWidth: {minWidth}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxWidth: {maxWidth}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minHeight: {minHeight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxHeight: {maxHeight}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}noiseSeed: {noiseSeed}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}noiseSpread: {noiseSpread}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}holeTestRadius: {holeTestRadius}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}density: {density}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}healthyColor: {{ r: {healthyColor.r}, g: {healthyColor.g}, b: {healthyColor.b}, a: {healthyColor.a} }}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}dryColor: {{ r: {dryColor.r}, g: {dryColor.g}, b: {dryColor.b}, a: {dryColor.a} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}renderMode: {renderMode}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}usePrototypeMesh: {usePrototypeMesh}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useInstancing: {useInstancing}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useDensityScaling: {useDensityScaling}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alignToGround: {alignToGround}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}positionJitter: {positionJitter}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}targetCoverage: {targetCoverage}");
    }
}

/* $TreeInstance (7 fields) */
public record class TreeInstance (
    Vector3f position,
    float widthScale,
    float heightScale,
    float rotation,
    ColorRGBA color,
    ColorRGBA lightmapColor,
    int index) : IUnityStructure
{
    public static TreeInstance Read(EndianBinaryReader reader)
    {
        Vector3f position_ = Vector3f.Read(reader);
        float widthScale_ = reader.ReadF32();
        float heightScale_ = reader.ReadF32();
        float rotation_ = reader.ReadF32();
        ColorRGBA color_ = ColorRGBA.Read(reader);
        ColorRGBA lightmapColor_ = ColorRGBA.Read(reader);
        int index_ = reader.ReadS32();
        
        return new(position_,
            widthScale_,
            heightScale_,
            rotation_,
            color_,
            lightmapColor_,
            index_);
    }

    public override string ToString() => $"TreeInstance\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}position: {{ x: {position.x}, y: {position.y}, z: {position.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}widthScale: {widthScale}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}heightScale: {heightScale}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rotation: {rotation}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ rgba: {color.rgba} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}lightmapColor: {{ rgba: {lightmapColor.rgba} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index: {index}");
    }
}

/* $TreePrototype (3 fields) */
public record class TreePrototype (
    PPtr<GameObject> prefab,
    float bendFactor,
    int navMeshLod) : IUnityStructure
{
    public static TreePrototype Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> prefab_ = PPtr<GameObject>.Read(reader);
        float bendFactor_ = reader.ReadF32();
        int navMeshLod_ = reader.ReadS32();
        
        return new(prefab_,
            bendFactor_,
            navMeshLod_);
    }

    public override string ToString() => $"TreePrototype\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}prefab: {prefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bendFactor: {bendFactor}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}navMeshLod: {navMeshLod}");
    }
}

/* $Heightmap (9 fields) */
public record class Heightmap (
    short[] m_Heights,
    byte[] m_Holes,
    byte[] m_HolesLOD,
    bool m_EnableHolesTextureCompression,
    float[] m_PrecomputedError,
    float[] m_MinMaxPatchHeights,
    int m_Resolution,
    int m_Levels,
    Vector3f m_Scale) : IUnityStructure
{
    public static Heightmap Read(EndianBinaryReader reader)
    {
        short[] m_Heights_ = BuiltInArray<short>.Read(reader);
        reader.AlignTo(4); /* m_Heights */
        byte[] m_Holes_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_Holes */
        byte[] m_HolesLOD_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* m_HolesLOD */
        bool m_EnableHolesTextureCompression_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableHolesTextureCompression */
        float[] m_PrecomputedError_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* m_PrecomputedError */
        float[] m_MinMaxPatchHeights_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* m_MinMaxPatchHeights */
        int m_Resolution_ = reader.ReadS32();
        int m_Levels_ = reader.ReadS32();
        Vector3f m_Scale_ = Vector3f.Read(reader);
        
        return new(m_Heights_,
            m_Holes_,
            m_HolesLOD_,
            m_EnableHolesTextureCompression_,
            m_PrecomputedError_,
            m_MinMaxPatchHeights_,
            m_Resolution_,
            m_Levels_,
            m_Scale_);
    }

    public override string ToString() => $"Heightmap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Heights[{m_Heights.Length}] = {{");
        if (m_Heights.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (short _4 in m_Heights)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Heights.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Holes[{m_Holes.Length}] = {{");
        if (m_Holes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_Holes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Holes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HolesLOD[{m_HolesLOD.Length}] = {{");
        if (m_HolesLOD.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in m_HolesLOD)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_HolesLOD.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableHolesTextureCompression: {m_EnableHolesTextureCompression}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PrecomputedError[{m_PrecomputedError.Length}] = {{");
        if (m_PrecomputedError.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_PrecomputedError)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_PrecomputedError.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MinMaxPatchHeights[{m_MinMaxPatchHeights.Length}] = {{");
        if (m_MinMaxPatchHeights.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in m_MinMaxPatchHeights)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_MinMaxPatchHeights.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Resolution: {m_Resolution}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Levels: {m_Levels}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Scale: {{ x: {m_Scale.x}, y: {m_Scale.y}, z: {m_Scale.z} }}\n");
    }
}

/* $NavMeshAreaData (2 fields) */
public record class NavMeshAreaData (
    AsciiString name,
    float cost) : IUnityStructure
{
    public static NavMeshAreaData Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        float cost_ = reader.ReadF32();
        
        return new(name_,
            cost_);
    }

    public override string ToString() => $"NavMeshAreaData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}cost: {cost}");
    }
}

/* $NavMeshBuildSettings (16 fields) */
public record class NavMeshBuildSettings (
    int agentTypeID,
    float agentRadius,
    float agentHeight,
    float agentSlope,
    float agentClimb,
    float ledgeDropHeight,
    float maxJumpAcrossDistance,
    float minRegionArea,
    int manualCellSize,
    float cellSize,
    int manualTileSize,
    int tileSize,
    int buildHeightMesh,
    uint maxJobWorkers,
    int preserveTilesOutsideBounds,
    NavMeshBuildDebugSettings debug) : IUnityStructure
{
    public static NavMeshBuildSettings Read(EndianBinaryReader reader)
    {
        int agentTypeID_ = reader.ReadS32();
        float agentRadius_ = reader.ReadF32();
        float agentHeight_ = reader.ReadF32();
        float agentSlope_ = reader.ReadF32();
        float agentClimb_ = reader.ReadF32();
        float ledgeDropHeight_ = reader.ReadF32();
        float maxJumpAcrossDistance_ = reader.ReadF32();
        float minRegionArea_ = reader.ReadF32();
        int manualCellSize_ = reader.ReadS32();
        float cellSize_ = reader.ReadF32();
        int manualTileSize_ = reader.ReadS32();
        int tileSize_ = reader.ReadS32();
        int buildHeightMesh_ = reader.ReadS32();
        uint maxJobWorkers_ = reader.ReadU32();
        int preserveTilesOutsideBounds_ = reader.ReadS32();
        NavMeshBuildDebugSettings debug_ = NavMeshBuildDebugSettings.Read(reader);
        reader.AlignTo(4); /* debug */
        
        return new(agentTypeID_,
            agentRadius_,
            agentHeight_,
            agentSlope_,
            agentClimb_,
            ledgeDropHeight_,
            maxJumpAcrossDistance_,
            minRegionArea_,
            manualCellSize_,
            cellSize_,
            manualTileSize_,
            tileSize_,
            buildHeightMesh_,
            maxJobWorkers_,
            preserveTilesOutsideBounds_,
            debug_);
    }

    public override string ToString() => $"NavMeshBuildSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}agentTypeID: {agentTypeID}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}agentRadius: {agentRadius}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}agentHeight: {agentHeight}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}agentSlope: {agentSlope}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}agentClimb: {agentClimb}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ledgeDropHeight: {ledgeDropHeight}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxJumpAcrossDistance: {maxJumpAcrossDistance}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minRegionArea: {minRegionArea}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}manualCellSize: {manualCellSize}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}cellSize: {cellSize}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}manualTileSize: {manualTileSize}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tileSize: {tileSize}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buildHeightMesh: {buildHeightMesh}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxJobWorkers: {maxJobWorkers}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}preserveTilesOutsideBounds: {preserveTilesOutsideBounds}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}debug: {{ m_Flags: {debug.m_Flags} }}\n");
    }
}

/* $NavMeshBuildDebugSettings (1 fields) */
public readonly record struct NavMeshBuildDebugSettings (
    byte m_Flags) : IUnityStructure
{
    public static NavMeshBuildDebugSettings Read(EndianBinaryReader reader)
    {
        byte m_Flags_ = reader.ReadU8();
        reader.AlignTo(4); /* m_Flags */
        
        return new(m_Flags_);
    }

    public override string ToString() => $"NavMeshBuildDebugSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Flags: {m_Flags}");
    }
}

/* $MinMaxCurve (5 fields) */
public record class MinMaxCurve (
    ushort minMaxState,
    float scalar,
    float minScalar,
    AnimationCurve maxCurve,
    AnimationCurve minCurve) : IUnityStructure
{
    public static MinMaxCurve Read(EndianBinaryReader reader)
    {
        ushort minMaxState_ = reader.ReadU16();
        reader.AlignTo(4); /* minMaxState */
        float scalar_ = reader.ReadF32();
        float minScalar_ = reader.ReadF32();
        AnimationCurve maxCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* maxCurve */
        AnimationCurve minCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* minCurve */
        
        return new(minMaxState_,
            scalar_,
            minScalar_,
            maxCurve_,
            minCurve_);
    }

    public override string ToString() => $"MinMaxCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minMaxState: {minMaxState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}scalar: {scalar}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minScalar: {minScalar}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}maxCurve: {{ \n{maxCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}minCurve: {{ \n{minCurve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $InitialModule (17 fields) */
public record class InitialModule (
    bool enabled,
    MinMaxCurve startLifetime,
    MinMaxCurve startSpeed,
    MinMaxGradient startColor,
    MinMaxCurve startSize,
    MinMaxCurve startSizeY,
    MinMaxCurve startSizeZ,
    MinMaxCurve startRotationX,
    MinMaxCurve startRotationY,
    MinMaxCurve startRotation,
    float randomizeRotationDirection,
    int gravitySource,
    int maxNumParticles,
    Vector3f customEmitterVelocity,
    bool size3D,
    bool rotation3D,
    MinMaxCurve gravityModifier) : IUnityStructure
{
    public static InitialModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve startLifetime_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startLifetime */
        MinMaxCurve startSpeed_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSpeed */
        MinMaxGradient startColor_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* startColor */
        MinMaxCurve startSize_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSize */
        MinMaxCurve startSizeY_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSizeY */
        MinMaxCurve startSizeZ_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startSizeZ */
        MinMaxCurve startRotationX_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startRotationX */
        MinMaxCurve startRotationY_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startRotationY */
        MinMaxCurve startRotation_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startRotation */
        float randomizeRotationDirection_ = reader.ReadF32();
        int gravitySource_ = reader.ReadS32();
        int maxNumParticles_ = reader.ReadS32();
        Vector3f customEmitterVelocity_ = Vector3f.Read(reader);
        bool size3D_ = reader.ReadBool();
        bool rotation3D_ = reader.ReadBool();
        reader.AlignTo(4); /* rotation3D */
        MinMaxCurve gravityModifier_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* gravityModifier */
        
        return new(enabled_,
            startLifetime_,
            startSpeed_,
            startColor_,
            startSize_,
            startSizeY_,
            startSizeZ_,
            startRotationX_,
            startRotationY_,
            startRotation_,
            randomizeRotationDirection_,
            gravitySource_,
            maxNumParticles_,
            customEmitterVelocity_,
            size3D_,
            rotation3D_,
            gravityModifier_);
    }

    public override string ToString() => $"InitialModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startLifetime: {{ \n{startLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startSpeed: {{ \n{startSpeed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startColor: {{ \n{startColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startSize: {{ \n{startSize.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startSizeY: {{ \n{startSizeY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startSizeZ: {{ \n{startSizeZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startRotationX: {{ \n{startRotationX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startRotationY: {{ \n{startRotationY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startRotation: {{ \n{startRotation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}randomizeRotationDirection: {randomizeRotationDirection}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}gravitySource: {gravitySource}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxNumParticles: {maxNumParticles}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customEmitterVelocity: {{ x: {customEmitterVelocity.x}, y: {customEmitterVelocity.y}, z: {customEmitterVelocity.z} }}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}size3D: {size3D}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rotation3D: {rotation3D}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}gravityModifier: {{ \n{gravityModifier.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MinMaxGradient (5 fields) */
public record class MinMaxGradient (
    ushort minMaxState,
    ColorRGBA_1 minColor,
    ColorRGBA_1 maxColor,
    Gradient_1 maxGradient,
    Gradient_1 minGradient) : IUnityStructure
{
    public static MinMaxGradient Read(EndianBinaryReader reader)
    {
        ushort minMaxState_ = reader.ReadU16();
        reader.AlignTo(4); /* minMaxState */
        ColorRGBA_1 minColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 maxColor_ = ColorRGBA_1.Read(reader);
        Gradient_1 maxGradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* maxGradient */
        Gradient_1 minGradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* minGradient */
        
        return new(minMaxState_,
            minColor_,
            maxColor_,
            maxGradient_,
            minGradient_);
    }

    public override string ToString() => $"MinMaxGradient\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minMaxState: {minMaxState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}minColor: {{ r: {minColor.r}, g: {minColor.g}, b: {minColor.b}, a: {minColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}maxColor: {{ r: {maxColor.r}, g: {maxColor.g}, b: {maxColor.b}, a: {maxColor.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}maxGradient: {{ \n{maxGradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}minGradient: {{ \n{minGradient.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ShapeModule (34 fields) */
public record class ShapeModule (
    bool enabled,
    int type,
    float angle,
    float length,
    Vector3f boxThickness,
    float radiusThickness,
    float donutRadius,
    Vector3f m_Position,
    Vector3f m_Rotation,
    Vector3f m_Scale,
    int placementMode,
    int m_MeshMaterialIndex,
    float m_MeshNormalOffset,
    MultiModeParameter m_MeshSpawn,
    PPtr<Mesh> m_Mesh,
    PPtr<MeshRenderer> m_MeshRenderer,
    PPtr<SkinnedMeshRenderer> m_SkinnedMeshRenderer,
    PPtr<Sprite> m_Sprite,
    PPtr<SpriteRenderer> m_SpriteRenderer,
    bool m_UseMeshMaterialIndex,
    bool m_UseMeshColors,
    bool alignToDirection,
    PPtr<Texture2D> m_Texture,
    int m_TextureClipChannel,
    float m_TextureClipThreshold,
    int m_TextureUVChannel,
    bool m_TextureColorAffectsParticles,
    bool m_TextureAlphaAffectsParticles,
    bool m_TextureBilinearFiltering,
    float randomDirectionAmount,
    float sphericalDirectionAmount,
    float randomPositionAmount,
    MultiModeParameter_1 radius,
    MultiModeParameter_1 arc) : IUnityStructure
{
    public static ShapeModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int type_ = reader.ReadS32();
        float angle_ = reader.ReadF32();
        float length_ = reader.ReadF32();
        Vector3f boxThickness_ = Vector3f.Read(reader);
        float radiusThickness_ = reader.ReadF32();
        float donutRadius_ = reader.ReadF32();
        Vector3f m_Position_ = Vector3f.Read(reader);
        Vector3f m_Rotation_ = Vector3f.Read(reader);
        Vector3f m_Scale_ = Vector3f.Read(reader);
        int placementMode_ = reader.ReadS32();
        int m_MeshMaterialIndex_ = reader.ReadS32();
        float m_MeshNormalOffset_ = reader.ReadF32();
        MultiModeParameter m_MeshSpawn_ = MultiModeParameter.Read(reader);
        reader.AlignTo(4); /* m_MeshSpawn */
        PPtr<Mesh> m_Mesh_ = PPtr<Mesh>.Read(reader);
        PPtr<MeshRenderer> m_MeshRenderer_ = PPtr<MeshRenderer>.Read(reader);
        PPtr<SkinnedMeshRenderer> m_SkinnedMeshRenderer_ = PPtr<SkinnedMeshRenderer>.Read(reader);
        PPtr<Sprite> m_Sprite_ = PPtr<Sprite>.Read(reader);
        PPtr<SpriteRenderer> m_SpriteRenderer_ = PPtr<SpriteRenderer>.Read(reader);
        bool m_UseMeshMaterialIndex_ = reader.ReadBool();
        bool m_UseMeshColors_ = reader.ReadBool();
        bool alignToDirection_ = reader.ReadBool();
        reader.AlignTo(4); /* alignToDirection */
        PPtr<Texture2D> m_Texture_ = PPtr<Texture2D>.Read(reader);
        int m_TextureClipChannel_ = reader.ReadS32();
        float m_TextureClipThreshold_ = reader.ReadF32();
        int m_TextureUVChannel_ = reader.ReadS32();
        bool m_TextureColorAffectsParticles_ = reader.ReadBool();
        bool m_TextureAlphaAffectsParticles_ = reader.ReadBool();
        bool m_TextureBilinearFiltering_ = reader.ReadBool();
        reader.AlignTo(4); /* m_TextureBilinearFiltering */
        float randomDirectionAmount_ = reader.ReadF32();
        float sphericalDirectionAmount_ = reader.ReadF32();
        float randomPositionAmount_ = reader.ReadF32();
        MultiModeParameter_1 radius_ = MultiModeParameter_1.Read(reader);
        reader.AlignTo(4); /* radius */
        MultiModeParameter_1 arc_ = MultiModeParameter_1.Read(reader);
        reader.AlignTo(4); /* arc */
        
        return new(enabled_,
            type_,
            angle_,
            length_,
            boxThickness_,
            radiusThickness_,
            donutRadius_,
            m_Position_,
            m_Rotation_,
            m_Scale_,
            placementMode_,
            m_MeshMaterialIndex_,
            m_MeshNormalOffset_,
            m_MeshSpawn_,
            m_Mesh_,
            m_MeshRenderer_,
            m_SkinnedMeshRenderer_,
            m_Sprite_,
            m_SpriteRenderer_,
            m_UseMeshMaterialIndex_,
            m_UseMeshColors_,
            alignToDirection_,
            m_Texture_,
            m_TextureClipChannel_,
            m_TextureClipThreshold_,
            m_TextureUVChannel_,
            m_TextureColorAffectsParticles_,
            m_TextureAlphaAffectsParticles_,
            m_TextureBilinearFiltering_,
            randomDirectionAmount_,
            sphericalDirectionAmount_,
            randomPositionAmount_,
            radius_,
            arc_);
    }

    public override string ToString() => $"ShapeModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}angle: {angle}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}length: {length}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}boxThickness: {{ x: {boxThickness.x}, y: {boxThickness.y}, z: {boxThickness.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}radiusThickness: {radiusThickness}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}donutRadius: {donutRadius}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Position: {{ x: {m_Position.x}, y: {m_Position.y}, z: {m_Position.z} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Rotation: {{ x: {m_Rotation.x}, y: {m_Rotation.y}, z: {m_Rotation.z} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Scale: {{ x: {m_Scale.x}, y: {m_Scale.y}, z: {m_Scale.z} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}placementMode: {placementMode}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MeshMaterialIndex: {m_MeshMaterialIndex}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MeshNormalOffset: {m_MeshNormalOffset}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MeshSpawn: {{ \n{m_MeshSpawn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mesh: {m_Mesh}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MeshRenderer: {m_MeshRenderer}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SkinnedMeshRenderer: {m_SkinnedMeshRenderer}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Sprite: {m_Sprite}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SpriteRenderer: {m_SpriteRenderer}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseMeshMaterialIndex: {m_UseMeshMaterialIndex}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseMeshColors: {m_UseMeshColors}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alignToDirection: {alignToDirection}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Texture: {m_Texture}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureClipChannel: {m_TextureClipChannel}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureClipThreshold: {m_TextureClipThreshold}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureUVChannel: {m_TextureUVChannel}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureColorAffectsParticles: {m_TextureColorAffectsParticles}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureAlphaAffectsParticles: {m_TextureAlphaAffectsParticles}");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureBilinearFiltering: {m_TextureBilinearFiltering}");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}randomDirectionAmount: {randomDirectionAmount}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sphericalDirectionAmount: {sphericalDirectionAmount}");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}randomPositionAmount: {randomPositionAmount}");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}radius: {{ \n{radius.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}arc: {{ \n{arc.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MultiModeParameter (3 fields) */
public record class MultiModeParameter (
    int mode,
    float spread,
    MinMaxCurve speed) : IUnityStructure
{
    public static MultiModeParameter Read(EndianBinaryReader reader)
    {
        int mode_ = reader.ReadS32();
        float spread_ = reader.ReadF32();
        MinMaxCurve speed_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* speed */
        
        return new(mode_,
            spread_,
            speed_);
    }

    public override string ToString() => $"MultiModeParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}spread: {spread}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}speed: {{ \n{speed.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MultiModeParameter_1 (4 fields) */
public record class MultiModeParameter_1 (
    float @value,
    int mode,
    float spread,
    MinMaxCurve speed) : IUnityStructure
{
    public static MultiModeParameter_1 Read(EndianBinaryReader reader)
    {
        float @value_ = reader.ReadF32();
        int mode_ = reader.ReadS32();
        float spread_ = reader.ReadF32();
        MinMaxCurve speed_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* speed */
        
        return new(@value_,
            mode_,
            spread_,
            speed_);
    }

    public override string ToString() => $"MultiModeParameter_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}spread: {spread}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}speed: {{ \n{speed.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $EmissionModule (5 fields) */
public record class EmissionModule (
    bool enabled,
    MinMaxCurve rateOverTime,
    MinMaxCurve rateOverDistance,
    int m_BurstCount,
    ParticleSystemEmissionBurst[] m_Bursts) : IUnityStructure
{
    public static EmissionModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve rateOverTime_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* rateOverTime */
        MinMaxCurve rateOverDistance_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* rateOverDistance */
        int m_BurstCount_ = reader.ReadS32();
        reader.AlignTo(4); /* m_BurstCount */
        ParticleSystemEmissionBurst[] m_Bursts_ = BuiltInArray<ParticleSystemEmissionBurst>.Read(reader);
        reader.AlignTo(4); /* m_Bursts */
        
        return new(enabled_,
            rateOverTime_,
            rateOverDistance_,
            m_BurstCount_,
            m_Bursts_);
    }

    public override string ToString() => $"EmissionModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rateOverTime: {{ \n{rateOverTime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rateOverDistance: {{ \n{rateOverDistance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BurstCount: {m_BurstCount}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Bursts[{m_Bursts.Length}] = {{");
        if (m_Bursts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ParticleSystemEmissionBurst _4 in m_Bursts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Bursts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ParticleSystemEmissionBurst (5 fields) */
public record class ParticleSystemEmissionBurst (
    float time,
    MinMaxCurve countCurve,
    int cycleCount,
    float repeatInterval,
    float probability) : IUnityStructure
{
    public static ParticleSystemEmissionBurst Read(EndianBinaryReader reader)
    {
        float time_ = reader.ReadF32();
        MinMaxCurve countCurve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* countCurve */
        int cycleCount_ = reader.ReadS32();
        float repeatInterval_ = reader.ReadF32();
        float probability_ = reader.ReadF32();
        
        return new(time_,
            countCurve_,
            cycleCount_,
            repeatInterval_,
            probability_);
    }

    public override string ToString() => $"ParticleSystemEmissionBurst\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}time: {time}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}countCurve: {{ \n{countCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}cycleCount: {cycleCount}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}repeatInterval: {repeatInterval}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}probability: {probability}");
    }
}

/* $SizeModule (5 fields) */
public record class SizeModule (
    bool enabled,
    MinMaxCurve curve,
    MinMaxCurve y,
    MinMaxCurve z,
    bool separateAxes) : IUnityStructure
{
    public static SizeModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve curve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve z_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        bool separateAxes_ = reader.ReadBool();
        reader.AlignTo(4); /* separateAxes */
        
        return new(enabled_,
            curve_,
            y_,
            z_,
            separateAxes_);
    }

    public override string ToString() => $"SizeModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ \n{z.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}separateAxes: {separateAxes}");
    }
}

/* $RotationModule (5 fields) */
public record class RotationModule (
    bool enabled,
    MinMaxCurve x,
    MinMaxCurve y,
    MinMaxCurve curve,
    bool separateAxes) : IUnityStructure
{
    public static RotationModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve x_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* x */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve curve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        bool separateAxes_ = reader.ReadBool();
        reader.AlignTo(4); /* separateAxes */
        
        return new(enabled_,
            x_,
            y_,
            curve_,
            separateAxes_);
    }

    public override string ToString() => $"RotationModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ \n{x.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}separateAxes: {separateAxes}");
    }
}

/* $ColorModule (2 fields) */
public record class ColorModule (
    bool enabled,
    MinMaxGradient gradient) : IUnityStructure
{
    public static ColorModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxGradient gradient_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* gradient */
        
        return new(enabled_,
            gradient_);
    }

    public override string ToString() => $"ColorModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}gradient: {{ \n{gradient.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UVModule (17 fields) */
public record class UVModule (
    bool enabled,
    int mode,
    int timeMode,
    float fps,
    MinMaxCurve frameOverTime,
    MinMaxCurve startFrame,
    Vector2f speedRange,
    int tilesX,
    int tilesY,
    int animationType,
    int rowIndex,
    float cycles,
    int uvChannelMask,
    int rowMode,
    SpriteData[] sprites,
    float flipU,
    float flipV) : IUnityStructure
{
    public static UVModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int mode_ = reader.ReadS32();
        int timeMode_ = reader.ReadS32();
        float fps_ = reader.ReadF32();
        MinMaxCurve frameOverTime_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* frameOverTime */
        MinMaxCurve startFrame_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* startFrame */
        Vector2f speedRange_ = Vector2f.Read(reader);
        int tilesX_ = reader.ReadS32();
        int tilesY_ = reader.ReadS32();
        int animationType_ = reader.ReadS32();
        int rowIndex_ = reader.ReadS32();
        float cycles_ = reader.ReadF32();
        int uvChannelMask_ = reader.ReadS32();
        int rowMode_ = reader.ReadS32();
        SpriteData[] sprites_ = BuiltInArray<SpriteData>.Read(reader);
        reader.AlignTo(4); /* sprites */
        float flipU_ = reader.ReadF32();
        float flipV_ = reader.ReadF32();
        
        return new(enabled_,
            mode_,
            timeMode_,
            fps_,
            frameOverTime_,
            startFrame_,
            speedRange_,
            tilesX_,
            tilesY_,
            animationType_,
            rowIndex_,
            cycles_,
            uvChannelMask_,
            rowMode_,
            sprites_,
            flipU_,
            flipV_);
    }

    public override string ToString() => $"UVModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}timeMode: {timeMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fps: {fps}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}frameOverTime: {{ \n{frameOverTime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}startFrame: {{ \n{startFrame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}speedRange: {{ x: {speedRange.x}, y: {speedRange.y} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tilesX: {tilesX}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tilesY: {tilesY}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}animationType: {animationType}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rowIndex: {rowIndex}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}cycles: {cycles}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}uvChannelMask: {uvChannelMask}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rowMode: {rowMode}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}sprites[{sprites.Length}] = {{");
        if (sprites.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SpriteData _4 in sprites)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (sprites.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}flipU: {flipU}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}flipV: {flipV}");
    }
}

/* $SpriteData (1 fields) */
public record class SpriteData (
    PPtr<Object> sprite) : IUnityStructure
{
    public static SpriteData Read(EndianBinaryReader reader)
    {
        PPtr<Object> sprite_ = PPtr<Object>.Read(reader);
        
        return new(sprite_);
    }

    public override string ToString() => $"SpriteData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sprite: {sprite}");
    }
}

/* $VelocityModule (13 fields) */
public record class VelocityModule (
    bool enabled,
    MinMaxCurve x,
    MinMaxCurve y,
    MinMaxCurve z,
    MinMaxCurve orbitalX,
    MinMaxCurve orbitalY,
    MinMaxCurve orbitalZ,
    MinMaxCurve orbitalOffsetX,
    MinMaxCurve orbitalOffsetY,
    MinMaxCurve orbitalOffsetZ,
    MinMaxCurve radial,
    MinMaxCurve speedModifier,
    bool inWorldSpace) : IUnityStructure
{
    public static VelocityModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve x_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* x */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve z_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve orbitalX_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalX */
        MinMaxCurve orbitalY_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalY */
        MinMaxCurve orbitalZ_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalZ */
        MinMaxCurve orbitalOffsetX_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalOffsetX */
        MinMaxCurve orbitalOffsetY_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalOffsetY */
        MinMaxCurve orbitalOffsetZ_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* orbitalOffsetZ */
        MinMaxCurve radial_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* radial */
        MinMaxCurve speedModifier_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* speedModifier */
        bool inWorldSpace_ = reader.ReadBool();
        reader.AlignTo(4); /* inWorldSpace */
        
        return new(enabled_,
            x_,
            y_,
            z_,
            orbitalX_,
            orbitalY_,
            orbitalZ_,
            orbitalOffsetX_,
            orbitalOffsetY_,
            orbitalOffsetZ_,
            radial_,
            speedModifier_,
            inWorldSpace_);
    }

    public override string ToString() => $"VelocityModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ \n{x.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ \n{z.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}orbitalX: {{ \n{orbitalX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}orbitalY: {{ \n{orbitalY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}orbitalZ: {{ \n{orbitalZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}orbitalOffsetX: {{ \n{orbitalOffsetX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}orbitalOffsetY: {{ \n{orbitalOffsetY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}orbitalOffsetZ: {{ \n{orbitalOffsetZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}radial: {{ \n{radial.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}speedModifier: {{ \n{speedModifier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inWorldSpace: {inWorldSpace}");
    }
}

/* $InheritVelocityModule (3 fields) */
public record class InheritVelocityModule (
    bool enabled,
    int m_Mode,
    MinMaxCurve m_Curve) : IUnityStructure
{
    public static InheritVelocityModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int m_Mode_ = reader.ReadS32();
        MinMaxCurve m_Curve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        
        return new(enabled_,
            m_Mode_,
            m_Curve_);
    }

    public override string ToString() => $"InheritVelocityModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve: {{ \n{m_Curve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $LifetimeByEmitterSpeedModule (3 fields) */
public record class LifetimeByEmitterSpeedModule (
    bool enabled,
    MinMaxCurve m_Curve,
    Vector2f m_Range) : IUnityStructure
{
    public static LifetimeByEmitterSpeedModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve m_Curve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        Vector2f m_Range_ = Vector2f.Read(reader);
        
        return new(enabled_,
            m_Curve_,
            m_Range_);
    }

    public override string ToString() => $"LifetimeByEmitterSpeedModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve: {{ \n{m_Curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Range: {{ x: {m_Range.x}, y: {m_Range.y} }}\n");
    }
}

/* $ForceModule (6 fields) */
public record class ForceModule (
    bool enabled,
    MinMaxCurve x,
    MinMaxCurve y,
    MinMaxCurve z,
    bool inWorldSpace,
    bool randomizePerFrame) : IUnityStructure
{
    public static ForceModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve x_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* x */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve z_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        bool inWorldSpace_ = reader.ReadBool();
        bool randomizePerFrame_ = reader.ReadBool();
        reader.AlignTo(4); /* randomizePerFrame */
        
        return new(enabled_,
            x_,
            y_,
            z_,
            inWorldSpace_,
            randomizePerFrame_);
    }

    public override string ToString() => $"ForceModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ \n{x.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ \n{z.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inWorldSpace: {inWorldSpace}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}randomizePerFrame: {randomizePerFrame}");
    }
}

/* $ExternalForcesModule (5 fields) */
public record class ExternalForcesModule (
    bool enabled,
    MinMaxCurve multiplierCurve,
    int influenceFilter,
    BitField influenceMask,
    PPtr<ParticleSystemForceField>[] influenceList) : IUnityStructure
{
    public static ExternalForcesModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve multiplierCurve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* multiplierCurve */
        int influenceFilter_ = reader.ReadS32();
        BitField influenceMask_ = BitField.Read(reader);
        PPtr<ParticleSystemForceField>[] influenceList_ = BuiltInArray<PPtr<ParticleSystemForceField>>.Read(reader);
        reader.AlignTo(4); /* influenceList */
        
        return new(enabled_,
            multiplierCurve_,
            influenceFilter_,
            influenceMask_,
            influenceList_);
    }

    public override string ToString() => $"ExternalForcesModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}multiplierCurve: {{ \n{multiplierCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}influenceFilter: {influenceFilter}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}influenceMask: {{ m_Bits: {influenceMask.m_Bits} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}influenceList[{influenceList.Length}] = {{");
        if (influenceList.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ParticleSystemForceField> _4 in influenceList)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (influenceList.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ClampVelocityModule (11 fields) */
public record class ClampVelocityModule (
    bool enabled,
    MinMaxCurve x,
    MinMaxCurve y,
    MinMaxCurve z,
    MinMaxCurve magnitude,
    bool separateAxis,
    bool inWorldSpace,
    bool multiplyDragByParticleSize,
    bool multiplyDragByParticleVelocity,
    float dampen,
    MinMaxCurve drag) : IUnityStructure
{
    public static ClampVelocityModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve x_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* x */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve z_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        MinMaxCurve magnitude_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* magnitude */
        bool separateAxis_ = reader.ReadBool();
        bool inWorldSpace_ = reader.ReadBool();
        bool multiplyDragByParticleSize_ = reader.ReadBool();
        bool multiplyDragByParticleVelocity_ = reader.ReadBool();
        reader.AlignTo(4); /* multiplyDragByParticleVelocity */
        float dampen_ = reader.ReadF32();
        MinMaxCurve drag_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* drag */
        
        return new(enabled_,
            x_,
            y_,
            z_,
            magnitude_,
            separateAxis_,
            inWorldSpace_,
            multiplyDragByParticleSize_,
            multiplyDragByParticleVelocity_,
            dampen_,
            drag_);
    }

    public override string ToString() => $"ClampVelocityModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ \n{x.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ \n{z.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}magnitude: {{ \n{magnitude.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}separateAxis: {separateAxis}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inWorldSpace: {inWorldSpace}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}multiplyDragByParticleSize: {multiplyDragByParticleSize}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}multiplyDragByParticleVelocity: {multiplyDragByParticleVelocity}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}dampen: {dampen}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}drag: {{ \n{drag.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $NoiseModule (19 fields) */
public record class NoiseModule (
    bool enabled,
    MinMaxCurve strength,
    MinMaxCurve strengthY,
    MinMaxCurve strengthZ,
    bool separateAxes,
    float frequency,
    bool damping,
    int octaves,
    float octaveMultiplier,
    float octaveScale,
    int quality,
    MinMaxCurve scrollSpeed,
    MinMaxCurve remap,
    MinMaxCurve remapY,
    MinMaxCurve remapZ,
    bool remapEnabled,
    MinMaxCurve positionAmount,
    MinMaxCurve rotationAmount,
    MinMaxCurve sizeAmount) : IUnityStructure
{
    public static NoiseModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve strength_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* strength */
        MinMaxCurve strengthY_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* strengthY */
        MinMaxCurve strengthZ_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* strengthZ */
        bool separateAxes_ = reader.ReadBool();
        reader.AlignTo(4); /* separateAxes */
        float frequency_ = reader.ReadF32();
        bool damping_ = reader.ReadBool();
        reader.AlignTo(4); /* damping */
        int octaves_ = reader.ReadS32();
        float octaveMultiplier_ = reader.ReadF32();
        float octaveScale_ = reader.ReadF32();
        int quality_ = reader.ReadS32();
        MinMaxCurve scrollSpeed_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* scrollSpeed */
        MinMaxCurve remap_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remap */
        MinMaxCurve remapY_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remapY */
        MinMaxCurve remapZ_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* remapZ */
        bool remapEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* remapEnabled */
        MinMaxCurve positionAmount_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* positionAmount */
        MinMaxCurve rotationAmount_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* rotationAmount */
        MinMaxCurve sizeAmount_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* sizeAmount */
        
        return new(enabled_,
            strength_,
            strengthY_,
            strengthZ_,
            separateAxes_,
            frequency_,
            damping_,
            octaves_,
            octaveMultiplier_,
            octaveScale_,
            quality_,
            scrollSpeed_,
            remap_,
            remapY_,
            remapZ_,
            remapEnabled_,
            positionAmount_,
            rotationAmount_,
            sizeAmount_);
    }

    public override string ToString() => $"NoiseModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}strength: {{ \n{strength.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}strengthY: {{ \n{strengthY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}strengthZ: {{ \n{strengthZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}separateAxes: {separateAxes}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}frequency: {frequency}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}damping: {damping}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}octaves: {octaves}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}octaveMultiplier: {octaveMultiplier}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}octaveScale: {octaveScale}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}quality: {quality}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}scrollSpeed: {{ \n{scrollSpeed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}remap: {{ \n{remap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}remapY: {{ \n{remapY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}remapZ: {{ \n{remapZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}remapEnabled: {remapEnabled}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}positionAmount: {{ \n{positionAmount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rotationAmount: {{ \n{rotationAmount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}sizeAmount: {{ \n{sizeAmount.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SizeBySpeedModule (6 fields) */
public record class SizeBySpeedModule (
    bool enabled,
    MinMaxCurve curve,
    MinMaxCurve y,
    MinMaxCurve z,
    Vector2f range,
    bool separateAxes) : IUnityStructure
{
    public static SizeBySpeedModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve curve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve z_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* z */
        Vector2f range_ = Vector2f.Read(reader);
        bool separateAxes_ = reader.ReadBool();
        reader.AlignTo(4); /* separateAxes */
        
        return new(enabled_,
            curve_,
            y_,
            z_,
            range_,
            separateAxes_);
    }

    public override string ToString() => $"SizeBySpeedModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ \n{z.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}range: {{ x: {range.x}, y: {range.y} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}separateAxes: {separateAxes}");
    }
}

/* $RotationBySpeedModule (6 fields) */
public record class RotationBySpeedModule (
    bool enabled,
    MinMaxCurve x,
    MinMaxCurve y,
    MinMaxCurve curve,
    bool separateAxes,
    Vector2f range) : IUnityStructure
{
    public static RotationBySpeedModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxCurve x_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* x */
        MinMaxCurve y_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* y */
        MinMaxCurve curve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* curve */
        bool separateAxes_ = reader.ReadBool();
        reader.AlignTo(4); /* separateAxes */
        Vector2f range_ = Vector2f.Read(reader);
        
        return new(enabled_,
            x_,
            y_,
            curve_,
            separateAxes_,
            range_);
    }

    public override string ToString() => $"RotationBySpeedModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ \n{x.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ \n{y.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}curve: {{ \n{curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}separateAxes: {separateAxes}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}range: {{ x: {range.x}, y: {range.y} }}\n");
    }
}

/* $ColorBySpeedModule (3 fields) */
public record class ColorBySpeedModule (
    bool enabled,
    MinMaxGradient gradient,
    Vector2f range) : IUnityStructure
{
    public static ColorBySpeedModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        MinMaxGradient gradient_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* gradient */
        Vector2f range_ = Vector2f.Read(reader);
        
        return new(enabled_,
            gradient_,
            range_);
    }

    public override string ToString() => $"ColorBySpeedModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}gradient: {{ \n{gradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}range: {{ x: {range.x}, y: {range.y} }}\n");
    }
}

/* $CollisionModule (21 fields) */
public record class CollisionModule (
    bool enabled,
    int type,
    int collisionMode,
    float colliderForce,
    bool multiplyColliderForceByParticleSize,
    bool multiplyColliderForceByParticleSpeed,
    bool multiplyColliderForceByCollisionAngle,
    PPtr<Transform>[] m_Planes,
    MinMaxCurve m_Dampen,
    MinMaxCurve m_Bounce,
    MinMaxCurve m_EnergyLossOnCollision,
    float minKillSpeed,
    float maxKillSpeed,
    float radiusScale,
    BitField collidesWith,
    int maxCollisionShapes,
    int quality,
    float voxelSize,
    bool collisionMessages,
    bool collidesWithDynamic,
    bool interiorCollisions) : IUnityStructure
{
    public static CollisionModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int type_ = reader.ReadS32();
        int collisionMode_ = reader.ReadS32();
        float colliderForce_ = reader.ReadF32();
        bool multiplyColliderForceByParticleSize_ = reader.ReadBool();
        bool multiplyColliderForceByParticleSpeed_ = reader.ReadBool();
        bool multiplyColliderForceByCollisionAngle_ = reader.ReadBool();
        reader.AlignTo(4); /* multiplyColliderForceByCollisionAngle */
        PPtr<Transform>[] m_Planes_ = BuiltInArray<PPtr<Transform>>.Read(reader);
        reader.AlignTo(4); /* m_Planes */
        MinMaxCurve m_Dampen_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_Dampen */
        MinMaxCurve m_Bounce_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_Bounce */
        MinMaxCurve m_EnergyLossOnCollision_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* m_EnergyLossOnCollision */
        float minKillSpeed_ = reader.ReadF32();
        float maxKillSpeed_ = reader.ReadF32();
        float radiusScale_ = reader.ReadF32();
        BitField collidesWith_ = BitField.Read(reader);
        int maxCollisionShapes_ = reader.ReadS32();
        int quality_ = reader.ReadS32();
        float voxelSize_ = reader.ReadF32();
        bool collisionMessages_ = reader.ReadBool();
        bool collidesWithDynamic_ = reader.ReadBool();
        bool interiorCollisions_ = reader.ReadBool();
        reader.AlignTo(4); /* interiorCollisions */
        
        return new(enabled_,
            type_,
            collisionMode_,
            colliderForce_,
            multiplyColliderForceByParticleSize_,
            multiplyColliderForceByParticleSpeed_,
            multiplyColliderForceByCollisionAngle_,
            m_Planes_,
            m_Dampen_,
            m_Bounce_,
            m_EnergyLossOnCollision_,
            minKillSpeed_,
            maxKillSpeed_,
            radiusScale_,
            collidesWith_,
            maxCollisionShapes_,
            quality_,
            voxelSize_,
            collisionMessages_,
            collidesWithDynamic_,
            interiorCollisions_);
    }

    public override string ToString() => $"CollisionModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}collisionMode: {collisionMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}colliderForce: {colliderForce}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}multiplyColliderForceByParticleSize: {multiplyColliderForceByParticleSize}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}multiplyColliderForceByParticleSpeed: {multiplyColliderForceByParticleSpeed}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}multiplyColliderForceByCollisionAngle: {multiplyColliderForceByCollisionAngle}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Planes[{m_Planes.Length}] = {{");
        if (m_Planes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Transform> _4 in m_Planes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Planes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dampen: {{ \n{m_Dampen.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Bounce: {{ \n{m_Bounce.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_EnergyLossOnCollision: {{ \n{m_EnergyLossOnCollision.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minKillSpeed: {minKillSpeed}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxKillSpeed: {maxKillSpeed}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}radiusScale: {radiusScale}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}collidesWith: {{ m_Bits: {collidesWith.m_Bits} }}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxCollisionShapes: {maxCollisionShapes}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}quality: {quality}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}voxelSize: {voxelSize}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}collisionMessages: {collisionMessages}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}collidesWithDynamic: {collidesWithDynamic}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}interiorCollisions: {interiorCollisions}");
    }
}

/* $TriggerModule (8 fields) */
public record class TriggerModule (
    bool enabled,
    int inside,
    int outside,
    int enter,
    int exit,
    int colliderQueryMode,
    float radiusScale,
    PPtr<Component>[] primitives) : IUnityStructure
{
    public static TriggerModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int inside_ = reader.ReadS32();
        int outside_ = reader.ReadS32();
        int enter_ = reader.ReadS32();
        int exit_ = reader.ReadS32();
        int colliderQueryMode_ = reader.ReadS32();
        float radiusScale_ = reader.ReadF32();
        PPtr<Component>[] primitives_ = BuiltInArray<PPtr<Component>>.Read(reader);
        reader.AlignTo(4); /* primitives */
        
        return new(enabled_,
            inside_,
            outside_,
            enter_,
            exit_,
            colliderQueryMode_,
            radiusScale_,
            primitives_);
    }

    public override string ToString() => $"TriggerModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inside: {inside}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}outside: {outside}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enter: {enter}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exit: {exit}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}colliderQueryMode: {colliderQueryMode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}radiusScale: {radiusScale}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}primitives[{primitives.Length}] = {{");
        if (primitives.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Component> _4 in primitives)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (primitives.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SubModule (2 fields) */
public record class SubModule (
    bool enabled,
    SubEmitterData[] subEmitters) : IUnityStructure
{
    public static SubModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        SubEmitterData[] subEmitters_ = BuiltInArray<SubEmitterData>.Read(reader);
        reader.AlignTo(4); /* subEmitters */
        
        return new(enabled_,
            subEmitters_);
    }

    public override string ToString() => $"SubModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}subEmitters[{subEmitters.Length}] = {{");
        if (subEmitters.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SubEmitterData _4 in subEmitters)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (subEmitters.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SubEmitterData (4 fields) */
public record class SubEmitterData (
    PPtr<ParticleSystem> emitter,
    int type,
    int properties,
    float emitProbability) : IUnityStructure
{
    public static SubEmitterData Read(EndianBinaryReader reader)
    {
        PPtr<ParticleSystem> emitter_ = PPtr<ParticleSystem>.Read(reader);
        int type_ = reader.ReadS32();
        int properties_ = reader.ReadS32();
        float emitProbability_ = reader.ReadF32();
        
        return new(emitter_,
            type_,
            properties_,
            emitProbability_);
    }

    public override string ToString() => $"SubEmitterData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}emitter: {emitter}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}properties: {properties}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}emitProbability: {emitProbability}");
    }
}

/* $LightsModule (10 fields) */
public record class LightsModule (
    bool enabled,
    float ratio,
    PPtr<Light> light,
    bool randomDistribution,
    bool color,
    bool range,
    bool intensity,
    MinMaxCurve rangeCurve,
    MinMaxCurve intensityCurve,
    int maxLights) : IUnityStructure
{
    public static LightsModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        float ratio_ = reader.ReadF32();
        PPtr<Light> light_ = PPtr<Light>.Read(reader);
        bool randomDistribution_ = reader.ReadBool();
        bool color_ = reader.ReadBool();
        bool range_ = reader.ReadBool();
        bool intensity_ = reader.ReadBool();
        MinMaxCurve rangeCurve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* rangeCurve */
        MinMaxCurve intensityCurve_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* intensityCurve */
        int maxLights_ = reader.ReadS32();
        
        return new(enabled_,
            ratio_,
            light_,
            randomDistribution_,
            color_,
            range_,
            intensity_,
            rangeCurve_,
            intensityCurve_,
            maxLights_);
    }

    public override string ToString() => $"LightsModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ratio: {ratio}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}light: {light}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}randomDistribution: {randomDistribution}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}color: {color}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}range: {range}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}intensity: {intensity}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rangeCurve: {{ \n{rangeCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}intensityCurve: {{ \n{intensityCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxLights: {maxLights}");
    }
}

/* $TrailModule (20 fields) */
public record class TrailModule (
    bool enabled,
    int mode,
    float ratio,
    MinMaxCurve lifetime,
    float minVertexDistance,
    int textureMode,
    Vector2f textureScale,
    int ribbonCount,
    float shadowBias,
    bool worldSpace,
    bool dieWithParticles,
    bool sizeAffectsWidth,
    bool sizeAffectsLifetime,
    bool inheritParticleColor,
    bool generateLightingData,
    bool splitSubEmitterRibbons,
    bool attachRibbonsToTransform,
    MinMaxGradient colorOverLifetime,
    MinMaxCurve widthOverTrail,
    MinMaxGradient colorOverTrail) : IUnityStructure
{
    public static TrailModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int mode_ = reader.ReadS32();
        float ratio_ = reader.ReadF32();
        MinMaxCurve lifetime_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* lifetime */
        float minVertexDistance_ = reader.ReadF32();
        int textureMode_ = reader.ReadS32();
        Vector2f textureScale_ = Vector2f.Read(reader);
        int ribbonCount_ = reader.ReadS32();
        float shadowBias_ = reader.ReadF32();
        bool worldSpace_ = reader.ReadBool();
        bool dieWithParticles_ = reader.ReadBool();
        bool sizeAffectsWidth_ = reader.ReadBool();
        bool sizeAffectsLifetime_ = reader.ReadBool();
        bool inheritParticleColor_ = reader.ReadBool();
        bool generateLightingData_ = reader.ReadBool();
        bool splitSubEmitterRibbons_ = reader.ReadBool();
        bool attachRibbonsToTransform_ = reader.ReadBool();
        reader.AlignTo(4); /* attachRibbonsToTransform */
        MinMaxGradient colorOverLifetime_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* colorOverLifetime */
        MinMaxCurve widthOverTrail_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* widthOverTrail */
        MinMaxGradient colorOverTrail_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* colorOverTrail */
        
        return new(enabled_,
            mode_,
            ratio_,
            lifetime_,
            minVertexDistance_,
            textureMode_,
            textureScale_,
            ribbonCount_,
            shadowBias_,
            worldSpace_,
            dieWithParticles_,
            sizeAffectsWidth_,
            sizeAffectsLifetime_,
            inheritParticleColor_,
            generateLightingData_,
            splitSubEmitterRibbons_,
            attachRibbonsToTransform_,
            colorOverLifetime_,
            widthOverTrail_,
            colorOverTrail_);
    }

    public override string ToString() => $"TrailModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ratio: {ratio}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}lifetime: {{ \n{lifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}minVertexDistance: {minVertexDistance}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}textureMode: {textureMode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureScale: {{ x: {textureScale.x}, y: {textureScale.y} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ribbonCount: {ribbonCount}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}shadowBias: {shadowBias}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}worldSpace: {worldSpace}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}dieWithParticles: {dieWithParticles}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sizeAffectsWidth: {sizeAffectsWidth}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sizeAffectsLifetime: {sizeAffectsLifetime}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inheritParticleColor: {inheritParticleColor}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}generateLightingData: {generateLightingData}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}splitSubEmitterRibbons: {splitSubEmitterRibbons}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}attachRibbonsToTransform: {attachRibbonsToTransform}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}colorOverLifetime: {{ \n{colorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}widthOverTrail: {{ \n{widthOverTrail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}colorOverTrail: {{ \n{colorOverTrail.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CustomDataModule (15 fields) */
public record class CustomDataModule (
    bool enabled,
    int mode0,
    int vectorComponentCount0,
    MinMaxGradient color0,
    MinMaxCurve vector0_0,
    MinMaxCurve vector0_1,
    MinMaxCurve vector0_2,
    MinMaxCurve vector0_3,
    int mode1,
    int vectorComponentCount1,
    MinMaxGradient color1,
    MinMaxCurve vector1_0,
    MinMaxCurve vector1_1,
    MinMaxCurve vector1_2,
    MinMaxCurve vector1_3) : IUnityStructure
{
    public static CustomDataModule Read(EndianBinaryReader reader)
    {
        bool enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* enabled */
        int mode0_ = reader.ReadS32();
        int vectorComponentCount0_ = reader.ReadS32();
        MinMaxGradient color0_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* color0 */
        MinMaxCurve vector0_0_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_0 */
        MinMaxCurve vector0_1_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_1 */
        MinMaxCurve vector0_2_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_2 */
        MinMaxCurve vector0_3_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector0_3 */
        int mode1_ = reader.ReadS32();
        int vectorComponentCount1_ = reader.ReadS32();
        MinMaxGradient color1_ = MinMaxGradient.Read(reader);
        reader.AlignTo(4); /* color1 */
        MinMaxCurve vector1_0_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_0 */
        MinMaxCurve vector1_1_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_1 */
        MinMaxCurve vector1_2_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_2 */
        MinMaxCurve vector1_3_ = MinMaxCurve.Read(reader);
        reader.AlignTo(4); /* vector1_3 */
        
        return new(enabled_,
            mode0_,
            vectorComponentCount0_,
            color0_,
            vector0_0_,
            vector0_1_,
            vector0_2_,
            vector0_3_,
            mode1_,
            vectorComponentCount1_,
            color1_,
            vector1_0_,
            vector1_1_,
            vector1_2_,
            vector1_3_);
    }

    public override string ToString() => $"CustomDataModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode0: {mode0}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}vectorComponentCount0: {vectorComponentCount0}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color0: {{ \n{color0.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector0_0: {{ \n{vector0_0.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector0_1: {{ \n{vector0_1.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector0_2: {{ \n{vector0_2.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector0_3: {{ \n{vector0_3.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode1: {mode1}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}vectorComponentCount1: {vectorComponentCount1}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color1: {{ \n{color1.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector1_0: {{ \n{vector1_0.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector1_1: {{ \n{vector1_1.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector1_2: {{ \n{vector1_2.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vector1_3: {{ \n{vector1_3.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Navigation (6 fields) */
public record class Navigation (
    int m_Mode,
    byte m_WrapAround,
    PPtr<Selectable> m_SelectOnUp,
    PPtr<Selectable> m_SelectOnDown,
    PPtr<Selectable> m_SelectOnLeft,
    PPtr<Selectable> m_SelectOnRight) : IUnityStructure
{
    public static Navigation Read(EndianBinaryReader reader)
    {
        int m_Mode_ = reader.ReadS32();
        byte m_WrapAround_ = reader.ReadU8();
        reader.AlignTo(4); /* m_WrapAround */
        PPtr<Selectable> m_SelectOnUp_ = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> m_SelectOnDown_ = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> m_SelectOnLeft_ = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> m_SelectOnRight_ = PPtr<Selectable>.Read(reader);
        
        return new(m_Mode_,
            m_WrapAround_,
            m_SelectOnUp_,
            m_SelectOnDown_,
            m_SelectOnLeft_,
            m_SelectOnRight_);
    }

    public override string ToString() => $"Navigation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WrapAround: {m_WrapAround}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnUp: {m_SelectOnUp}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnDown: {m_SelectOnDown}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnLeft: {m_SelectOnLeft}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnRight: {m_SelectOnRight}");
    }
}

/* $ColorBlock (7 fields) */
public record class ColorBlock (
    ColorRGBA_1 m_NormalColor,
    ColorRGBA_1 m_HighlightedColor,
    ColorRGBA_1 m_PressedColor,
    ColorRGBA_1 m_SelectedColor,
    ColorRGBA_1 m_DisabledColor,
    float m_ColorMultiplier,
    float m_FadeDuration) : IUnityStructure
{
    public static ColorBlock Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 m_NormalColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 m_HighlightedColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 m_PressedColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 m_SelectedColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 m_DisabledColor_ = ColorRGBA_1.Read(reader);
        float m_ColorMultiplier_ = reader.ReadF32();
        float m_FadeDuration_ = reader.ReadF32();
        
        return new(m_NormalColor_,
            m_HighlightedColor_,
            m_PressedColor_,
            m_SelectedColor_,
            m_DisabledColor_,
            m_ColorMultiplier_,
            m_FadeDuration_);
    }

    public override string ToString() => $"ColorBlock\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NormalColor: {{ r: {m_NormalColor.r}, g: {m_NormalColor.g}, b: {m_NormalColor.b}, a: {m_NormalColor.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HighlightedColor: {{ r: {m_HighlightedColor.r}, g: {m_HighlightedColor.g}, b: {m_HighlightedColor.b}, a: {m_HighlightedColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PressedColor: {{ r: {m_PressedColor.r}, g: {m_PressedColor.g}, b: {m_PressedColor.b}, a: {m_PressedColor.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SelectedColor: {{ r: {m_SelectedColor.r}, g: {m_SelectedColor.g}, b: {m_SelectedColor.b}, a: {m_SelectedColor.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DisabledColor: {{ r: {m_DisabledColor.r}, g: {m_DisabledColor.g}, b: {m_DisabledColor.b}, a: {m_DisabledColor.a} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ColorMultiplier: {m_ColorMultiplier}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FadeDuration: {m_FadeDuration}");
    }
}

/* $SpriteState (4 fields) */
public record class SpriteState (
    PPtr<Sprite> m_HighlightedSprite,
    PPtr<Sprite> m_PressedSprite,
    PPtr<Sprite> m_SelectedSprite,
    PPtr<Sprite> m_DisabledSprite) : IUnityStructure
{
    public static SpriteState Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> m_HighlightedSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_PressedSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_SelectedSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_DisabledSprite_ = PPtr<Sprite>.Read(reader);
        
        return new(m_HighlightedSprite_,
            m_PressedSprite_,
            m_SelectedSprite_,
            m_DisabledSprite_);
    }

    public override string ToString() => $"SpriteState\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HighlightedSprite: {m_HighlightedSprite}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PressedSprite: {m_PressedSprite}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectedSprite: {m_SelectedSprite}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisabledSprite: {m_DisabledSprite}");
    }
}

/* $AnimationTriggers (5 fields) */
public record class AnimationTriggers (
    AsciiString m_NormalTrigger,
    AsciiString m_HighlightedTrigger,
    AsciiString m_PressedTrigger,
    AsciiString m_SelectedTrigger,
    AsciiString m_DisabledTrigger) : IUnityStructure
{
    public static AnimationTriggers Read(EndianBinaryReader reader)
    {
        AsciiString m_NormalTrigger_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_NormalTrigger */
        AsciiString m_HighlightedTrigger_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_HighlightedTrigger */
        AsciiString m_PressedTrigger_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PressedTrigger */
        AsciiString m_SelectedTrigger_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_SelectedTrigger */
        AsciiString m_DisabledTrigger_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_DisabledTrigger */
        
        return new(m_NormalTrigger_,
            m_HighlightedTrigger_,
            m_PressedTrigger_,
            m_SelectedTrigger_,
            m_DisabledTrigger_);
    }

    public override string ToString() => $"AnimationTriggers\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NormalTrigger: \"{m_NormalTrigger}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HighlightedTrigger: \"{m_HighlightedTrigger}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PressedTrigger: \"{m_PressedTrigger}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectedTrigger: \"{m_SelectedTrigger}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisabledTrigger: \"{m_DisabledTrigger}\"");
    }
}

/* $ScrollEvent (1 fields) */
public record class ScrollEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ScrollEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ScrollEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PersistentCallGroup (1 fields) */
public record class PersistentCallGroup (
    PersistentCall[] m_Calls) : IUnityStructure
{
    public static PersistentCallGroup Read(EndianBinaryReader reader)
    {
        PersistentCall[] m_Calls_ = BuiltInArray<PersistentCall>.Read(reader);
        reader.AlignTo(4); /* m_Calls */
        
        return new(m_Calls_);
    }

    public override string ToString() => $"PersistentCallGroup\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Calls[{m_Calls.Length}] = {{");
        if (m_Calls.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PersistentCall _4 in m_Calls)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Calls.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PersistentCall (6 fields) */
public record class PersistentCall (
    PPtr<Object> m_Target,
    AsciiString m_TargetAssemblyTypeName,
    AsciiString m_MethodName,
    int m_Mode,
    ArgumentCache m_Arguments,
    int m_CallState) : IUnityStructure
{
    public static PersistentCall Read(EndianBinaryReader reader)
    {
        PPtr<Object> m_Target_ = PPtr<Object>.Read(reader);
        AsciiString m_TargetAssemblyTypeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_TargetAssemblyTypeName */
        AsciiString m_MethodName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_MethodName */
        int m_Mode_ = reader.ReadS32();
        ArgumentCache m_Arguments_ = ArgumentCache.Read(reader);
        reader.AlignTo(4); /* m_Arguments */
        int m_CallState_ = reader.ReadS32();
        
        return new(m_Target_,
            m_TargetAssemblyTypeName_,
            m_MethodName_,
            m_Mode_,
            m_Arguments_,
            m_CallState_);
    }

    public override string ToString() => $"PersistentCall\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Target: {m_Target}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetAssemblyTypeName: \"{m_TargetAssemblyTypeName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MethodName: \"{m_MethodName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Arguments: {{ \n{m_Arguments.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CallState: {m_CallState}");
    }
}

/* $ArgumentCache (6 fields) */
public record class ArgumentCache (
    PPtr<Object> m_ObjectArgument,
    AsciiString m_ObjectArgumentAssemblyTypeName,
    int m_IntArgument,
    float m_FloatArgument,
    AsciiString m_StringArgument,
    byte m_BoolArgument) : IUnityStructure
{
    public static ArgumentCache Read(EndianBinaryReader reader)
    {
        PPtr<Object> m_ObjectArgument_ = PPtr<Object>.Read(reader);
        AsciiString m_ObjectArgumentAssemblyTypeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ObjectArgumentAssemblyTypeName */
        int m_IntArgument_ = reader.ReadS32();
        float m_FloatArgument_ = reader.ReadF32();
        AsciiString m_StringArgument_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StringArgument */
        byte m_BoolArgument_ = reader.ReadU8();
        reader.AlignTo(4); /* m_BoolArgument */
        
        return new(m_ObjectArgument_,
            m_ObjectArgumentAssemblyTypeName_,
            m_IntArgument_,
            m_FloatArgument_,
            m_StringArgument_,
            m_BoolArgument_);
    }

    public override string ToString() => $"ArgumentCache\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ObjectArgument: {m_ObjectArgument}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ObjectArgumentAssemblyTypeName: \"{m_ObjectArgumentAssemblyTypeName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IntArgument: {m_IntArgument}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FloatArgument: {m_FloatArgument}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StringArgument: \"{m_StringArgument}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoolArgument: {m_BoolArgument}");
    }
}

/* $UnitOvertipVisibilitySettings (6 fields) */
public record class UnitOvertipVisibilitySettings (
    int UnitOvertipVisibility,
    float Alpha,
    float Scale,
    float YPosition,
    Vector2f Size,
    PPtr<CanvasGroup>[] CanvasGroups) : IUnityStructure
{
    public static UnitOvertipVisibilitySettings Read(EndianBinaryReader reader)
    {
        int UnitOvertipVisibility_ = reader.ReadS32();
        float Alpha_ = reader.ReadF32();
        float Scale_ = reader.ReadF32();
        float YPosition_ = reader.ReadF32();
        Vector2f Size_ = Vector2f.Read(reader);
        PPtr<CanvasGroup>[] CanvasGroups_ = BuiltInArray<PPtr<CanvasGroup>>.Read(reader);
        
        return new(UnitOvertipVisibility_,
            Alpha_,
            Scale_,
            YPosition_,
            Size_,
            CanvasGroups_);
    }

    public override string ToString() => $"UnitOvertipVisibilitySettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnitOvertipVisibility: {UnitOvertipVisibility}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Alpha: {Alpha}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}YPosition: {YPosition}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Size: {{ x: {Size.x}, y: {Size.y} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CanvasGroups[{CanvasGroups.Length}] = {{");
        if (CanvasGroups.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<CanvasGroup> _4 in CanvasGroups)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (CanvasGroups.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $FloatParameter (2 fields) */
public readonly record struct FloatParameter (
    byte m_OverrideState,
    float m_Value) : IUnityStructure
{
    public static FloatParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        float m_Value_ = reader.ReadF32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"FloatParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $ClampedFloatParameter (2 fields) */
public readonly record struct ClampedFloatParameter (
    byte m_OverrideState,
    float m_Value) : IUnityStructure
{
    public static ClampedFloatParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        float m_Value_ = reader.ReadF32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"ClampedFloatParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $ColorParameter (2 fields) */
public record class ColorParameter (
    byte m_OverrideState,
    ColorRGBA_1 m_Value) : IUnityStructure
{
    public static ColorParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        ColorRGBA_1 m_Value_ = ColorRGBA_1.Read(reader);
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"ColorParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ r: {m_Value.r}, g: {m_Value.g}, b: {m_Value.b}, a: {m_Value.a} }}\n");
    }
}

/* $RotationModifier (3 fields) */
public record class RotationModifier (
    float blend,
    byte useClippedPercent,
    RotationKey[] keys) : IUnityStructure
{
    public static RotationModifier Read(EndianBinaryReader reader)
    {
        float blend_ = reader.ReadF32();
        byte useClippedPercent_ = reader.ReadU8();
        reader.AlignTo(4); /* useClippedPercent */
        RotationKey[] keys_ = BuiltInArray<RotationKey>.Read(reader);
        reader.AlignTo(4); /* keys */
        
        return new(blend_,
            useClippedPercent_,
            keys_);
    }

    public override string ToString() => $"RotationModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useClippedPercent: {useClippedPercent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keys[{keys.Length}] = {{");
        if (keys.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (RotationKey _4 in keys)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keys.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $RotationKey (9 fields) */
public record class RotationKey (
    double _featherStart,
    double _featherEnd,
    double _centerStart,
    double _centerEnd,
    AnimationCurve interpolation,
    float blend,
    byte useLookTarget,
    PPtr<Transform> target,
    Vector3f rotation) : IUnityStructure
{
    public static RotationKey Read(EndianBinaryReader reader)
    {
        double _featherStart_ = reader.ReadF64();
        double _featherEnd_ = reader.ReadF64();
        double _centerStart_ = reader.ReadF64();
        double _centerEnd_ = reader.ReadF64();
        AnimationCurve interpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* interpolation */
        float blend_ = reader.ReadF32();
        byte useLookTarget_ = reader.ReadU8();
        reader.AlignTo(4); /* useLookTarget */
        PPtr<Transform> target_ = PPtr<Transform>.Read(reader);
        Vector3f rotation_ = Vector3f.Read(reader);
        
        return new(_featherStart_,
            _featherEnd_,
            _centerStart_,
            _centerEnd_,
            interpolation_,
            blend_,
            useLookTarget_,
            target_,
            rotation_);
    }

    public override string ToString() => $"RotationKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherStart: {_featherStart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherEnd: {_featherEnd}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerStart: {_centerStart}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerEnd: {_centerEnd}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}interpolation: {{ \n{interpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useLookTarget: {useLookTarget}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}target: {target}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rotation: {{ x: {rotation.x}, y: {rotation.y}, z: {rotation.z} }}\n");
    }
}

/* $OffsetModifier (3 fields) */
public record class OffsetModifier (
    float blend,
    byte useClippedPercent,
    OffsetKey[] keys) : IUnityStructure
{
    public static OffsetModifier Read(EndianBinaryReader reader)
    {
        float blend_ = reader.ReadF32();
        byte useClippedPercent_ = reader.ReadU8();
        reader.AlignTo(4); /* useClippedPercent */
        OffsetKey[] keys_ = BuiltInArray<OffsetKey>.Read(reader);
        reader.AlignTo(4); /* keys */
        
        return new(blend_,
            useClippedPercent_,
            keys_);
    }

    public override string ToString() => $"OffsetModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useClippedPercent: {useClippedPercent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keys[{keys.Length}] = {{");
        if (keys.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OffsetKey _4 in keys)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keys.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OffsetKey (7 fields) */
public record class OffsetKey (
    double _featherStart,
    double _featherEnd,
    double _centerStart,
    double _centerEnd,
    AnimationCurve interpolation,
    float blend,
    Vector2f offset) : IUnityStructure
{
    public static OffsetKey Read(EndianBinaryReader reader)
    {
        double _featherStart_ = reader.ReadF64();
        double _featherEnd_ = reader.ReadF64();
        double _centerStart_ = reader.ReadF64();
        double _centerEnd_ = reader.ReadF64();
        AnimationCurve interpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* interpolation */
        float blend_ = reader.ReadF32();
        Vector2f offset_ = Vector2f.Read(reader);
        
        return new(_featherStart_,
            _featherEnd_,
            _centerStart_,
            _centerEnd_,
            interpolation_,
            blend_,
            offset_);
    }

    public override string ToString() => $"OffsetKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherStart: {_featherStart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherEnd: {_featherEnd}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerStart: {_centerStart}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerEnd: {_centerEnd}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}interpolation: {{ \n{interpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}offset: {{ x: {offset.x}, y: {offset.y} }}\n");
    }
}

/* $ColorModifier (3 fields) */
public record class ColorModifier (
    float blend,
    byte useClippedPercent,
    ColorKey[] keys) : IUnityStructure
{
    public static ColorModifier Read(EndianBinaryReader reader)
    {
        float blend_ = reader.ReadF32();
        byte useClippedPercent_ = reader.ReadU8();
        reader.AlignTo(4); /* useClippedPercent */
        ColorKey[] keys_ = BuiltInArray<ColorKey>.Read(reader);
        reader.AlignTo(4); /* keys */
        
        return new(blend_,
            useClippedPercent_,
            keys_);
    }

    public override string ToString() => $"ColorModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useClippedPercent: {useClippedPercent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keys[{keys.Length}] = {{");
        if (keys.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ColorKey _4 in keys)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keys.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ColorKey (8 fields) */
public record class ColorKey (
    double _featherStart,
    double _featherEnd,
    double _centerStart,
    double _centerEnd,
    AnimationCurve interpolation,
    float blend,
    ColorRGBA_1 color,
    int blendMode) : IUnityStructure
{
    public static ColorKey Read(EndianBinaryReader reader)
    {
        double _featherStart_ = reader.ReadF64();
        double _featherEnd_ = reader.ReadF64();
        double _centerStart_ = reader.ReadF64();
        double _centerEnd_ = reader.ReadF64();
        AnimationCurve interpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* interpolation */
        float blend_ = reader.ReadF32();
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        int blendMode_ = reader.ReadS32();
        
        return new(_featherStart_,
            _featherEnd_,
            _centerStart_,
            _centerEnd_,
            interpolation_,
            blend_,
            color_,
            blendMode_);
    }

    public override string ToString() => $"ColorKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherStart: {_featherStart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherEnd: {_featherEnd}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerStart: {_centerStart}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerEnd: {_centerEnd}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}interpolation: {{ \n{interpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blendMode: {blendMode}");
    }
}

/* $SizeModifier (3 fields) */
public record class SizeModifier (
    float blend,
    byte useClippedPercent,
    SizeKey[] keys) : IUnityStructure
{
    public static SizeModifier Read(EndianBinaryReader reader)
    {
        float blend_ = reader.ReadF32();
        byte useClippedPercent_ = reader.ReadU8();
        reader.AlignTo(4); /* useClippedPercent */
        SizeKey[] keys_ = BuiltInArray<SizeKey>.Read(reader);
        reader.AlignTo(4); /* keys */
        
        return new(blend_,
            useClippedPercent_,
            keys_);
    }

    public override string ToString() => $"SizeModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useClippedPercent: {useClippedPercent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keys[{keys.Length}] = {{");
        if (keys.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SizeKey _4 in keys)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keys.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SizeKey (7 fields) */
public record class SizeKey (
    double _featherStart,
    double _featherEnd,
    double _centerStart,
    double _centerEnd,
    AnimationCurve interpolation,
    float blend,
    float size) : IUnityStructure
{
    public static SizeKey Read(EndianBinaryReader reader)
    {
        double _featherStart_ = reader.ReadF64();
        double _featherEnd_ = reader.ReadF64();
        double _centerStart_ = reader.ReadF64();
        double _centerEnd_ = reader.ReadF64();
        AnimationCurve interpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* interpolation */
        float blend_ = reader.ReadF32();
        float size_ = reader.ReadF32();
        
        return new(_featherStart_,
            _featherEnd_,
            _centerStart_,
            _centerEnd_,
            interpolation_,
            blend_,
            size_);
    }

    public override string ToString() => $"SizeKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherStart: {_featherStart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherEnd: {_featherEnd}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerStart: {_centerStart}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerEnd: {_centerEnd}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}interpolation: {{ \n{interpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}size: {size}");
    }
}

/* $SplineSample (6 fields) */
public record class SplineSample (
    Vector3f position,
    Vector3f up,
    Vector3f forward,
    ColorRGBA_1 color,
    float size,
    double percent) : IUnityStructure
{
    public static SplineSample Read(EndianBinaryReader reader)
    {
        Vector3f position_ = Vector3f.Read(reader);
        Vector3f up_ = Vector3f.Read(reader);
        Vector3f forward_ = Vector3f.Read(reader);
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        float size_ = reader.ReadF32();
        double percent_ = reader.ReadF64();
        
        return new(position_,
            up_,
            forward_,
            color_,
            size_,
            percent_);
    }

    public override string ToString() => $"SplineSample\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}position: {{ x: {position.x}, y: {position.y}, z: {position.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}up: {{ x: {up.x}, y: {up.y}, z: {up.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}forward: {{ x: {forward.x}, y: {forward.y}, z: {forward.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}size: {size}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}percent: {percent}");
    }
}

/* $RectOffset (4 fields) */
public readonly record struct RectOffset (
    int m_Left,
    int m_Right,
    int m_Top,
    int m_Bottom) : IUnityStructure
{
    public static RectOffset Read(EndianBinaryReader reader)
    {
        int m_Left_ = reader.ReadS32();
        int m_Right_ = reader.ReadS32();
        int m_Top_ = reader.ReadS32();
        int m_Bottom_ = reader.ReadS32();
        
        return new(m_Left_,
            m_Right_,
            m_Top_,
            m_Bottom_);
    }

    public override string ToString() => $"RectOffset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Left: {m_Left}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Right: {m_Right}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Top: {m_Top}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Bottom: {m_Bottom}");
    }
}

/* $BoolReactiveProperty (1 fields) */
public readonly record struct BoolReactiveProperty (
    byte @value) : IUnityStructure
{
    public static BoolReactiveProperty Read(EndianBinaryReader reader)
    {
        byte @value_ = reader.ReadU8();
        reader.AlignTo(4); /* @value */
        
        return new(@value_);
    }

    public override string ToString() => $"BoolReactiveProperty\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }
}

/* $AnimationStyleEntry_1 (4 fields) */
public record class AnimationStyleEntry_1 (
    int Style,
    byte IsOffHand,
    WeaponStyleSettings_1 Default,
    WeaponStyleSettings_1[] WeaponStyleSettings) : IUnityStructure
{
    public static AnimationStyleEntry_1 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        WeaponStyleSettings_1 Default_ = WeaponStyleSettings_1.Read(reader);
        WeaponStyleSettings_1[] WeaponStyleSettings_ = BuiltInArray<WeaponStyleSettings_1>.Read(reader);
        
        return new(Style_,
            IsOffHand_,
            Default_,
            WeaponStyleSettings_);
    }

    public override string ToString() => $"AnimationStyleEntry_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Default: {{ \n{Default.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponStyleSettings[{WeaponStyleSettings.Length}] = {{");
        if (WeaponStyleSettings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (WeaponStyleSettings_1 _4 in WeaponStyleSettings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (WeaponStyleSettings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $WeaponStyleSettings_1 (3 fields) */
public record class WeaponStyleSettings_1 (
    int Style,
    AttackVariantSettings Single,
    AttackVariantSettings Burst) : IUnityStructure
{
    public static WeaponStyleSettings_1 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AttackVariantSettings Single_ = AttackVariantSettings.Read(reader);
        AttackVariantSettings Burst_ = AttackVariantSettings.Read(reader);
        
        return new(Style_,
            Single_,
            Burst_);
    }

    public override string ToString() => $"WeaponStyleSettings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Single: {{ \n{Single.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Burst: {{ \n{Burst.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AttackVariantSettings (3 fields) */
public record class AttackVariantSettings (
    ClipSettings[] Ready,
    ClipSettings[] Unready,
    ClipSettings[] Attack) : IUnityStructure
{
    public static AttackVariantSettings Read(EndianBinaryReader reader)
    {
        ClipSettings[] Ready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Unready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Attack_ = BuiltInArray<ClipSettings>.Read(reader);
        
        return new(Ready_,
            Unready_,
            Attack_);
    }

    public override string ToString() => $"AttackVariantSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ready[{Ready.Length}] = {{");
        if (Ready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Ready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Ready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unready[{Unready.Length}] = {{");
        if (Unready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Unready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Unready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Attack[{Attack.Length}] = {{");
        if (Attack.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Attack)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Attack.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ClipSettings (1 fields) */
public record class ClipSettings (
    PPtr<AnimationClipWrapper> ClipWrapper) : IUnityStructure
{
    public static ClipSettings Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> ClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(ClipWrapper_);
    }

    public override string ToString() => $"ClipSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipWrapper: {ClipWrapper}");
    }
}

/* $managedRefArrayItem (1 fields) */
public readonly record struct managedRefArrayItem (
    long rid) : IUnityStructure
{
    public static managedRefArrayItem Read(EndianBinaryReader reader)
    {
        long rid_ = reader.ReadS64();
        
        return new(rid_);
    }

    public override string ToString() => $"managedRefArrayItem\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rid: {rid}");
    }
}

/* $ConditionalRestrictionSettings (1 fields) */
public record class ConditionalRestrictionSettings (
    ConditionsReference Condition) : IUnityStructure
{
    public static ConditionalRestrictionSettings Read(EndianBinaryReader reader)
    {
        ConditionsReference Condition_ = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* Condition */
        
        return new(Condition_);
    }

    public override string ToString() => $"ConditionalRestrictionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Condition: {{ \n{Condition.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ConditionsReference (1 fields) */
public record class ConditionsReference (
    AsciiString guid) : IUnityStructure
{
    public static ConditionsReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"ConditionsReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $ShaderResources_9 (27 fields) */
public record class ShaderResources_9 (
    PPtr<Shader> CopyDepthPS,
    PPtr<Shader> CopyDepthSimplePS,
    PPtr<ComputeShader> DepthPyramidCS,
    PPtr<Shader> FinalBlitShader,
    PPtr<Shader> FsrEasuShader,
    PPtr<ComputeShader> LightCullingShader,
    PPtr<ComputeShader> ComputeTilesMinMaxZCS,
    PPtr<Shader> DeferredReflectionsShader,
    PPtr<Shader> DeferredLightingShader,
    PPtr<ComputeShader> DeferredLightingCS,
    PPtr<Shader> BlitShader,
    PPtr<Shader> ColorPyramidShader,
    PPtr<Shader> ApplyDistortionShader,
    PPtr<Shader> DBufferBlitShader,
    PPtr<Shader> FogShader,
    PPtr<Shader> HbaoShader,
    PPtr<ComputeShader> IndirectRenderingCullShader,
    PPtr<ComputeShader> ScreenSpaceReflectionsShaderCS,
    PPtr<Shader> ScreenSpaceReflectionsShaderPS,
    PPtr<ComputeShader> StochasticScreenSpaceReflectionsCS,
    PPtr<ComputeShader> BilateralUpsampleCS,
    PPtr<Shader> CameraMotionVectorsPS,
    PPtr<Shader> ObjectMotionVectorsPS,
    PPtr<Shader> CoreBlitPS,
    PPtr<Shader> CoreBlitColorAndDepthPS,
    PPtr<ComputeShader> MedianBlurCS,
    PPtr<Shader> CopyCachedShadowsPS) : IUnityStructure
{
    public static ShaderResources_9 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> CopyDepthPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CopyDepthSimplePS_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> DepthPyramidCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> FinalBlitShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> FsrEasuShader_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> LightCullingShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> ComputeTilesMinMaxZCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> DeferredReflectionsShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> DeferredLightingShader_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> DeferredLightingCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> BlitShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ColorPyramidShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ApplyDistortionShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> DBufferBlitShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> FogShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> HbaoShader_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> IndirectRenderingCullShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> ScreenSpaceReflectionsShaderCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> ScreenSpaceReflectionsShaderPS_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> StochasticScreenSpaceReflectionsCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> BilateralUpsampleCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> CameraMotionVectorsPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ObjectMotionVectorsPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CoreBlitPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CoreBlitColorAndDepthPS_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> MedianBlurCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> CopyCachedShadowsPS_ = PPtr<Shader>.Read(reader);
        
        return new(CopyDepthPS_,
            CopyDepthSimplePS_,
            DepthPyramidCS_,
            FinalBlitShader_,
            FsrEasuShader_,
            LightCullingShader_,
            ComputeTilesMinMaxZCS_,
            DeferredReflectionsShader_,
            DeferredLightingShader_,
            DeferredLightingCS_,
            BlitShader_,
            ColorPyramidShader_,
            ApplyDistortionShader_,
            DBufferBlitShader_,
            FogShader_,
            HbaoShader_,
            IndirectRenderingCullShader_,
            ScreenSpaceReflectionsShaderCS_,
            ScreenSpaceReflectionsShaderPS_,
            StochasticScreenSpaceReflectionsCS_,
            BilateralUpsampleCS_,
            CameraMotionVectorsPS_,
            ObjectMotionVectorsPS_,
            CoreBlitPS_,
            CoreBlitColorAndDepthPS_,
            MedianBlurCS_,
            CopyCachedShadowsPS_);
    }

    public override string ToString() => $"ShaderResources_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CopyDepthPS: {CopyDepthPS}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CopyDepthSimplePS: {CopyDepthSimplePS}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthPyramidCS: {DepthPyramidCS}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FinalBlitShader: {FinalBlitShader}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrEasuShader: {FsrEasuShader}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LightCullingShader: {LightCullingShader}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ComputeTilesMinMaxZCS: {ComputeTilesMinMaxZCS}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DeferredReflectionsShader: {DeferredReflectionsShader}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DeferredLightingShader: {DeferredLightingShader}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DeferredLightingCS: {DeferredLightingCS}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlitShader: {BlitShader}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ColorPyramidShader: {ColorPyramidShader}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ApplyDistortionShader: {ApplyDistortionShader}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DBufferBlitShader: {DBufferBlitShader}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FogShader: {FogShader}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HbaoShader: {HbaoShader}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IndirectRenderingCullShader: {IndirectRenderingCullShader}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenSpaceReflectionsShaderCS: {ScreenSpaceReflectionsShaderCS}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenSpaceReflectionsShaderPS: {ScreenSpaceReflectionsShaderPS}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StochasticScreenSpaceReflectionsCS: {StochasticScreenSpaceReflectionsCS}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BilateralUpsampleCS: {BilateralUpsampleCS}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraMotionVectorsPS: {CameraMotionVectorsPS}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ObjectMotionVectorsPS: {ObjectMotionVectorsPS}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoreBlitPS: {CoreBlitPS}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoreBlitColorAndDepthPS: {CoreBlitColorAndDepthPS}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MedianBlurCS: {MedianBlurCS}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CopyCachedShadowsPS: {CopyCachedShadowsPS}");
    }
}

/* $LocalizedString (2 fields) */
public record class LocalizedString (
    AsciiString m_Key,
    PPtr<SharedStringAsset> Shared) : IUnityStructure
{
    public static LocalizedString Read(EndianBinaryReader reader)
    {
        AsciiString m_Key_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Key */
        PPtr<SharedStringAsset> Shared_ = PPtr<SharedStringAsset>.Read(reader);
        
        return new(m_Key_,
            Shared_);
    }

    public override string ToString() => $"LocalizedString\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Key: \"{m_Key}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Shared: {Shared}");
    }
}

/* $BlueprintEncyclopediaPageReference (1 fields) */
public record class BlueprintEncyclopediaPageReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintEncyclopediaPageReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintEncyclopediaPageReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $AkStateReference (2 fields) */
public record class AkStateReference (
    AsciiString Value,
    AsciiString Group) : IUnityStructure
{
    public static AkStateReference Read(EndianBinaryReader reader)
    {
        AsciiString Value_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Value */
        AsciiString Group_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Group */
        
        return new(Value_,
            Group_);
    }

    public override string ToString() => $"AkStateReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Value: \"{Value}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Group: \"{Group}\"");
    }
}

/* $CullStateChangedEvent (1 fields) */
public record class CullStateChangedEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static CullStateChangedEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"CullStateChangedEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MyEntry (3 fields) */
public record class MyEntry (
    int Value,
    LocalizedString Text,
    LocalizedString Description) : IUnityStructure
{
    public static MyEntry Read(EndianBinaryReader reader)
    {
        int Value_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        LocalizedString Description_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        
        return new(Value_,
            Text_,
            Description_);
    }

    public override string ToString() => $"MyEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Value: {Value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Description: {{ \n{Description.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PointsVariant (2 fields) */
public record class PointsVariant (
    PPtr<ExplorationPointOfInterestPCView>[] PointsOfInterest,
    PPtr<ExplorationResourcePointPCView>[] ResourcePoints) : IUnityStructure
{
    public static PointsVariant Read(EndianBinaryReader reader)
    {
        PPtr<ExplorationPointOfInterestPCView>[] PointsOfInterest_ = BuiltInArray<PPtr<ExplorationPointOfInterestPCView>>.Read(reader);
        PPtr<ExplorationResourcePointPCView>[] ResourcePoints_ = BuiltInArray<PPtr<ExplorationResourcePointPCView>>.Read(reader);
        
        return new(PointsOfInterest_,
            ResourcePoints_);
    }

    public override string ToString() => $"PointsVariant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PointsOfInterest[{PointsOfInterest.Length}] = {{");
        if (PointsOfInterest.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ExplorationPointOfInterestPCView> _4 in PointsOfInterest)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (PointsOfInterest.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourcePoints[{ResourcePoints.Length}] = {{");
        if (ResourcePoints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ExplorationResourcePointPCView> _4 in ResourcePoints)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ResourcePoints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ShaderResources_4 (5 fields) */
public record class ShaderResources_4 (
    PPtr<Shader> DebugFullscreenPS,
    PPtr<Shader> ShadowsDebugPS,
    PPtr<Shader> ShowLightSortingCurvePS,
    PPtr<ComputeShader> ClearDebugBuffersCS,
    PPtr<Shader> DebugOverdrawPS) : IUnityStructure
{
    public static ShaderResources_4 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> DebugFullscreenPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ShadowsDebugPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ShowLightSortingCurvePS_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> ClearDebugBuffersCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> DebugOverdrawPS_ = PPtr<Shader>.Read(reader);
        
        return new(DebugFullscreenPS_,
            ShadowsDebugPS_,
            ShowLightSortingCurvePS_,
            ClearDebugBuffersCS_,
            DebugOverdrawPS_);
    }

    public override string ToString() => $"ShaderResources_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugFullscreenPS: {DebugFullscreenPS}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowsDebugPS: {ShadowsDebugPS}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowLightSortingCurvePS: {ShowLightSortingCurvePS}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClearDebugBuffersCS: {ClearDebugBuffersCS}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugOverdrawPS: {DebugOverdrawPS}");
    }
}

/* $LightingDebug (5 fields) */
public record class LightingDebug (
    int DebugClustersMode,
    int DebugLightingMode,
    bool ShowLightSortingCurve,
    ColorRGBA_1 LightSortingCurveColorStart,
    ColorRGBA_1 LightSortingCurveColorEnd) : IUnityStructure
{
    public static LightingDebug Read(EndianBinaryReader reader)
    {
        int DebugClustersMode_ = reader.ReadS32();
        int DebugLightingMode_ = reader.ReadS32();
        bool ShowLightSortingCurve_ = reader.ReadBool();
        reader.AlignTo(4); /* ShowLightSortingCurve */
        ColorRGBA_1 LightSortingCurveColorStart_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* LightSortingCurveColorStart */
        ColorRGBA_1 LightSortingCurveColorEnd_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* LightSortingCurveColorEnd */
        
        return new(DebugClustersMode_,
            DebugLightingMode_,
            ShowLightSortingCurve_,
            LightSortingCurveColorStart_,
            LightSortingCurveColorEnd_);
    }

    public override string ToString() => $"LightingDebug\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugClustersMode: {DebugClustersMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugLightingMode: {DebugLightingMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowLightSortingCurve: {ShowLightSortingCurve}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LightSortingCurveColorStart: {{ r: {LightSortingCurveColorStart.r}, g: {LightSortingCurveColorStart.g}, b: {LightSortingCurveColorStart.b}, a: {LightSortingCurveColorStart.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LightSortingCurveColorEnd: {{ r: {LightSortingCurveColorEnd.r}, g: {LightSortingCurveColorEnd.g}, b: {LightSortingCurveColorEnd.b}, a: {LightSortingCurveColorEnd.a} }}\n");
    }
}

/* $RenderingDebug (4 fields) */
public record class RenderingDebug (
    int DebugMaterialMode,
    int OverdrawMode,
    QuadOverdrawSettings QuadOverdrawSettings_,
    bool DebugMipMap) : IUnityStructure
{
    public static RenderingDebug Read(EndianBinaryReader reader)
    {
        int DebugMaterialMode_ = reader.ReadS32();
        int OverdrawMode_ = reader.ReadS32();
        QuadOverdrawSettings QuadOverdrawSettings__ = QuadOverdrawSettings.Read(reader);
        reader.AlignTo(4); /* QuadOverdrawSettings_ */
        bool DebugMipMap_ = reader.ReadBool();
        reader.AlignTo(4); /* DebugMipMap */
        
        return new(DebugMaterialMode_,
            OverdrawMode_,
            QuadOverdrawSettings__,
            DebugMipMap_);
    }

    public override string ToString() => $"RenderingDebug\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugMaterialMode: {DebugMaterialMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverdrawMode: {OverdrawMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuadOverdrawSettings_: {{ \n{QuadOverdrawSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugMipMap: {DebugMipMap}");
    }
}

/* $QuadOverdrawSettings (5 fields) */
public readonly record struct QuadOverdrawSettings (
    int MaxQuadCost,
    int DepthTestMode,
    int ObjectFilter,
    bool DepthHelperPlaneEneabled,
    float DepthHelperPlaneLevel) : IUnityStructure
{
    public static QuadOverdrawSettings Read(EndianBinaryReader reader)
    {
        int MaxQuadCost_ = reader.ReadS32();
        int DepthTestMode_ = reader.ReadS32();
        int ObjectFilter_ = reader.ReadS32();
        bool DepthHelperPlaneEneabled_ = reader.ReadBool();
        reader.AlignTo(4); /* DepthHelperPlaneEneabled */
        float DepthHelperPlaneLevel_ = reader.ReadF32();
        
        return new(MaxQuadCost_,
            DepthTestMode_,
            ObjectFilter_,
            DepthHelperPlaneEneabled_,
            DepthHelperPlaneLevel_);
    }

    public override string ToString() => $"QuadOverdrawSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxQuadCost: {MaxQuadCost}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthTestMode: {DepthTestMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ObjectFilter: {ObjectFilter}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthHelperPlaneEneabled: {DepthHelperPlaneEneabled}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthHelperPlaneLevel: {DepthHelperPlaneLevel}");
    }
}

/* $StencilDebug (3 fields) */
public readonly record struct StencilDebug (
    int StencilDebugType,
    int Flags,
    int Ref) : IUnityStructure
{
    public static StencilDebug Read(EndianBinaryReader reader)
    {
        int StencilDebugType_ = reader.ReadS32();
        int Flags_ = reader.ReadS32();
        int Ref_ = reader.ReadS32();
        
        return new(StencilDebugType_,
            Flags_,
            Ref_);
    }

    public override string ToString() => $"StencilDebug\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StencilDebugType: {StencilDebugType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Flags: {Flags}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Ref: {Ref}");
    }
}

/* $ShadowsDebug (7 fields) */
public record class ShadowsDebug (
    int AtlasOccupancy,
    ColorRGBA_1 AtlasNodesOccupied,
    ColorRGBA_1 AtlasNodesPartiallyOccupied,
    ColorRGBA_1 AtlasNodesOccupiedInHierarchy,
    int ViewAtlas,
    float DebugScale,
    float DebugColorMultiplier) : IUnityStructure
{
    public static ShadowsDebug Read(EndianBinaryReader reader)
    {
        int AtlasOccupancy_ = reader.ReadS32();
        ColorRGBA_1 AtlasNodesOccupied_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* AtlasNodesOccupied */
        ColorRGBA_1 AtlasNodesPartiallyOccupied_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* AtlasNodesPartiallyOccupied */
        ColorRGBA_1 AtlasNodesOccupiedInHierarchy_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* AtlasNodesOccupiedInHierarchy */
        int ViewAtlas_ = reader.ReadS32();
        float DebugScale_ = reader.ReadF32();
        float DebugColorMultiplier_ = reader.ReadF32();
        
        return new(AtlasOccupancy_,
            AtlasNodesOccupied_,
            AtlasNodesPartiallyOccupied_,
            AtlasNodesOccupiedInHierarchy_,
            ViewAtlas_,
            DebugScale_,
            DebugColorMultiplier_);
    }

    public override string ToString() => $"ShadowsDebug\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AtlasOccupancy: {AtlasOccupancy}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AtlasNodesOccupied: {{ r: {AtlasNodesOccupied.r}, g: {AtlasNodesOccupied.g}, b: {AtlasNodesOccupied.b}, a: {AtlasNodesOccupied.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AtlasNodesPartiallyOccupied: {{ r: {AtlasNodesPartiallyOccupied.r}, g: {AtlasNodesPartiallyOccupied.g}, b: {AtlasNodesPartiallyOccupied.b}, a: {AtlasNodesPartiallyOccupied.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AtlasNodesOccupiedInHierarchy: {{ r: {AtlasNodesOccupiedInHierarchy.r}, g: {AtlasNodesOccupiedInHierarchy.g}, b: {AtlasNodesOccupiedInHierarchy.b}, a: {AtlasNodesOccupiedInHierarchy.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ViewAtlas: {ViewAtlas}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugScale: {DebugScale}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugColorMultiplier: {DebugColorMultiplier}");
    }
}

/* $LensSettings (10 fields) */
public record class LensSettings (
    float FieldOfView,
    float OrthographicSize,
    float NearClipPlane,
    float FarClipPlane,
    float Dutch,
    int ModeOverride,
    Vector2f LensShift,
    int GateFit,
    float FocusDistance,
    Vector2f m_SensorSize) : IUnityStructure
{
    public static LensSettings Read(EndianBinaryReader reader)
    {
        float FieldOfView_ = reader.ReadF32();
        float OrthographicSize_ = reader.ReadF32();
        float NearClipPlane_ = reader.ReadF32();
        float FarClipPlane_ = reader.ReadF32();
        float Dutch_ = reader.ReadF32();
        int ModeOverride_ = reader.ReadS32();
        Vector2f LensShift_ = Vector2f.Read(reader);
        int GateFit_ = reader.ReadS32();
        float FocusDistance_ = reader.ReadF32();
        Vector2f m_SensorSize_ = Vector2f.Read(reader);
        
        return new(FieldOfView_,
            OrthographicSize_,
            NearClipPlane_,
            FarClipPlane_,
            Dutch_,
            ModeOverride_,
            LensShift_,
            GateFit_,
            FocusDistance_,
            m_SensorSize_);
    }

    public override string ToString() => $"LensSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FieldOfView: {FieldOfView}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OrthographicSize: {OrthographicSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NearClipPlane: {NearClipPlane}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FarClipPlane: {FarClipPlane}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Dutch: {Dutch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ModeOverride: {ModeOverride}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LensShift: {{ x: {LensShift.x}, y: {LensShift.y} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GateFit: {GateFit}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FocusDistance: {FocusDistance}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SensorSize: {{ x: {m_SensorSize.x}, y: {m_SensorSize.y} }}\n");
    }
}

/* $TransitionParams (3 fields) */
public record class TransitionParams (
    int m_BlendHint,
    byte m_InheritPosition,
    VcamActivatedEvent m_OnCameraLive) : IUnityStructure
{
    public static TransitionParams Read(EndianBinaryReader reader)
    {
        int m_BlendHint_ = reader.ReadS32();
        byte m_InheritPosition_ = reader.ReadU8();
        reader.AlignTo(4); /* m_InheritPosition */
        VcamActivatedEvent m_OnCameraLive_ = VcamActivatedEvent.Read(reader);
        reader.AlignTo(4); /* m_OnCameraLive */
        
        return new(m_BlendHint_,
            m_InheritPosition_,
            m_OnCameraLive_);
    }

    public override string ToString() => $"TransitionParams\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendHint: {m_BlendHint}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InheritPosition: {m_InheritPosition}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OnCameraLive: {{ \n{m_OnCameraLive.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $VcamActivatedEvent (1 fields) */
public record class VcamActivatedEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static VcamActivatedEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"VcamActivatedEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TimedProbabilityCurve (3 fields) */
public readonly record struct TimedProbabilityCurve (
    float m_Integral,
    float m_MinTime,
    float m_MaxTime) : IUnityStructure
{
    public static TimedProbabilityCurve Read(EndianBinaryReader reader)
    {
        float m_Integral_ = reader.ReadF32();
        float m_MinTime_ = reader.ReadF32();
        float m_MaxTime_ = reader.ReadF32();
        
        return new(m_Integral_,
            m_MinTime_,
            m_MaxTime_);
    }

    public override string ToString() => $"TimedProbabilityCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Integral: {m_Integral}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MinTime: {m_MinTime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxTime: {m_MaxTime}");
    }
}

/* $ClipList (2 fields) */
public record class ClipList (
    int Weapon,
    PPtr<AnimationClipWrapper>[] ClipWrappers) : IUnityStructure
{
    public static ClipList Read(EndianBinaryReader reader)
    {
        int Weapon_ = reader.ReadS32();
        PPtr<AnimationClipWrapper>[] ClipWrappers_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(Weapon_,
            ClipWrappers_);
    }

    public override string ToString() => $"ClipList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Weapon: {Weapon}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClipWrappers[{ClipWrappers.Length}] = {{");
        if (ClipWrappers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in ClipWrappers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ClipWrappers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MaskedClipList (4 fields) */
public record class MaskedClipList (
    int MainWeapon,
    int OffWeapon,
    PPtr<AvatarMask> Mask,
    PPtr<AnimationClipWrapper>[] ClipWrappers) : IUnityStructure
{
    public static MaskedClipList Read(EndianBinaryReader reader)
    {
        int MainWeapon_ = reader.ReadS32();
        int OffWeapon_ = reader.ReadS32();
        PPtr<AvatarMask> Mask_ = PPtr<AvatarMask>.Read(reader);
        PPtr<AnimationClipWrapper>[] ClipWrappers_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(MainWeapon_,
            OffWeapon_,
            Mask_,
            ClipWrappers_);
    }

    public override string ToString() => $"MaskedClipList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MainWeapon: {MainWeapon}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OffWeapon: {OffWeapon}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Mask: {Mask}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClipWrappers[{ClipWrappers.Length}] = {{");
        if (ClipWrappers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in ClipWrappers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ClipWrappers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $LoadingScreenImage (2 fields) */
public record class LoadingScreenImage (
    SpriteLink Main,
    SpriteLink Glitch) : IUnityStructure
{
    public static LoadingScreenImage Read(EndianBinaryReader reader)
    {
        SpriteLink Main_ = SpriteLink.Read(reader);
        reader.AlignTo(4); /* Main */
        SpriteLink Glitch_ = SpriteLink.Read(reader);
        reader.AlignTo(4); /* Glitch */
        
        return new(Main_,
            Glitch_);
    }

    public override string ToString() => $"LoadingScreenImage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Main: {{ \n{Main.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Glitch: {{ \n{Glitch.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SpriteLink (1 fields) */
public record class SpriteLink (
    AsciiString AssetId) : IUnityStructure
{
    public static SpriteLink Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        
        return new(AssetId_);
    }

    public override string ToString() => $"SpriteLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }
}

/* $SettingTypeScreens (2 fields) */
public record class SettingTypeScreens (
    int Type,
    LoadingScreenImage[] Sprites) : IUnityStructure
{
    public static SettingTypeScreens Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        LoadingScreenImage[] Sprites_ = BuiltInArray<LoadingScreenImage>.Read(reader);
        reader.AlignTo(4); /* Sprites */
        
        return new(Type_,
            Sprites_);
    }

    public override string ToString() => $"SettingTypeScreens\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Sprites[{Sprites.Length}] = {{");
        if (Sprites.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LoadingScreenImage _4 in Sprites)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Sprites.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PointsVariant_1 (2 fields) */
public record class PointsVariant_1 (
    PPtr<ExplorationPointOfInterestConsoleView>[] PointsOfInterest,
    PPtr<ExplorationResourcePointConsoleView>[] ResourcePoints) : IUnityStructure
{
    public static PointsVariant_1 Read(EndianBinaryReader reader)
    {
        PPtr<ExplorationPointOfInterestConsoleView>[] PointsOfInterest_ = BuiltInArray<PPtr<ExplorationPointOfInterestConsoleView>>.Read(reader);
        PPtr<ExplorationResourcePointConsoleView>[] ResourcePoints_ = BuiltInArray<PPtr<ExplorationResourcePointConsoleView>>.Read(reader);
        
        return new(PointsOfInterest_,
            ResourcePoints_);
    }

    public override string ToString() => $"PointsVariant_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PointsOfInterest[{PointsOfInterest.Length}] = {{");
        if (PointsOfInterest.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ExplorationPointOfInterestConsoleView> _4 in PointsOfInterest)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (PointsOfInterest.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourcePoints[{ResourcePoints.Length}] = {{");
        if (ResourcePoints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ExplorationResourcePointConsoleView> _4 in ResourcePoints)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ResourcePoints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $InteractionSkillCheckSettings (48 fields) */
public record class InteractionSkillCheckSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection,
    int Skill,
    byte NeedSupply,
    int Difficulty,
    int DC,
    ViewDCModifier[] DCModifiers,
    int FakeResult,
    byte HideDC,
    PPtr<SharedStringAsset> DisplayName,
    PPtr<SharedStringAsset> ShortDescription,
    byte DisableAfterUse,
    byte OnlyCheckOnce,
    byte CheckConditionsOnEveryInteraction,
    byte TriggerActionsEveryClick,
    PPtr<SharedStringAsset> DisplayNameAfterUse,
    PPtr<SharedStringAsset> ShortDescriptionPassed,
    PPtr<SharedStringAsset> ShortDescriptionFailed,
    byte IsPartyCheck,
    byte FadeOnSuccess,
    byte FadeOnFail,
    int PenaltyForFailedSkillCheck,
    byte ApplyPenaltyAfterFade,
    PPtr<SharedStringAsset> CheckPassedBark,
    ActionsReference CheckPassedActions,
    BlueprintAreaEnterPointReference m_TeleportOnSuccess,
    BlueprintAreaEnterPointReference m_TeleportOnFail,
    PPtr<SharedStringAsset> CheckFailBark,
    ActionsReference CheckFailedActions,
    ConditionsReference Condition,
    byte ShowOnUser) : IUnityStructure
{
    public static InteractionSkillCheckSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        int Skill_ = reader.ReadS32();
        byte NeedSupply_ = reader.ReadU8();
        reader.AlignTo(4); /* NeedSupply */
        int Difficulty_ = reader.ReadS32();
        int DC_ = reader.ReadS32();
        ViewDCModifier[] DCModifiers_ = BuiltInArray<ViewDCModifier>.Read(reader);
        reader.AlignTo(4); /* DCModifiers */
        int FakeResult_ = reader.ReadS32();
        byte HideDC_ = reader.ReadU8();
        reader.AlignTo(4); /* HideDC */
        PPtr<SharedStringAsset> DisplayName_ = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> ShortDescription_ = PPtr<SharedStringAsset>.Read(reader);
        byte DisableAfterUse_ = reader.ReadU8();
        reader.AlignTo(4); /* DisableAfterUse */
        byte OnlyCheckOnce_ = reader.ReadU8();
        reader.AlignTo(4); /* OnlyCheckOnce */
        byte CheckConditionsOnEveryInteraction_ = reader.ReadU8();
        reader.AlignTo(4); /* CheckConditionsOnEveryInteraction */
        byte TriggerActionsEveryClick_ = reader.ReadU8();
        reader.AlignTo(4); /* TriggerActionsEveryClick */
        PPtr<SharedStringAsset> DisplayNameAfterUse_ = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> ShortDescriptionPassed_ = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> ShortDescriptionFailed_ = PPtr<SharedStringAsset>.Read(reader);
        byte IsPartyCheck_ = reader.ReadU8();
        reader.AlignTo(4); /* IsPartyCheck */
        byte FadeOnSuccess_ = reader.ReadU8();
        reader.AlignTo(4); /* FadeOnSuccess */
        byte FadeOnFail_ = reader.ReadU8();
        reader.AlignTo(4); /* FadeOnFail */
        int PenaltyForFailedSkillCheck_ = reader.ReadS32();
        byte ApplyPenaltyAfterFade_ = reader.ReadU8();
        reader.AlignTo(4); /* ApplyPenaltyAfterFade */
        PPtr<SharedStringAsset> CheckPassedBark_ = PPtr<SharedStringAsset>.Read(reader);
        ActionsReference CheckPassedActions_ = ActionsReference.Read(reader);
        reader.AlignTo(4); /* CheckPassedActions */
        BlueprintAreaEnterPointReference m_TeleportOnSuccess_ = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* m_TeleportOnSuccess */
        BlueprintAreaEnterPointReference m_TeleportOnFail_ = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* m_TeleportOnFail */
        PPtr<SharedStringAsset> CheckFailBark_ = PPtr<SharedStringAsset>.Read(reader);
        ActionsReference CheckFailedActions_ = ActionsReference.Read(reader);
        reader.AlignTo(4); /* CheckFailedActions */
        ConditionsReference Condition_ = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* Condition */
        byte ShowOnUser_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOnUser */
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_,
            Skill_,
            NeedSupply_,
            Difficulty_,
            DC_,
            DCModifiers_,
            FakeResult_,
            HideDC_,
            DisplayName_,
            ShortDescription_,
            DisableAfterUse_,
            OnlyCheckOnce_,
            CheckConditionsOnEveryInteraction_,
            TriggerActionsEveryClick_,
            DisplayNameAfterUse_,
            ShortDescriptionPassed_,
            ShortDescriptionFailed_,
            IsPartyCheck_,
            FadeOnSuccess_,
            FadeOnFail_,
            PenaltyForFailedSkillCheck_,
            ApplyPenaltyAfterFade_,
            CheckPassedBark_,
            CheckPassedActions_,
            m_TeleportOnSuccess_,
            m_TeleportOnFail_,
            CheckFailBark_,
            CheckFailedActions_,
            Condition_,
            ShowOnUser_);
    }

    public override string ToString() => $"InteractionSkillCheckSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Skill: {Skill}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NeedSupply: {NeedSupply}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Difficulty: {Difficulty}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DC: {DC}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DCModifiers[{DCModifiers.Length}] = {{");
        if (DCModifiers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ViewDCModifier _4 in DCModifiers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (DCModifiers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FakeResult: {FakeResult}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HideDC: {HideDC}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisplayName: {DisplayName}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShortDescription: {ShortDescription}");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisableAfterUse: {DisableAfterUse}");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyCheckOnce: {OnlyCheckOnce}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CheckConditionsOnEveryInteraction: {CheckConditionsOnEveryInteraction}");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TriggerActionsEveryClick: {TriggerActionsEveryClick}");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisplayNameAfterUse: {DisplayNameAfterUse}");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShortDescriptionPassed: {ShortDescriptionPassed}");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShortDescriptionFailed: {ShortDescriptionFailed}");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsPartyCheck: {IsPartyCheck}");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FadeOnSuccess: {FadeOnSuccess}");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FadeOnFail: {FadeOnFail}");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PenaltyForFailedSkillCheck: {PenaltyForFailedSkillCheck}");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ApplyPenaltyAfterFade: {ApplyPenaltyAfterFade}");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CheckPassedBark: {CheckPassedBark}");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CheckPassedActions: {{ \n{CheckPassedActions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TeleportOnSuccess: {{ \n{m_TeleportOnSuccess.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TeleportOnFail: {{ \n{m_TeleportOnFail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CheckFailBark: {CheckFailBark}");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CheckFailedActions: {{ \n{CheckFailedActions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Condition: {{ \n{Condition.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOnUser: {ShowOnUser}");
    }
}

/* $BlueprintDialogReference (1 fields) */
public record class BlueprintDialogReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintDialogReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintDialogReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $InteractWithToolFXData (4 fields) */
public record class InteractWithToolFXData (
    byte DoNotShowFx,
    byte OverrideDefaultFx,
    PPtr<GameObject> OverrideFxPrefab,
    PPtr<GameObject> FxLocator) : IUnityStructure
{
    public static InteractWithToolFXData Read(EndianBinaryReader reader)
    {
        byte DoNotShowFx_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotShowFx */
        byte OverrideDefaultFx_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideDefaultFx */
        PPtr<GameObject> OverrideFxPrefab_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> FxLocator_ = PPtr<GameObject>.Read(reader);
        
        return new(DoNotShowFx_,
            OverrideDefaultFx_,
            OverrideFxPrefab_,
            FxLocator_);
    }

    public override string ToString() => $"InteractWithToolFXData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotShowFx: {DoNotShowFx}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideDefaultFx: {OverrideDefaultFx}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideFxPrefab: {OverrideFxPrefab}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FxLocator: {FxLocator}");
    }
}

/* $ViewDCModifier (2 fields) */
public record class ViewDCModifier (
    int Mod,
    ConditionsReference Conditions) : IUnityStructure
{
    public static ViewDCModifier Read(EndianBinaryReader reader)
    {
        int Mod_ = reader.ReadS32();
        ConditionsReference Conditions_ = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* Conditions */
        
        return new(Mod_,
            Conditions_);
    }

    public override string ToString() => $"ViewDCModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Mod: {Mod}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Conditions: {{ \n{Conditions.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ActionsReference (1 fields) */
public record class ActionsReference (
    AsciiString guid) : IUnityStructure
{
    public static ActionsReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"ActionsReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintAreaEnterPointReference (1 fields) */
public record class BlueprintAreaEnterPointReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintAreaEnterPointReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintAreaEnterPointReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintDynamicMapObjectReference (1 fields) */
public record class BlueprintDynamicMapObjectReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintDynamicMapObjectReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintDynamicMapObjectReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $SettingsViews_2 (12 fields) */
public record class SettingsViews_2 (
    PPtr<SettingsEntityHeaderConsoleView> m_SettingsEntityHeaderViewPrefab,
    PPtr<SettingsEntityBoolConsoleView> m_SettingsEntityBoolViewPrefab,
    PPtr<SettingsEntityDropdownConsoleView> m_SettingsEntityDropdownViewPrefab,
    PPtr<SettingsEntitySliderConsoleView> m_SettingsEntitySliderViewPrefab,
    PPtr<SettingsEntityDropdownGameDifficultyConsoleView> m_SettingsEntityDropdownGameDifficultyViewPrefab,
    PPtr<SettingsEntitySliderGammaCorrectionConsoleView> m_SettingsEntitySliderGammaCorrectionViewPrefab,
    PPtr<SettingsEntityStatisticsOptOutConsoleView> m_SettingsEntityStatisticsOptOutViewPrefab,
    PPtr<SettingEntityKeyBindingConsoleView> m_SettingEntityKeyBindingViewPrefab,
    PPtr<SettingsEntityDisplayImagesConsoleView> m_SettingEntityDisplayImagesViewPrefab,
    PPtr<SettingsEntityAccessibilityImageConsoleView> m_SettingEntityAccessibilityImageViewPrefab,
    PPtr<SettingsEntitySliderFontSizeConsoleView> m_SettingEntityFontSizeViewPrefab,
    PPtr<SettingsEntityBoolOnlyOneSaveConsoleView> m_SettingsEntityBoolOnlyOneSaveViewPrefab) : IUnityStructure
{
    public static SettingsViews_2 Read(EndianBinaryReader reader)
    {
        PPtr<SettingsEntityHeaderConsoleView> m_SettingsEntityHeaderViewPrefab_ = PPtr<SettingsEntityHeaderConsoleView>.Read(reader);
        PPtr<SettingsEntityBoolConsoleView> m_SettingsEntityBoolViewPrefab_ = PPtr<SettingsEntityBoolConsoleView>.Read(reader);
        PPtr<SettingsEntityDropdownConsoleView> m_SettingsEntityDropdownViewPrefab_ = PPtr<SettingsEntityDropdownConsoleView>.Read(reader);
        PPtr<SettingsEntitySliderConsoleView> m_SettingsEntitySliderViewPrefab_ = PPtr<SettingsEntitySliderConsoleView>.Read(reader);
        PPtr<SettingsEntityDropdownGameDifficultyConsoleView> m_SettingsEntityDropdownGameDifficultyViewPrefab_ = PPtr<SettingsEntityDropdownGameDifficultyConsoleView>.Read(reader);
        PPtr<SettingsEntitySliderGammaCorrectionConsoleView> m_SettingsEntitySliderGammaCorrectionViewPrefab_ = PPtr<SettingsEntitySliderGammaCorrectionConsoleView>.Read(reader);
        PPtr<SettingsEntityStatisticsOptOutConsoleView> m_SettingsEntityStatisticsOptOutViewPrefab_ = PPtr<SettingsEntityStatisticsOptOutConsoleView>.Read(reader);
        PPtr<SettingEntityKeyBindingConsoleView> m_SettingEntityKeyBindingViewPrefab_ = PPtr<SettingEntityKeyBindingConsoleView>.Read(reader);
        PPtr<SettingsEntityDisplayImagesConsoleView> m_SettingEntityDisplayImagesViewPrefab_ = PPtr<SettingsEntityDisplayImagesConsoleView>.Read(reader);
        PPtr<SettingsEntityAccessibilityImageConsoleView> m_SettingEntityAccessibilityImageViewPrefab_ = PPtr<SettingsEntityAccessibilityImageConsoleView>.Read(reader);
        PPtr<SettingsEntitySliderFontSizeConsoleView> m_SettingEntityFontSizeViewPrefab_ = PPtr<SettingsEntitySliderFontSizeConsoleView>.Read(reader);
        PPtr<SettingsEntityBoolOnlyOneSaveConsoleView> m_SettingsEntityBoolOnlyOneSaveViewPrefab_ = PPtr<SettingsEntityBoolOnlyOneSaveConsoleView>.Read(reader);
        
        return new(m_SettingsEntityHeaderViewPrefab_,
            m_SettingsEntityBoolViewPrefab_,
            m_SettingsEntityDropdownViewPrefab_,
            m_SettingsEntitySliderViewPrefab_,
            m_SettingsEntityDropdownGameDifficultyViewPrefab_,
            m_SettingsEntitySliderGammaCorrectionViewPrefab_,
            m_SettingsEntityStatisticsOptOutViewPrefab_,
            m_SettingEntityKeyBindingViewPrefab_,
            m_SettingEntityDisplayImagesViewPrefab_,
            m_SettingEntityAccessibilityImageViewPrefab_,
            m_SettingEntityFontSizeViewPrefab_,
            m_SettingsEntityBoolOnlyOneSaveViewPrefab_);
    }

    public override string ToString() => $"SettingsViews_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityHeaderViewPrefab: {m_SettingsEntityHeaderViewPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolViewPrefab: {m_SettingsEntityBoolViewPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownViewPrefab: {m_SettingsEntityDropdownViewPrefab}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntitySliderViewPrefab: {m_SettingsEntitySliderViewPrefab}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownGameDifficultyViewPrefab: {m_SettingsEntityDropdownGameDifficultyViewPrefab}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntitySliderGammaCorrectionViewPrefab: {m_SettingsEntitySliderGammaCorrectionViewPrefab}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityStatisticsOptOutViewPrefab: {m_SettingsEntityStatisticsOptOutViewPrefab}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityKeyBindingViewPrefab: {m_SettingEntityKeyBindingViewPrefab}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityDisplayImagesViewPrefab: {m_SettingEntityDisplayImagesViewPrefab}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityAccessibilityImageViewPrefab: {m_SettingEntityAccessibilityImageViewPrefab}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityFontSizeViewPrefab: {m_SettingEntityFontSizeViewPrefab}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolOnlyOneSaveViewPrefab: {m_SettingsEntityBoolOnlyOneSaveViewPrefab}");
    }
}

/* $Entry (2 fields) */
public record class Entry (
    SpellDescriptorWrapper Descriptor,
    LocalizedString Text) : IUnityStructure
{
    public static Entry Read(EndianBinaryReader reader)
    {
        SpellDescriptorWrapper Descriptor_ = SpellDescriptorWrapper.Read(reader);
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Descriptor_,
            Text_);
    }

    public override string ToString() => $"Entry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Descriptor: {{ m_IntValue: {Descriptor.m_IntValue} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SpellDescriptorWrapper (1 fields) */
public readonly record struct SpellDescriptorWrapper (
    long m_IntValue) : IUnityStructure
{
    public static SpellDescriptorWrapper Read(EndianBinaryReader reader)
    {
        long m_IntValue_ = reader.ReadS64();
        
        return new(m_IntValue_);
    }

    public override string ToString() => $"SpellDescriptorWrapper\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IntValue: {m_IntValue}");
    }
}

/* $ShaderResources (1 fields) */
public record class ShaderResources (
    PPtr<Shader> NoiseBakeShader) : IUnityStructure
{
    public static ShaderResources Read(EndianBinaryReader reader)
    {
        PPtr<Shader> NoiseBakeShader_ = PPtr<Shader>.Read(reader);
        
        return new(NoiseBakeShader_);
    }

    public override string ToString() => $"ShaderResources\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NoiseBakeShader: {NoiseBakeShader}");
    }
}

/* $DepthClipSettings (6 fields) */
public record class DepthClipSettings (
    float ClipTreshold,
    float NoiseTiling,
    float AlphaScale,
    float NearCameraClipDistance,
    bool OcclusionGeometryClipEnabled,
    Settings_1 OcclusionGeometryClipSettings) : IUnityStructure
{
    public static DepthClipSettings Read(EndianBinaryReader reader)
    {
        float ClipTreshold_ = reader.ReadF32();
        float NoiseTiling_ = reader.ReadF32();
        float AlphaScale_ = reader.ReadF32();
        float NearCameraClipDistance_ = reader.ReadF32();
        bool OcclusionGeometryClipEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* OcclusionGeometryClipEnabled */
        Settings_1 OcclusionGeometryClipSettings_ = Settings_1.Read(reader);
        reader.AlignTo(4); /* OcclusionGeometryClipSettings */
        
        return new(ClipTreshold_,
            NoiseTiling_,
            AlphaScale_,
            NearCameraClipDistance_,
            OcclusionGeometryClipEnabled_,
            OcclusionGeometryClipSettings_);
    }

    public override string ToString() => $"DepthClipSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipTreshold: {ClipTreshold}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NoiseTiling: {NoiseTiling}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlphaScale: {AlphaScale}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NearCameraClipDistance: {NearCameraClipDistance}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OcclusionGeometryClipEnabled: {OcclusionGeometryClipEnabled}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OcclusionGeometryClipSettings: {{ \n{OcclusionGeometryClipSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Settings_1 (5 fields) */
public record class Settings_1 (
    float fadeDuration,
    float fadeInDelay,
    bool targetInsideBoxOccluded,
    Vector2f defaultTargetSize,
    DynamicTargetSettings dynamicTargetSettings) : IUnityStructure
{
    public static Settings_1 Read(EndianBinaryReader reader)
    {
        float fadeDuration_ = reader.ReadF32();
        float fadeInDelay_ = reader.ReadF32();
        bool targetInsideBoxOccluded_ = reader.ReadBool();
        reader.AlignTo(4); /* targetInsideBoxOccluded */
        Vector2f defaultTargetSize_ = Vector2f.Read(reader);
        reader.AlignTo(4); /* defaultTargetSize */
        DynamicTargetSettings dynamicTargetSettings_ = DynamicTargetSettings.Read(reader);
        reader.AlignTo(4); /* dynamicTargetSettings */
        
        return new(fadeDuration_,
            fadeInDelay_,
            targetInsideBoxOccluded_,
            defaultTargetSize_,
            dynamicTargetSettings_);
    }

    public override string ToString() => $"Settings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fadeDuration: {fadeDuration}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fadeInDelay: {fadeInDelay}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}targetInsideBoxOccluded: {targetInsideBoxOccluded}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defaultTargetSize: {{ x: {defaultTargetSize.x}, y: {defaultTargetSize.y} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}dynamicTargetSettings: {{ \n{dynamicTargetSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DynamicTargetSettings (4 fields) */
public record class DynamicTargetSettings (
    int mode,
    Vector2f targetSize,
    float distanceMin,
    float distanceMax) : IUnityStructure
{
    public static DynamicTargetSettings Read(EndianBinaryReader reader)
    {
        int mode_ = reader.ReadS32();
        Vector2f targetSize_ = Vector2f.Read(reader);
        reader.AlignTo(4); /* targetSize */
        float distanceMin_ = reader.ReadF32();
        float distanceMax_ = reader.ReadF32();
        
        return new(mode_,
            targetSize_,
            distanceMin_,
            distanceMax_);
    }

    public override string ToString() => $"DynamicTargetSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}targetSize: {{ x: {targetSize.x}, y: {targetSize.y} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}distanceMin: {distanceMin}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}distanceMax: {distanceMax}");
    }
}

/* $ObjectIntersectionSettingsView (6 fields) */
public record class ObjectIntersectionSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectIntersectionSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectIntersectionSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $Vector4Parameter (2 fields) */
public record class Vector4Parameter (
    byte m_OverrideState,
    Vector4f m_Value) : IUnityStructure
{
    public static Vector4Parameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        Vector4f m_Value_ = Vector4f.Read(reader);
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"Vector4Parameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y}, z: {m_Value.z}, w: {m_Value.w} }}\n");
    }
}

/* $AkSwitchReference (2 fields) */
public record class AkSwitchReference (
    AsciiString Value,
    AsciiString Group) : IUnityStructure
{
    public static AkSwitchReference Read(EndianBinaryReader reader)
    {
        AsciiString Value_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Value */
        AsciiString Group_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Group */
        
        return new(Value_,
            Group_);
    }

    public override string ToString() => $"AkSwitchReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Value: \"{Value}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Group: \"{Group}\"");
    }
}

/* $VirtualListLayoutElementSettings (6 fields) */
public record class VirtualListLayoutElementSettings (
    int m_OverrideType,
    VirtualListLayoutPadding m_Padding,
    byte m_OverrideWidth,
    float m_Width,
    byte m_OverrideHeight,
    float m_Height) : IUnityStructure
{
    public static VirtualListLayoutElementSettings Read(EndianBinaryReader reader)
    {
        int m_OverrideType_ = reader.ReadS32();
        VirtualListLayoutPadding m_Padding_ = VirtualListLayoutPadding.Read(reader);
        byte m_OverrideWidth_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideWidth */
        float m_Width_ = reader.ReadF32();
        byte m_OverrideHeight_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideHeight */
        float m_Height_ = reader.ReadF32();
        
        return new(m_OverrideType_,
            m_Padding_,
            m_OverrideWidth_,
            m_Width_,
            m_OverrideHeight_,
            m_Height_);
    }

    public override string ToString() => $"VirtualListLayoutElementSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideType: {m_OverrideType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Padding: {{ Top: {m_Padding.Top}, Bottom: {m_Padding.Bottom}, Left: {m_Padding.Left}, Right: {m_Padding.Right} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideWidth: {m_OverrideWidth}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Width: {m_Width}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideHeight: {m_OverrideHeight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Height: {m_Height}");
    }
}

/* $VirtualListLayoutPadding (4 fields) */
public readonly record struct VirtualListLayoutPadding (
    float Top,
    float Bottom,
    float Left,
    float Right) : IUnityStructure
{
    public static VirtualListLayoutPadding Read(EndianBinaryReader reader)
    {
        float Top_ = reader.ReadF32();
        float Bottom_ = reader.ReadF32();
        float Left_ = reader.ReadF32();
        float Right_ = reader.ReadF32();
        
        return new(Top_,
            Bottom_,
            Left_,
            Right_);
    }

    public override string ToString() => $"VirtualListLayoutPadding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Top: {Top}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Bottom: {Bottom}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Left: {Left}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Right: {Right}");
    }
}

/* $NavigationParameters (9 fields) */
public readonly record struct NavigationParameters (
    byte ConsiderHistory,
    float m_AngleWeight,
    float m_DistanceWeight,
    float m_NeighboursWeight,
    int ConsideredEntitiesByDistanceCount,
    float m_MaxAngleInRange,
    int m_DistanceFunction,
    int m_AngleFunction,
    float m_AxesAngleOffset) : IUnityStructure
{
    public static NavigationParameters Read(EndianBinaryReader reader)
    {
        byte ConsiderHistory_ = reader.ReadU8();
        reader.AlignTo(4); /* ConsiderHistory */
        float m_AngleWeight_ = reader.ReadF32();
        float m_DistanceWeight_ = reader.ReadF32();
        float m_NeighboursWeight_ = reader.ReadF32();
        int ConsideredEntitiesByDistanceCount_ = reader.ReadS32();
        float m_MaxAngleInRange_ = reader.ReadF32();
        int m_DistanceFunction_ = reader.ReadS32();
        int m_AngleFunction_ = reader.ReadS32();
        float m_AxesAngleOffset_ = reader.ReadF32();
        
        return new(ConsiderHistory_,
            m_AngleWeight_,
            m_DistanceWeight_,
            m_NeighboursWeight_,
            ConsideredEntitiesByDistanceCount_,
            m_MaxAngleInRange_,
            m_DistanceFunction_,
            m_AngleFunction_,
            m_AxesAngleOffset_);
    }

    public override string ToString() => $"NavigationParameters\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ConsiderHistory: {ConsiderHistory}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AngleWeight: {m_AngleWeight}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DistanceWeight: {m_DistanceWeight}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NeighboursWeight: {m_NeighboursWeight}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ConsideredEntitiesByDistanceCount: {ConsideredEntitiesByDistanceCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxAngleInRange: {m_MaxAngleInRange}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DistanceFunction: {m_DistanceFunction}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AngleFunction: {m_AngleFunction}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AxesAngleOffset: {m_AxesAngleOffset}");
    }
}

/* $NavigationBlockHighlight (2 fields) */
public record class NavigationBlockHighlight (
    int NavigationBlock,
    PPtr<RectTransform> HighlightContainer) : IUnityStructure
{
    public static NavigationBlockHighlight Read(EndianBinaryReader reader)
    {
        int NavigationBlock_ = reader.ReadS32();
        PPtr<RectTransform> HighlightContainer_ = PPtr<RectTransform>.Read(reader);
        
        return new(NavigationBlock_,
            HighlightContainer_);
    }

    public override string ToString() => $"NavigationBlockHighlight\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NavigationBlock: {NavigationBlock}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HighlightContainer: {HighlightContainer}");
    }
}

/* $Mirror (3 fields) */
public record class Mirror (
    Vector3f _planeNormal,
    float _planeDistanceFromOrigin,
    Vector3f _worldCenter) : IUnityStructure
{
    public static Mirror Read(EndianBinaryReader reader)
    {
        Vector3f _planeNormal_ = Vector3f.Read(reader);
        float _planeDistanceFromOrigin_ = reader.ReadF32();
        Vector3f _worldCenter_ = Vector3f.Read(reader);
        
        return new(_planeNormal_,
            _planeDistanceFromOrigin_,
            _worldCenter_);
    }

    public override string ToString() => $"Mirror\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_planeNormal: {{ x: {_planeNormal.x}, y: {_planeNormal.y}, z: {_planeNormal.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_planeDistanceFromOrigin: {_planeDistanceFromOrigin}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_worldCenter: {{ x: {_worldCenter.x}, y: {_worldCenter.y}, z: {_worldCenter.z} }}\n");
    }
}

/* $TransformMatrix (3 fields) */
public record class TransformMatrix (
    Vector3f _translation,
    Quaternionf _rotation,
    Vector3f _scale) : IUnityStructure
{
    public static TransformMatrix Read(EndianBinaryReader reader)
    {
        Vector3f _translation_ = Vector3f.Read(reader);
        Quaternionf _rotation_ = Quaternionf.Read(reader);
        Vector3f _scale_ = Vector3f.Read(reader);
        
        return new(_translation_,
            _rotation_,
            _scale_);
    }

    public override string ToString() => $"TransformMatrix\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_translation: {{ x: {_translation.x}, y: {_translation.y}, z: {_translation.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_rotation: {{ x: {_rotation.x}, y: {_rotation.y}, z: {_rotation.z}, w: {_rotation.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_scale: {{ x: {_scale.x}, y: {_scale.y}, z: {_scale.z} }}\n");
    }
}

/* $InteractableMirrorView (6 fields) */
public record class InteractableMirrorView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static InteractableMirrorView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"InteractableMirrorView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $BookEventCueStyle (6 fields) */
public record class BookEventCueStyle (
    int m_FontStyle,
    ColorRGBA_1 m_FontColor,
    float m_FontSize,
    float m_CharacterSpacing,
    float m_LineSpacing,
    RectOffset m_Margins) : IUnityStructure
{
    public static BookEventCueStyle Read(EndianBinaryReader reader)
    {
        int m_FontStyle_ = reader.ReadS32();
        ColorRGBA_1 m_FontColor_ = ColorRGBA_1.Read(reader);
        float m_FontSize_ = reader.ReadF32();
        float m_CharacterSpacing_ = reader.ReadF32();
        float m_LineSpacing_ = reader.ReadF32();
        RectOffset m_Margins_ = RectOffset.Read(reader);
        
        return new(m_FontStyle_,
            m_FontColor_,
            m_FontSize_,
            m_CharacterSpacing_,
            m_LineSpacing_,
            m_Margins_);
    }

    public override string ToString() => $"BookEventCueStyle\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FontStyle: {m_FontStyle}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_FontColor: {{ r: {m_FontColor.r}, g: {m_FontColor.g}, b: {m_FontColor.b}, a: {m_FontColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FontSize: {m_FontSize}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CharacterSpacing: {m_CharacterSpacing}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LineSpacing: {m_LineSpacing}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Margins: {{ m_Left: {m_Margins.m_Left}, m_Right: {m_Margins.m_Right}, m_Top: {m_Margins.m_Top}, m_Bottom: {m_Margins.m_Bottom} }}\n");
    }
}

/* $MapObjectForcedCoverSettings (2 fields) */
public record class MapObjectForcedCoverSettings (
    DestructionStageToCover[] DestructionStageToCovers,
    int CoverType) : IUnityStructure
{
    public static MapObjectForcedCoverSettings Read(EndianBinaryReader reader)
    {
        DestructionStageToCover[] DestructionStageToCovers_ = BuiltInArray<DestructionStageToCover>.Read(reader);
        int CoverType_ = reader.ReadS32();
        
        return new(DestructionStageToCovers_,
            CoverType_);
    }

    public override string ToString() => $"MapObjectForcedCoverSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DestructionStageToCovers[{DestructionStageToCovers.Length}] = {{");
        if (DestructionStageToCovers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (DestructionStageToCover _4 in DestructionStageToCovers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ DestructionStage: {_4.DestructionStage}, CoverType: {_4.CoverType} }}\n");
            ++_4i;
        }
        if (DestructionStageToCovers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverType: {CoverType}");
    }
}

/* $DestructionStageToCover (2 fields) */
public readonly record struct DestructionStageToCover (
    int DestructionStage,
    int CoverType) : IUnityStructure
{
    public static DestructionStageToCover Read(EndianBinaryReader reader)
    {
        int DestructionStage_ = reader.ReadS32();
        int CoverType_ = reader.ReadS32();
        
        return new(DestructionStage_,
            CoverType_);
    }

    public override string ToString() => $"DestructionStageToCover\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DestructionStage: {DestructionStage}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverType: {CoverType}");
    }
}

/* $RemapRecord (2 fields) */
public record class RemapRecord (
    int Tag,
    PPtr<Material> Material) : IUnityStructure
{
    public static RemapRecord Read(EndianBinaryReader reader)
    {
        int Tag_ = reader.ReadS32();
        PPtr<Material> Material_ = PPtr<Material>.Read(reader);
        
        return new(Tag_,
            Material_);
    }

    public override string ToString() => $"RemapRecord\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Tag: {Tag}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Material: {Material}");
    }
}

/* $DecorPaintObjectPlacementSettingsView (6 fields) */
public record class DecorPaintObjectPlacementSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static DecorPaintObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"DecorPaintObjectPlacementSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $MinFloatParameter (2 fields) */
public readonly record struct MinFloatParameter (
    byte m_OverrideState,
    float m_Value) : IUnityStructure
{
    public static MinFloatParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        float m_Value_ = reader.ReadF32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"MinFloatParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $InteractionBarkSettings (25 fields) */
public record class InteractionBarkSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection,
    PPtr<SharedStringAsset> Bark,
    byte BarkPlayVoiceOver,
    ActionsReference BarkActions,
    byte RunActionsOnce,
    byte ShowOnUser,
    ConditionsReference Condition) : IUnityStructure
{
    public static InteractionBarkSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        PPtr<SharedStringAsset> Bark_ = PPtr<SharedStringAsset>.Read(reader);
        byte BarkPlayVoiceOver_ = reader.ReadU8();
        reader.AlignTo(4); /* BarkPlayVoiceOver */
        ActionsReference BarkActions_ = ActionsReference.Read(reader);
        reader.AlignTo(4); /* BarkActions */
        byte RunActionsOnce_ = reader.ReadU8();
        reader.AlignTo(4); /* RunActionsOnce */
        byte ShowOnUser_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOnUser */
        ConditionsReference Condition_ = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* Condition */
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_,
            Bark_,
            BarkPlayVoiceOver_,
            BarkActions_,
            RunActionsOnce_,
            ShowOnUser_,
            Condition_);
    }

    public override string ToString() => $"InteractionBarkSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Bark: {Bark}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BarkPlayVoiceOver: {BarkPlayVoiceOver}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BarkActions: {{ \n{BarkActions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RunActionsOnce: {RunActionsOnce}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOnUser: {ShowOnUser}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Condition: {{ \n{Condition.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PageGenerator (4 fields) */
public readonly record struct PageGenerator (
    float HeightPage,
    float HeightHeader,
    float HeightDeveloperRow,
    float HeightBakerRow) : IUnityStructure
{
    public static PageGenerator Read(EndianBinaryReader reader)
    {
        float HeightPage_ = reader.ReadF32();
        float HeightHeader_ = reader.ReadF32();
        float HeightDeveloperRow_ = reader.ReadF32();
        float HeightBakerRow_ = reader.ReadF32();
        
        return new(HeightPage_,
            HeightHeader_,
            HeightDeveloperRow_,
            HeightBakerRow_);
    }

    public override string ToString() => $"PageGenerator\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HeightPage: {HeightPage}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HeightHeader: {HeightHeader}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HeightDeveloperRow: {HeightDeveloperRow}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HeightBakerRow: {HeightBakerRow}");
    }
}

/* $Entry_5 (4 fields) */
public record class Entry_5 (
    PPtr<GameObject> Root,
    float DelayFxVisualPrefab,
    PPtr<GameObject> FxVisualPrefabOverride,
    PPtr<GameObject> LocatorsObjectOverride) : IUnityStructure
{
    public static Entry_5 Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Root_ = PPtr<GameObject>.Read(reader);
        float DelayFxVisualPrefab_ = reader.ReadF32();
        PPtr<GameObject> FxVisualPrefabOverride_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> LocatorsObjectOverride_ = PPtr<GameObject>.Read(reader);
        
        return new(Root_,
            DelayFxVisualPrefab_,
            FxVisualPrefabOverride_,
            LocatorsObjectOverride_);
    }

    public override string ToString() => $"Entry_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Root: {Root}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DelayFxVisualPrefab: {DelayFxVisualPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FxVisualPrefabOverride: {FxVisualPrefabOverride}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LocatorsObjectOverride: {LocatorsObjectOverride}");
    }
}

/* $GlossaryEntry (3 fields) */
public record class GlossaryEntry (
    AsciiString Key,
    LocalizedString Name,
    LocalizedString Description) : IUnityStructure
{
    public static GlossaryEntry Read(EndianBinaryReader reader)
    {
        AsciiString Key_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Key */
        LocalizedString Name_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Name */
        LocalizedString Description_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        
        return new(Key_,
            Name_,
            Description_);
    }

    public override string ToString() => $"GlossaryEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Key: \"{Key}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Name: {{ \n{Name.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Description: {{ \n{Description.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StripeView (2 fields) */
public record class StripeView (
    PPtr<GameObject> Container,
    PPtr<TextMeshProUGUI> Acronym) : IUnityStructure
{
    public static StripeView Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Container_ = PPtr<GameObject>.Read(reader);
        PPtr<TextMeshProUGUI> Acronym_ = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(Container_,
            Acronym_);
    }

    public override string ToString() => $"StripeView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Container: {Container}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Acronym: {Acronym}");
    }
}

/* $CanvasTransformSettings (3 fields) */
public record class CanvasTransformSettings (
    Vector3f Rotation,
    Vector3f LocalPosition,
    Vector3f LocalScale) : IUnityStructure
{
    public static CanvasTransformSettings Read(EndianBinaryReader reader)
    {
        Vector3f Rotation_ = Vector3f.Read(reader);
        Vector3f LocalPosition_ = Vector3f.Read(reader);
        Vector3f LocalScale_ = Vector3f.Read(reader);
        
        return new(Rotation_,
            LocalPosition_,
            LocalScale_);
    }

    public override string ToString() => $"CanvasTransformSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rotation: {{ x: {Rotation.x}, y: {Rotation.y}, z: {Rotation.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LocalPosition: {{ x: {LocalPosition.x}, y: {LocalPosition.y}, z: {LocalPosition.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LocalScale: {{ x: {LocalScale.x}, y: {LocalScale.y}, z: {LocalScale.z} }}\n");
    }
}

/* $TargetPingPositionPoint (2 fields) */
public record class TargetPingPositionPoint (
    PPtr<CanvasGroup> MainCanvasGroup,
    PPtr<Image>[] AdditionalImages) : IUnityStructure
{
    public static TargetPingPositionPoint Read(EndianBinaryReader reader)
    {
        PPtr<CanvasGroup> MainCanvasGroup_ = PPtr<CanvasGroup>.Read(reader);
        PPtr<Image>[] AdditionalImages_ = BuiltInArray<PPtr<Image>>.Read(reader);
        
        return new(MainCanvasGroup_,
            AdditionalImages_);
    }

    public override string ToString() => $"TargetPingPositionPoint\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MainCanvasGroup: {MainCanvasGroup}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AdditionalImages[{AdditionalImages.Length}] = {{");
        if (AdditionalImages.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Image> _4 in AdditionalImages)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (AdditionalImages.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CategoryPlatformHints (3 fields) */
public record class CategoryPlatformHints (
    LocalizedString[] GlobalHints,
    LocalizedString[] PCHints,
    LocalizedString[] ConsoleHints) : IUnityStructure
{
    public static CategoryPlatformHints Read(EndianBinaryReader reader)
    {
        LocalizedString[] GlobalHints_ = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* GlobalHints */
        LocalizedString[] PCHints_ = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* PCHints */
        LocalizedString[] ConsoleHints_ = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* ConsoleHints */
        
        return new(GlobalHints_,
            PCHints_,
            ConsoleHints_);
    }

    public override string ToString() => $"CategoryPlatformHints\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GlobalHints[{GlobalHints.Length}] = {{");
        if (GlobalHints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LocalizedString _4 in GlobalHints)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (GlobalHints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PCHints[{PCHints.Length}] = {{");
        if (PCHints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LocalizedString _4 in PCHints)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PCHints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleHints[{ConsoleHints.Length}] = {{");
        if (ConsoleHints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LocalizedString _4 in ConsoleHints)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (ConsoleHints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $DecoratorEntry (5 fields) */
public record class DecoratorEntry (
    PPtr<GameObject> Prefab,
    AsciiString BoneName,
    Vector3f Position,
    Vector3f Rotation,
    Vector3f Scale) : IUnityStructure
{
    public static DecoratorEntry Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Prefab_ = PPtr<GameObject>.Read(reader);
        AsciiString BoneName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* BoneName */
        Vector3f Position_ = Vector3f.Read(reader);
        Vector3f Rotation_ = Vector3f.Read(reader);
        Vector3f Scale_ = Vector3f.Read(reader);
        
        return new(Prefab_,
            BoneName_,
            Position_,
            Rotation_,
            Scale_);
    }

    public override string ToString() => $"DecoratorEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Prefab: {Prefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BoneName: \"{BoneName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Position: {{ x: {Position.x}, y: {Position.y}, z: {Position.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rotation: {{ x: {Rotation.x}, y: {Rotation.y}, z: {Rotation.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Scale: {{ x: {Scale.x}, y: {Scale.y}, z: {Scale.z} }}\n");
    }
}

/* $Entry_1 (2 fields) */
public record class Entry_1 (
    int eventID,
    TriggerEvent callback) : IUnityStructure
{
    public static Entry_1 Read(EndianBinaryReader reader)
    {
        int eventID_ = reader.ReadS32();
        TriggerEvent callback_ = TriggerEvent.Read(reader);
        reader.AlignTo(4); /* callback */
        
        return new(eventID_,
            callback_);
    }

    public override string ToString() => $"Entry_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}eventID: {eventID}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}callback: {{ \n{callback.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TriggerEvent (1 fields) */
public record class TriggerEvent (
    PersistentCallGroup_1 m_PersistentCalls) : IUnityStructure
{
    public static TriggerEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup_1 m_PersistentCalls_ = PersistentCallGroup_1.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"TriggerEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PersistentCallGroup_1 (1 fields) */
public record class PersistentCallGroup_1 (
    PersistentCall_1[] m_Calls) : IUnityStructure
{
    public static PersistentCallGroup_1 Read(EndianBinaryReader reader)
    {
        PersistentCall_1[] m_Calls_ = BuiltInArray<PersistentCall_1>.Read(reader);
        reader.AlignTo(4); /* m_Calls */
        
        return new(m_Calls_);
    }

    public override string ToString() => $"PersistentCallGroup_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Calls[{m_Calls.Length}] = {{");
        if (m_Calls.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PersistentCall_1 _4 in m_Calls)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Calls.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PersistentCall_1 (6 fields) */
public record class PersistentCall_1 (
    PPtr<Object> m_Target,
    AsciiString m_TargetAssemblyTypeName,
    AsciiString m_MethodName,
    int m_Mode,
    ArgumentCache_1 m_Arguments,
    int m_CallState) : IUnityStructure
{
    public static PersistentCall_1 Read(EndianBinaryReader reader)
    {
        PPtr<Object> m_Target_ = PPtr<Object>.Read(reader);
        AsciiString m_TargetAssemblyTypeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_TargetAssemblyTypeName */
        AsciiString m_MethodName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_MethodName */
        int m_Mode_ = reader.ReadS32();
        ArgumentCache_1 m_Arguments_ = ArgumentCache_1.Read(reader);
        reader.AlignTo(4); /* m_Arguments */
        int m_CallState_ = reader.ReadS32();
        
        return new(m_Target_,
            m_TargetAssemblyTypeName_,
            m_MethodName_,
            m_Mode_,
            m_Arguments_,
            m_CallState_);
    }

    public override string ToString() => $"PersistentCall_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Target: {m_Target}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetAssemblyTypeName: \"{m_TargetAssemblyTypeName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MethodName: \"{m_MethodName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Arguments: {{ \n{m_Arguments.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CallState: {m_CallState}");
    }
}

/* $ArgumentCache_1 (6 fields) */
public record class ArgumentCache_1 (
    PPtr<Object> m_ObjectArgument,
    AsciiString m_ObjectArgumentAssemblyTypeName,
    int m_IntArgument,
    float m_FloatArgument,
    AsciiString m_StringArgument,
    bool m_BoolArgument) : IUnityStructure
{
    public static ArgumentCache_1 Read(EndianBinaryReader reader)
    {
        PPtr<Object> m_ObjectArgument_ = PPtr<Object>.Read(reader);
        AsciiString m_ObjectArgumentAssemblyTypeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ObjectArgumentAssemblyTypeName */
        int m_IntArgument_ = reader.ReadS32();
        float m_FloatArgument_ = reader.ReadF32();
        AsciiString m_StringArgument_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StringArgument */
        bool m_BoolArgument_ = reader.ReadBool();
        reader.AlignTo(4); /* m_BoolArgument */
        
        return new(m_ObjectArgument_,
            m_ObjectArgumentAssemblyTypeName_,
            m_IntArgument_,
            m_FloatArgument_,
            m_StringArgument_,
            m_BoolArgument_);
    }

    public override string ToString() => $"ArgumentCache_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ObjectArgument: {m_ObjectArgument}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ObjectArgumentAssemblyTypeName: \"{m_ObjectArgumentAssemblyTypeName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IntArgument: {m_IntArgument}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FloatArgument: {m_FloatArgument}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StringArgument: \"{m_StringArgument}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoolArgument: {m_BoolArgument}");
    }
}

/* $ShaderResources_2 (4 fields) */
public record class ShaderResources_2 (
    PPtr<Shader> HighlighterShader,
    PPtr<Shader> BlurShader,
    PPtr<Shader> CompositeShader,
    PPtr<Shader> ParticlesShader) : IUnityStructure
{
    public static ShaderResources_2 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> HighlighterShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BlurShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CompositeShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ParticlesShader_ = PPtr<Shader>.Read(reader);
        
        return new(HighlighterShader_,
            BlurShader_,
            CompositeShader_,
            ParticlesShader_);
    }

    public override string ToString() => $"ShaderResources_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HighlighterShader: {HighlighterShader}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlurShader: {BlurShader}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CompositeShader: {CompositeShader}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticlesShader: {ParticlesShader}");
    }
}

/* $FXedPortrait (2 fields) */
public record class FXedPortrait (
    PPtr<Image> Portrait,
    PPtr<CanvasGroup> CanvasGroup) : IUnityStructure
{
    public static FXedPortrait Read(EndianBinaryReader reader)
    {
        PPtr<Image> Portrait_ = PPtr<Image>.Read(reader);
        PPtr<CanvasGroup> CanvasGroup_ = PPtr<CanvasGroup>.Read(reader);
        
        return new(Portrait_,
            CanvasGroup_);
    }

    public override string ToString() => $"FXedPortrait\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Portrait: {Portrait}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CanvasGroup: {CanvasGroup}");
    }
}

/* $ClipsPlaySimpleAnim (2 fields) */
public record class ClipsPlaySimpleAnim (
    PPtr<AnimationClip> Clip,
    float Speed) : IUnityStructure
{
    public static ClipsPlaySimpleAnim Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClip> Clip_ = PPtr<AnimationClip>.Read(reader);
        float Speed_ = reader.ReadF32();
        
        return new(Clip_,
            Speed_);
    }

    public override string ToString() => $"ClipsPlaySimpleAnim\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Clip: {Clip}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Speed: {Speed}");
    }
}

/* $ClipsPlaySpecialAnim (3 fields) */
public record class ClipsPlaySpecialAnim (
    PPtr<AnimationClip> Clip,
    AsciiString Trigger,
    float Speed) : IUnityStructure
{
    public static ClipsPlaySpecialAnim Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClip> Clip_ = PPtr<AnimationClip>.Read(reader);
        AsciiString Trigger_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Trigger */
        float Speed_ = reader.ReadF32();
        
        return new(Clip_,
            Trigger_,
            Speed_);
    }

    public override string ToString() => $"ClipsPlaySpecialAnim\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Clip: {Clip}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trigger: \"{Trigger}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Speed: {Speed}");
    }
}

/* $RadialBlurSettings (10 fields) */
public record class RadialBlurSettings (
    float Delay,
    float Lifetime,
    AnimationCurve StrengthOverLifetime,
    AnimationCurve WidthOverLifetime,
    AnimationCurve StrengthOverDistance,
    AnimationCurve WidthOverDistance,
    float StrengthMultiplier,
    float WidthMultiplier,
    byte LoopAnimation,
    int Layer) : IUnityStructure
{
    public static RadialBlurSettings Read(EndianBinaryReader reader)
    {
        float Delay_ = reader.ReadF32();
        float Lifetime_ = reader.ReadF32();
        AnimationCurve StrengthOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* StrengthOverLifetime */
        AnimationCurve WidthOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* WidthOverLifetime */
        AnimationCurve StrengthOverDistance_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* StrengthOverDistance */
        AnimationCurve WidthOverDistance_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* WidthOverDistance */
        float StrengthMultiplier_ = reader.ReadF32();
        float WidthMultiplier_ = reader.ReadF32();
        byte LoopAnimation_ = reader.ReadU8();
        reader.AlignTo(4); /* LoopAnimation */
        int Layer_ = reader.ReadS32();
        
        return new(Delay_,
            Lifetime_,
            StrengthOverLifetime_,
            WidthOverLifetime_,
            StrengthOverDistance_,
            WidthOverDistance_,
            StrengthMultiplier_,
            WidthMultiplier_,
            LoopAnimation_,
            Layer_);
    }

    public override string ToString() => $"RadialBlurSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StrengthOverLifetime: {{ \n{StrengthOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WidthOverLifetime: {{ \n{WidthOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StrengthOverDistance: {{ \n{StrengthOverDistance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WidthOverDistance: {{ \n{WidthOverDistance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StrengthMultiplier: {StrengthMultiplier}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WidthMultiplier: {WidthMultiplier}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopAnimation: {LoopAnimation}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Layer: {Layer}");
    }
}

/* $AnimationEntry (3 fields) */
public record class AnimationEntry (
    PPtr<AnimationClipWrapper> StunnedLoopWrapper,
    PPtr<AnimationClipWrapper> ExitStunWrapper,
    int Style) : IUnityStructure
{
    public static AnimationEntry Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> StunnedLoopWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> ExitStunWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        int Style_ = reader.ReadS32();
        
        return new(StunnedLoopWrapper_,
            ExitStunWrapper_,
            Style_);
    }

    public override string ToString() => $"AnimationEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StunnedLoopWrapper: {StunnedLoopWrapper}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ExitStunWrapper: {ExitStunWrapper}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }
}

/* $RangeSettings (6 fields) */
public record class RangeSettings (
    PPtr<AnimationClipWrapper> m_ClipOneCell,
    PPtr<AnimationClipWrapper> m_ClipTwoCell,
    PPtr<AnimationClipWrapper> m_ClipThreeCell,
    PPtr<AnimationClipWrapper> m_ClipFourCell,
    PPtr<AnimationClipWrapper> m_ClipFiveCell,
    PPtr<AnimationClipWrapper> m_StandUp) : IUnityStructure
{
    public static RangeSettings Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> m_ClipOneCell_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_ClipTwoCell_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_ClipThreeCell_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_ClipFourCell_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_ClipFiveCell_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_StandUp_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(m_ClipOneCell_,
            m_ClipTwoCell_,
            m_ClipThreeCell_,
            m_ClipFourCell_,
            m_ClipFiveCell_,
            m_StandUp_);
    }

    public override string ToString() => $"RangeSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipOneCell: {m_ClipOneCell}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipTwoCell: {m_ClipTwoCell}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipThreeCell: {m_ClipThreeCell}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipFourCell: {m_ClipFourCell}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipFiveCell: {m_ClipFiveCell}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StandUp: {m_StandUp}");
    }
}

/* $SettingsViews_3 (12 fields) */
public record class SettingsViews_3 (
    PPtr<SettingsEntityHeaderView> m_SettingsEntityHeaderViewPrefab,
    PPtr<SettingsEntityBoolPCView> m_SettingsEntityBoolViewPrefab,
    PPtr<SettingsEntityDropdownPCView> m_SettingsEntityDropdownViewPrefab,
    PPtr<SettingsEntitySliderPCView> m_SettingsEntitySliderViewPrefab,
    PPtr<SettingsEntityDropdownGameDifficultyPCView> m_SettingsEntityDropdownGameDifficultyViewPrefab,
    PPtr<SettingsEntitySliderGammaCorrectionPCView> m_SettingsEntitySliderGammaCorrectionViewPrefab,
    PPtr<SettingsEntityStatisticsOptOutPCView> m_SettingsEntityStatisticsOptOutViewPrefab,
    PPtr<SettingEntityKeyBindingPCView> m_SettingEntityKeyBindingViewPrefab,
    PPtr<SettingsEntityDisplayImagesPCView> m_SettingEntityDisplayImagesViewPrefab,
    PPtr<SettingsEntityAccessibilityImagePCView> m_SettingEntityAccessibilityImageViewPrefab,
    PPtr<SettingsEntitySliderFontSizePCView> m_SettingEntityFontSizeViewPrefab,
    PPtr<SettingsEntityBoolOnlyOneSavePCView> m_SettingsEntityBoolOnlyOneSaveViewPrefab) : IUnityStructure
{
    public static SettingsViews_3 Read(EndianBinaryReader reader)
    {
        PPtr<SettingsEntityHeaderView> m_SettingsEntityHeaderViewPrefab_ = PPtr<SettingsEntityHeaderView>.Read(reader);
        PPtr<SettingsEntityBoolPCView> m_SettingsEntityBoolViewPrefab_ = PPtr<SettingsEntityBoolPCView>.Read(reader);
        PPtr<SettingsEntityDropdownPCView> m_SettingsEntityDropdownViewPrefab_ = PPtr<SettingsEntityDropdownPCView>.Read(reader);
        PPtr<SettingsEntitySliderPCView> m_SettingsEntitySliderViewPrefab_ = PPtr<SettingsEntitySliderPCView>.Read(reader);
        PPtr<SettingsEntityDropdownGameDifficultyPCView> m_SettingsEntityDropdownGameDifficultyViewPrefab_ = PPtr<SettingsEntityDropdownGameDifficultyPCView>.Read(reader);
        PPtr<SettingsEntitySliderGammaCorrectionPCView> m_SettingsEntitySliderGammaCorrectionViewPrefab_ = PPtr<SettingsEntitySliderGammaCorrectionPCView>.Read(reader);
        PPtr<SettingsEntityStatisticsOptOutPCView> m_SettingsEntityStatisticsOptOutViewPrefab_ = PPtr<SettingsEntityStatisticsOptOutPCView>.Read(reader);
        PPtr<SettingEntityKeyBindingPCView> m_SettingEntityKeyBindingViewPrefab_ = PPtr<SettingEntityKeyBindingPCView>.Read(reader);
        PPtr<SettingsEntityDisplayImagesPCView> m_SettingEntityDisplayImagesViewPrefab_ = PPtr<SettingsEntityDisplayImagesPCView>.Read(reader);
        PPtr<SettingsEntityAccessibilityImagePCView> m_SettingEntityAccessibilityImageViewPrefab_ = PPtr<SettingsEntityAccessibilityImagePCView>.Read(reader);
        PPtr<SettingsEntitySliderFontSizePCView> m_SettingEntityFontSizeViewPrefab_ = PPtr<SettingsEntitySliderFontSizePCView>.Read(reader);
        PPtr<SettingsEntityBoolOnlyOneSavePCView> m_SettingsEntityBoolOnlyOneSaveViewPrefab_ = PPtr<SettingsEntityBoolOnlyOneSavePCView>.Read(reader);
        
        return new(m_SettingsEntityHeaderViewPrefab_,
            m_SettingsEntityBoolViewPrefab_,
            m_SettingsEntityDropdownViewPrefab_,
            m_SettingsEntitySliderViewPrefab_,
            m_SettingsEntityDropdownGameDifficultyViewPrefab_,
            m_SettingsEntitySliderGammaCorrectionViewPrefab_,
            m_SettingsEntityStatisticsOptOutViewPrefab_,
            m_SettingEntityKeyBindingViewPrefab_,
            m_SettingEntityDisplayImagesViewPrefab_,
            m_SettingEntityAccessibilityImageViewPrefab_,
            m_SettingEntityFontSizeViewPrefab_,
            m_SettingsEntityBoolOnlyOneSaveViewPrefab_);
    }

    public override string ToString() => $"SettingsViews_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityHeaderViewPrefab: {m_SettingsEntityHeaderViewPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolViewPrefab: {m_SettingsEntityBoolViewPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownViewPrefab: {m_SettingsEntityDropdownViewPrefab}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntitySliderViewPrefab: {m_SettingsEntitySliderViewPrefab}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownGameDifficultyViewPrefab: {m_SettingsEntityDropdownGameDifficultyViewPrefab}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntitySliderGammaCorrectionViewPrefab: {m_SettingsEntitySliderGammaCorrectionViewPrefab}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityStatisticsOptOutViewPrefab: {m_SettingsEntityStatisticsOptOutViewPrefab}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityKeyBindingViewPrefab: {m_SettingEntityKeyBindingViewPrefab}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityDisplayImagesViewPrefab: {m_SettingEntityDisplayImagesViewPrefab}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityAccessibilityImageViewPrefab: {m_SettingEntityAccessibilityImageViewPrefab}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingEntityFontSizeViewPrefab: {m_SettingEntityFontSizeViewPrefab}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolOnlyOneSaveViewPrefab: {m_SettingsEntityBoolOnlyOneSaveViewPrefab}");
    }
}

/* $UIDestroyViewLink`2 (2 fields) */
public record class UIDestroyViewLink_2 (
    AsciiString AssetId,
    PPtr<Transform> Target) : IUnityStructure
{
    public static UIDestroyViewLink_2 Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        PPtr<Transform> Target_ = PPtr<Transform>.Read(reader);
        
        return new(AssetId_,
            Target_);
    }

    public override string ToString() => $"UIDestroyViewLink`2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Target: {Target}");
    }
}

/* $Bone (5 fields) */
public record class Bone (
    AsciiString Name,
    Vector3f Scale,
    Vector3f Offset,
    byte ApplyOffset,
    PPtr<EquipmentEntity>[] IgnoreIfCharacterContainsEE) : IUnityStructure
{
    public static Bone Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        Vector3f Scale_ = Vector3f.Read(reader);
        Vector3f Offset_ = Vector3f.Read(reader);
        byte ApplyOffset_ = reader.ReadU8();
        reader.AlignTo(4); /* ApplyOffset */
        PPtr<EquipmentEntity>[] IgnoreIfCharacterContainsEE_ = BuiltInArray<PPtr<EquipmentEntity>>.Read(reader);
        
        return new(Name_,
            Scale_,
            Offset_,
            ApplyOffset_,
            IgnoreIfCharacterContainsEE_);
    }

    public override string ToString() => $"Bone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Scale: {{ x: {Scale.x}, y: {Scale.y}, z: {Scale.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Offset: {{ x: {Offset.x}, y: {Offset.y}, z: {Offset.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ApplyOffset: {ApplyOffset}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IgnoreIfCharacterContainsEE[{IgnoreIfCharacterContainsEE.Length}] = {{");
        if (IgnoreIfCharacterContainsEE.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<EquipmentEntity> _4 in IgnoreIfCharacterContainsEE)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (IgnoreIfCharacterContainsEE.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $BodyPart (4 fields) */
public record class BodyPart (
    long m_Type,
    PPtr<GameObject> RendererPrefab,
    PPtr<Material> Material,
    CharacterTextureDescription[] Textures) : IUnityStructure
{
    public static BodyPart Read(EndianBinaryReader reader)
    {
        long m_Type_ = reader.ReadS64();
        PPtr<GameObject> RendererPrefab_ = PPtr<GameObject>.Read(reader);
        PPtr<Material> Material_ = PPtr<Material>.Read(reader);
        CharacterTextureDescription[] Textures_ = BuiltInArray<CharacterTextureDescription>.Read(reader);
        reader.AlignTo(4); /* Textures */
        
        return new(m_Type_,
            RendererPrefab_,
            Material_,
            Textures_);
    }

    public override string ToString() => $"BodyPart\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RendererPrefab: {RendererPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Material: {Material}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Textures[{Textures.Length}] = {{");
        if (Textures.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CharacterTextureDescription _4 in Textures)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Textures.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CharacterTextureDescription (18 fields) */
public record class CharacterTextureDescription (
    PPtr<Texture2D> ActiveTexture,
    PPtr<Texture2D> DiffuseTexture,
    PPtr<Texture2D> NormalTexture,
    PPtr<Texture2D> MaskTexture,
    PPtr<Texture2D> RampShadowTexture,
    PPtr<Texture2D> DefaultMask1,
    PPtr<Texture2D> DefaultMask2,
    byte DiffuseActive,
    byte NormalActive,
    byte MaskActive,
    byte RampShadowActive,
    byte UseRamp1Mask,
    byte UseRamp2Mask,
    byte UseDefaultMask1,
    byte UseDefaultMask2,
    byte UseShadowMask,
    RampMaskDescription Ramps,
    int Channel) : IUnityStructure
{
    public static CharacterTextureDescription Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> ActiveTexture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> DiffuseTexture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> NormalTexture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> MaskTexture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> RampShadowTexture_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> DefaultMask1_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> DefaultMask2_ = PPtr<Texture2D>.Read(reader);
        byte DiffuseActive_ = reader.ReadU8();
        reader.AlignTo(4); /* DiffuseActive */
        byte NormalActive_ = reader.ReadU8();
        reader.AlignTo(4); /* NormalActive */
        byte MaskActive_ = reader.ReadU8();
        reader.AlignTo(4); /* MaskActive */
        byte RampShadowActive_ = reader.ReadU8();
        reader.AlignTo(4); /* RampShadowActive */
        byte UseRamp1Mask_ = reader.ReadU8();
        reader.AlignTo(4); /* UseRamp1Mask */
        byte UseRamp2Mask_ = reader.ReadU8();
        reader.AlignTo(4); /* UseRamp2Mask */
        byte UseDefaultMask1_ = reader.ReadU8();
        reader.AlignTo(4); /* UseDefaultMask1 */
        byte UseDefaultMask2_ = reader.ReadU8();
        reader.AlignTo(4); /* UseDefaultMask2 */
        byte UseShadowMask_ = reader.ReadU8();
        reader.AlignTo(4); /* UseShadowMask */
        RampMaskDescription Ramps_ = RampMaskDescription.Read(reader);
        int Channel_ = reader.ReadS32();
        
        return new(ActiveTexture_,
            DiffuseTexture_,
            NormalTexture_,
            MaskTexture_,
            RampShadowTexture_,
            DefaultMask1_,
            DefaultMask2_,
            DiffuseActive_,
            NormalActive_,
            MaskActive_,
            RampShadowActive_,
            UseRamp1Mask_,
            UseRamp2Mask_,
            UseDefaultMask1_,
            UseDefaultMask2_,
            UseShadowMask_,
            Ramps_,
            Channel_);
    }

    public override string ToString() => $"CharacterTextureDescription\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActiveTexture: {ActiveTexture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DiffuseTexture: {DiffuseTexture}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NormalTexture: {NormalTexture}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaskTexture: {MaskTexture}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RampShadowTexture: {RampShadowTexture}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DefaultMask1: {DefaultMask1}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DefaultMask2: {DefaultMask2}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DiffuseActive: {DiffuseActive}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NormalActive: {NormalActive}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaskActive: {MaskActive}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RampShadowActive: {RampShadowActive}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseRamp1Mask: {UseRamp1Mask}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseRamp2Mask: {UseRamp2Mask}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseDefaultMask1: {UseDefaultMask1}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseDefaultMask2: {UseDefaultMask2}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseShadowMask: {UseShadowMask}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ramps: {{ \n{Ramps.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Channel: {Channel}");
    }
}

/* $RampMaskDescription (4 fields) */
public record class RampMaskDescription (
    PPtr<Texture2D> PrimaryMask,
    PPtr<Texture2D> PrimaryRamp,
    PPtr<Texture2D> SecondaryMask,
    PPtr<Texture2D> SecondaryRamp) : IUnityStructure
{
    public static RampMaskDescription Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> PrimaryMask_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> PrimaryRamp_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> SecondaryMask_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> SecondaryRamp_ = PPtr<Texture2D>.Read(reader);
        
        return new(PrimaryMask_,
            PrimaryRamp_,
            SecondaryMask_,
            SecondaryRamp_);
    }

    public override string ToString() => $"RampMaskDescription\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrimaryMask: {PrimaryMask}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrimaryRamp: {PrimaryRamp}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondaryMask: {SecondaryMask}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondaryRamp: {SecondaryRamp}");
    }
}

/* $OutfitPart (12 fields) */
public record class OutfitPart (
    PPtr<GameObject> m_Prefab,
    PPtr<Material> m_Material,
    PPtr<Material> tempMaterial,
    Vector3f m_Position,
    Vector3f m_Rotation,
    Vector3f m_Scale,
    PPtr<Texture2D> ColorMask,
    AsciiString m_BoneName,
    byte m_StaysInPeacefulMode,
    byte m_OnlyInDollRoom,
    int m_Special,
    long OutfitBodyPart) : IUnityStructure
{
    public static OutfitPart Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> m_Prefab_ = PPtr<GameObject>.Read(reader);
        PPtr<Material> m_Material_ = PPtr<Material>.Read(reader);
        PPtr<Material> tempMaterial_ = PPtr<Material>.Read(reader);
        Vector3f m_Position_ = Vector3f.Read(reader);
        Vector3f m_Rotation_ = Vector3f.Read(reader);
        Vector3f m_Scale_ = Vector3f.Read(reader);
        PPtr<Texture2D> ColorMask_ = PPtr<Texture2D>.Read(reader);
        AsciiString m_BoneName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_BoneName */
        byte m_StaysInPeacefulMode_ = reader.ReadU8();
        reader.AlignTo(4); /* m_StaysInPeacefulMode */
        byte m_OnlyInDollRoom_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OnlyInDollRoom */
        int m_Special_ = reader.ReadS32();
        long OutfitBodyPart_ = reader.ReadS64();
        
        return new(m_Prefab_,
            m_Material_,
            tempMaterial_,
            m_Position_,
            m_Rotation_,
            m_Scale_,
            ColorMask_,
            m_BoneName_,
            m_StaysInPeacefulMode_,
            m_OnlyInDollRoom_,
            m_Special_,
            OutfitBodyPart_);
    }

    public override string ToString() => $"OutfitPart\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Prefab: {m_Prefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Material: {m_Material}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tempMaterial: {tempMaterial}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Position: {{ x: {m_Position.x}, y: {m_Position.y}, z: {m_Position.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Rotation: {{ x: {m_Rotation.x}, y: {m_Rotation.y}, z: {m_Rotation.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Scale: {{ x: {m_Scale.x}, y: {m_Scale.y}, z: {m_Scale.z} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ColorMask: {ColorMask}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoneName: \"{m_BoneName}\"");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StaysInPeacefulMode: {m_StaysInPeacefulMode}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OnlyInDollRoom: {m_OnlyInDollRoom}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Special: {m_Special}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutfitBodyPart: {OutfitBodyPart}");
    }
}

/* $LineOfSightColor (3 fields) */
public record class LineOfSightColor (
    float HitChance,
    Gradient_1 Gradient,
    ColorRGBA_1 Color) : IUnityStructure
{
    public static LineOfSightColor Read(EndianBinaryReader reader)
    {
        float HitChance_ = reader.ReadF32();
        Gradient_1 Gradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* Gradient */
        ColorRGBA_1 Color_ = ColorRGBA_1.Read(reader);
        
        return new(HitChance_,
            Gradient_,
            Color_);
    }

    public override string ToString() => $"LineOfSightColor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HitChance: {HitChance}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Gradient: {{ \n{Gradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ r: {Color.r}, g: {Color.g}, b: {Color.b}, a: {Color.a} }}\n");
    }
}

/* $BlockObjectPlacementSettingsView (6 fields) */
public record class BlockObjectPlacementSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static BlockObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"BlockObjectPlacementSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $UserControlledValues (21 fields) */
public readonly record struct UserControlledValues (
    byte VSyncMode,
    byte FrameRateLimitEnabled,
    byte FrameRateLimit,
    byte ShadowsQuality,
    byte TexturesQuality,
    byte DepthOfField,
    byte Bloom,
    byte SSAOQuality,
    byte SSRQuality,
    byte AntialiasingMode,
    byte AntialiasingQuality,
    byte FootprintsMode,
    byte FsrMode,
    byte FsrSharpness,
    byte VolumetricLightingQuality,
    byte ParticleSystemsLightingEnabled,
    byte ParticleSystemsShadowsEnabled,
    byte FilmGrainEnabled,
    byte UIFrequentTimerInterval,
    byte UIInfrequentTimerInterval,
    byte CrowdQuality) : IUnityStructure
{
    public static UserControlledValues Read(EndianBinaryReader reader)
    {
        byte VSyncMode_ = reader.ReadU8();
        reader.AlignTo(4); /* VSyncMode */
        byte FrameRateLimitEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* FrameRateLimitEnabled */
        byte FrameRateLimit_ = reader.ReadU8();
        reader.AlignTo(4); /* FrameRateLimit */
        byte ShadowsQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* ShadowsQuality */
        byte TexturesQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* TexturesQuality */
        byte DepthOfField_ = reader.ReadU8();
        reader.AlignTo(4); /* DepthOfField */
        byte Bloom_ = reader.ReadU8();
        reader.AlignTo(4); /* Bloom */
        byte SSAOQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* SSAOQuality */
        byte SSRQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* SSRQuality */
        byte AntialiasingMode_ = reader.ReadU8();
        reader.AlignTo(4); /* AntialiasingMode */
        byte AntialiasingQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* AntialiasingQuality */
        byte FootprintsMode_ = reader.ReadU8();
        reader.AlignTo(4); /* FootprintsMode */
        byte FsrMode_ = reader.ReadU8();
        reader.AlignTo(4); /* FsrMode */
        byte FsrSharpness_ = reader.ReadU8();
        reader.AlignTo(4); /* FsrSharpness */
        byte VolumetricLightingQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* VolumetricLightingQuality */
        byte ParticleSystemsLightingEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* ParticleSystemsLightingEnabled */
        byte ParticleSystemsShadowsEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* ParticleSystemsShadowsEnabled */
        byte FilmGrainEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* FilmGrainEnabled */
        byte UIFrequentTimerInterval_ = reader.ReadU8();
        reader.AlignTo(4); /* UIFrequentTimerInterval */
        byte UIInfrequentTimerInterval_ = reader.ReadU8();
        reader.AlignTo(4); /* UIInfrequentTimerInterval */
        byte CrowdQuality_ = reader.ReadU8();
        reader.AlignTo(4); /* CrowdQuality */
        
        return new(VSyncMode_,
            FrameRateLimitEnabled_,
            FrameRateLimit_,
            ShadowsQuality_,
            TexturesQuality_,
            DepthOfField_,
            Bloom_,
            SSAOQuality_,
            SSRQuality_,
            AntialiasingMode_,
            AntialiasingQuality_,
            FootprintsMode_,
            FsrMode_,
            FsrSharpness_,
            VolumetricLightingQuality_,
            ParticleSystemsLightingEnabled_,
            ParticleSystemsShadowsEnabled_,
            FilmGrainEnabled_,
            UIFrequentTimerInterval_,
            UIInfrequentTimerInterval_,
            CrowdQuality_);
    }

    public override string ToString() => $"UserControlledValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VSyncMode: {VSyncMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameRateLimitEnabled: {FrameRateLimitEnabled}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameRateLimit: {FrameRateLimit}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowsQuality: {ShadowsQuality}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TexturesQuality: {TexturesQuality}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthOfField: {DepthOfField}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Bloom: {Bloom}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SSAOQuality: {SSAOQuality}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SSRQuality: {SSRQuality}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AntialiasingMode: {AntialiasingMode}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AntialiasingQuality: {AntialiasingQuality}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FootprintsMode: {FootprintsMode}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrMode: {FsrMode}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrSharpness: {FsrSharpness}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumetricLightingQuality: {VolumetricLightingQuality}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSystemsLightingEnabled: {ParticleSystemsLightingEnabled}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSystemsShadowsEnabled: {ParticleSystemsShadowsEnabled}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FilmGrainEnabled: {FilmGrainEnabled}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIFrequentTimerInterval: {UIFrequentTimerInterval}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIInfrequentTimerInterval: {UIInfrequentTimerInterval}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CrowdQuality: {CrowdQuality}");
    }
}

/* $EntityNameFilterView (6 fields) */
public record class EntityNameFilterView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static EntityNameFilterView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"EntityNameFilterView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $TimelineClip (23 fields) */
public record class TimelineClip (
    int m_Version,
    double m_Start,
    double m_ClipIn,
    PPtr<Object> m_Asset,
    double m_Duration,
    double m_TimeScale,
    PPtr<TrackAsset> m_ParentTrack,
    double m_EaseInDuration,
    double m_EaseOutDuration,
    double m_BlendInDuration,
    double m_BlendOutDuration,
    AnimationCurve m_MixInCurve,
    AnimationCurve m_MixOutCurve,
    int m_BlendInCurveMode,
    int m_BlendOutCurveMode,
    AsciiString[] m_ExposedParameterNames,
    PPtr<AnimationClip> m_AnimationCurves,
    byte m_Recordable,
    int m_PostExtrapolationMode,
    int m_PreExtrapolationMode,
    double m_PostExtrapolationTime,
    double m_PreExtrapolationTime,
    AsciiString m_DisplayName) : IUnityStructure
{
    public static TimelineClip Read(EndianBinaryReader reader)
    {
        int m_Version_ = reader.ReadS32();
        double m_Start_ = reader.ReadF64();
        double m_ClipIn_ = reader.ReadF64();
        PPtr<Object> m_Asset_ = PPtr<Object>.Read(reader);
        double m_Duration_ = reader.ReadF64();
        double m_TimeScale_ = reader.ReadF64();
        PPtr<TrackAsset> m_ParentTrack_ = PPtr<TrackAsset>.Read(reader);
        double m_EaseInDuration_ = reader.ReadF64();
        double m_EaseOutDuration_ = reader.ReadF64();
        double m_BlendInDuration_ = reader.ReadF64();
        double m_BlendOutDuration_ = reader.ReadF64();
        AnimationCurve m_MixInCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_MixInCurve */
        AnimationCurve m_MixOutCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_MixOutCurve */
        int m_BlendInCurveMode_ = reader.ReadS32();
        int m_BlendOutCurveMode_ = reader.ReadS32();
        AsciiString[] m_ExposedParameterNames_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_ExposedParameterNames */
        PPtr<AnimationClip> m_AnimationCurves_ = PPtr<AnimationClip>.Read(reader);
        byte m_Recordable_ = reader.ReadU8();
        reader.AlignTo(4); /* m_Recordable */
        int m_PostExtrapolationMode_ = reader.ReadS32();
        int m_PreExtrapolationMode_ = reader.ReadS32();
        double m_PostExtrapolationTime_ = reader.ReadF64();
        double m_PreExtrapolationTime_ = reader.ReadF64();
        AsciiString m_DisplayName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_DisplayName */
        
        return new(m_Version_,
            m_Start_,
            m_ClipIn_,
            m_Asset_,
            m_Duration_,
            m_TimeScale_,
            m_ParentTrack_,
            m_EaseInDuration_,
            m_EaseOutDuration_,
            m_BlendInDuration_,
            m_BlendOutDuration_,
            m_MixInCurve_,
            m_MixOutCurve_,
            m_BlendInCurveMode_,
            m_BlendOutCurveMode_,
            m_ExposedParameterNames_,
            m_AnimationCurves_,
            m_Recordable_,
            m_PostExtrapolationMode_,
            m_PreExtrapolationMode_,
            m_PostExtrapolationTime_,
            m_PreExtrapolationTime_,
            m_DisplayName_);
    }

    public override string ToString() => $"TimelineClip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Version: {m_Version}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Start: {m_Start}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClipIn: {m_ClipIn}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Asset: {m_Asset}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TimeScale: {m_TimeScale}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ParentTrack: {m_ParentTrack}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EaseInDuration: {m_EaseInDuration}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EaseOutDuration: {m_EaseOutDuration}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendInDuration: {m_BlendInDuration}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendOutDuration: {m_BlendOutDuration}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MixInCurve: {{ \n{m_MixInCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MixOutCurve: {{ \n{m_MixOutCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendInCurveMode: {m_BlendInCurveMode}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BlendOutCurveMode: {m_BlendOutCurveMode}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ExposedParameterNames[{m_ExposedParameterNames.Length}] = {{");
        if (m_ExposedParameterNames.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in m_ExposedParameterNames)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (m_ExposedParameterNames.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AnimationCurves: {m_AnimationCurves}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Recordable: {m_Recordable}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PostExtrapolationMode: {m_PostExtrapolationMode}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreExtrapolationMode: {m_PreExtrapolationMode}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PostExtrapolationTime: {m_PostExtrapolationTime}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PreExtrapolationTime: {m_PreExtrapolationTime}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisplayName: \"{m_DisplayName}\"");
    }
}

/* $MarkerList (1 fields) */
public record class MarkerList (
    PPtr<ScriptableObject>[] m_Objects) : IUnityStructure
{
    public static MarkerList Read(EndianBinaryReader reader)
    {
        PPtr<ScriptableObject>[] m_Objects_ = BuiltInArray<PPtr<ScriptableObject>>.Read(reader);
        
        return new(m_Objects_);
    }

    public override string ToString() => $"MarkerList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Objects[{m_Objects.Length}] = {{");
        if (m_Objects.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ScriptableObject> _4 in m_Objects)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Objects.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Clip_1 (6 fields) */
public record class Clip_1 (
    AsciiString PropertyName,
    AnimationCurve Curve,
    float CurveDuration,
    float Duration,
    float Delay,
    int Priority) : IUnityStructure
{
    public static Clip_1 Read(EndianBinaryReader reader)
    {
        AsciiString PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* PropertyName */
        AnimationCurve Curve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* Curve */
        float CurveDuration_ = reader.ReadF32();
        float Duration_ = reader.ReadF32();
        float Delay_ = reader.ReadF32();
        int Priority_ = reader.ReadS32();
        
        return new(PropertyName_,
            Curve_,
            CurveDuration_,
            Duration_,
            Delay_,
            Priority_);
    }

    public override string ToString() => $"Clip_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PropertyName: \"{PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Curve: {{ \n{Curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CurveDuration: {CurveDuration}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Duration: {Duration}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Priority: {Priority}");
    }
}

/* $WarpPassageVisualParameters (8 fields) */
public record class WarpPassageVisualParameters (
    Gradient_1 SafeColor,
    Gradient_1 UnsafeColor,
    Gradient_1 DangerousColor,
    Gradient_1 DeadlyColor,
    PPtr<Material> SafeMaterial,
    PPtr<Material> UnsafeMaterial,
    PPtr<Material> DangerousMaterial,
    PPtr<Material> DeadlyMaterial) : IUnityStructure
{
    public static WarpPassageVisualParameters Read(EndianBinaryReader reader)
    {
        Gradient_1 SafeColor_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* SafeColor */
        Gradient_1 UnsafeColor_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* UnsafeColor */
        Gradient_1 DangerousColor_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* DangerousColor */
        Gradient_1 DeadlyColor_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* DeadlyColor */
        PPtr<Material> SafeMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> UnsafeMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> DangerousMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> DeadlyMaterial_ = PPtr<Material>.Read(reader);
        
        return new(SafeColor_,
            UnsafeColor_,
            DangerousColor_,
            DeadlyColor_,
            SafeMaterial_,
            UnsafeMaterial_,
            DangerousMaterial_,
            DeadlyMaterial_);
    }

    public override string ToString() => $"WarpPassageVisualParameters\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SafeColor: {{ \n{SafeColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnsafeColor: {{ \n{UnsafeColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DangerousColor: {{ \n{DangerousColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeadlyColor: {{ \n{DeadlyColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SafeMaterial: {SafeMaterial}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnsafeMaterial: {UnsafeMaterial}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DangerousMaterial: {DangerousMaterial}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DeadlyMaterial: {DeadlyMaterial}");
    }
}

/* $StarSystemPrefab (5 fields) */
public record class StarSystemPrefab (
    PPtr<GameObject> ShipMarker,
    PPtr<GameObject> UnvisitedAndNoPath,
    PPtr<GameObject> Unvisited,
    PPtr<GameObject> Visited,
    PPtr<GameObject> AllActivitiesFinished) : IUnityStructure
{
    public static StarSystemPrefab Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> ShipMarker_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> UnvisitedAndNoPath_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> Unvisited_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> Visited_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> AllActivitiesFinished_ = PPtr<GameObject>.Read(reader);
        
        return new(ShipMarker_,
            UnvisitedAndNoPath_,
            Unvisited_,
            Visited_,
            AllActivitiesFinished_);
    }

    public override string ToString() => $"StarSystemPrefab\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShipMarker: {ShipMarker}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnvisitedAndNoPath: {UnvisitedAndNoPath}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Unvisited: {Unvisited}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Visited: {Visited}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AllActivitiesFinished: {AllActivitiesFinished}");
    }
}

/* $BlueprintProjectileReference (1 fields) */
public record class BlueprintProjectileReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintProjectileReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintProjectileReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $RankEntrySelectionStateSprites (2 fields) */
public record class RankEntrySelectionStateSprites (
    int FeatureGroup,
    PPtr<Sprite> Icon) : IUnityStructure
{
    public static RankEntrySelectionStateSprites Read(EndianBinaryReader reader)
    {
        int FeatureGroup_ = reader.ReadS32();
        PPtr<Sprite> Icon_ = PPtr<Sprite>.Read(reader);
        
        return new(FeatureGroup_,
            Icon_);
    }

    public override string ToString() => $"RankEntrySelectionStateSprites\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FeatureGroup: {FeatureGroup}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }
}

/* $CutsceneReference (1 fields) */
public record class CutsceneReference (
    AsciiString guid) : IUnityStructure
{
    public static CutsceneReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"CutsceneReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $KeyRestrictionSettings (2 fields) */
public record class KeyRestrictionSettings (
    BlueprintItemReference m_Key,
    byte DontRemoveKey) : IUnityStructure
{
    public static KeyRestrictionSettings Read(EndianBinaryReader reader)
    {
        BlueprintItemReference m_Key_ = BlueprintItemReference.Read(reader);
        reader.AlignTo(4); /* m_Key */
        byte DontRemoveKey_ = reader.ReadU8();
        reader.AlignTo(4); /* DontRemoveKey */
        
        return new(m_Key_,
            DontRemoveKey_);
    }

    public override string ToString() => $"KeyRestrictionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Key: {{ \n{m_Key.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DontRemoveKey: {DontRemoveKey}");
    }
}

/* $BlueprintItemReference (1 fields) */
public record class BlueprintItemReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintItemReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintItemReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $XZGridRenderSettingsView (6 fields) */
public record class XZGridRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static XZGridRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"XZGridRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectRotationRandomizationSettingsView (6 fields) */
public record class ObjectRotationRandomizationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectRotationRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectRotationRandomizationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $PointMarkerRelationParams (8 fields) */
public record class PointMarkerRelationParams (
    byte IsUnit,
    int Relation,
    byte IsAnotherEntity,
    int EntityPointMarkObjectType,
    PPtr<Sprite> Icon,
    ColorRGBA IconColor,
    ColorRGBA FrameColor,
    float Scale) : IUnityStructure
{
    public static PointMarkerRelationParams Read(EndianBinaryReader reader)
    {
        byte IsUnit_ = reader.ReadU8();
        reader.AlignTo(4); /* IsUnit */
        int Relation_ = reader.ReadS32();
        byte IsAnotherEntity_ = reader.ReadU8();
        reader.AlignTo(4); /* IsAnotherEntity */
        int EntityPointMarkObjectType_ = reader.ReadS32();
        PPtr<Sprite> Icon_ = PPtr<Sprite>.Read(reader);
        ColorRGBA IconColor_ = ColorRGBA.Read(reader);
        ColorRGBA FrameColor_ = ColorRGBA.Read(reader);
        float Scale_ = reader.ReadF32();
        
        return new(IsUnit_,
            Relation_,
            IsAnotherEntity_,
            EntityPointMarkObjectType_,
            Icon_,
            IconColor_,
            FrameColor_,
            Scale_);
    }

    public override string ToString() => $"PointMarkerRelationParams\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsUnit: {IsUnit}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Relation: {Relation}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsAnotherEntity: {IsAnotherEntity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EntityPointMarkObjectType: {EntityPointMarkObjectType}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IconColor: {{ rgba: {IconColor.rgba} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FrameColor: {{ rgba: {FrameColor.rgba} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }
}

/* $ScrollRectEvent (1 fields) */
public record class ScrollRectEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ScrollRectEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ScrollRectEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectMouseRotationSettingsView (6 fields) */
public record class ObjectMouseRotationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectMouseRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectMouseRotationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $CinemachineBlendDefinition (3 fields) */
public record class CinemachineBlendDefinition (
    int m_Style,
    float m_Time,
    AnimationCurve m_CustomCurve) : IUnityStructure
{
    public static CinemachineBlendDefinition Read(EndianBinaryReader reader)
    {
        int m_Style_ = reader.ReadS32();
        float m_Time_ = reader.ReadF32();
        AnimationCurve m_CustomCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_CustomCurve */
        
        return new(m_Style_,
            m_Time_,
            m_CustomCurve_);
    }

    public override string ToString() => $"CinemachineBlendDefinition\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Style: {m_Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Time: {m_Time}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_CustomCurve: {{ \n{m_CustomCurve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BrainEvent (1 fields) */
public record class BrainEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static BrainEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"BrainEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BoneWeight (8 fields) */
public readonly record struct BoneWeight (
    float m_Weight0,
    float m_Weight1,
    float m_Weight2,
    float m_Weight3,
    int m_BoneIndex0,
    int m_BoneIndex1,
    int m_BoneIndex2,
    int m_BoneIndex3) : IUnityStructure
{
    public static BoneWeight Read(EndianBinaryReader reader)
    {
        float m_Weight0_ = reader.ReadF32();
        float m_Weight1_ = reader.ReadF32();
        float m_Weight2_ = reader.ReadF32();
        float m_Weight3_ = reader.ReadF32();
        int m_BoneIndex0_ = reader.ReadS32();
        int m_BoneIndex1_ = reader.ReadS32();
        int m_BoneIndex2_ = reader.ReadS32();
        int m_BoneIndex3_ = reader.ReadS32();
        
        return new(m_Weight0_,
            m_Weight1_,
            m_Weight2_,
            m_Weight3_,
            m_BoneIndex0_,
            m_BoneIndex1_,
            m_BoneIndex2_,
            m_BoneIndex3_);
    }

    public override string ToString() => $"BoneWeight\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight0: {m_Weight0}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight1: {m_Weight1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight2: {m_Weight2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight3: {m_Weight3}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoneIndex0: {m_BoneIndex0}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoneIndex1: {m_BoneIndex1}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoneIndex2: {m_BoneIndex2}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BoneIndex3: {m_BoneIndex3}");
    }
}

/* $ColonyProjectsRequirementElementVisual (7 fields) */
public record class ColonyProjectsRequirementElementVisual (
    int Type,
    PPtr<GameObject> Container,
    PPtr<Image> Icon,
    PPtr<TextMeshProUGUI> Description,
    byte HasCheckmark,
    byte HasCount,
    PPtr<TextMeshProUGUI> CountText) : IUnityStructure
{
    public static ColonyProjectsRequirementElementVisual Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<GameObject> Container_ = PPtr<GameObject>.Read(reader);
        PPtr<Image> Icon_ = PPtr<Image>.Read(reader);
        PPtr<TextMeshProUGUI> Description_ = PPtr<TextMeshProUGUI>.Read(reader);
        byte HasCheckmark_ = reader.ReadU8();
        reader.AlignTo(4); /* HasCheckmark */
        byte HasCount_ = reader.ReadU8();
        reader.AlignTo(4); /* HasCount */
        PPtr<TextMeshProUGUI> CountText_ = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(Type_,
            Container_,
            Icon_,
            Description_,
            HasCheckmark_,
            HasCount_,
            CountText_);
    }

    public override string ToString() => $"ColonyProjectsRequirementElementVisual\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Container: {Container}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Description: {Description}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasCheckmark: {HasCheckmark}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasCount: {HasCount}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CountText: {CountText}");
    }
}

/* $BlueprintProjectileTrajectoryReference (1 fields) */
public record class BlueprintProjectileTrajectoryReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintProjectileTrajectoryReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintProjectileTrajectoryReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $Vector2Parameter (2 fields) */
public record class Vector2Parameter (
    byte m_OverrideState,
    Vector2f m_Value) : IUnityStructure
{
    public static Vector2Parameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        Vector2f m_Value_ = Vector2f.Read(reader);
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"Vector2Parameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y} }}\n");
    }
}

/* $BoolParameter (2 fields) */
public readonly record struct BoolParameter (
    byte m_OverrideState,
    byte m_Value) : IUnityStructure
{
    public static BoolParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        byte m_Value_ = reader.ReadU8();
        reader.AlignTo(4); /* m_Value */
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"BoolParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $CombatTextCommonCreator (3 fields) */
public record class CombatTextCommonCreator (
    PPtr<RectTransform> ContainerRect,
    PPtr<CombatTextCommonView> m_PrefabView,
    byte m_HideDuplicateMessages) : IUnityStructure
{
    public static CombatTextCommonCreator Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> ContainerRect_ = PPtr<RectTransform>.Read(reader);
        PPtr<CombatTextCommonView> m_PrefabView_ = PPtr<CombatTextCommonView>.Read(reader);
        byte m_HideDuplicateMessages_ = reader.ReadU8();
        reader.AlignTo(4); /* m_HideDuplicateMessages */
        
        return new(ContainerRect_,
            m_PrefabView_,
            m_HideDuplicateMessages_);
    }

    public override string ToString() => $"CombatTextCommonCreator\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ContainerRect: {ContainerRect}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PrefabView: {m_PrefabView}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HideDuplicateMessages: {m_HideDuplicateMessages}");
    }
}

/* $CombatTextHitPointsCreator (2 fields) */
public record class CombatTextHitPointsCreator (
    PPtr<RectTransform> ContainerRect,
    PPtr<CombatTextHitPointsView> m_PrefabView) : IUnityStructure
{
    public static CombatTextHitPointsCreator Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> ContainerRect_ = PPtr<RectTransform>.Read(reader);
        PPtr<CombatTextHitPointsView> m_PrefabView_ = PPtr<CombatTextHitPointsView>.Read(reader);
        
        return new(ContainerRect_,
            m_PrefabView_);
    }

    public override string ToString() => $"CombatTextHitPointsCreator\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ContainerRect: {ContainerRect}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PrefabView: {m_PrefabView}");
    }
}

/* $XZGridDimensionSettings (2 fields) */
public record class XZGridDimensionSettings (
    int _dimensionType,
    XZGridFiniteDimensionSettings _finiteDimensionSettings) : IUnityStructure
{
    public static XZGridDimensionSettings Read(EndianBinaryReader reader)
    {
        int _dimensionType_ = reader.ReadS32();
        XZGridFiniteDimensionSettings _finiteDimensionSettings_ = XZGridFiniteDimensionSettings.Read(reader);
        
        return new(_dimensionType_,
            _finiteDimensionSettings_);
    }

    public override string ToString() => $"XZGridDimensionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_dimensionType: {_dimensionType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_finiteDimensionSettings: {{ \n{_finiteDimensionSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $XZGridFiniteDimensionSettings (2 fields) */
public record class XZGridFiniteDimensionSettings (
    Range_1 _xAxisCellIndexRange,
    Range_1 _zAxisCellIndexRange) : IUnityStructure
{
    public static XZGridFiniteDimensionSettings Read(EndianBinaryReader reader)
    {
        Range_1 _xAxisCellIndexRange_ = Range_1.Read(reader);
        Range_1 _zAxisCellIndexRange_ = Range_1.Read(reader);
        
        return new(_xAxisCellIndexRange_,
            _zAxisCellIndexRange_);
    }

    public override string ToString() => $"XZGridFiniteDimensionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_xAxisCellIndexRange: {{ _min: {_xAxisCellIndexRange._min}, _max: {_xAxisCellIndexRange._max} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_zAxisCellIndexRange: {{ _min: {_zAxisCellIndexRange._min}, _max: {_zAxisCellIndexRange._max} }}\n");
    }
}

/* $Range`1 (2 fields) */
public readonly record struct Range_1 (
    int _min,
    int _max) : IUnityStructure
{
    public static Range_1 Read(EndianBinaryReader reader)
    {
        int _min_ = reader.ReadS32();
        int _max_ = reader.ReadS32();
        
        return new(_min_,
            _max_);
    }

    public override string ToString() => $"Range`1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_min: {_min}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_max: {_max}");
    }
}

/* $RenderableCoordinateSystem (3 fields) */
public record class RenderableCoordinateSystem (
    Vector3f[] _localAxes,
    TransformMatrix _transformMatrix,
    PPtr<CoordinateSystemRenderSettings> _renderSettings) : IUnityStructure
{
    public static RenderableCoordinateSystem Read(EndianBinaryReader reader)
    {
        Vector3f[] _localAxes_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _localAxes */
        TransformMatrix _transformMatrix_ = TransformMatrix.Read(reader);
        PPtr<CoordinateSystemRenderSettings> _renderSettings_ = PPtr<CoordinateSystemRenderSettings>.Read(reader);
        
        return new(_localAxes_,
            _transformMatrix_,
            _renderSettings_);
    }

    public override string ToString() => $"RenderableCoordinateSystem\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_localAxes[{_localAxes.Length}] = {{");
        if (_localAxes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in _localAxes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (_localAxes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_transformMatrix: {{ \n{_transformMatrix.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }
}

/* $SerializableGameObjectHashSet (1 fields) */
public record class SerializableGameObjectHashSet (
    PPtr<GameObject>[] _serializedList) : IUnityStructure
{
    public static SerializableGameObjectHashSet Read(EndianBinaryReader reader)
    {
        PPtr<GameObject>[] _serializedList_ = BuiltInArray<PPtr<GameObject>>.Read(reader);
        
        return new(_serializedList_);
    }

    public override string ToString() => $"SerializableGameObjectHashSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_serializedList[{_serializedList.Length}] = {{");
        if (_serializedList.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<GameObject> _4 in _serializedList)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_serializedList.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ObjectSelectionShape (2 fields) */
public record class ObjectSelectionShape (
    RectangleObjectInteractionShape _rectangleShape,
    EllipseObjectInteractionShape _ellipseShape) : IUnityStructure
{
    public static ObjectSelectionShape Read(EndianBinaryReader reader)
    {
        RectangleObjectInteractionShape _rectangleShape_ = RectangleObjectInteractionShape.Read(reader);
        EllipseObjectInteractionShape _ellipseShape_ = EllipseObjectInteractionShape.Read(reader);
        
        return new(_rectangleShape_,
            _ellipseShape_);
    }

    public override string ToString() => $"ObjectSelectionShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_rectangleShape: {{ \n{_rectangleShape.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_ellipseShape: {{ \n{_ellipseShape.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $RectangleObjectInteractionShape (1 fields) */
public record class RectangleObjectInteractionShape (
    PPtr<RectangleShapeRenderSettings> _renderSettings) : IUnityStructure
{
    public static RectangleObjectInteractionShape Read(EndianBinaryReader reader)
    {
        PPtr<RectangleShapeRenderSettings> _renderSettings_ = PPtr<RectangleShapeRenderSettings>.Read(reader);
        
        return new(_renderSettings_);
    }

    public override string ToString() => $"RectangleObjectInteractionShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }
}

/* $EllipseObjectInteractionShape (1 fields) */
public record class EllipseObjectInteractionShape (
    PPtr<EllipseShapeRenderSettings> _renderSettings) : IUnityStructure
{
    public static EllipseObjectInteractionShape Read(EndianBinaryReader reader)
    {
        PPtr<EllipseShapeRenderSettings> _renderSettings_ = PPtr<EllipseShapeRenderSettings>.Read(reader);
        
        return new(_renderSettings_);
    }

    public override string ToString() => $"EllipseObjectInteractionShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }
}

/* $Entry_7 (5 fields) */
public record class Entry_7 (
    PPtr<AnimationClipWrapper>[] VariantWrappers,
    PPtr<AnimationClipWrapper> RendWrapper,
    PPtr<AnimationClipWrapper> ChargeWrapper,
    byte HasRangeBlend,
    float[] BlendRanges) : IUnityStructure
{
    public static Entry_7 Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper>[] VariantWrappers_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        PPtr<AnimationClipWrapper> RendWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> ChargeWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        byte HasRangeBlend_ = reader.ReadU8();
        reader.AlignTo(4); /* HasRangeBlend */
        float[] BlendRanges_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* BlendRanges */
        
        return new(VariantWrappers_,
            RendWrapper_,
            ChargeWrapper_,
            HasRangeBlend_,
            BlendRanges_);
    }

    public override string ToString() => $"Entry_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VariantWrappers[{VariantWrappers.Length}] = {{");
        if (VariantWrappers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in VariantWrappers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (VariantWrappers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RendWrapper: {RendWrapper}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ChargeWrapper: {ChargeWrapper}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasRangeBlend: {HasRangeBlend}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BlendRanges[{BlendRanges.Length}] = {{");
        if (BlendRanges.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in BlendRanges)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (BlendRanges.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ColonyProjectsRewardElementVisual (17 fields) */
public record class ColonyProjectsRewardElementVisual (
    int Type,
    PPtr<GameObject> Container,
    PPtr<TextMeshProUGUI> Description,
    PPtr<Image> Icon,
    byte HasAcronym,
    PPtr<TextMeshProUGUI> Acronym,
    byte HasCount,
    PPtr<TextMeshProUGUI> CountText,
    byte HasApplyToAllColonies,
    PPtr<GameObject> ApplyToAllColoniesContainer,
    PPtr<Image> ApplyToAllColoniesIcon,
    byte HasArrows,
    PPtr<GameObject> ArrowsContainer,
    PPtr<GameObject> ArrowUp,
    PPtr<GameObject> ArrowDown,
    byte HasRefill,
    PPtr<TextMeshProUGUI> RefillText) : IUnityStructure
{
    public static ColonyProjectsRewardElementVisual Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<GameObject> Container_ = PPtr<GameObject>.Read(reader);
        PPtr<TextMeshProUGUI> Description_ = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<Image> Icon_ = PPtr<Image>.Read(reader);
        byte HasAcronym_ = reader.ReadU8();
        reader.AlignTo(4); /* HasAcronym */
        PPtr<TextMeshProUGUI> Acronym_ = PPtr<TextMeshProUGUI>.Read(reader);
        byte HasCount_ = reader.ReadU8();
        reader.AlignTo(4); /* HasCount */
        PPtr<TextMeshProUGUI> CountText_ = PPtr<TextMeshProUGUI>.Read(reader);
        byte HasApplyToAllColonies_ = reader.ReadU8();
        reader.AlignTo(4); /* HasApplyToAllColonies */
        PPtr<GameObject> ApplyToAllColoniesContainer_ = PPtr<GameObject>.Read(reader);
        PPtr<Image> ApplyToAllColoniesIcon_ = PPtr<Image>.Read(reader);
        byte HasArrows_ = reader.ReadU8();
        reader.AlignTo(4); /* HasArrows */
        PPtr<GameObject> ArrowsContainer_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> ArrowUp_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> ArrowDown_ = PPtr<GameObject>.Read(reader);
        byte HasRefill_ = reader.ReadU8();
        reader.AlignTo(4); /* HasRefill */
        PPtr<TextMeshProUGUI> RefillText_ = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(Type_,
            Container_,
            Description_,
            Icon_,
            HasAcronym_,
            Acronym_,
            HasCount_,
            CountText_,
            HasApplyToAllColonies_,
            ApplyToAllColoniesContainer_,
            ApplyToAllColoniesIcon_,
            HasArrows_,
            ArrowsContainer_,
            ArrowUp_,
            ArrowDown_,
            HasRefill_,
            RefillText_);
    }

    public override string ToString() => $"ColonyProjectsRewardElementVisual\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Container: {Container}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Description: {Description}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasAcronym: {HasAcronym}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Acronym: {Acronym}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasCount: {HasCount}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CountText: {CountText}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasApplyToAllColonies: {HasApplyToAllColonies}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ApplyToAllColoniesContainer: {ApplyToAllColoniesContainer}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ApplyToAllColoniesIcon: {ApplyToAllColoniesIcon}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasArrows: {HasArrows}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ArrowsContainer: {ArrowsContainer}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ArrowUp: {ArrowUp}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ArrowDown: {ArrowDown}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HasRefill: {HasRefill}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RefillText: {RefillText}");
    }
}

/* $UnifiedStatusParams (6 fields) */
public record class UnifiedStatusParams (
    int Status,
    PPtr<Sprite> Icon,
    byte ShowFrame,
    ColorRGBA IconColor,
    ColorRGBA TextColor,
    ColorRGBA FrameColor) : IUnityStructure
{
    public static UnifiedStatusParams Read(EndianBinaryReader reader)
    {
        int Status_ = reader.ReadS32();
        PPtr<Sprite> Icon_ = PPtr<Sprite>.Read(reader);
        byte ShowFrame_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowFrame */
        ColorRGBA IconColor_ = ColorRGBA.Read(reader);
        ColorRGBA TextColor_ = ColorRGBA.Read(reader);
        ColorRGBA FrameColor_ = ColorRGBA.Read(reader);
        
        return new(Status_,
            Icon_,
            ShowFrame_,
            IconColor_,
            TextColor_,
            FrameColor_);
    }

    public override string ToString() => $"UnifiedStatusParams\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Status: {Status}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowFrame: {ShowFrame}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IconColor: {{ rgba: {IconColor.rgba} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TextColor: {{ rgba: {TextColor.rgba} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FrameColor: {{ rgba: {FrameColor.rgba} }}\n");
    }
}

/* $AkAuxBusReference (1 fields) */
public record class AkAuxBusReference (
    AsciiString Value) : IUnityStructure
{
    public static AkAuxBusReference Read(EndianBinaryReader reader)
    {
        AsciiString Value_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Value */
        
        return new(Value_);
    }

    public override string ToString() => $"AkAuxBusReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Value: \"{Value}\"");
    }
}

/* $RendererDescription (6 fields) */
public record class RendererDescription (
    AsciiString Name,
    AsciiString[] Bones,
    AsciiString RootBone,
    PPtr<Mesh> Mesh,
    PPtr<Material> Material,
    CharacterTextureDescription[] Textures) : IUnityStructure
{
    public static RendererDescription Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        AsciiString[] Bones_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* Bones */
        AsciiString RootBone_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* RootBone */
        PPtr<Mesh> Mesh_ = PPtr<Mesh>.Read(reader);
        PPtr<Material> Material_ = PPtr<Material>.Read(reader);
        CharacterTextureDescription[] Textures_ = BuiltInArray<CharacterTextureDescription>.Read(reader);
        reader.AlignTo(4); /* Textures */
        
        return new(Name_,
            Bones_,
            RootBone_,
            Mesh_,
            Material_,
            Textures_);
    }

    public override string ToString() => $"RendererDescription\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Bones[{Bones.Length}] = {{");
        if (Bones.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in Bones)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (Bones.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RootBone: \"{RootBone}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Mesh: {Mesh}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Material: {Material}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Textures[{Textures.Length}] = {{");
        if (Textures.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CharacterTextureDescription _4 in Textures)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Textures.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $InteractableMirrorRenderSettingsView (6 fields) */
public record class InteractableMirrorRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static InteractableMirrorRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"InteractableMirrorRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectSelectionRenderSettingsView (6 fields) */
public record class ObjectSelectionRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSelectionRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSelectionRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $EmitterSettings (13 fields) */
public record class EmitterSettings (
    float Delay,
    float Duration,
    float RateOverTime,
    float RateOverDistance,
    Vector2f Lifetime,
    Vector2f Size,
    float RandomizePositionRadius,
    Vector2f RandomizeRotation,
    float RadialWeight,
    Vector2f InOutBalance,
    Vector2f FrequencyScale,
    float RandomizePhaseOffset,
    ScaleCurve ScaleCurve_) : IUnityStructure
{
    public static EmitterSettings Read(EndianBinaryReader reader)
    {
        float Delay_ = reader.ReadF32();
        float Duration_ = reader.ReadF32();
        float RateOverTime_ = reader.ReadF32();
        float RateOverDistance_ = reader.ReadF32();
        Vector2f Lifetime_ = Vector2f.Read(reader);
        Vector2f Size_ = Vector2f.Read(reader);
        float RandomizePositionRadius_ = reader.ReadF32();
        Vector2f RandomizeRotation_ = Vector2f.Read(reader);
        float RadialWeight_ = reader.ReadF32();
        Vector2f InOutBalance_ = Vector2f.Read(reader);
        Vector2f FrequencyScale_ = Vector2f.Read(reader);
        float RandomizePhaseOffset_ = reader.ReadF32();
        ScaleCurve ScaleCurve__ = ScaleCurve.Read(reader);
        
        return new(Delay_,
            Duration_,
            RateOverTime_,
            RateOverDistance_,
            Lifetime_,
            Size_,
            RandomizePositionRadius_,
            RandomizeRotation_,
            RadialWeight_,
            InOutBalance_,
            FrequencyScale_,
            RandomizePhaseOffset_,
            ScaleCurve__);
    }

    public override string ToString() => $"EmitterSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Duration: {Duration}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RateOverTime: {RateOverTime}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RateOverDistance: {RateOverDistance}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Lifetime: {{ x: {Lifetime.x}, y: {Lifetime.y} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Size: {{ x: {Size.x}, y: {Size.y} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RandomizePositionRadius: {RandomizePositionRadius}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RandomizeRotation: {{ x: {RandomizeRotation.x}, y: {RandomizeRotation.y} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RadialWeight: {RadialWeight}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InOutBalance: {{ x: {InOutBalance.x}, y: {InOutBalance.y} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FrequencyScale: {{ x: {FrequencyScale.x}, y: {FrequencyScale.y} }}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RandomizePhaseOffset: {RandomizePhaseOffset}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScaleCurve_: {{ \n{ScaleCurve_.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ScaleCurve (3 fields) */
public record class ScaleCurve (
    Vector2f m_KeysTime,
    float m_Value0,
    float m_Value1) : IUnityStructure
{
    public static ScaleCurve Read(EndianBinaryReader reader)
    {
        Vector2f m_KeysTime_ = Vector2f.Read(reader);
        float m_Value0_ = reader.ReadF32();
        float m_Value1_ = reader.ReadF32();
        
        return new(m_KeysTime_,
            m_Value0_,
            m_Value1_);
    }

    public override string ToString() => $"ScaleCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_KeysTime: {{ x: {m_KeysTime.x}, y: {m_KeysTime.y} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value0: {m_Value0}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value1: {m_Value1}");
    }
}

/* $MovementStyleLayer (4 fields) */
public record class MovementStyleLayer (
    CurrentWalkingStyleLayer Crouch,
    CurrentWalkingStyleLayer Walking,
    CurrentWalkingStyleLayer Run,
    CurrentWalkingStyleLayer Sprint) : IUnityStructure
{
    public static MovementStyleLayer Read(EndianBinaryReader reader)
    {
        CurrentWalkingStyleLayer Crouch_ = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Crouch */
        CurrentWalkingStyleLayer Walking_ = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Walking */
        CurrentWalkingStyleLayer Run_ = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Run */
        CurrentWalkingStyleLayer Sprint_ = CurrentWalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* Sprint */
        
        return new(Crouch_,
            Walking_,
            Run_,
            Sprint_);
    }

    public override string ToString() => $"MovementStyleLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Crouch: {{ \n{Crouch.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Walking: {{ \n{Walking.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Run: {{ \n{Run.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Sprint: {{ \n{Sprint.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CurrentWalkingStyleLayer (9 fields) */
public record class CurrentWalkingStyleLayer (
    AnimationCurve InCurve,
    AnimationCurve OutCurve,
    float OutDistance,
    PPtr<AnimationClipWrapper> In,
    PPtr<AnimationClipWrapper> Out,
    PPtr<AnimationClipWrapper> Clip,
    float Speed,
    float OutSpeed,
    float InSpeed) : IUnityStructure
{
    public static CurrentWalkingStyleLayer Read(EndianBinaryReader reader)
    {
        AnimationCurve InCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* InCurve */
        AnimationCurve OutCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OutCurve */
        float OutDistance_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> In_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> Out_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> Clip_ = PPtr<AnimationClipWrapper>.Read(reader);
        float Speed_ = reader.ReadF32();
        float OutSpeed_ = reader.ReadF32();
        float InSpeed_ = reader.ReadF32();
        
        return new(InCurve_,
            OutCurve_,
            OutDistance_,
            In_,
            Out_,
            Clip_,
            Speed_,
            OutSpeed_,
            InSpeed_);
    }

    public override string ToString() => $"CurrentWalkingStyleLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InCurve: {{ \n{InCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OutCurve: {{ \n{OutCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutDistance: {OutDistance}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}In: {In}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Out: {Out}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Clip: {Clip}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Speed: {Speed}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutSpeed: {OutSpeed}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InSpeed: {InSpeed}");
    }
}

/* $WeaponStyleIdleLayer (4 fields) */
public record class WeaponStyleIdleLayer (
    int Style,
    byte IsOffHand,
    byte NoOffHand,
    PPtr<AnimationClipWrapper> Wrapper) : IUnityStructure
{
    public static WeaponStyleIdleLayer Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        byte NoOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* NoOffHand */
        PPtr<AnimationClipWrapper> Wrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Style_,
            IsOffHand_,
            NoOffHand_,
            Wrapper_);
    }

    public override string ToString() => $"WeaponStyleIdleLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NoOffHand: {NoOffHand}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Wrapper: {Wrapper}");
    }
}

/* $WeaponStyleLayer (3 fields) */
public record class WeaponStyleLayer (
    int Style,
    byte IsOffHand,
    MovementStyleLayer MovementStyleLayer_) : IUnityStructure
{
    public static WeaponStyleLayer Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        MovementStyleLayer MovementStyleLayer__ = MovementStyleLayer.Read(reader);
        reader.AlignTo(4); /* MovementStyleLayer_ */
        
        return new(Style_,
            IsOffHand_,
            MovementStyleLayer__);
    }

    public override string ToString() => $"WeaponStyleLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MovementStyleLayer_: {{ \n{MovementStyleLayer_.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $OwlcatSelectableLayerPart (9 fields) */
public record class OwlcatSelectableLayerPart (
    PPtr<Graphic> m_TargetGraphic,
    PPtr<GameObject> m_TargetGameObject,
    PPtr<CanvasGroup> m_TargetCanvasGroup,
    int m_Transition,
    ColorBlock m_Colors,
    SpriteState m_SpriteState,
    OwlcatSelectableActiveBlock m_ActiveBlock,
    OwlcatSelectableCanvasGroupBlock m_CanvasGroupBlock,
    OwlcatSelectableSpriteSwapBlock m_SpriteSwap) : IUnityStructure
{
    public static OwlcatSelectableLayerPart Read(EndianBinaryReader reader)
    {
        PPtr<Graphic> m_TargetGraphic_ = PPtr<Graphic>.Read(reader);
        PPtr<GameObject> m_TargetGameObject_ = PPtr<GameObject>.Read(reader);
        PPtr<CanvasGroup> m_TargetCanvasGroup_ = PPtr<CanvasGroup>.Read(reader);
        int m_Transition_ = reader.ReadS32();
        ColorBlock m_Colors_ = ColorBlock.Read(reader);
        SpriteState m_SpriteState_ = SpriteState.Read(reader);
        OwlcatSelectableActiveBlock m_ActiveBlock_ = OwlcatSelectableActiveBlock.Read(reader);
        reader.AlignTo(4); /* m_ActiveBlock */
        OwlcatSelectableCanvasGroupBlock m_CanvasGroupBlock_ = OwlcatSelectableCanvasGroupBlock.Read(reader);
        OwlcatSelectableSpriteSwapBlock m_SpriteSwap_ = OwlcatSelectableSpriteSwapBlock.Read(reader);
        
        return new(m_TargetGraphic_,
            m_TargetGameObject_,
            m_TargetCanvasGroup_,
            m_Transition_,
            m_Colors_,
            m_SpriteState_,
            m_ActiveBlock_,
            m_CanvasGroupBlock_,
            m_SpriteSwap_);
    }

    public override string ToString() => $"OwlcatSelectableLayerPart\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetGraphic: {m_TargetGraphic}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetGameObject: {m_TargetGameObject}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetCanvasGroup: {m_TargetCanvasGroup}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Transition: {m_Transition}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Colors: {{ \n{m_Colors.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SpriteState: {{ \n{m_SpriteState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ActiveBlock: {{ \n{m_ActiveBlock.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_CanvasGroupBlock: {{ \n{m_CanvasGroupBlock.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SpriteSwap: {{ \n{m_SpriteSwap.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $OwlcatSelectableActiveBlock (5 fields) */
public readonly record struct OwlcatSelectableActiveBlock (
    byte m_NormalState,
    byte m_HighlightedState,
    byte m_FocusedState,
    byte m_PressedState,
    byte m_DisabledState) : IUnityStructure
{
    public static OwlcatSelectableActiveBlock Read(EndianBinaryReader reader)
    {
        byte m_NormalState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_NormalState */
        byte m_HighlightedState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_HighlightedState */
        byte m_FocusedState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_FocusedState */
        byte m_PressedState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_PressedState */
        byte m_DisabledState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_DisabledState */
        
        return new(m_NormalState_,
            m_HighlightedState_,
            m_FocusedState_,
            m_PressedState_,
            m_DisabledState_);
    }

    public override string ToString() => $"OwlcatSelectableActiveBlock\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NormalState: {m_NormalState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HighlightedState: {m_HighlightedState}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FocusedState: {m_FocusedState}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PressedState: {m_PressedState}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisabledState: {m_DisabledState}");
    }
}

/* $OwlcatSelectableCanvasGroupBlock (6 fields) */
public readonly record struct OwlcatSelectableCanvasGroupBlock (
    float m_NormalState,
    float m_HighlightedState,
    float m_FocusedState,
    float m_PressedState,
    float m_DisabledState,
    float m_FadeDuration) : IUnityStructure
{
    public static OwlcatSelectableCanvasGroupBlock Read(EndianBinaryReader reader)
    {
        float m_NormalState_ = reader.ReadF32();
        float m_HighlightedState_ = reader.ReadF32();
        float m_FocusedState_ = reader.ReadF32();
        float m_PressedState_ = reader.ReadF32();
        float m_DisabledState_ = reader.ReadF32();
        float m_FadeDuration_ = reader.ReadF32();
        
        return new(m_NormalState_,
            m_HighlightedState_,
            m_FocusedState_,
            m_PressedState_,
            m_DisabledState_,
            m_FadeDuration_);
    }

    public override string ToString() => $"OwlcatSelectableCanvasGroupBlock\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NormalState: {m_NormalState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HighlightedState: {m_HighlightedState}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FocusedState: {m_FocusedState}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PressedState: {m_PressedState}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisabledState: {m_DisabledState}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FadeDuration: {m_FadeDuration}");
    }
}

/* $OwlcatSelectableSpriteSwapBlock (5 fields) */
public record class OwlcatSelectableSpriteSwapBlock (
    PPtr<Sprite> m_NormalSprite,
    PPtr<Sprite> m_HighlightedSprite,
    PPtr<Sprite> m_PressedSprite,
    PPtr<Sprite> m_FocusedSprite,
    PPtr<Sprite> m_DisabledSprite) : IUnityStructure
{
    public static OwlcatSelectableSpriteSwapBlock Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> m_NormalSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_HighlightedSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_PressedSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_FocusedSprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> m_DisabledSprite_ = PPtr<Sprite>.Read(reader);
        
        return new(m_NormalSprite_,
            m_HighlightedSprite_,
            m_PressedSprite_,
            m_FocusedSprite_,
            m_DisabledSprite_);
    }

    public override string ToString() => $"OwlcatSelectableSpriteSwapBlock\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NormalSprite: {m_NormalSprite}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HighlightedSprite: {m_HighlightedSprite}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PressedSprite: {m_PressedSprite}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FocusedSprite: {m_FocusedSprite}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DisabledSprite: {m_DisabledSprite}");
    }
}

/* $ClickEvent (1 fields) */
public record class ClickEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ClickEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ClickEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ButtonClickedEvent (1 fields) */
public record class ButtonClickedEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ButtonClickedEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ButtonClickedEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Event (3 fields) */
public record class Event (
    int idInternal,
    byte[] valueGuidInternal,
    PPtr<WwiseEventReference> WwiseObjectReference) : IUnityStructure
{
    public static Event Read(EndianBinaryReader reader)
    {
        int idInternal_ = reader.ReadS32();
        byte[] valueGuidInternal_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* valueGuidInternal */
        PPtr<WwiseEventReference> WwiseObjectReference_ = PPtr<WwiseEventReference>.Read(reader);
        
        return new(idInternal_,
            valueGuidInternal_,
            WwiseObjectReference_);
    }

    public override string ToString() => $"Event\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}idInternal: {idInternal}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}valueGuidInternal[{valueGuidInternal.Length}] = {{");
        if (valueGuidInternal.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in valueGuidInternal)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (valueGuidInternal.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WwiseObjectReference: {WwiseObjectReference}");
    }
}

/* $ActionsOnAnimationEvent (2 fields) */
public record class ActionsOnAnimationEvent (
    int EventId,
    ActionList Actions) : IUnityStructure
{
    public static ActionsOnAnimationEvent Read(EndianBinaryReader reader)
    {
        int EventId_ = reader.ReadS32();
        ActionList Actions_ = ActionList.Read(reader);
        
        return new(EventId_,
            Actions_);
    }

    public override string ToString() => $"ActionsOnAnimationEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EventId: {EventId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Actions: {{ \n{Actions.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ActionList (1 fields) */
public record class ActionList (
    managedRefArrayItem[] Actions) : IUnityStructure
{
    public static ActionList Read(EndianBinaryReader reader)
    {
        managedRefArrayItem[] Actions_ = BuiltInArray<managedRefArrayItem>.Read(reader);
        
        return new(Actions_);
    }

    public override string ToString() => $"ActionList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Actions[{Actions.Length}] = {{");
        if (Actions.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (managedRefArrayItem _4 in Actions)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ rid: {_4.rid} }}\n");
            ++_4i;
        }
        if (Actions.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ActionHoldersOnAnimationEvent (2 fields) */
public record class ActionHoldersOnAnimationEvent (
    int EventId,
    ActionsReference[] ActionHolders) : IUnityStructure
{
    public static ActionHoldersOnAnimationEvent Read(EndianBinaryReader reader)
    {
        int EventId_ = reader.ReadS32();
        ActionsReference[] ActionHolders_ = BuiltInArray<ActionsReference>.Read(reader);
        reader.AlignTo(4); /* ActionHolders */
        
        return new(EventId_,
            ActionHolders_);
    }

    public override string ToString() => $"ActionHoldersOnAnimationEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EventId: {EventId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionHolders[{ActionHolders.Length}] = {{");
        if (ActionHolders.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ActionsReference _4 in ActionHolders)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (ActionHolders.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UnitAnimationSettings (17 fields) */
public readonly record struct UnitAnimationSettings (
    float MovementSpeedCoeff,
    byte OverrideSlowWalk,
    float SlowWalkCoeff,
    byte OverrideSlowWalkNonCombat,
    float SlowWalkNonCombatCoeff,
    byte OverrideNormal,
    float NormalCoeff,
    byte OverrideNormalNonCombat,
    float NormalNonCombatCoeff,
    byte OverrideCharge,
    float ChargeCoeff,
    byte OverrideChargeNonCombat,
    float ChargeNonCombatCoeff,
    byte OverrideStealth,
    float StealthCoeff,
    byte OverrideStealthNonCombat,
    float StealthNonCombatCoeff) : IUnityStructure
{
    public static UnitAnimationSettings Read(EndianBinaryReader reader)
    {
        float MovementSpeedCoeff_ = reader.ReadF32();
        byte OverrideSlowWalk_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideSlowWalk */
        float SlowWalkCoeff_ = reader.ReadF32();
        byte OverrideSlowWalkNonCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideSlowWalkNonCombat */
        float SlowWalkNonCombatCoeff_ = reader.ReadF32();
        byte OverrideNormal_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideNormal */
        float NormalCoeff_ = reader.ReadF32();
        byte OverrideNormalNonCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideNormalNonCombat */
        float NormalNonCombatCoeff_ = reader.ReadF32();
        byte OverrideCharge_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideCharge */
        float ChargeCoeff_ = reader.ReadF32();
        byte OverrideChargeNonCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideChargeNonCombat */
        float ChargeNonCombatCoeff_ = reader.ReadF32();
        byte OverrideStealth_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideStealth */
        float StealthCoeff_ = reader.ReadF32();
        byte OverrideStealthNonCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideStealthNonCombat */
        float StealthNonCombatCoeff_ = reader.ReadF32();
        
        return new(MovementSpeedCoeff_,
            OverrideSlowWalk_,
            SlowWalkCoeff_,
            OverrideSlowWalkNonCombat_,
            SlowWalkNonCombatCoeff_,
            OverrideNormal_,
            NormalCoeff_,
            OverrideNormalNonCombat_,
            NormalNonCombatCoeff_,
            OverrideCharge_,
            ChargeCoeff_,
            OverrideChargeNonCombat_,
            ChargeNonCombatCoeff_,
            OverrideStealth_,
            StealthCoeff_,
            OverrideStealthNonCombat_,
            StealthNonCombatCoeff_);
    }

    public override string ToString() => $"UnitAnimationSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MovementSpeedCoeff: {MovementSpeedCoeff}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideSlowWalk: {OverrideSlowWalk}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SlowWalkCoeff: {SlowWalkCoeff}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideSlowWalkNonCombat: {OverrideSlowWalkNonCombat}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SlowWalkNonCombatCoeff: {SlowWalkNonCombatCoeff}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideNormal: {OverrideNormal}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NormalCoeff: {NormalCoeff}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideNormalNonCombat: {OverrideNormalNonCombat}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NormalNonCombatCoeff: {NormalNonCombatCoeff}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideCharge: {OverrideCharge}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ChargeCoeff: {ChargeCoeff}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideChargeNonCombat: {OverrideChargeNonCombat}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ChargeNonCombatCoeff: {ChargeNonCombatCoeff}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideStealth: {OverrideStealth}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StealthCoeff: {StealthCoeff}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideStealthNonCombat: {OverrideStealthNonCombat}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StealthNonCombatCoeff: {StealthNonCombatCoeff}");
    }
}

/* $Particle (10 fields) */
public record class Particle (
    float3 BasePosition,
    float3 Position,
    float3 Predicted,
    float3 Velocity,
    quaternion Orientation,
    quaternion PredictedOrientation,
    float4 AngularVelocity,
    float Mass,
    uint Flags,
    float Radius) : IUnityStructure
{
    public static Particle Read(EndianBinaryReader reader)
    {
        float3 BasePosition_ = float3.Read(reader);
        float3 Position_ = float3.Read(reader);
        float3 Predicted_ = float3.Read(reader);
        float3 Velocity_ = float3.Read(reader);
        quaternion Orientation_ = quaternion.Read(reader);
        quaternion PredictedOrientation_ = quaternion.Read(reader);
        float4 AngularVelocity_ = float4.Read(reader);
        float Mass_ = reader.ReadF32();
        uint Flags_ = reader.ReadU32();
        float Radius_ = reader.ReadF32();
        
        return new(BasePosition_,
            Position_,
            Predicted_,
            Velocity_,
            Orientation_,
            PredictedOrientation_,
            AngularVelocity_,
            Mass_,
            Flags_,
            Radius_);
    }

    public override string ToString() => $"Particle\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BasePosition: {{ x: {BasePosition.x}, y: {BasePosition.y}, z: {BasePosition.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Position: {{ x: {Position.x}, y: {Position.y}, z: {Position.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Predicted: {{ x: {Predicted.x}, y: {Predicted.y}, z: {Predicted.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Velocity: {{ x: {Velocity.x}, y: {Velocity.y}, z: {Velocity.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Orientation: {{ \n{Orientation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PredictedOrientation: {{ \n{PredictedOrientation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AngularVelocity: {{ x: {AngularVelocity.x}, y: {AngularVelocity.y}, z: {AngularVelocity.z}, w: {AngularVelocity.w} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Mass: {Mass}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Flags: {Flags}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Radius: {Radius}");
    }
}

/* $quaternion (1 fields) */
public record class quaternion (
    float4 @value) : IUnityStructure
{
    public static quaternion Read(EndianBinaryReader reader)
    {
        float4 @value_ = float4.Read(reader);
        
        return new(@value_);
    }

    public override string ToString() => $"quaternion\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}@value: {{ x: {@value.x}, y: {@value.y}, z: {@value.z}, w: {@value.w} }}\n");
    }
}

/* $Constraint (8 fields) */
public record class Constraint (
    int index0,
    int index1,
    int index2,
    int index3,
    float4 parameters0,
    float4 parameters1,
    int type,
    int id) : IUnityStructure
{
    public static Constraint Read(EndianBinaryReader reader)
    {
        int index0_ = reader.ReadS32();
        int index1_ = reader.ReadS32();
        int index2_ = reader.ReadS32();
        int index3_ = reader.ReadS32();
        float4 parameters0_ = float4.Read(reader);
        float4 parameters1_ = float4.Read(reader);
        int type_ = reader.ReadS32();
        int id_ = reader.ReadS32();
        
        return new(index0_,
            index1_,
            index2_,
            index3_,
            parameters0_,
            parameters1_,
            type_,
            id_);
    }

    public override string ToString() => $"Constraint\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index0: {index0}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index1: {index1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index2: {index2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}index3: {index3}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}parameters0: {{ x: {parameters0.x}, y: {parameters0.y}, z: {parameters0.z}, w: {parameters0.w} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}parameters1: {{ x: {parameters1.x}, y: {parameters1.y}, z: {parameters1.z}, w: {parameters1.w} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}id: {id}");
    }
}

/* $int2 (2 fields) */
public readonly record struct int2 (
    int x,
    int y) : IUnityStructure
{
    public static int2 Read(EndianBinaryReader reader)
    {
        int x_ = reader.ReadS32();
        int y_ = reader.ReadS32();
        
        return new(x_,
            y_);
    }

    public override string ToString() => $"int2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }
}

/* $ObjectGroupCollection (2 fields) */
public record class ObjectGroupCollection (
    PPtr<ObjectGroup>[] _namedEntities,
    int _indexOfMarkedEntity) : IUnityStructure
{
    public static ObjectGroupCollection Read(EndianBinaryReader reader)
    {
        PPtr<ObjectGroup>[] _namedEntities_ = BuiltInArray<PPtr<ObjectGroup>>.Read(reader);
        int _indexOfMarkedEntity_ = reader.ReadS32();
        
        return new(_namedEntities_,
            _indexOfMarkedEntity_);
    }

    public override string ToString() => $"ObjectGroupCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_namedEntities[{_namedEntities.Length}] = {{");
        if (_namedEntities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ObjectGroup> _4 in _namedEntities)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_namedEntities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indexOfMarkedEntity: {_indexOfMarkedEntity}");
    }
}

/* $ObjectGroupDatabaseView (7 fields) */
public record class ObjectGroupDatabaseView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<ObjectGroupDatabaseViewData> _viewData) : IUnityStructure
{
    public static ObjectGroupDatabaseView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<ObjectGroupDatabaseViewData> _viewData_ = PPtr<ObjectGroupDatabaseViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"ObjectGroupDatabaseView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $ScreenUnit (12 fields) */
public record class ScreenUnit (
    PPtr<CanvasGroup> CanvasGroup,
    float InTime,
    float DelayTime,
    float OutTime,
    int Ease,
    PPtr<VideoPlayerHelper> VideoPlayer,
    AsciiString AKSoundEvent,
    uint SoundId,
    bool FirstLaunchAnotherSoundEvent,
    AsciiString AKFirstLaunchSoundEvent,
    uint FirstLaunchSoundId,
    bool HideInFirstLaunch) : IUnityStructure
{
    public static ScreenUnit Read(EndianBinaryReader reader)
    {
        PPtr<CanvasGroup> CanvasGroup_ = PPtr<CanvasGroup>.Read(reader);
        float InTime_ = reader.ReadF32();
        float DelayTime_ = reader.ReadF32();
        float OutTime_ = reader.ReadF32();
        int Ease_ = reader.ReadS32();
        PPtr<VideoPlayerHelper> VideoPlayer_ = PPtr<VideoPlayerHelper>.Read(reader);
        AsciiString AKSoundEvent_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AKSoundEvent */
        uint SoundId_ = reader.ReadU32();
        bool FirstLaunchAnotherSoundEvent_ = reader.ReadBool();
        reader.AlignTo(4); /* FirstLaunchAnotherSoundEvent */
        AsciiString AKFirstLaunchSoundEvent_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AKFirstLaunchSoundEvent */
        uint FirstLaunchSoundId_ = reader.ReadU32();
        bool HideInFirstLaunch_ = reader.ReadBool();
        reader.AlignTo(4); /* HideInFirstLaunch */
        
        return new(CanvasGroup_,
            InTime_,
            DelayTime_,
            OutTime_,
            Ease_,
            VideoPlayer_,
            AKSoundEvent_,
            SoundId_,
            FirstLaunchAnotherSoundEvent_,
            AKFirstLaunchSoundEvent_,
            FirstLaunchSoundId_,
            HideInFirstLaunch_);
    }

    public override string ToString() => $"ScreenUnit\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CanvasGroup: {CanvasGroup}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InTime: {InTime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DelayTime: {DelayTime}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutTime: {OutTime}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Ease: {Ease}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VideoPlayer: {VideoPlayer}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AKSoundEvent: \"{AKSoundEvent}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SoundId: {SoundId}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FirstLaunchAnotherSoundEvent: {FirstLaunchAnotherSoundEvent}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AKFirstLaunchSoundEvent: \"{AKFirstLaunchSoundEvent}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FirstLaunchSoundId: {FirstLaunchSoundId}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HideInFirstLaunch: {HideInFirstLaunch}");
    }
}

/* $ObjectMask (3 fields) */
public record class ObjectMask (
    PPtr<ObjectLayerObjectMask> _objectLayerObjectMask,
    PPtr<ObjectCollectionMask> _objectCollectionMask,
    ObjectMaskView _view) : IUnityStructure
{
    public static ObjectMask Read(EndianBinaryReader reader)
    {
        PPtr<ObjectLayerObjectMask> _objectLayerObjectMask_ = PPtr<ObjectLayerObjectMask>.Read(reader);
        PPtr<ObjectCollectionMask> _objectCollectionMask_ = PPtr<ObjectCollectionMask>.Read(reader);
        ObjectMaskView _view_ = ObjectMaskView.Read(reader);
        reader.AlignTo(4); /* _view */
        
        return new(_objectLayerObjectMask_,
            _objectCollectionMask_,
            _view_);
    }

    public override string ToString() => $"ObjectMask\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_objectLayerObjectMask: {_objectLayerObjectMask}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_objectCollectionMask: {_objectCollectionMask}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_view: {{ \n{_view.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectMaskView (6 fields) */
public record class ObjectMaskView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectMaskView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectMaskView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $SnapSurface (6 fields) */
public record class SnapSurface (
    byte _isValid,
    ObjectColliderSnapSurfaceGrid _objectBoxSnapSurfaceGrid,
    XZOrientedQuad3D _surfaceQuad,
    Vector3f _mouseCursorPickPoint,
    int _type,
    PPtr<GameObject> _surfaceObject) : IUnityStructure
{
    public static SnapSurface Read(EndianBinaryReader reader)
    {
        byte _isValid_ = reader.ReadU8();
        reader.AlignTo(4); /* _isValid */
        ObjectColliderSnapSurfaceGrid _objectBoxSnapSurfaceGrid_ = ObjectColliderSnapSurfaceGrid.Read(reader);
        XZOrientedQuad3D _surfaceQuad_ = XZOrientedQuad3D.Read(reader);
        reader.AlignTo(4); /* _surfaceQuad */
        Vector3f _mouseCursorPickPoint_ = Vector3f.Read(reader);
        int _type_ = reader.ReadS32();
        PPtr<GameObject> _surfaceObject_ = PPtr<GameObject>.Read(reader);
        
        return new(_isValid_,
            _objectBoxSnapSurfaceGrid_,
            _surfaceQuad_,
            _mouseCursorPickPoint_,
            _type_,
            _surfaceObject_);
    }

    public override string ToString() => $"SnapSurface\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isValid: {_isValid}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectBoxSnapSurfaceGrid: {{ \n{_objectBoxSnapSurfaceGrid.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_surfaceQuad: {{ \n{_surfaceQuad.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_mouseCursorPickPoint: {{ x: {_mouseCursorPickPoint.x}, y: {_mouseCursorPickPoint.y}, z: {_mouseCursorPickPoint.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_type: {_type}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surfaceObject: {_surfaceObject}");
    }
}

/* $ObjectColliderSnapSurfaceGrid (1 fields) */
public record class ObjectColliderSnapSurfaceGrid (
    PPtr<XZGrid> _grid) : IUnityStructure
{
    public static ObjectColliderSnapSurfaceGrid Read(EndianBinaryReader reader)
    {
        PPtr<XZGrid> _grid_ = PPtr<XZGrid>.Read(reader);
        
        return new(_grid_);
    }

    public override string ToString() => $"ObjectColliderSnapSurfaceGrid\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_grid: {_grid}");
    }
}

/* $XZOrientedQuad3D (2 fields) */
public record class XZOrientedQuad3D (
    Vector2f _xzSize,
    CoordinateSystem _coordinateSystem) : IUnityStructure
{
    public static XZOrientedQuad3D Read(EndianBinaryReader reader)
    {
        Vector2f _xzSize_ = Vector2f.Read(reader);
        CoordinateSystem _coordinateSystem_ = CoordinateSystem.Read(reader);
        reader.AlignTo(4); /* _coordinateSystem */
        
        return new(_xzSize_,
            _coordinateSystem_);
    }

    public override string ToString() => $"XZOrientedQuad3D\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_xzSize: {{ x: {_xzSize.x}, y: {_xzSize.y} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_coordinateSystem: {{ \n{_coordinateSystem.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CoordinateSystem (2 fields) */
public record class CoordinateSystem (
    Vector3f[] _localAxes,
    TransformMatrix _transformMatrix) : IUnityStructure
{
    public static CoordinateSystem Read(EndianBinaryReader reader)
    {
        Vector3f[] _localAxes_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _localAxes */
        TransformMatrix _transformMatrix_ = TransformMatrix.Read(reader);
        
        return new(_localAxes_,
            _transformMatrix_);
    }

    public override string ToString() => $"CoordinateSystem\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_localAxes[{_localAxes.Length}] = {{");
        if (_localAxes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in _localAxes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (_localAxes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_transformMatrix: {{ \n{_transformMatrix.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DollRoomCameraZoomPreset (3 fields) */
public record class DollRoomCameraZoomPreset (
    AsciiString TargetBoneName,
    Vector3f OffsetFromHead,
    byte CanZoom) : IUnityStructure
{
    public static DollRoomCameraZoomPreset Read(EndianBinaryReader reader)
    {
        AsciiString TargetBoneName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* TargetBoneName */
        Vector3f OffsetFromHead_ = Vector3f.Read(reader);
        byte CanZoom_ = reader.ReadU8();
        reader.AlignTo(4); /* CanZoom */
        
        return new(TargetBoneName_,
            OffsetFromHead_,
            CanZoom_);
    }

    public override string ToString() => $"DollRoomCameraZoomPreset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TargetBoneName: \"{TargetBoneName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetFromHead: {{ x: {OffsetFromHead.x}, y: {OffsetFromHead.y}, z: {OffsetFromHead.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CanZoom: {CanZoom}");
    }
}

/* $TMP_Style (8 fields) */
public record class TMP_Style (
    AsciiString m_Name,
    int m_HashCode,
    AsciiString m_OpeningDefinition,
    AsciiString m_ClosingDefinition,
    int[] m_OpeningTagArray,
    int[] m_ClosingTagArray,
    uint[] m_OpeningTagUnicodeArray,
    uint[] m_ClosingTagUnicodeArray) : IUnityStructure
{
    public static TMP_Style Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        int m_HashCode_ = reader.ReadS32();
        AsciiString m_OpeningDefinition_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_OpeningDefinition */
        AsciiString m_ClosingDefinition_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_ClosingDefinition */
        int[] m_OpeningTagArray_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_OpeningTagArray */
        int[] m_ClosingTagArray_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_ClosingTagArray */
        uint[] m_OpeningTagUnicodeArray_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* m_OpeningTagUnicodeArray */
        uint[] m_ClosingTagUnicodeArray_ = BuiltInArray<uint>.Read(reader);
        reader.AlignTo(4); /* m_ClosingTagUnicodeArray */
        
        return new(m_Name_,
            m_HashCode_,
            m_OpeningDefinition_,
            m_ClosingDefinition_,
            m_OpeningTagArray_,
            m_ClosingTagArray_,
            m_OpeningTagUnicodeArray_,
            m_ClosingTagUnicodeArray_);
    }

    public override string ToString() => $"TMP_Style\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HashCode: {m_HashCode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OpeningDefinition: \"{m_OpeningDefinition}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClosingDefinition: \"{m_ClosingDefinition}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OpeningTagArray[{m_OpeningTagArray.Length}] = {{");
        if (m_OpeningTagArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_OpeningTagArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_OpeningTagArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ClosingTagArray[{m_ClosingTagArray.Length}] = {{");
        if (m_ClosingTagArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_ClosingTagArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ClosingTagArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OpeningTagUnicodeArray[{m_OpeningTagUnicodeArray.Length}] = {{");
        if (m_OpeningTagUnicodeArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_OpeningTagUnicodeArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_OpeningTagUnicodeArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ClosingTagUnicodeArray[{m_ClosingTagUnicodeArray.Length}] = {{");
        if (m_ClosingTagUnicodeArray.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (uint _4 in m_ClosingTagUnicodeArray)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_ClosingTagUnicodeArray.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $BoolEvent (1 fields) */
public record class BoolEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static BoolEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"BoolEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementSettingsView (7 fields) */
public record class ObjectPlacementSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    ObjectPlacementModeSelectionToolbar _objectPlacementModeSelectionToolbar) : IUnityStructure
{
    public static ObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        ObjectPlacementModeSelectionToolbar _objectPlacementModeSelectionToolbar_ = ObjectPlacementModeSelectionToolbar.Read(reader);
        reader.AlignTo(4); /* _objectPlacementModeSelectionToolbar */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _objectPlacementModeSelectionToolbar_);
    }

    public override string ToString() => $"ObjectPlacementSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectPlacementModeSelectionToolbar: {{ \n{_objectPlacementModeSelectionToolbar.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementModeSelectionToolbar (6 fields) */
public record class ObjectPlacementModeSelectionToolbar (
    AsciiString[] _normalStateButtonTexturePaths,
    AsciiString[] _activeStateButtonTexturePaths,
    AsciiString[] _buttonTooltips,
    float _buttonScale,
    byte _allowActiveStateForButtons,
    byte _useBoxStyleForButtons) : IUnityStructure
{
    public static ObjectPlacementModeSelectionToolbar Read(EndianBinaryReader reader)
    {
        AsciiString[] _normalStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] _activeStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] _buttonTooltips_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        float _buttonScale_ = reader.ReadF32();
        byte _allowActiveStateForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _allowActiveStateForButtons */
        byte _useBoxStyleForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        
        return new(_normalStateButtonTexturePaths_,
            _activeStateButtonTexturePaths_,
            _buttonTooltips_,
            _buttonScale_,
            _allowActiveStateForButtons_,
            _useBoxStyleForButtons_);
    }

    public override string ToString() => $"ObjectPlacementModeSelectionToolbar\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_normalStateButtonTexturePaths[{_normalStateButtonTexturePaths.Length}] = {{");
        if (_normalStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _normalStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_normalStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_activeStateButtonTexturePaths[{_activeStateButtonTexturePaths.Length}] = {{");
        if (_activeStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _activeStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_activeStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_buttonTooltips[{_buttonTooltips.Length}] = {{");
        if (_buttonTooltips.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _buttonTooltips)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_buttonTooltips.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonScale: {_buttonScale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_allowActiveStateForButtons: {_allowActiveStateForButtons}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_useBoxStyleForButtons: {_useBoxStyleForButtons}");
    }
}

/* $ToggleEvent (1 fields) */
public record class ToggleEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ToggleEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ToggleEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Navigation_1 (6 fields) */
public record class Navigation_1 (
    int m_Mode,
    bool m_WrapAround,
    PPtr<Selectable> m_SelectOnUp,
    PPtr<Selectable> m_SelectOnDown,
    PPtr<Selectable> m_SelectOnLeft,
    PPtr<Selectable> m_SelectOnRight) : IUnityStructure
{
    public static Navigation_1 Read(EndianBinaryReader reader)
    {
        int m_Mode_ = reader.ReadS32();
        bool m_WrapAround_ = reader.ReadBool();
        reader.AlignTo(4); /* m_WrapAround */
        PPtr<Selectable> m_SelectOnUp_ = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> m_SelectOnDown_ = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> m_SelectOnLeft_ = PPtr<Selectable>.Read(reader);
        PPtr<Selectable> m_SelectOnRight_ = PPtr<Selectable>.Read(reader);
        
        return new(m_Mode_,
            m_WrapAround_,
            m_SelectOnUp_,
            m_SelectOnDown_,
            m_SelectOnLeft_,
            m_SelectOnRight_);
    }

    public override string ToString() => $"Navigation_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Mode: {m_Mode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WrapAround: {m_WrapAround}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnUp: {m_SelectOnUp}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnDown: {m_SelectOnDown}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnLeft: {m_SelectOnLeft}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SelectOnRight: {m_SelectOnRight}");
    }
}

/* $ColorBlock_1 (7 fields) */
public record class ColorBlock_1 (
    ColorRGBA_1 m_NormalColor,
    ColorRGBA_1 m_HighlightedColor,
    ColorRGBA_1 m_PressedColor,
    ColorRGBA_1 m_SelectedColor,
    ColorRGBA_1 m_DisabledColor,
    float m_ColorMultiplier,
    float m_FadeDuration) : IUnityStructure
{
    public static ColorBlock_1 Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 m_NormalColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* m_NormalColor */
        ColorRGBA_1 m_HighlightedColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* m_HighlightedColor */
        ColorRGBA_1 m_PressedColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* m_PressedColor */
        ColorRGBA_1 m_SelectedColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* m_SelectedColor */
        ColorRGBA_1 m_DisabledColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* m_DisabledColor */
        float m_ColorMultiplier_ = reader.ReadF32();
        float m_FadeDuration_ = reader.ReadF32();
        
        return new(m_NormalColor_,
            m_HighlightedColor_,
            m_PressedColor_,
            m_SelectedColor_,
            m_DisabledColor_,
            m_ColorMultiplier_,
            m_FadeDuration_);
    }

    public override string ToString() => $"ColorBlock_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_NormalColor: {{ r: {m_NormalColor.r}, g: {m_NormalColor.g}, b: {m_NormalColor.b}, a: {m_NormalColor.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_HighlightedColor: {{ r: {m_HighlightedColor.r}, g: {m_HighlightedColor.g}, b: {m_HighlightedColor.b}, a: {m_HighlightedColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PressedColor: {{ r: {m_PressedColor.r}, g: {m_PressedColor.g}, b: {m_PressedColor.b}, a: {m_PressedColor.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SelectedColor: {{ r: {m_SelectedColor.r}, g: {m_SelectedColor.g}, b: {m_SelectedColor.b}, a: {m_SelectedColor.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DisabledColor: {{ r: {m_DisabledColor.r}, g: {m_DisabledColor.g}, b: {m_DisabledColor.b}, a: {m_DisabledColor.a} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ColorMultiplier: {m_ColorMultiplier}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FadeDuration: {m_FadeDuration}");
    }
}

/* $ToggleEvent_1 (1 fields) */
public record class ToggleEvent_1 (
    PersistentCallGroup_1 m_PersistentCalls) : IUnityStructure
{
    public static ToggleEvent_1 Read(EndianBinaryReader reader)
    {
        PersistentCallGroup_1 m_PersistentCalls_ = PersistentCallGroup_1.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ToggleEvent_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $EllipseShapeRenderSettingsView (6 fields) */
public record class EllipseShapeRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static EllipseShapeRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"EllipseShapeRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $EquipmentSlotSetting (2 fields) */
public record class EquipmentSlotSetting (
    int Slot,
    PPtr<AnimationClipWrapper> ClipWrapper) : IUnityStructure
{
    public static EquipmentSlotSetting Read(EndianBinaryReader reader)
    {
        int Slot_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> ClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Slot_,
            ClipWrapper_);
    }

    public override string ToString() => $"EquipmentSlotSetting\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Slot: {Slot}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipWrapper: {ClipWrapper}");
    }
}

/* $ShipPostTypeIcon (2 fields) */
public record class ShipPostTypeIcon (
    int Type,
    PPtr<Sprite> Icon) : IUnityStructure
{
    public static ShipPostTypeIcon Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<Sprite> Icon_ = PPtr<Sprite>.Read(reader);
        
        return new(Type_,
            Icon_);
    }

    public override string ToString() => $"ShipPostTypeIcon\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }
}

/* $UnityEvent (1 fields) */
public record class UnityEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static UnityEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"UnityEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SettingsViews (6 fields) */
public record class SettingsViews (
    PPtr<SettingsEntityHeaderConsoleView> m_SettingsEntityHeaderViewPrefab,
    PPtr<SettingsEntityBoolConsoleView> m_SettingsEntityBoolViewPrefab,
    PPtr<SettingsEntityDropdownConsoleView> m_SettingsEntityDropdownViewPrefab,
    PPtr<SettingsEntitySliderConsoleView> m_SettingsEntitySliderViewPrefab,
    PPtr<SettingsEntityDropdownGameDifficultyConsoleView> m_SettingsEntityDropdownGameDifficultyViewPrefab,
    PPtr<SettingsEntityBoolOnlyOneSaveConsoleView> m_SettingsEntityBoolOnlyOneSaveViewPrefab) : IUnityStructure
{
    public static SettingsViews Read(EndianBinaryReader reader)
    {
        PPtr<SettingsEntityHeaderConsoleView> m_SettingsEntityHeaderViewPrefab_ = PPtr<SettingsEntityHeaderConsoleView>.Read(reader);
        PPtr<SettingsEntityBoolConsoleView> m_SettingsEntityBoolViewPrefab_ = PPtr<SettingsEntityBoolConsoleView>.Read(reader);
        PPtr<SettingsEntityDropdownConsoleView> m_SettingsEntityDropdownViewPrefab_ = PPtr<SettingsEntityDropdownConsoleView>.Read(reader);
        PPtr<SettingsEntitySliderConsoleView> m_SettingsEntitySliderViewPrefab_ = PPtr<SettingsEntitySliderConsoleView>.Read(reader);
        PPtr<SettingsEntityDropdownGameDifficultyConsoleView> m_SettingsEntityDropdownGameDifficultyViewPrefab_ = PPtr<SettingsEntityDropdownGameDifficultyConsoleView>.Read(reader);
        PPtr<SettingsEntityBoolOnlyOneSaveConsoleView> m_SettingsEntityBoolOnlyOneSaveViewPrefab_ = PPtr<SettingsEntityBoolOnlyOneSaveConsoleView>.Read(reader);
        
        return new(m_SettingsEntityHeaderViewPrefab_,
            m_SettingsEntityBoolViewPrefab_,
            m_SettingsEntityDropdownViewPrefab_,
            m_SettingsEntitySliderViewPrefab_,
            m_SettingsEntityDropdownGameDifficultyViewPrefab_,
            m_SettingsEntityBoolOnlyOneSaveViewPrefab_);
    }

    public override string ToString() => $"SettingsViews\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityHeaderViewPrefab: {m_SettingsEntityHeaderViewPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolViewPrefab: {m_SettingsEntityBoolViewPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownViewPrefab: {m_SettingsEntityDropdownViewPrefab}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntitySliderViewPrefab: {m_SettingsEntitySliderViewPrefab}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownGameDifficultyViewPrefab: {m_SettingsEntityDropdownGameDifficultyViewPrefab}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolOnlyOneSaveViewPrefab: {m_SettingsEntityBoolOnlyOneSaveViewPrefab}");
    }
}

/* $AkCommonUserSettings (12 fields) */
public record class AkCommonUserSettings (
    AsciiString m_BasePath,
    AsciiString m_StartupLanguage,
    bool m_EngineLogging,
    float m_DefaultScalingFactor,
    uint m_MaximumNumberOfPositioningPaths,
    uint m_CommandQueueSize,
    uint m_SamplesPerFrame,
    AkCommonOutputSettings m_MainOutputSettings,
    float m_StreamingLookAheadRatio,
    uint m_SampleRate,
    ushort m_NumberOfRefillsInVoice,
    SpatialAudioSettings m_SpatialAudioSettings) : IUnityStructure
{
    public static AkCommonUserSettings Read(EndianBinaryReader reader)
    {
        AsciiString m_BasePath_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_BasePath */
        AsciiString m_StartupLanguage_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StartupLanguage */
        bool m_EngineLogging_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EngineLogging */
        float m_DefaultScalingFactor_ = reader.ReadF32();
        uint m_MaximumNumberOfPositioningPaths_ = reader.ReadU32();
        uint m_CommandQueueSize_ = reader.ReadU32();
        uint m_SamplesPerFrame_ = reader.ReadU32();
        AkCommonOutputSettings m_MainOutputSettings_ = AkCommonOutputSettings.Read(reader);
        reader.AlignTo(4); /* m_MainOutputSettings */
        float m_StreamingLookAheadRatio_ = reader.ReadF32();
        uint m_SampleRate_ = reader.ReadU32();
        ushort m_NumberOfRefillsInVoice_ = reader.ReadU16();
        reader.AlignTo(4); /* m_NumberOfRefillsInVoice */
        SpatialAudioSettings m_SpatialAudioSettings_ = SpatialAudioSettings.Read(reader);
        reader.AlignTo(4); /* m_SpatialAudioSettings */
        
        return new(m_BasePath_,
            m_StartupLanguage_,
            m_EngineLogging_,
            m_DefaultScalingFactor_,
            m_MaximumNumberOfPositioningPaths_,
            m_CommandQueueSize_,
            m_SamplesPerFrame_,
            m_MainOutputSettings_,
            m_StreamingLookAheadRatio_,
            m_SampleRate_,
            m_NumberOfRefillsInVoice_,
            m_SpatialAudioSettings_);
    }

    public override string ToString() => $"AkCommonUserSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BasePath: \"{m_BasePath}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StartupLanguage: \"{m_StartupLanguage}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EngineLogging: {m_EngineLogging}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DefaultScalingFactor: {m_DefaultScalingFactor}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumNumberOfPositioningPaths: {m_MaximumNumberOfPositioningPaths}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CommandQueueSize: {m_CommandQueueSize}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SamplesPerFrame: {m_SamplesPerFrame}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MainOutputSettings: {{ \n{m_MainOutputSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StreamingLookAheadRatio: {m_StreamingLookAheadRatio}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SampleRate: {m_SampleRate}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumberOfRefillsInVoice: {m_NumberOfRefillsInVoice}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SpatialAudioSettings: {{ \n{m_SpatialAudioSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AkCommonOutputSettings (4 fields) */
public record class AkCommonOutputSettings (
    AsciiString m_AudioDeviceShareset,
    uint m_DeviceID,
    int m_PanningRule,
    ChannelConfiguration m_ChannelConfig) : IUnityStructure
{
    public static AkCommonOutputSettings Read(EndianBinaryReader reader)
    {
        AsciiString m_AudioDeviceShareset_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_AudioDeviceShareset */
        uint m_DeviceID_ = reader.ReadU32();
        int m_PanningRule_ = reader.ReadS32();
        ChannelConfiguration m_ChannelConfig_ = ChannelConfiguration.Read(reader);
        reader.AlignTo(4); /* m_ChannelConfig */
        
        return new(m_AudioDeviceShareset_,
            m_DeviceID_,
            m_PanningRule_,
            m_ChannelConfig_);
    }

    public override string ToString() => $"AkCommonOutputSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AudioDeviceShareset: \"{m_AudioDeviceShareset}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DeviceID: {m_DeviceID}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PanningRule: {m_PanningRule}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ChannelConfig: {{ m_ChannelConfigType: {m_ChannelConfig.m_ChannelConfigType}, m_ChannelMask: {m_ChannelConfig.m_ChannelMask}, m_NumberOfChannels: {m_ChannelConfig.m_NumberOfChannels} }}\n");
    }
}

/* $ChannelConfiguration (3 fields) */
public readonly record struct ChannelConfiguration (
    int m_ChannelConfigType,
    int m_ChannelMask,
    uint m_NumberOfChannels) : IUnityStructure
{
    public static ChannelConfiguration Read(EndianBinaryReader reader)
    {
        int m_ChannelConfigType_ = reader.ReadS32();
        int m_ChannelMask_ = reader.ReadS32();
        uint m_NumberOfChannels_ = reader.ReadU32();
        
        return new(m_ChannelConfigType_,
            m_ChannelMask_,
            m_NumberOfChannels_);
    }

    public override string ToString() => $"ChannelConfiguration\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ChannelConfigType: {m_ChannelConfigType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ChannelMask: {m_ChannelMask}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumberOfChannels: {m_NumberOfChannels}");
    }
}

/* $SpatialAudioSettings (12 fields) */
public readonly record struct SpatialAudioSettings (
    uint m_MaxSoundPropagationDepth,
    float m_MovementThreshold,
    uint m_NumberOfPrimaryRays,
    uint m_MaxReflectionOrder,
    uint m_MaxDiffractionOrder,
    uint m_DiffractionOnReflectionsOrder,
    float m_MaxPathLength,
    float m_CPULimitPercentage,
    bool m_EnableDiffractionOnReflections,
    bool m_EnableGeometricDiffractionAndTransmission,
    bool m_CalcEmitterVirtualPosition,
    uint m_LoadBalancingSpread) : IUnityStructure
{
    public static SpatialAudioSettings Read(EndianBinaryReader reader)
    {
        uint m_MaxSoundPropagationDepth_ = reader.ReadU32();
        float m_MovementThreshold_ = reader.ReadF32();
        uint m_NumberOfPrimaryRays_ = reader.ReadU32();
        uint m_MaxReflectionOrder_ = reader.ReadU32();
        uint m_MaxDiffractionOrder_ = reader.ReadU32();
        uint m_DiffractionOnReflectionsOrder_ = reader.ReadU32();
        float m_MaxPathLength_ = reader.ReadF32();
        float m_CPULimitPercentage_ = reader.ReadF32();
        bool m_EnableDiffractionOnReflections_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableDiffractionOnReflections */
        bool m_EnableGeometricDiffractionAndTransmission_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableGeometricDiffractionAndTransmission */
        bool m_CalcEmitterVirtualPosition_ = reader.ReadBool();
        reader.AlignTo(4); /* m_CalcEmitterVirtualPosition */
        uint m_LoadBalancingSpread_ = reader.ReadU32();
        
        return new(m_MaxSoundPropagationDepth_,
            m_MovementThreshold_,
            m_NumberOfPrimaryRays_,
            m_MaxReflectionOrder_,
            m_MaxDiffractionOrder_,
            m_DiffractionOnReflectionsOrder_,
            m_MaxPathLength_,
            m_CPULimitPercentage_,
            m_EnableDiffractionOnReflections_,
            m_EnableGeometricDiffractionAndTransmission_,
            m_CalcEmitterVirtualPosition_,
            m_LoadBalancingSpread_);
    }

    public override string ToString() => $"SpatialAudioSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxSoundPropagationDepth: {m_MaxSoundPropagationDepth}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MovementThreshold: {m_MovementThreshold}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NumberOfPrimaryRays: {m_NumberOfPrimaryRays}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxReflectionOrder: {m_MaxReflectionOrder}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxDiffractionOrder: {m_MaxDiffractionOrder}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DiffractionOnReflectionsOrder: {m_DiffractionOnReflectionsOrder}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxPathLength: {m_MaxPathLength}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CPULimitPercentage: {m_CPULimitPercentage}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableDiffractionOnReflections: {m_EnableDiffractionOnReflections}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableGeometricDiffractionAndTransmission: {m_EnableGeometricDiffractionAndTransmission}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CalcEmitterVirtualPosition: {m_CalcEmitterVirtualPosition}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LoadBalancingSpread: {m_LoadBalancingSpread}");
    }
}

/* $PlatformAdvancedSettings_2 (24 fields) */
public record class PlatformAdvancedSettings_2 (
    uint m_IOMemorySize,
    float m_TargetAutoStreamBufferLengthMs,
    bool m_UseStreamCache,
    uint m_MaximumPinnedBytesInCache,
    bool m_EnableGameSyncPreparation,
    uint m_ContinuousPlaybackLookAhead,
    uint m_MonitorQueuePoolSize,
    uint m_MaximumHardwareTimeoutMs,
    bool m_DebugOutOfRangeCheckEnabled,
    float m_DebugOutOfRangeLimit,
    bool m_SuspendAudioDuringFocusLoss,
    bool m_RenderDuringFocusLoss,
    AsciiString m_SoundBankPersistentDataPath,
    bool m_UseAsyncOpen,
    uint m_MemoryAllocationSizeLimit,
    uint m_MemoryDebugLevel,
    int m_MemorySpanCount,
    uint NumAudioOut2Ports,
    uint NumAudioOut2ObjectPorts,
    bool HwCodecLowLatencyMode,
    bool VorbisHwAcceleration,
    bool Enable3DAudioSync,
    uint NumOperationsForHwMixing,
    bool PlotQueueLevel) : IUnityStructure
{
    public static PlatformAdvancedSettings_2 Read(EndianBinaryReader reader)
    {
        uint m_IOMemorySize_ = reader.ReadU32();
        float m_TargetAutoStreamBufferLengthMs_ = reader.ReadF32();
        bool m_UseStreamCache_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseStreamCache */
        uint m_MaximumPinnedBytesInCache_ = reader.ReadU32();
        bool m_EnableGameSyncPreparation_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableGameSyncPreparation */
        uint m_ContinuousPlaybackLookAhead_ = reader.ReadU32();
        uint m_MonitorQueuePoolSize_ = reader.ReadU32();
        uint m_MaximumHardwareTimeoutMs_ = reader.ReadU32();
        bool m_DebugOutOfRangeCheckEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* m_DebugOutOfRangeCheckEnabled */
        float m_DebugOutOfRangeLimit_ = reader.ReadF32();
        bool m_SuspendAudioDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_SuspendAudioDuringFocusLoss */
        bool m_RenderDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_RenderDuringFocusLoss */
        AsciiString m_SoundBankPersistentDataPath_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_SoundBankPersistentDataPath */
        bool m_UseAsyncOpen_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseAsyncOpen */
        uint m_MemoryAllocationSizeLimit_ = reader.ReadU32();
        uint m_MemoryDebugLevel_ = reader.ReadU32();
        int m_MemorySpanCount_ = reader.ReadS32();
        uint NumAudioOut2Ports_ = reader.ReadU32();
        uint NumAudioOut2ObjectPorts_ = reader.ReadU32();
        bool HwCodecLowLatencyMode_ = reader.ReadBool();
        reader.AlignTo(4); /* HwCodecLowLatencyMode */
        bool VorbisHwAcceleration_ = reader.ReadBool();
        reader.AlignTo(4); /* VorbisHwAcceleration */
        bool Enable3DAudioSync_ = reader.ReadBool();
        reader.AlignTo(4); /* Enable3DAudioSync */
        uint NumOperationsForHwMixing_ = reader.ReadU32();
        bool PlotQueueLevel_ = reader.ReadBool();
        reader.AlignTo(4); /* PlotQueueLevel */
        
        return new(m_IOMemorySize_,
            m_TargetAutoStreamBufferLengthMs_,
            m_UseStreamCache_,
            m_MaximumPinnedBytesInCache_,
            m_EnableGameSyncPreparation_,
            m_ContinuousPlaybackLookAhead_,
            m_MonitorQueuePoolSize_,
            m_MaximumHardwareTimeoutMs_,
            m_DebugOutOfRangeCheckEnabled_,
            m_DebugOutOfRangeLimit_,
            m_SuspendAudioDuringFocusLoss_,
            m_RenderDuringFocusLoss_,
            m_SoundBankPersistentDataPath_,
            m_UseAsyncOpen_,
            m_MemoryAllocationSizeLimit_,
            m_MemoryDebugLevel_,
            m_MemorySpanCount_,
            NumAudioOut2Ports_,
            NumAudioOut2ObjectPorts_,
            HwCodecLowLatencyMode_,
            VorbisHwAcceleration_,
            Enable3DAudioSync_,
            NumOperationsForHwMixing_,
            PlotQueueLevel_);
    }

    public override string ToString() => $"PlatformAdvancedSettings_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IOMemorySize: {m_IOMemorySize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetAutoStreamBufferLengthMs: {m_TargetAutoStreamBufferLengthMs}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseStreamCache: {m_UseStreamCache}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumPinnedBytesInCache: {m_MaximumPinnedBytesInCache}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableGameSyncPreparation: {m_EnableGameSyncPreparation}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ContinuousPlaybackLookAhead: {m_ContinuousPlaybackLookAhead}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MonitorQueuePoolSize: {m_MonitorQueuePoolSize}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumHardwareTimeoutMs: {m_MaximumHardwareTimeoutMs}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeCheckEnabled: {m_DebugOutOfRangeCheckEnabled}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeLimit: {m_DebugOutOfRangeLimit}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SuspendAudioDuringFocusLoss: {m_SuspendAudioDuringFocusLoss}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RenderDuringFocusLoss: {m_RenderDuringFocusLoss}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SoundBankPersistentDataPath: \"{m_SoundBankPersistentDataPath}\"");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseAsyncOpen: {m_UseAsyncOpen}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryAllocationSizeLimit: {m_MemoryAllocationSizeLimit}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryDebugLevel: {m_MemoryDebugLevel}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemorySpanCount: {m_MemorySpanCount}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NumAudioOut2Ports: {NumAudioOut2Ports}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NumAudioOut2ObjectPorts: {NumAudioOut2ObjectPorts}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HwCodecLowLatencyMode: {HwCodecLowLatencyMode}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VorbisHwAcceleration: {VorbisHwAcceleration}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enable3DAudioSync: {Enable3DAudioSync}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NumOperationsForHwMixing: {NumOperationsForHwMixing}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PlotQueueLevel: {PlotQueueLevel}");
    }
}

/* $AkCommonCommSettings (7 fields) */
public record class AkCommonCommSettings (
    uint m_PoolSize,
    ushort m_DiscoveryBroadcastPort,
    ushort m_CommandPort,
    ushort m_NotificationPort,
    bool m_InitializeSystemComms,
    AsciiString m_NetworkName,
    int m_commSystem) : IUnityStructure
{
    public static AkCommonCommSettings Read(EndianBinaryReader reader)
    {
        uint m_PoolSize_ = reader.ReadU32();
        ushort m_DiscoveryBroadcastPort_ = reader.ReadU16();
        reader.AlignTo(4); /* m_DiscoveryBroadcastPort */
        ushort m_CommandPort_ = reader.ReadU16();
        reader.AlignTo(4); /* m_CommandPort */
        ushort m_NotificationPort_ = reader.ReadU16();
        reader.AlignTo(4); /* m_NotificationPort */
        bool m_InitializeSystemComms_ = reader.ReadBool();
        reader.AlignTo(4); /* m_InitializeSystemComms */
        AsciiString m_NetworkName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_NetworkName */
        int m_commSystem_ = reader.ReadS32();
        
        return new(m_PoolSize_,
            m_DiscoveryBroadcastPort_,
            m_CommandPort_,
            m_NotificationPort_,
            m_InitializeSystemComms_,
            m_NetworkName_,
            m_commSystem_);
    }

    public override string ToString() => $"AkCommonCommSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PoolSize: {m_PoolSize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DiscoveryBroadcastPort: {m_DiscoveryBroadcastPort}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CommandPort: {m_CommandPort}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NotificationPort: {m_NotificationPort}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_InitializeSystemComms: {m_InitializeSystemComms}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NetworkName: \"{m_NetworkName}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_commSystem: {m_commSystem}");
    }
}

/* $ColonyProjectsBuiltListElemVisual (1 fields) */
public record class ColonyProjectsBuiltListElemVisual (
    CanvasGroupWithAlpha[] Elements) : IUnityStructure
{
    public static ColonyProjectsBuiltListElemVisual Read(EndianBinaryReader reader)
    {
        CanvasGroupWithAlpha[] Elements_ = BuiltInArray<CanvasGroupWithAlpha>.Read(reader);
        
        return new(Elements_);
    }

    public override string ToString() => $"ColonyProjectsBuiltListElemVisual\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Elements[{Elements.Length}] = {{");
        if (Elements.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CanvasGroupWithAlpha _4 in Elements)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Elements.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CanvasGroupWithAlpha (2 fields) */
public record class CanvasGroupWithAlpha (
    PPtr<CanvasGroup> CanvasGroup,
    float Alpha) : IUnityStructure
{
    public static CanvasGroupWithAlpha Read(EndianBinaryReader reader)
    {
        PPtr<CanvasGroup> CanvasGroup_ = PPtr<CanvasGroup>.Read(reader);
        float Alpha_ = reader.ReadF32();
        
        return new(CanvasGroup_,
            Alpha_);
    }

    public override string ToString() => $"CanvasGroupWithAlpha\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CanvasGroup: {CanvasGroup}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Alpha: {Alpha}");
    }
}

/* $OffsetAnimationSettings (6 fields) */
public record class OffsetAnimationSettings (
    byte Enabled,
    AnimationCurve OffsetX,
    AnimationCurve OffsetY,
    AnimationCurve OffsetZ,
    byte UseWorldRotation,
    AsciiString WorldRotationBone) : IUnityStructure
{
    public static OffsetAnimationSettings Read(EndianBinaryReader reader)
    {
        byte Enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* Enabled */
        AnimationCurve OffsetX_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OffsetX */
        AnimationCurve OffsetY_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OffsetY */
        AnimationCurve OffsetZ_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OffsetZ */
        byte UseWorldRotation_ = reader.ReadU8();
        reader.AlignTo(4); /* UseWorldRotation */
        AsciiString WorldRotationBone_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* WorldRotationBone */
        
        return new(Enabled_,
            OffsetX_,
            OffsetY_,
            OffsetZ_,
            UseWorldRotation_,
            WorldRotationBone_);
    }

    public override string ToString() => $"OffsetAnimationSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetX: {{ \n{OffsetX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetY: {{ \n{OffsetY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetZ: {{ \n{OffsetZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseWorldRotation: {UseWorldRotation}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WorldRotationBone: \"{WorldRotationBone}\"");
    }
}

/* $Reference (1 fields) */
public record class Reference (
    AsciiString guid) : IUnityStructure
{
    public static Reference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"Reference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $TrailBonesNamesPair (2 fields) */
public record class TrailBonesNamesPair (
    AsciiString Start,
    AsciiString End) : IUnityStructure
{
    public static TrailBonesNamesPair Read(EndianBinaryReader reader)
    {
        AsciiString Start_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Start */
        AsciiString End_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* End */
        
        return new(Start_,
            End_);
    }

    public override string ToString() => $"TrailBonesNamesPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Start: \"{Start}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}End: \"{End}\"");
    }
}

/* $BlueprintScriptZoneReference (1 fields) */
public record class BlueprintScriptZoneReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintScriptZoneReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintScriptZoneReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $UnitEvent (1 fields) */
public record class UnitEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static UnitEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"UnitEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ScreenSpaceReflectionsQualityParameter (2 fields) */
public readonly record struct ScreenSpaceReflectionsQualityParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static ScreenSpaceReflectionsQualityParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"ScreenSpaceReflectionsQualityParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $ColorPrecisionParameter (2 fields) */
public readonly record struct ColorPrecisionParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static ColorPrecisionParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"ColorPrecisionParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $TracingMethodParameter (2 fields) */
public readonly record struct TracingMethodParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static TracingMethodParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"TracingMethodParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $ClampedIntParameter (2 fields) */
public readonly record struct ClampedIntParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static ClampedIntParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"ClampedIntParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $FloatRangeParameter (2 fields) */
public record class FloatRangeParameter (
    byte m_OverrideState,
    Vector2f m_Value) : IUnityStructure
{
    public static FloatRangeParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        Vector2f m_Value_ = Vector2f.Read(reader);
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"FloatRangeParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ x: {m_Value.x}, y: {m_Value.y} }}\n");
    }
}

/* $SizeEntry (2 fields) */
public record class SizeEntry (
    int Size,
    LocalizedString Text) : IUnityStructure
{
    public static SizeEntry Read(EndianBinaryReader reader)
    {
        int Size_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Size_,
            Text_);
    }

    public override string ToString() => $"SizeEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Size: {Size}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $NegativeEffects (13 fields) */
public record class NegativeEffects (
    PPtr<FadeAnimator> RedBackground,
    PPtr<Image> ResourceIcon,
    PPtr<Image> ResourceSeparator,
    PPtr<TextMeshProUGUI> ResourceCount,
    PPtr<TextMeshProUGUI> ResourceCountAdditional,
    ColorRGBA_1 RedIconColor,
    ColorRGBA_1 RedSeparatorColor,
    ColorRGBA_1 RedCountColor,
    ColorRGBA_1 RedCountAdditionalColor,
    ColorRGBA_1 NormalIconColor,
    ColorRGBA_1 NormalSeparatorColor,
    ColorRGBA_1 NormalCountColor,
    ColorRGBA_1 NormalCountAdditionalColor) : IUnityStructure
{
    public static NegativeEffects Read(EndianBinaryReader reader)
    {
        PPtr<FadeAnimator> RedBackground_ = PPtr<FadeAnimator>.Read(reader);
        PPtr<Image> ResourceIcon_ = PPtr<Image>.Read(reader);
        PPtr<Image> ResourceSeparator_ = PPtr<Image>.Read(reader);
        PPtr<TextMeshProUGUI> ResourceCount_ = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<TextMeshProUGUI> ResourceCountAdditional_ = PPtr<TextMeshProUGUI>.Read(reader);
        ColorRGBA_1 RedIconColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 RedSeparatorColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 RedCountColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 RedCountAdditionalColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 NormalIconColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 NormalSeparatorColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 NormalCountColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 NormalCountAdditionalColor_ = ColorRGBA_1.Read(reader);
        
        return new(RedBackground_,
            ResourceIcon_,
            ResourceSeparator_,
            ResourceCount_,
            ResourceCountAdditional_,
            RedIconColor_,
            RedSeparatorColor_,
            RedCountColor_,
            RedCountAdditionalColor_,
            NormalIconColor_,
            NormalSeparatorColor_,
            NormalCountColor_,
            NormalCountAdditionalColor_);
    }

    public override string ToString() => $"NegativeEffects\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RedBackground: {RedBackground}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ResourceIcon: {ResourceIcon}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ResourceSeparator: {ResourceSeparator}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ResourceCount: {ResourceCount}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ResourceCountAdditional: {ResourceCountAdditional}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RedIconColor: {{ r: {RedIconColor.r}, g: {RedIconColor.g}, b: {RedIconColor.b}, a: {RedIconColor.a} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RedSeparatorColor: {{ r: {RedSeparatorColor.r}, g: {RedSeparatorColor.g}, b: {RedSeparatorColor.b}, a: {RedSeparatorColor.a} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RedCountColor: {{ r: {RedCountColor.r}, g: {RedCountColor.g}, b: {RedCountColor.b}, a: {RedCountColor.a} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RedCountAdditionalColor: {{ r: {RedCountAdditionalColor.r}, g: {RedCountAdditionalColor.g}, b: {RedCountAdditionalColor.b}, a: {RedCountAdditionalColor.a} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalIconColor: {{ r: {NormalIconColor.r}, g: {NormalIconColor.g}, b: {NormalIconColor.b}, a: {NormalIconColor.a} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalSeparatorColor: {{ r: {NormalSeparatorColor.r}, g: {NormalSeparatorColor.g}, b: {NormalSeparatorColor.b}, a: {NormalSeparatorColor.a} }}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalCountColor: {{ r: {NormalCountColor.r}, g: {NormalCountColor.g}, b: {NormalCountColor.b}, a: {NormalCountColor.a} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalCountAdditionalColor: {{ r: {NormalCountAdditionalColor.r}, g: {NormalCountAdditionalColor.g}, b: {NormalCountAdditionalColor.b}, a: {NormalCountAdditionalColor.a} }}\n");
    }
}

/* $FaceInfo (21 fields) */
public record class FaceInfo (
    int m_FaceIndex,
    AsciiString m_FamilyName,
    AsciiString m_StyleName,
    int m_PointSize,
    float m_Scale,
    int m_UnitsPerEM,
    float m_LineHeight,
    float m_AscentLine,
    float m_CapLine,
    float m_MeanLine,
    float m_Baseline,
    float m_DescentLine,
    float m_SuperscriptOffset,
    float m_SuperscriptSize,
    float m_SubscriptOffset,
    float m_SubscriptSize,
    float m_UnderlineOffset,
    float m_UnderlineThickness,
    float m_StrikethroughOffset,
    float m_StrikethroughThickness,
    float m_TabWidth) : IUnityStructure
{
    public static FaceInfo Read(EndianBinaryReader reader)
    {
        int m_FaceIndex_ = reader.ReadS32();
        AsciiString m_FamilyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_FamilyName */
        AsciiString m_StyleName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_StyleName */
        int m_PointSize_ = reader.ReadS32();
        float m_Scale_ = reader.ReadF32();
        int m_UnitsPerEM_ = reader.ReadS32();
        float m_LineHeight_ = reader.ReadF32();
        float m_AscentLine_ = reader.ReadF32();
        float m_CapLine_ = reader.ReadF32();
        float m_MeanLine_ = reader.ReadF32();
        float m_Baseline_ = reader.ReadF32();
        float m_DescentLine_ = reader.ReadF32();
        float m_SuperscriptOffset_ = reader.ReadF32();
        float m_SuperscriptSize_ = reader.ReadF32();
        float m_SubscriptOffset_ = reader.ReadF32();
        float m_SubscriptSize_ = reader.ReadF32();
        float m_UnderlineOffset_ = reader.ReadF32();
        float m_UnderlineThickness_ = reader.ReadF32();
        float m_StrikethroughOffset_ = reader.ReadF32();
        float m_StrikethroughThickness_ = reader.ReadF32();
        float m_TabWidth_ = reader.ReadF32();
        
        return new(m_FaceIndex_,
            m_FamilyName_,
            m_StyleName_,
            m_PointSize_,
            m_Scale_,
            m_UnitsPerEM_,
            m_LineHeight_,
            m_AscentLine_,
            m_CapLine_,
            m_MeanLine_,
            m_Baseline_,
            m_DescentLine_,
            m_SuperscriptOffset_,
            m_SuperscriptSize_,
            m_SubscriptOffset_,
            m_SubscriptSize_,
            m_UnderlineOffset_,
            m_UnderlineThickness_,
            m_StrikethroughOffset_,
            m_StrikethroughThickness_,
            m_TabWidth_);
    }

    public override string ToString() => $"FaceInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FaceIndex: {m_FaceIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FamilyName: \"{m_FamilyName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StyleName: \"{m_StyleName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PointSize: {m_PointSize}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Scale: {m_Scale}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UnitsPerEM: {m_UnitsPerEM}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LineHeight: {m_LineHeight}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AscentLine: {m_AscentLine}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CapLine: {m_CapLine}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MeanLine: {m_MeanLine}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Baseline: {m_Baseline}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DescentLine: {m_DescentLine}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SuperscriptOffset: {m_SuperscriptOffset}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SuperscriptSize: {m_SuperscriptSize}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SubscriptOffset: {m_SubscriptOffset}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SubscriptSize: {m_SubscriptSize}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UnderlineOffset: {m_UnderlineOffset}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UnderlineThickness: {m_UnderlineThickness}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StrikethroughOffset: {m_StrikethroughOffset}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_StrikethroughThickness: {m_StrikethroughThickness}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TabWidth: {m_TabWidth}");
    }
}

/* $Glyph (6 fields) */
public record class Glyph (
    uint m_Index,
    GlyphMetrics m_Metrics,
    GlyphRect m_GlyphRect,
    float m_Scale,
    int m_AtlasIndex,
    int m_ClassDefinitionType) : IUnityStructure
{
    public static Glyph Read(EndianBinaryReader reader)
    {
        uint m_Index_ = reader.ReadU32();
        GlyphMetrics m_Metrics_ = GlyphMetrics.Read(reader);
        GlyphRect m_GlyphRect_ = GlyphRect.Read(reader);
        float m_Scale_ = reader.ReadF32();
        int m_AtlasIndex_ = reader.ReadS32();
        int m_ClassDefinitionType_ = reader.ReadS32();
        
        return new(m_Index_,
            m_Metrics_,
            m_GlyphRect_,
            m_Scale_,
            m_AtlasIndex_,
            m_ClassDefinitionType_);
    }

    public override string ToString() => $"Glyph\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Metrics: {{ \n{m_Metrics.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_GlyphRect: {{ m_X: {m_GlyphRect.m_X}, m_Y: {m_GlyphRect.m_Y}, m_Width: {m_GlyphRect.m_Width}, m_Height: {m_GlyphRect.m_Height} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Scale: {m_Scale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AtlasIndex: {m_AtlasIndex}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClassDefinitionType: {m_ClassDefinitionType}");
    }
}

/* $GlyphMetrics (5 fields) */
public readonly record struct GlyphMetrics (
    float m_Width,
    float m_Height,
    float m_HorizontalBearingX,
    float m_HorizontalBearingY,
    float m_HorizontalAdvance) : IUnityStructure
{
    public static GlyphMetrics Read(EndianBinaryReader reader)
    {
        float m_Width_ = reader.ReadF32();
        float m_Height_ = reader.ReadF32();
        float m_HorizontalBearingX_ = reader.ReadF32();
        float m_HorizontalBearingY_ = reader.ReadF32();
        float m_HorizontalAdvance_ = reader.ReadF32();
        
        return new(m_Width_,
            m_Height_,
            m_HorizontalBearingX_,
            m_HorizontalBearingY_,
            m_HorizontalAdvance_);
    }

    public override string ToString() => $"GlyphMetrics\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Width: {m_Width}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Height: {m_Height}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HorizontalBearingX: {m_HorizontalBearingX}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HorizontalBearingY: {m_HorizontalBearingY}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HorizontalAdvance: {m_HorizontalAdvance}");
    }
}

/* $GlyphRect (4 fields) */
public readonly record struct GlyphRect (
    int m_X,
    int m_Y,
    int m_Width,
    int m_Height) : IUnityStructure
{
    public static GlyphRect Read(EndianBinaryReader reader)
    {
        int m_X_ = reader.ReadS32();
        int m_Y_ = reader.ReadS32();
        int m_Width_ = reader.ReadS32();
        int m_Height_ = reader.ReadS32();
        
        return new(m_X_,
            m_Y_,
            m_Width_,
            m_Height_);
    }

    public override string ToString() => $"GlyphRect\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_X: {m_X}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Y: {m_Y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Width: {m_Width}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Height: {m_Height}");
    }
}

/* $TMP_Character (4 fields) */
public readonly record struct TMP_Character (
    byte m_ElementType,
    uint m_Unicode,
    uint m_GlyphIndex,
    float m_Scale) : IUnityStructure
{
    public static TMP_Character Read(EndianBinaryReader reader)
    {
        byte m_ElementType_ = reader.ReadU8();
        reader.AlignTo(4); /* m_ElementType */
        uint m_Unicode_ = reader.ReadU32();
        uint m_GlyphIndex_ = reader.ReadU32();
        float m_Scale_ = reader.ReadF32();
        
        return new(m_ElementType_,
            m_Unicode_,
            m_GlyphIndex_,
            m_Scale_);
    }

    public override string ToString() => $"TMP_Character\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ElementType: {m_ElementType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Unicode: {m_Unicode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GlyphIndex: {m_GlyphIndex}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Scale: {m_Scale}");
    }
}

/* $FaceInfo_Legacy (21 fields) */
public record class FaceInfo_Legacy (
    AsciiString Name,
    float PointSize,
    float Scale,
    int CharacterCount,
    float LineHeight,
    float Baseline,
    float Ascender,
    float CapHeight,
    float Descender,
    float CenterLine,
    float SuperscriptOffset,
    float SubscriptOffset,
    float SubSize,
    float Underline,
    float UnderlineThickness,
    float strikethrough,
    float strikethroughThickness,
    float TabWidth,
    float Padding,
    float AtlasWidth,
    float AtlasHeight) : IUnityStructure
{
    public static FaceInfo_Legacy Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        float PointSize_ = reader.ReadF32();
        float Scale_ = reader.ReadF32();
        int CharacterCount_ = reader.ReadS32();
        float LineHeight_ = reader.ReadF32();
        float Baseline_ = reader.ReadF32();
        float Ascender_ = reader.ReadF32();
        float CapHeight_ = reader.ReadF32();
        float Descender_ = reader.ReadF32();
        float CenterLine_ = reader.ReadF32();
        float SuperscriptOffset_ = reader.ReadF32();
        float SubscriptOffset_ = reader.ReadF32();
        float SubSize_ = reader.ReadF32();
        float Underline_ = reader.ReadF32();
        float UnderlineThickness_ = reader.ReadF32();
        float strikethrough_ = reader.ReadF32();
        float strikethroughThickness_ = reader.ReadF32();
        float TabWidth_ = reader.ReadF32();
        float Padding_ = reader.ReadF32();
        float AtlasWidth_ = reader.ReadF32();
        float AtlasHeight_ = reader.ReadF32();
        
        return new(Name_,
            PointSize_,
            Scale_,
            CharacterCount_,
            LineHeight_,
            Baseline_,
            Ascender_,
            CapHeight_,
            Descender_,
            CenterLine_,
            SuperscriptOffset_,
            SubscriptOffset_,
            SubSize_,
            Underline_,
            UnderlineThickness_,
            strikethrough_,
            strikethroughThickness_,
            TabWidth_,
            Padding_,
            AtlasWidth_,
            AtlasHeight_);
    }

    public override string ToString() => $"FaceInfo_Legacy\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PointSize: {PointSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CharacterCount: {CharacterCount}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LineHeight: {LineHeight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Baseline: {Baseline}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Ascender: {Ascender}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CapHeight: {CapHeight}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Descender: {Descender}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CenterLine: {CenterLine}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SuperscriptOffset: {SuperscriptOffset}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SubscriptOffset: {SubscriptOffset}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SubSize: {SubSize}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Underline: {Underline}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnderlineThickness: {UnderlineThickness}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}strikethrough: {strikethrough}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}strikethroughThickness: {strikethroughThickness}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TabWidth: {TabWidth}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Padding: {Padding}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AtlasWidth: {AtlasWidth}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AtlasHeight: {AtlasHeight}");
    }
}

/* $TMP_Glyph (9 fields) */
public readonly record struct TMP_Glyph (
    int id,
    float x,
    float y,
    float width,
    float height,
    float xOffset,
    float yOffset,
    float xAdvance,
    float scale) : IUnityStructure
{
    public static TMP_Glyph Read(EndianBinaryReader reader)
    {
        int id_ = reader.ReadS32();
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float width_ = reader.ReadF32();
        float height_ = reader.ReadF32();
        float xOffset_ = reader.ReadF32();
        float yOffset_ = reader.ReadF32();
        float xAdvance_ = reader.ReadF32();
        float scale_ = reader.ReadF32();
        
        return new(id_,
            x_,
            y_,
            width_,
            height_,
            xOffset_,
            yOffset_,
            xAdvance_,
            scale_);
    }

    public override string ToString() => $"TMP_Glyph\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}id: {id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}width: {width}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}height: {height}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xOffset: {xOffset}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}yOffset: {yOffset}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xAdvance: {xAdvance}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}scale: {scale}");
    }
}

/* $KerningTable (1 fields) */
public record class KerningTable (
    KerningPair[] kerningPairs) : IUnityStructure
{
    public static KerningTable Read(EndianBinaryReader reader)
    {
        KerningPair[] kerningPairs_ = BuiltInArray<KerningPair>.Read(reader);
        reader.AlignTo(4); /* kerningPairs */
        
        return new(kerningPairs_);
    }

    public override string ToString() => $"KerningTable\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}kerningPairs[{kerningPairs.Length}] = {{");
        if (kerningPairs.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KerningPair _4 in kerningPairs)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (kerningPairs.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $KerningPair (6 fields) */
public record class KerningPair (
    uint m_FirstGlyph,
    GlyphValueRecord_Legacy m_FirstGlyphAdjustments,
    uint m_SecondGlyph,
    GlyphValueRecord_Legacy m_SecondGlyphAdjustments,
    float xOffset,
    byte m_IgnoreSpacingAdjustments) : IUnityStructure
{
    public static KerningPair Read(EndianBinaryReader reader)
    {
        uint m_FirstGlyph_ = reader.ReadU32();
        GlyphValueRecord_Legacy m_FirstGlyphAdjustments_ = GlyphValueRecord_Legacy.Read(reader);
        uint m_SecondGlyph_ = reader.ReadU32();
        GlyphValueRecord_Legacy m_SecondGlyphAdjustments_ = GlyphValueRecord_Legacy.Read(reader);
        float xOffset_ = reader.ReadF32();
        byte m_IgnoreSpacingAdjustments_ = reader.ReadU8();
        reader.AlignTo(4); /* m_IgnoreSpacingAdjustments */
        
        return new(m_FirstGlyph_,
            m_FirstGlyphAdjustments_,
            m_SecondGlyph_,
            m_SecondGlyphAdjustments_,
            xOffset_,
            m_IgnoreSpacingAdjustments_);
    }

    public override string ToString() => $"KerningPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FirstGlyph: {m_FirstGlyph}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_FirstGlyphAdjustments: {{ xPlacement: {m_FirstGlyphAdjustments.xPlacement}, yPlacement: {m_FirstGlyphAdjustments.yPlacement}, xAdvance: {m_FirstGlyphAdjustments.xAdvance}, yAdvance: {m_FirstGlyphAdjustments.yAdvance} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SecondGlyph: {m_SecondGlyph}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SecondGlyphAdjustments: {{ xPlacement: {m_SecondGlyphAdjustments.xPlacement}, yPlacement: {m_SecondGlyphAdjustments.yPlacement}, xAdvance: {m_SecondGlyphAdjustments.xAdvance}, yAdvance: {m_SecondGlyphAdjustments.yAdvance} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xOffset: {xOffset}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IgnoreSpacingAdjustments: {m_IgnoreSpacingAdjustments}");
    }
}

/* $GlyphValueRecord_Legacy (4 fields) */
public readonly record struct GlyphValueRecord_Legacy (
    float xPlacement,
    float yPlacement,
    float xAdvance,
    float yAdvance) : IUnityStructure
{
    public static GlyphValueRecord_Legacy Read(EndianBinaryReader reader)
    {
        float xPlacement_ = reader.ReadF32();
        float yPlacement_ = reader.ReadF32();
        float xAdvance_ = reader.ReadF32();
        float yAdvance_ = reader.ReadF32();
        
        return new(xPlacement_,
            yPlacement_,
            xAdvance_,
            yAdvance_);
    }

    public override string ToString() => $"GlyphValueRecord_Legacy\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xPlacement: {xPlacement}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}yPlacement: {yPlacement}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xAdvance: {xAdvance}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}yAdvance: {yAdvance}");
    }
}

/* $TMP_FontFeatureTable (1 fields) */
public record class TMP_FontFeatureTable (
    TMP_GlyphPairAdjustmentRecord[] m_GlyphPairAdjustmentRecords) : IUnityStructure
{
    public static TMP_FontFeatureTable Read(EndianBinaryReader reader)
    {
        TMP_GlyphPairAdjustmentRecord[] m_GlyphPairAdjustmentRecords_ = BuiltInArray<TMP_GlyphPairAdjustmentRecord>.Read(reader);
        
        return new(m_GlyphPairAdjustmentRecords_);
    }

    public override string ToString() => $"TMP_FontFeatureTable\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_GlyphPairAdjustmentRecords[{m_GlyphPairAdjustmentRecords.Length}] = {{");
        if (m_GlyphPairAdjustmentRecords.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (TMP_GlyphPairAdjustmentRecord _4 in m_GlyphPairAdjustmentRecords)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_GlyphPairAdjustmentRecords.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $TMP_GlyphPairAdjustmentRecord (3 fields) */
public record class TMP_GlyphPairAdjustmentRecord (
    TMP_GlyphAdjustmentRecord m_FirstAdjustmentRecord,
    TMP_GlyphAdjustmentRecord m_SecondAdjustmentRecord,
    int m_FeatureLookupFlags) : IUnityStructure
{
    public static TMP_GlyphPairAdjustmentRecord Read(EndianBinaryReader reader)
    {
        TMP_GlyphAdjustmentRecord m_FirstAdjustmentRecord_ = TMP_GlyphAdjustmentRecord.Read(reader);
        TMP_GlyphAdjustmentRecord m_SecondAdjustmentRecord_ = TMP_GlyphAdjustmentRecord.Read(reader);
        int m_FeatureLookupFlags_ = reader.ReadS32();
        
        return new(m_FirstAdjustmentRecord_,
            m_SecondAdjustmentRecord_,
            m_FeatureLookupFlags_);
    }

    public override string ToString() => $"TMP_GlyphPairAdjustmentRecord\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_FirstAdjustmentRecord: {{ \n{m_FirstAdjustmentRecord.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SecondAdjustmentRecord: {{ \n{m_SecondAdjustmentRecord.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FeatureLookupFlags: {m_FeatureLookupFlags}");
    }
}

/* $TMP_GlyphAdjustmentRecord (2 fields) */
public record class TMP_GlyphAdjustmentRecord (
    uint m_GlyphIndex,
    TMP_GlyphValueRecord m_GlyphValueRecord) : IUnityStructure
{
    public static TMP_GlyphAdjustmentRecord Read(EndianBinaryReader reader)
    {
        uint m_GlyphIndex_ = reader.ReadU32();
        TMP_GlyphValueRecord m_GlyphValueRecord_ = TMP_GlyphValueRecord.Read(reader);
        
        return new(m_GlyphIndex_,
            m_GlyphValueRecord_);
    }

    public override string ToString() => $"TMP_GlyphAdjustmentRecord\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GlyphIndex: {m_GlyphIndex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_GlyphValueRecord: {{ m_XPlacement: {m_GlyphValueRecord.m_XPlacement}, m_YPlacement: {m_GlyphValueRecord.m_YPlacement}, m_XAdvance: {m_GlyphValueRecord.m_XAdvance}, m_YAdvance: {m_GlyphValueRecord.m_YAdvance} }}\n");
    }
}

/* $TMP_GlyphValueRecord (4 fields) */
public readonly record struct TMP_GlyphValueRecord (
    float m_XPlacement,
    float m_YPlacement,
    float m_XAdvance,
    float m_YAdvance) : IUnityStructure
{
    public static TMP_GlyphValueRecord Read(EndianBinaryReader reader)
    {
        float m_XPlacement_ = reader.ReadF32();
        float m_YPlacement_ = reader.ReadF32();
        float m_XAdvance_ = reader.ReadF32();
        float m_YAdvance_ = reader.ReadF32();
        
        return new(m_XPlacement_,
            m_YPlacement_,
            m_XAdvance_,
            m_YAdvance_);
    }

    public override string ToString() => $"TMP_GlyphValueRecord\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_XPlacement: {m_XPlacement}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_YPlacement: {m_YPlacement}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_XAdvance: {m_XAdvance}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_YAdvance: {m_YAdvance}");
    }
}

/* $FontAssetCreationSettings (16 fields) */
public record class FontAssetCreationSettings (
    AsciiString sourceFontFileName,
    AsciiString sourceFontFileGUID,
    int pointSizeSamplingMode,
    int pointSize,
    int padding,
    int packingMode,
    int atlasWidth,
    int atlasHeight,
    int characterSetSelectionMode,
    AsciiString characterSequence,
    AsciiString referencedFontAssetGUID,
    AsciiString referencedTextAssetGUID,
    int fontStyle,
    float fontStyleModifier,
    int renderMode,
    byte includeFontFeatures) : IUnityStructure
{
    public static FontAssetCreationSettings Read(EndianBinaryReader reader)
    {
        AsciiString sourceFontFileName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* sourceFontFileName */
        AsciiString sourceFontFileGUID_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* sourceFontFileGUID */
        int pointSizeSamplingMode_ = reader.ReadS32();
        int pointSize_ = reader.ReadS32();
        int padding_ = reader.ReadS32();
        int packingMode_ = reader.ReadS32();
        int atlasWidth_ = reader.ReadS32();
        int atlasHeight_ = reader.ReadS32();
        int characterSetSelectionMode_ = reader.ReadS32();
        AsciiString characterSequence_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* characterSequence */
        AsciiString referencedFontAssetGUID_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* referencedFontAssetGUID */
        AsciiString referencedTextAssetGUID_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* referencedTextAssetGUID */
        int fontStyle_ = reader.ReadS32();
        float fontStyleModifier_ = reader.ReadF32();
        int renderMode_ = reader.ReadS32();
        byte includeFontFeatures_ = reader.ReadU8();
        reader.AlignTo(4); /* includeFontFeatures */
        
        return new(sourceFontFileName_,
            sourceFontFileGUID_,
            pointSizeSamplingMode_,
            pointSize_,
            padding_,
            packingMode_,
            atlasWidth_,
            atlasHeight_,
            characterSetSelectionMode_,
            characterSequence_,
            referencedFontAssetGUID_,
            referencedTextAssetGUID_,
            fontStyle_,
            fontStyleModifier_,
            renderMode_,
            includeFontFeatures_);
    }

    public override string ToString() => $"FontAssetCreationSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceFontFileName: \"{sourceFontFileName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceFontFileGUID: \"{sourceFontFileGUID}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pointSizeSamplingMode: {pointSizeSamplingMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pointSize: {pointSize}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}padding: {padding}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}packingMode: {packingMode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasWidth: {atlasWidth}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}atlasHeight: {atlasHeight}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}characterSetSelectionMode: {characterSetSelectionMode}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}characterSequence: \"{characterSequence}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}referencedFontAssetGUID: \"{referencedFontAssetGUID}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}referencedTextAssetGUID: \"{referencedTextAssetGUID}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fontStyle: {fontStyle}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fontStyleModifier: {fontStyleModifier}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}renderMode: {renderMode}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}includeFontFeatures: {includeFontFeatures}");
    }
}

/* $TMP_FontWeightPair (2 fields) */
public record class TMP_FontWeightPair (
    PPtr<TMP_FontAsset> regularTypeface,
    PPtr<TMP_FontAsset> italicTypeface) : IUnityStructure
{
    public static TMP_FontWeightPair Read(EndianBinaryReader reader)
    {
        PPtr<TMP_FontAsset> regularTypeface_ = PPtr<TMP_FontAsset>.Read(reader);
        PPtr<TMP_FontAsset> italicTypeface_ = PPtr<TMP_FontAsset>.Read(reader);
        
        return new(regularTypeface_,
            italicTypeface_);
    }

    public override string ToString() => $"TMP_FontWeightPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}regularTypeface: {regularTypeface}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}italicTypeface: {italicTypeface}");
    }
}

/* $PathObjectPlacementSettingsView (6 fields) */
public record class PathObjectPlacementSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static PathObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"PathObjectPlacementSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $AxisAlignmentSettingsView (6 fields) */
public record class AxisAlignmentSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static AxisAlignmentSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"AxisAlignmentSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $BlueprintUnitReference (1 fields) */
public record class BlueprintUnitReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintUnitReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintUnitReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $UnitCustomizationVariation (4 fields) */
public record class UnitCustomizationVariation (
    BlueprintRaceReference m_Race,
    int Gender,
    UnitViewLink Prefab,
    byte IsAutoGenerated) : IUnityStructure
{
    public static UnitCustomizationVariation Read(EndianBinaryReader reader)
    {
        BlueprintRaceReference m_Race_ = BlueprintRaceReference.Read(reader);
        reader.AlignTo(4); /* m_Race */
        int Gender_ = reader.ReadS32();
        UnitViewLink Prefab_ = UnitViewLink.Read(reader);
        reader.AlignTo(4); /* Prefab */
        byte IsAutoGenerated_ = reader.ReadU8();
        reader.AlignTo(4); /* IsAutoGenerated */
        
        return new(m_Race_,
            Gender_,
            Prefab_,
            IsAutoGenerated_);
    }

    public override string ToString() => $"UnitCustomizationVariation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Race: {{ \n{m_Race.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Gender: {Gender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prefab: {{ \n{Prefab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsAutoGenerated: {IsAutoGenerated}");
    }
}

/* $BlueprintRaceReference (1 fields) */
public record class BlueprintRaceReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintRaceReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintRaceReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $UnitViewLink (1 fields) */
public record class UnitViewLink (
    AsciiString AssetId) : IUnityStructure
{
    public static UnitViewLink Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        
        return new(AssetId_);
    }

    public override string ToString() => $"UnitViewLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }
}

/* $BlueprintFactionReference (1 fields) */
public record class BlueprintFactionReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintFactionReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintFactionReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $SelectionObjectGroupSettings (2 fields) */
public record class SelectionObjectGroupSettings (
    byte _attachToObjectGroup,
    PPtr<ObjectGroup> _destinationGroup) : IUnityStructure
{
    public static SelectionObjectGroupSettings Read(EndianBinaryReader reader)
    {
        byte _attachToObjectGroup_ = reader.ReadU8();
        reader.AlignTo(4); /* _attachToObjectGroup */
        PPtr<ObjectGroup> _destinationGroup_ = PPtr<ObjectGroup>.Read(reader);
        
        return new(_attachToObjectGroup_,
            _destinationGroup_);
    }

    public override string ToString() => $"SelectionObjectGroupSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_attachToObjectGroup: {_attachToObjectGroup}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_destinationGroup: {_destinationGroup}");
    }
}

/* $SelectionObject2ObjectSnapSettings (2 fields) */
public readonly record struct SelectionObject2ObjectSnapSettings (
    float _snapEps,
    byte _canHoverObjects) : IUnityStructure
{
    public static SelectionObject2ObjectSnapSettings Read(EndianBinaryReader reader)
    {
        float _snapEps_ = reader.ReadF32();
        byte _canHoverObjects_ = reader.ReadU8();
        reader.AlignTo(4); /* _canHoverObjects */
        
        return new(_snapEps_,
            _canHoverObjects_);
    }

    public override string ToString() => $"SelectionObject2ObjectSnapSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_snapEps: {_snapEps}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_canHoverObjects: {_canHoverObjects}");
    }
}

/* $ObjectSelectionSettingsView (6 fields) */
public record class ObjectSelectionSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSelectionSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSelectionSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ActivePrefabCategoryView (8 fields) */
public record class ActivePrefabCategoryView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<ActivePrefabCategoryViewData> _viewData,
    PrefabCategoryPrefabScrollView _prefabScrollView) : IUnityStructure
{
    public static ActivePrefabCategoryView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<ActivePrefabCategoryViewData> _viewData_ = PPtr<ActivePrefabCategoryViewData>.Read(reader);
        PrefabCategoryPrefabScrollView _prefabScrollView_ = PrefabCategoryPrefabScrollView.Read(reader);
        reader.AlignTo(4); /* _prefabScrollView */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_,
            _prefabScrollView_);
    }

    public override string ToString() => $"ActivePrefabCategoryView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_prefabScrollView: {{ \n{_prefabScrollView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PrefabCategoryPrefabScrollView (7 fields) */
public record class PrefabCategoryPrefabScrollView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<PrefabCategoryPrefabScrollViewData> _viewData) : IUnityStructure
{
    public static PrefabCategoryPrefabScrollView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<PrefabCategoryPrefabScrollViewData> _viewData_ = PPtr<PrefabCategoryPrefabScrollViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"PrefabCategoryPrefabScrollView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $ActivePrefabView (6 fields) */
public record class ActivePrefabView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ActivePrefabView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ActivePrefabView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $CharGenPhaseDetailedViewsFactory (15 fields) */
public record class CharGenPhaseDetailedViewsFactory (
    PPtr<CharGenPregenPhaseDetailedView> m_PregenPhaseDetailedView,
    PPtr<CharGenAppearancePhaseDetailedView> m_AppearancePhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_SoulMarkPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_HomeworldPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_ImperialHomeworldChildPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_ForgeHomeworldChildPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_OccupationPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_NavigatorPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_SanctionedPsykerPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_DarkestHourPhaseDetailedView,
    PPtr<CharGenBackgroundBasePhaseDetailedView> m_MomentOfTriumphPhaseDetailedView,
    PPtr<CharGenCareerPhaseDetailedView> m_CareerPhaseDetailedView,
    PPtr<CharGenAttributesPhaseDetailedView> m_AttributesPhaseDetailedView,
    PPtr<CharGenSummaryPhaseDetailedView> m_SummaryPhaseDetailedView,
    PPtr<CharGenShipPhaseDetailedView> m_ShipPhaseDetailedView) : IUnityStructure
{
    public static CharGenPhaseDetailedViewsFactory Read(EndianBinaryReader reader)
    {
        PPtr<CharGenPregenPhaseDetailedView> m_PregenPhaseDetailedView_ = PPtr<CharGenPregenPhaseDetailedView>.Read(reader);
        PPtr<CharGenAppearancePhaseDetailedView> m_AppearancePhaseDetailedView_ = PPtr<CharGenAppearancePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_SoulMarkPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_HomeworldPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_ImperialHomeworldChildPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_ForgeHomeworldChildPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_OccupationPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_NavigatorPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_SanctionedPsykerPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_DarkestHourPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenBackgroundBasePhaseDetailedView> m_MomentOfTriumphPhaseDetailedView_ = PPtr<CharGenBackgroundBasePhaseDetailedView>.Read(reader);
        PPtr<CharGenCareerPhaseDetailedView> m_CareerPhaseDetailedView_ = PPtr<CharGenCareerPhaseDetailedView>.Read(reader);
        PPtr<CharGenAttributesPhaseDetailedView> m_AttributesPhaseDetailedView_ = PPtr<CharGenAttributesPhaseDetailedView>.Read(reader);
        PPtr<CharGenSummaryPhaseDetailedView> m_SummaryPhaseDetailedView_ = PPtr<CharGenSummaryPhaseDetailedView>.Read(reader);
        PPtr<CharGenShipPhaseDetailedView> m_ShipPhaseDetailedView_ = PPtr<CharGenShipPhaseDetailedView>.Read(reader);
        
        return new(m_PregenPhaseDetailedView_,
            m_AppearancePhaseDetailedView_,
            m_SoulMarkPhaseDetailedView_,
            m_HomeworldPhaseDetailedView_,
            m_ImperialHomeworldChildPhaseDetailedView_,
            m_ForgeHomeworldChildPhaseDetailedView_,
            m_OccupationPhaseDetailedView_,
            m_NavigatorPhaseDetailedView_,
            m_SanctionedPsykerPhaseDetailedView_,
            m_DarkestHourPhaseDetailedView_,
            m_MomentOfTriumphPhaseDetailedView_,
            m_CareerPhaseDetailedView_,
            m_AttributesPhaseDetailedView_,
            m_SummaryPhaseDetailedView_,
            m_ShipPhaseDetailedView_);
    }

    public override string ToString() => $"CharGenPhaseDetailedViewsFactory\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PregenPhaseDetailedView: {m_PregenPhaseDetailedView}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AppearancePhaseDetailedView: {m_AppearancePhaseDetailedView}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SoulMarkPhaseDetailedView: {m_SoulMarkPhaseDetailedView}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HomeworldPhaseDetailedView: {m_HomeworldPhaseDetailedView}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ImperialHomeworldChildPhaseDetailedView: {m_ImperialHomeworldChildPhaseDetailedView}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ForgeHomeworldChildPhaseDetailedView: {m_ForgeHomeworldChildPhaseDetailedView}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OccupationPhaseDetailedView: {m_OccupationPhaseDetailedView}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_NavigatorPhaseDetailedView: {m_NavigatorPhaseDetailedView}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SanctionedPsykerPhaseDetailedView: {m_SanctionedPsykerPhaseDetailedView}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DarkestHourPhaseDetailedView: {m_DarkestHourPhaseDetailedView}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MomentOfTriumphPhaseDetailedView: {m_MomentOfTriumphPhaseDetailedView}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CareerPhaseDetailedView: {m_CareerPhaseDetailedView}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AttributesPhaseDetailedView: {m_AttributesPhaseDetailedView}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SummaryPhaseDetailedView: {m_SummaryPhaseDetailedView}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ShipPhaseDetailedView: {m_ShipPhaseDetailedView}");
    }
}

/* $DollPosition (2 fields) */
public record class DollPosition (
    int Position,
    PPtr<RectTransform> Transform) : IUnityStructure
{
    public static DollPosition Read(EndianBinaryReader reader)
    {
        int Position_ = reader.ReadS32();
        PPtr<RectTransform> Transform_ = PPtr<RectTransform>.Read(reader);
        
        return new(Position_,
            Transform_);
    }

    public override string ToString() => $"DollPosition\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Position: {Position}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Transform: {Transform}");
    }
}

/* $PaperHints (2 fields) */
public record class PaperHints (
    PPtr<ConsoleHint> PageUpHint,
    PPtr<ConsoleHint> PageDownHint) : IUnityStructure
{
    public static PaperHints Read(EndianBinaryReader reader)
    {
        PPtr<ConsoleHint> PageUpHint_ = PPtr<ConsoleHint>.Read(reader);
        PPtr<ConsoleHint> PageDownHint_ = PPtr<ConsoleHint>.Read(reader);
        
        return new(PageUpHint_,
            PageDownHint_);
    }

    public override string ToString() => $"PaperHints\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PageUpHint: {PageUpHint}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PageDownHint: {PageDownHint}");
    }
}

/* $CoordinateSystemRenderSettingsView (6 fields) */
public record class CoordinateSystemRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static CoordinateSystemRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"CoordinateSystemRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ShaderResources_7 (11 fields) */
public record class ShaderResources_7 (
    PPtr<ComputeShader> PBDSingleDispatchSimulatorShader,
    PPtr<ComputeShader> PBDCollision,
    PPtr<ComputeShader> PBDForceVolume,
    PPtr<ComputeShader> PBDSkinningShader,
    PPtr<ComputeShader> PBDMeshShader,
    PPtr<ComputeShader> PBDBodyAabbShader,
    PPtr<Shader> PBDDebug,
    PPtr<ComputeShader> RadixSortCS,
    PPtr<ComputeShader> HashtableCS,
    PPtr<ComputeShader> SpatialHashingCS,
    PPtr<ComputeShader> CameraCullingCS) : IUnityStructure
{
    public static ShaderResources_7 Read(EndianBinaryReader reader)
    {
        PPtr<ComputeShader> PBDSingleDispatchSimulatorShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> PBDCollision_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> PBDForceVolume_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> PBDSkinningShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> PBDMeshShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> PBDBodyAabbShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> PBDDebug_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> RadixSortCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> HashtableCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> SpatialHashingCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> CameraCullingCS_ = PPtr<ComputeShader>.Read(reader);
        
        return new(PBDSingleDispatchSimulatorShader_,
            PBDCollision_,
            PBDForceVolume_,
            PBDSkinningShader_,
            PBDMeshShader_,
            PBDBodyAabbShader_,
            PBDDebug_,
            RadixSortCS_,
            HashtableCS_,
            SpatialHashingCS_,
            CameraCullingCS_);
    }

    public override string ToString() => $"ShaderResources_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDSingleDispatchSimulatorShader: {PBDSingleDispatchSimulatorShader}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDCollision: {PBDCollision}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDForceVolume: {PBDForceVolume}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDSkinningShader: {PBDSkinningShader}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDMeshShader: {PBDMeshShader}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDBodyAabbShader: {PBDBodyAabbShader}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDDebug: {PBDDebug}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RadixSortCS: {RadixSortCS}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HashtableCS: {HashtableCS}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpatialHashingCS: {SpatialHashingCS}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraCullingCS: {CameraCullingCS}");
    }
}

/* $SecondLabelSettings (3 fields) */
public record class SecondLabelSettings (
    int Type,
    ColorRGBA_1 BackgroundColor,
    ColorRGBA_1 TextColor) : IUnityStructure
{
    public static SecondLabelSettings Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        ColorRGBA_1 BackgroundColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 TextColor_ = ColorRGBA_1.Read(reader);
        
        return new(Type_,
            BackgroundColor_,
            TextColor_);
    }

    public override string ToString() => $"SecondLabelSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundColor: {{ r: {BackgroundColor.r}, g: {BackgroundColor.g}, b: {BackgroundColor.b}, a: {BackgroundColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TextColor: {{ r: {TextColor.r}, g: {TextColor.g}, b: {TextColor.b}, a: {TextColor.a} }}\n");
    }
}

/* $PurchaseStateSettings (4 fields) */
public record class PurchaseStateSettings (
    int State,
    ColorRGBA_1 TextColor,
    PPtr<Sprite> AdditionalMarkSprite,
    ColorRGBA_1 BackgroundGradientsColor) : IUnityStructure
{
    public static PurchaseStateSettings Read(EndianBinaryReader reader)
    {
        int State_ = reader.ReadS32();
        ColorRGBA_1 TextColor_ = ColorRGBA_1.Read(reader);
        PPtr<Sprite> AdditionalMarkSprite_ = PPtr<Sprite>.Read(reader);
        ColorRGBA_1 BackgroundGradientsColor_ = ColorRGBA_1.Read(reader);
        
        return new(State_,
            TextColor_,
            AdditionalMarkSprite_,
            BackgroundGradientsColor_);
    }

    public override string ToString() => $"PurchaseStateSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}State: {State}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TextColor: {{ r: {TextColor.r}, g: {TextColor.g}, b: {TextColor.b}, a: {TextColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AdditionalMarkSprite: {AdditionalMarkSprite}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundGradientsColor: {{ r: {BackgroundGradientsColor.r}, g: {BackgroundGradientsColor.g}, b: {BackgroundGradientsColor.b}, a: {BackgroundGradientsColor.a} }}\n");
    }
}

/* $AkCommonAdvancedSettings (17 fields) */
public record class AkCommonAdvancedSettings (
    uint m_IOMemorySize,
    float m_TargetAutoStreamBufferLengthMs,
    bool m_UseStreamCache,
    uint m_MaximumPinnedBytesInCache,
    bool m_EnableGameSyncPreparation,
    uint m_ContinuousPlaybackLookAhead,
    uint m_MonitorQueuePoolSize,
    uint m_MaximumHardwareTimeoutMs,
    bool m_DebugOutOfRangeCheckEnabled,
    float m_DebugOutOfRangeLimit,
    bool m_SuspendAudioDuringFocusLoss,
    bool m_RenderDuringFocusLoss,
    AsciiString m_SoundBankPersistentDataPath,
    bool m_UseAsyncOpen,
    uint m_MemoryAllocationSizeLimit,
    uint m_MemoryDebugLevel,
    int m_MemorySpanCount) : IUnityStructure
{
    public static AkCommonAdvancedSettings Read(EndianBinaryReader reader)
    {
        uint m_IOMemorySize_ = reader.ReadU32();
        float m_TargetAutoStreamBufferLengthMs_ = reader.ReadF32();
        bool m_UseStreamCache_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseStreamCache */
        uint m_MaximumPinnedBytesInCache_ = reader.ReadU32();
        bool m_EnableGameSyncPreparation_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableGameSyncPreparation */
        uint m_ContinuousPlaybackLookAhead_ = reader.ReadU32();
        uint m_MonitorQueuePoolSize_ = reader.ReadU32();
        uint m_MaximumHardwareTimeoutMs_ = reader.ReadU32();
        bool m_DebugOutOfRangeCheckEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* m_DebugOutOfRangeCheckEnabled */
        float m_DebugOutOfRangeLimit_ = reader.ReadF32();
        bool m_SuspendAudioDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_SuspendAudioDuringFocusLoss */
        bool m_RenderDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_RenderDuringFocusLoss */
        AsciiString m_SoundBankPersistentDataPath_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_SoundBankPersistentDataPath */
        bool m_UseAsyncOpen_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseAsyncOpen */
        uint m_MemoryAllocationSizeLimit_ = reader.ReadU32();
        uint m_MemoryDebugLevel_ = reader.ReadU32();
        int m_MemorySpanCount_ = reader.ReadS32();
        
        return new(m_IOMemorySize_,
            m_TargetAutoStreamBufferLengthMs_,
            m_UseStreamCache_,
            m_MaximumPinnedBytesInCache_,
            m_EnableGameSyncPreparation_,
            m_ContinuousPlaybackLookAhead_,
            m_MonitorQueuePoolSize_,
            m_MaximumHardwareTimeoutMs_,
            m_DebugOutOfRangeCheckEnabled_,
            m_DebugOutOfRangeLimit_,
            m_SuspendAudioDuringFocusLoss_,
            m_RenderDuringFocusLoss_,
            m_SoundBankPersistentDataPath_,
            m_UseAsyncOpen_,
            m_MemoryAllocationSizeLimit_,
            m_MemoryDebugLevel_,
            m_MemorySpanCount_);
    }

    public override string ToString() => $"AkCommonAdvancedSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IOMemorySize: {m_IOMemorySize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetAutoStreamBufferLengthMs: {m_TargetAutoStreamBufferLengthMs}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseStreamCache: {m_UseStreamCache}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumPinnedBytesInCache: {m_MaximumPinnedBytesInCache}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableGameSyncPreparation: {m_EnableGameSyncPreparation}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ContinuousPlaybackLookAhead: {m_ContinuousPlaybackLookAhead}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MonitorQueuePoolSize: {m_MonitorQueuePoolSize}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumHardwareTimeoutMs: {m_MaximumHardwareTimeoutMs}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeCheckEnabled: {m_DebugOutOfRangeCheckEnabled}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeLimit: {m_DebugOutOfRangeLimit}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SuspendAudioDuringFocusLoss: {m_SuspendAudioDuringFocusLoss}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RenderDuringFocusLoss: {m_RenderDuringFocusLoss}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SoundBankPersistentDataPath: \"{m_SoundBankPersistentDataPath}\"");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseAsyncOpen: {m_UseAsyncOpen}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryAllocationSizeLimit: {m_MemoryAllocationSizeLimit}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryDebugLevel: {m_MemoryDebugLevel}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemorySpanCount: {m_MemorySpanCount}");
    }
}

/* $Grounding (18 fields) */
public record class Grounding (
    BitField layers,
    float maxStep,
    float heightOffset,
    float footSpeed,
    float footRadius,
    float footCenterOffset,
    float prediction,
    float footRotationWeight,
    float footRotationSpeed,
    float maxFootRotationAngle,
    byte rotateSolver,
    float pelvisSpeed,
    float pelvisDamper,
    float lowerPelvisWeight,
    float liftPelvisWeight,
    float rootSphereCastRadius,
    byte overstepFallsDown,
    int quality) : IUnityStructure
{
    public static Grounding Read(EndianBinaryReader reader)
    {
        BitField layers_ = BitField.Read(reader);
        float maxStep_ = reader.ReadF32();
        float heightOffset_ = reader.ReadF32();
        float footSpeed_ = reader.ReadF32();
        float footRadius_ = reader.ReadF32();
        float footCenterOffset_ = reader.ReadF32();
        float prediction_ = reader.ReadF32();
        float footRotationWeight_ = reader.ReadF32();
        float footRotationSpeed_ = reader.ReadF32();
        float maxFootRotationAngle_ = reader.ReadF32();
        byte rotateSolver_ = reader.ReadU8();
        reader.AlignTo(4); /* rotateSolver */
        float pelvisSpeed_ = reader.ReadF32();
        float pelvisDamper_ = reader.ReadF32();
        float lowerPelvisWeight_ = reader.ReadF32();
        float liftPelvisWeight_ = reader.ReadF32();
        float rootSphereCastRadius_ = reader.ReadF32();
        byte overstepFallsDown_ = reader.ReadU8();
        reader.AlignTo(4); /* overstepFallsDown */
        int quality_ = reader.ReadS32();
        
        return new(layers_,
            maxStep_,
            heightOffset_,
            footSpeed_,
            footRadius_,
            footCenterOffset_,
            prediction_,
            footRotationWeight_,
            footRotationSpeed_,
            maxFootRotationAngle_,
            rotateSolver_,
            pelvisSpeed_,
            pelvisDamper_,
            lowerPelvisWeight_,
            liftPelvisWeight_,
            rootSphereCastRadius_,
            overstepFallsDown_,
            quality_);
    }

    public override string ToString() => $"Grounding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}layers: {{ m_Bits: {layers.m_Bits} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxStep: {maxStep}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}heightOffset: {heightOffset}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}footSpeed: {footSpeed}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}footRadius: {footRadius}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}footCenterOffset: {footCenterOffset}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}prediction: {prediction}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}footRotationWeight: {footRotationWeight}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}footRotationSpeed: {footRotationSpeed}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxFootRotationAngle: {maxFootRotationAngle}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rotateSolver: {rotateSolver}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pelvisSpeed: {pelvisSpeed}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pelvisDamper: {pelvisDamper}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lowerPelvisWeight: {lowerPelvisWeight}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}liftPelvisWeight: {liftPelvisWeight}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rootSphereCastRadius: {rootSphereCastRadius}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}overstepFallsDown: {overstepFallsDown}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}quality: {quality}");
    }
}

/* $ExposedProperty (1 fields) */
public record class ExposedProperty (
    AsciiString m_Name) : IUnityStructure
{
    public static ExposedProperty Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        
        return new(m_Name_);
    }

    public override string ToString() => $"ExposedProperty\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }
}

/* $BlueprintAreaPresetReference (1 fields) */
public record class BlueprintAreaPresetReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintAreaPresetReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintAreaPresetReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $PolygonMeshEditorSettings (7 fields) */
public record class PolygonMeshEditorSettings (
    BitField RaycastLayers,
    float MeshHeight,
    float Resolution,
    float RaycastHeightOffset,
    float OutlineResolution,
    float OutlineWidth,
    float OutlineHeight) : IUnityStructure
{
    public static PolygonMeshEditorSettings Read(EndianBinaryReader reader)
    {
        BitField RaycastLayers_ = BitField.Read(reader);
        float MeshHeight_ = reader.ReadF32();
        float Resolution_ = reader.ReadF32();
        float RaycastHeightOffset_ = reader.ReadF32();
        float OutlineResolution_ = reader.ReadF32();
        float OutlineWidth_ = reader.ReadF32();
        float OutlineHeight_ = reader.ReadF32();
        
        return new(RaycastLayers_,
            MeshHeight_,
            Resolution_,
            RaycastHeightOffset_,
            OutlineResolution_,
            OutlineWidth_,
            OutlineHeight_);
    }

    public override string ToString() => $"PolygonMeshEditorSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RaycastLayers: {{ m_Bits: {RaycastLayers.m_Bits} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MeshHeight: {MeshHeight}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Resolution: {Resolution}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RaycastHeightOffset: {RaycastHeightOffset}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutlineResolution: {OutlineResolution}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutlineWidth: {OutlineWidth}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutlineHeight: {OutlineHeight}");
    }
}

/* $InteractionLootSettings (31 fields) */
public record class InteractionLootSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection,
    int LootContainerType,
    BlueprintLootReference[] m_LootTables,
    byte AddMapMarker,
    byte ShowOnMapWhenEmpty,
    byte DestroyWhenEmpty,
    PPtr<SharedStringAsset> MapMarkerName,
    PPtr<SharedStringAsset> Description,
    ConditionsReference LootConditions,
    TriggerData TakeItemTrigger,
    TriggerData PutItemTrigger,
    TriggerData CloseTrigger,
    BlueprintSharedVendorTableReference m_AttachedVendorTable) : IUnityStructure
{
    public static InteractionLootSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        int LootContainerType_ = reader.ReadS32();
        BlueprintLootReference[] m_LootTables_ = BuiltInArray<BlueprintLootReference>.Read(reader);
        reader.AlignTo(4); /* m_LootTables */
        byte AddMapMarker_ = reader.ReadU8();
        reader.AlignTo(4); /* AddMapMarker */
        byte ShowOnMapWhenEmpty_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOnMapWhenEmpty */
        byte DestroyWhenEmpty_ = reader.ReadU8();
        reader.AlignTo(4); /* DestroyWhenEmpty */
        PPtr<SharedStringAsset> MapMarkerName_ = PPtr<SharedStringAsset>.Read(reader);
        PPtr<SharedStringAsset> Description_ = PPtr<SharedStringAsset>.Read(reader);
        ConditionsReference LootConditions_ = ConditionsReference.Read(reader);
        reader.AlignTo(4); /* LootConditions */
        TriggerData TakeItemTrigger_ = TriggerData.Read(reader);
        reader.AlignTo(4); /* TakeItemTrigger */
        TriggerData PutItemTrigger_ = TriggerData.Read(reader);
        reader.AlignTo(4); /* PutItemTrigger */
        TriggerData CloseTrigger_ = TriggerData.Read(reader);
        reader.AlignTo(4); /* CloseTrigger */
        BlueprintSharedVendorTableReference m_AttachedVendorTable_ = BlueprintSharedVendorTableReference.Read(reader);
        reader.AlignTo(4); /* m_AttachedVendorTable */
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_,
            LootContainerType_,
            m_LootTables_,
            AddMapMarker_,
            ShowOnMapWhenEmpty_,
            DestroyWhenEmpty_,
            MapMarkerName_,
            Description_,
            LootConditions_,
            TakeItemTrigger_,
            PutItemTrigger_,
            CloseTrigger_,
            m_AttachedVendorTable_);
    }

    public override string ToString() => $"InteractionLootSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LootContainerType: {LootContainerType}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_LootTables[{m_LootTables.Length}] = {{");
        if (m_LootTables.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BlueprintLootReference _4 in m_LootTables)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_LootTables.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AddMapMarker: {AddMapMarker}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOnMapWhenEmpty: {ShowOnMapWhenEmpty}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DestroyWhenEmpty: {DestroyWhenEmpty}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MapMarkerName: {MapMarkerName}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Description: {Description}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootConditions: {{ \n{LootConditions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TakeItemTrigger: {{ \n{TakeItemTrigger.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PutItemTrigger: {{ \n{PutItemTrigger.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CloseTrigger: {{ \n{CloseTrigger.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AttachedVendorTable: {{ \n{m_AttachedVendorTable.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlueprintLootReference (1 fields) */
public record class BlueprintLootReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintLootReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintLootReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $TriggerData (5 fields) */
public record class TriggerData (
    byte TriggerOnce,
    byte OnlyTriggerWhenEmpty,
    byte TriggerOnSpecificItem,
    BlueprintItemReference m_SpecificItem,
    ActionsReference Action) : IUnityStructure
{
    public static TriggerData Read(EndianBinaryReader reader)
    {
        byte TriggerOnce_ = reader.ReadU8();
        reader.AlignTo(4); /* TriggerOnce */
        byte OnlyTriggerWhenEmpty_ = reader.ReadU8();
        reader.AlignTo(4); /* OnlyTriggerWhenEmpty */
        byte TriggerOnSpecificItem_ = reader.ReadU8();
        reader.AlignTo(4); /* TriggerOnSpecificItem */
        BlueprintItemReference m_SpecificItem_ = BlueprintItemReference.Read(reader);
        reader.AlignTo(4); /* m_SpecificItem */
        ActionsReference Action_ = ActionsReference.Read(reader);
        reader.AlignTo(4); /* Action */
        
        return new(TriggerOnce_,
            OnlyTriggerWhenEmpty_,
            TriggerOnSpecificItem_,
            m_SpecificItem_,
            Action_);
    }

    public override string ToString() => $"TriggerData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TriggerOnce: {TriggerOnce}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyTriggerWhenEmpty: {OnlyTriggerWhenEmpty}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TriggerOnSpecificItem: {TriggerOnSpecificItem}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_SpecificItem: {{ \n{m_SpecificItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Action: {{ \n{Action.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlueprintSharedVendorTableReference (1 fields) */
public record class BlueprintSharedVendorTableReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintSharedVendorTableReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintSharedVendorTableReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $Ramp (2 fields) */
public record class Ramp (
    byte Enabled,
    Gradient_1 Gradient) : IUnityStructure
{
    public static Ramp Read(EndianBinaryReader reader)
    {
        byte Enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* Enabled */
        Gradient_1 Gradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* Gradient */
        
        return new(Enabled_,
            Gradient_);
    }

    public override string ToString() => $"Ramp\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Gradient: {{ \n{Gradient.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $FxDecalAnimationSettings (10 fields) */
public record class FxDecalAnimationSettings (
    byte IsInitialized,
    float Lifetime,
    AnimationCurve ScaleXZ,
    AnimationCurve ScaleX,
    AnimationCurve ScaleY,
    AnimationCurve ScaleZ,
    Gradient_1 AlbedoColorOverLifetime,
    Gradient_1 EmissionColorOverLifetime,
    AnimationCurve SubstractAlphaOverLifetime,
    byte LoopAnimation) : IUnityStructure
{
    public static FxDecalAnimationSettings Read(EndianBinaryReader reader)
    {
        byte IsInitialized_ = reader.ReadU8();
        reader.AlignTo(4); /* IsInitialized */
        float Lifetime_ = reader.ReadF32();
        AnimationCurve ScaleXZ_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleXZ */
        AnimationCurve ScaleX_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleX */
        AnimationCurve ScaleY_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleY */
        AnimationCurve ScaleZ_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleZ */
        Gradient_1 AlbedoColorOverLifetime_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* AlbedoColorOverLifetime */
        Gradient_1 EmissionColorOverLifetime_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* EmissionColorOverLifetime */
        AnimationCurve SubstractAlphaOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* SubstractAlphaOverLifetime */
        byte LoopAnimation_ = reader.ReadU8();
        reader.AlignTo(4); /* LoopAnimation */
        
        return new(IsInitialized_,
            Lifetime_,
            ScaleXZ_,
            ScaleX_,
            ScaleY_,
            ScaleZ_,
            AlbedoColorOverLifetime_,
            EmissionColorOverLifetime_,
            SubstractAlphaOverLifetime_,
            LoopAnimation_);
    }

    public override string ToString() => $"FxDecalAnimationSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsInitialized: {IsInitialized}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScaleXZ: {{ \n{ScaleXZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScaleX: {{ \n{ScaleX.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScaleY: {{ \n{ScaleY.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScaleZ: {{ \n{ScaleZ.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlbedoColorOverLifetime: {{ \n{AlbedoColorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EmissionColorOverLifetime: {{ \n{EmissionColorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SubstractAlphaOverLifetime: {{ \n{SubstractAlphaOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopAnimation: {LoopAnimation}");
    }
}

/* $ColorTintAnimationController (1 fields) */
public record class ColorTintAnimationController (
    ColorTintAnimationSettings[] Animations) : IUnityStructure
{
    public static ColorTintAnimationController Read(EndianBinaryReader reader)
    {
        ColorTintAnimationSettings[] Animations_ = BuiltInArray<ColorTintAnimationSettings>.Read(reader);
        reader.AlignTo(4); /* Animations */
        
        return new(Animations_);
    }

    public override string ToString() => $"ColorTintAnimationController\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Animations[{Animations.Length}] = {{");
        if (Animations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ColorTintAnimationSettings _4 in Animations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Animations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ColorTintAnimationSettings (4 fields) */
public record class ColorTintAnimationSettings (
    float Delay,
    float Lifetime,
    Gradient_1 ColorOverLifetime,
    byte LoopAnimation) : IUnityStructure
{
    public static ColorTintAnimationSettings Read(EndianBinaryReader reader)
    {
        float Delay_ = reader.ReadF32();
        float Lifetime_ = reader.ReadF32();
        Gradient_1 ColorOverLifetime_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* ColorOverLifetime */
        byte LoopAnimation_ = reader.ReadU8();
        reader.AlignTo(4); /* LoopAnimation */
        
        return new(Delay_,
            Lifetime_,
            ColorOverLifetime_,
            LoopAnimation_);
    }

    public override string ToString() => $"ColorTintAnimationSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColorOverLifetime: {{ \n{ColorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopAnimation: {LoopAnimation}");
    }
}

/* $RimLightingAnimationController (1 fields) */
public record class RimLightingAnimationController (
    RimLightingAnimationSettings[] Animations) : IUnityStructure
{
    public static RimLightingAnimationController Read(EndianBinaryReader reader)
    {
        RimLightingAnimationSettings[] Animations_ = BuiltInArray<RimLightingAnimationSettings>.Read(reader);
        reader.AlignTo(4); /* Animations */
        
        return new(Animations_);
    }

    public override string ToString() => $"RimLightingAnimationController\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Animations[{Animations.Length}] = {{");
        if (Animations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (RimLightingAnimationSettings _4 in Animations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Animations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $RimLightingAnimationSettings (8 fields) */
public record class RimLightingAnimationSettings (
    float Delay,
    float Lifetime,
    Gradient_1 ColorOverLifetime,
    AnimationCurve IntensityOverLifetime,
    float IntensityScale,
    AnimationCurve PowerOverLifetime,
    byte LoopAnimation,
    byte UnscaledTime) : IUnityStructure
{
    public static RimLightingAnimationSettings Read(EndianBinaryReader reader)
    {
        float Delay_ = reader.ReadF32();
        float Lifetime_ = reader.ReadF32();
        Gradient_1 ColorOverLifetime_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* ColorOverLifetime */
        AnimationCurve IntensityOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* IntensityOverLifetime */
        float IntensityScale_ = reader.ReadF32();
        AnimationCurve PowerOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* PowerOverLifetime */
        byte LoopAnimation_ = reader.ReadU8();
        reader.AlignTo(4); /* LoopAnimation */
        byte UnscaledTime_ = reader.ReadU8();
        reader.AlignTo(4); /* UnscaledTime */
        
        return new(Delay_,
            Lifetime_,
            ColorOverLifetime_,
            IntensityOverLifetime_,
            IntensityScale_,
            PowerOverLifetime_,
            LoopAnimation_,
            UnscaledTime_);
    }

    public override string ToString() => $"RimLightingAnimationSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColorOverLifetime: {{ \n{ColorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IntensityOverLifetime: {{ \n{IntensityOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IntensityScale: {IntensityScale}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PowerOverLifetime: {{ \n{PowerOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopAnimation: {LoopAnimation}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnscaledTime: {UnscaledTime}");
    }
}

/* $DissolveAnimationController (1 fields) */
public record class DissolveAnimationController (
    DissolveSettings[] Animations) : IUnityStructure
{
    public static DissolveAnimationController Read(EndianBinaryReader reader)
    {
        DissolveSettings[] Animations_ = BuiltInArray<DissolveSettings>.Read(reader);
        reader.AlignTo(4); /* Animations */
        
        return new(Animations_);
    }

    public override string ToString() => $"DissolveAnimationController\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Animations[{Animations.Length}] = {{");
        if (Animations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (DissolveSettings _4 in Animations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Animations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $DissolveSettings (15 fields) */
public record class DissolveSettings (
    PPtr<Texture2D> Texture,
    Vector2f TilingScale,
    byte TilingOverride,
    Vector2f OffsetSpeed,
    float Delay,
    float Lifetime,
    AnimationCurve DissolveOverLifetime,
    AnimationCurve DissolveWidthOverLifetime,
    float DissolveWidthScale,
    Gradient_1 ColorOverLifetime,
    float HdrColorScale,
    byte LoopAnimation,
    byte DissolveCutout,
    byte DissolveEmission,
    int Layer) : IUnityStructure
{
    public static DissolveSettings Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> Texture_ = PPtr<Texture2D>.Read(reader);
        Vector2f TilingScale_ = Vector2f.Read(reader);
        byte TilingOverride_ = reader.ReadU8();
        reader.AlignTo(4); /* TilingOverride */
        Vector2f OffsetSpeed_ = Vector2f.Read(reader);
        float Delay_ = reader.ReadF32();
        float Lifetime_ = reader.ReadF32();
        AnimationCurve DissolveOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* DissolveOverLifetime */
        AnimationCurve DissolveWidthOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* DissolveWidthOverLifetime */
        float DissolveWidthScale_ = reader.ReadF32();
        Gradient_1 ColorOverLifetime_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* ColorOverLifetime */
        float HdrColorScale_ = reader.ReadF32();
        byte LoopAnimation_ = reader.ReadU8();
        reader.AlignTo(4); /* LoopAnimation */
        byte DissolveCutout_ = reader.ReadU8();
        reader.AlignTo(4); /* DissolveCutout */
        byte DissolveEmission_ = reader.ReadU8();
        reader.AlignTo(4); /* DissolveEmission */
        int Layer_ = reader.ReadS32();
        
        return new(Texture_,
            TilingScale_,
            TilingOverride_,
            OffsetSpeed_,
            Delay_,
            Lifetime_,
            DissolveOverLifetime_,
            DissolveWidthOverLifetime_,
            DissolveWidthScale_,
            ColorOverLifetime_,
            HdrColorScale_,
            LoopAnimation_,
            DissolveCutout_,
            DissolveEmission_,
            Layer_);
    }

    public override string ToString() => $"DissolveSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Texture: {Texture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TilingScale: {{ x: {TilingScale.x}, y: {TilingScale.y} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TilingOverride: {TilingOverride}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetSpeed: {{ x: {OffsetSpeed.x}, y: {OffsetSpeed.y} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DissolveOverLifetime: {{ \n{DissolveOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DissolveWidthOverLifetime: {{ \n{DissolveWidthOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DissolveWidthScale: {DissolveWidthScale}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColorOverLifetime: {{ \n{ColorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HdrColorScale: {HdrColorScale}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopAnimation: {LoopAnimation}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DissolveCutout: {DissolveCutout}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DissolveEmission: {DissolveEmission}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Layer: {Layer}");
    }
}

/* $AdditionalAlbedoAnimationController (1 fields) */
public record class AdditionalAlbedoAnimationController (
    AdditionalAlbedoSettings[] Animations) : IUnityStructure
{
    public static AdditionalAlbedoAnimationController Read(EndianBinaryReader reader)
    {
        AdditionalAlbedoSettings[] Animations_ = BuiltInArray<AdditionalAlbedoSettings>.Read(reader);
        reader.AlignTo(4); /* Animations */
        
        return new(Animations_);
    }

    public override string ToString() => $"AdditionalAlbedoAnimationController\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Animations[{Animations.Length}] = {{");
        if (Animations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AdditionalAlbedoSettings _4 in Animations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Animations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AdditionalAlbedoSettings (11 fields) */
public record class AdditionalAlbedoSettings (
    PPtr<Texture2D> Texture,
    Vector2f TilingScale,
    byte TilingOverride,
    Vector2f OffsetSpeed,
    float Delay,
    float Lifetime,
    AnimationCurve FactorOverLifetime,
    byte LoopAnimation,
    ColorRGBA_1 Color,
    float ColorScale,
    AnimationCurve AlphaScaleOverLifetime) : IUnityStructure
{
    public static AdditionalAlbedoSettings Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> Texture_ = PPtr<Texture2D>.Read(reader);
        Vector2f TilingScale_ = Vector2f.Read(reader);
        byte TilingOverride_ = reader.ReadU8();
        reader.AlignTo(4); /* TilingOverride */
        Vector2f OffsetSpeed_ = Vector2f.Read(reader);
        float Delay_ = reader.ReadF32();
        float Lifetime_ = reader.ReadF32();
        AnimationCurve FactorOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* FactorOverLifetime */
        byte LoopAnimation_ = reader.ReadU8();
        reader.AlignTo(4); /* LoopAnimation */
        ColorRGBA_1 Color_ = ColorRGBA_1.Read(reader);
        float ColorScale_ = reader.ReadF32();
        AnimationCurve AlphaScaleOverLifetime_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* AlphaScaleOverLifetime */
        
        return new(Texture_,
            TilingScale_,
            TilingOverride_,
            OffsetSpeed_,
            Delay_,
            Lifetime_,
            FactorOverLifetime_,
            LoopAnimation_,
            Color_,
            ColorScale_,
            AlphaScaleOverLifetime_);
    }

    public override string ToString() => $"AdditionalAlbedoSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Texture: {Texture}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TilingScale: {{ x: {TilingScale.x}, y: {TilingScale.y} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TilingOverride: {TilingOverride}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetSpeed: {{ x: {OffsetSpeed.x}, y: {OffsetSpeed.y} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FactorOverLifetime: {{ \n{FactorOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopAnimation: {LoopAnimation}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ r: {Color.r}, g: {Color.g}, b: {Color.b}, a: {Color.a} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ColorScale: {ColorScale}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlphaScaleOverLifetime: {{ \n{AlphaScaleOverLifetime.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MaterialParametersOverrideController (1 fields) */
public record class MaterialParametersOverrideController (
    MaterialParametersOverrideSettings[] Entries) : IUnityStructure
{
    public static MaterialParametersOverrideController Read(EndianBinaryReader reader)
    {
        MaterialParametersOverrideSettings[] Entries_ = BuiltInArray<MaterialParametersOverrideSettings>.Read(reader);
        reader.AlignTo(4); /* Entries */
        
        return new(Entries_);
    }

    public override string ToString() => $"MaterialParametersOverrideController\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Entries[{Entries.Length}] = {{");
        if (Entries.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MaterialParametersOverrideSettings _4 in Entries)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Entries.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MaterialParametersOverrideSettings (12 fields) */
public record class MaterialParametersOverrideSettings (
    int BumpOverride,
    int SpecularOverride,
    float Roughness,
    byte MetallicOverride,
    float Metallic,
    int EmissionOverride,
    float Emission,
    PPtr<Texture2D> AlbedoMap,
    PPtr<Texture2D> Masks,
    PPtr<Texture2D> BumpMap,
    int TilingType,
    Vector2f TilingMultiplier) : IUnityStructure
{
    public static MaterialParametersOverrideSettings Read(EndianBinaryReader reader)
    {
        int BumpOverride_ = reader.ReadS32();
        int SpecularOverride_ = reader.ReadS32();
        float Roughness_ = reader.ReadF32();
        byte MetallicOverride_ = reader.ReadU8();
        reader.AlignTo(4); /* MetallicOverride */
        float Metallic_ = reader.ReadF32();
        int EmissionOverride_ = reader.ReadS32();
        float Emission_ = reader.ReadF32();
        PPtr<Texture2D> AlbedoMap_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> Masks_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> BumpMap_ = PPtr<Texture2D>.Read(reader);
        int TilingType_ = reader.ReadS32();
        Vector2f TilingMultiplier_ = Vector2f.Read(reader);
        
        return new(BumpOverride_,
            SpecularOverride_,
            Roughness_,
            MetallicOverride_,
            Metallic_,
            EmissionOverride_,
            Emission_,
            AlbedoMap_,
            Masks_,
            BumpMap_,
            TilingType_,
            TilingMultiplier_);
    }

    public override string ToString() => $"MaterialParametersOverrideSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BumpOverride: {BumpOverride}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpecularOverride: {SpecularOverride}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Roughness: {Roughness}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MetallicOverride: {MetallicOverride}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Metallic: {Metallic}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EmissionOverride: {EmissionOverride}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Emission: {Emission}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlbedoMap: {AlbedoMap}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Masks: {Masks}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BumpMap: {BumpMap}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TilingType: {TilingType}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TilingMultiplier: {{ x: {TilingMultiplier.x}, y: {TilingMultiplier.y} }}\n");
    }
}

/* $Entry_6 (4 fields) */
public record class Entry_6 (
    int Stat,
    LocalizedString Text,
    LocalizedString ShortText,
    LocalizedString BonusText) : IUnityStructure
{
    public static Entry_6 Read(EndianBinaryReader reader)
    {
        int Stat_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        LocalizedString ShortText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShortText */
        LocalizedString BonusText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusText */
        
        return new(Stat_,
            Text_,
            ShortText_,
            BonusText_);
    }

    public override string ToString() => $"Entry_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Stat: {Stat}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShortText: {{ \n{ShortText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BonusText: {{ \n{BonusText.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $WeaponCategoryEntry (2 fields) */
public record class WeaponCategoryEntry (
    int Category,
    LocalizedString Text) : IUnityStructure
{
    public static WeaponCategoryEntry Read(EndianBinaryReader reader)
    {
        int Category_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Category_,
            Text_);
    }

    public override string ToString() => $"WeaponCategoryEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Category: {Category}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $WeaponFamilyEntry (2 fields) */
public record class WeaponFamilyEntry (
    int Family,
    LocalizedString Text) : IUnityStructure
{
    public static WeaponFamilyEntry Read(EndianBinaryReader reader)
    {
        int Family_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Family_,
            Text_);
    }

    public override string ToString() => $"WeaponFamilyEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Family: {Family}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ArmorEntry (2 fields) */
public record class ArmorEntry (
    int Proficiency,
    LocalizedString Text) : IUnityStructure
{
    public static ArmorEntry Read(EndianBinaryReader reader)
    {
        int Proficiency_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Proficiency_,
            Text_);
    }

    public override string ToString() => $"ArmorEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Proficiency: {Proficiency}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ArmorCategoryEntry (2 fields) */
public record class ArmorCategoryEntry (
    int Category,
    LocalizedString Text) : IUnityStructure
{
    public static ArmorCategoryEntry Read(EndianBinaryReader reader)
    {
        int Category_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Category_,
            Text_);
    }

    public override string ToString() => $"ArmorCategoryEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Category: {Category}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ShipDecalMeshData (4 fields) */
public record class ShipDecalMeshData (
    byte IsDirect,
    PPtr<MeshRenderer> Renderer,
    PPtr<Material> NormalMaterial,
    PPtr<Material> SelectedMaterial) : IUnityStructure
{
    public static ShipDecalMeshData Read(EndianBinaryReader reader)
    {
        byte IsDirect_ = reader.ReadU8();
        reader.AlignTo(4); /* IsDirect */
        PPtr<MeshRenderer> Renderer_ = PPtr<MeshRenderer>.Read(reader);
        PPtr<Material> NormalMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> SelectedMaterial_ = PPtr<Material>.Read(reader);
        
        return new(IsDirect_,
            Renderer_,
            NormalMaterial_,
            SelectedMaterial_);
    }

    public override string ToString() => $"ShipDecalMeshData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsDirect: {IsDirect}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Renderer: {Renderer}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NormalMaterial: {NormalMaterial}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SelectedMaterial: {SelectedMaterial}");
    }
}

/* $MaterialLink (1 fields) */
public record class MaterialLink (
    AsciiString AssetId) : IUnityStructure
{
    public static MaterialLink Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        
        return new(AssetId_);
    }

    public override string ToString() => $"MaterialLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }
}

/* $StarProperties (2 fields) */
public record class StarProperties (
    PrefabLink Prefab,
    float Scale) : IUnityStructure
{
    public static StarProperties Read(EndianBinaryReader reader)
    {
        PrefabLink Prefab_ = PrefabLink.Read(reader);
        reader.AlignTo(4); /* Prefab */
        float Scale_ = reader.ReadF32();
        
        return new(Prefab_,
            Scale_);
    }

    public override string ToString() => $"StarProperties\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prefab: {{ \n{Prefab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }
}

/* $PrefabLink (1 fields) */
public record class PrefabLink (
    AsciiString AssetId) : IUnityStructure
{
    public static PrefabLink Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        
        return new(AssetId_);
    }

    public override string ToString() => $"PrefabLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }
}

/* $PlanetObjectProperties (4 fields) */
public record class PlanetObjectProperties (
    PrefabLink Prefab,
    float Scale,
    float AngleOnOrbit,
    float OffsetY) : IUnityStructure
{
    public static PlanetObjectProperties Read(EndianBinaryReader reader)
    {
        PrefabLink Prefab_ = PrefabLink.Read(reader);
        reader.AlignTo(4); /* Prefab */
        float Scale_ = reader.ReadF32();
        float AngleOnOrbit_ = reader.ReadF32();
        float OffsetY_ = reader.ReadF32();
        
        return new(Prefab_,
            Scale_,
            AngleOnOrbit_,
            OffsetY_);
    }

    public override string ToString() => $"PlanetObjectProperties\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prefab: {{ \n{Prefab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AngleOnOrbit: {AngleOnOrbit}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OffsetY: {OffsetY}");
    }
}

/* $SpaceObjectProperties (4 fields) */
public record class SpaceObjectProperties (
    PrefabLink Prefab,
    Vector3f Position,
    Quaternionf Rotation,
    float Scale) : IUnityStructure
{
    public static SpaceObjectProperties Read(EndianBinaryReader reader)
    {
        PrefabLink Prefab_ = PrefabLink.Read(reader);
        reader.AlignTo(4); /* Prefab */
        Vector3f Position_ = Vector3f.Read(reader);
        Quaternionf Rotation_ = Quaternionf.Read(reader);
        float Scale_ = reader.ReadF32();
        
        return new(Prefab_,
            Position_,
            Rotation_,
            Scale_);
    }

    public override string ToString() => $"SpaceObjectProperties\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prefab: {{ \n{Prefab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Position: {{ x: {Position.x}, y: {Position.y}, z: {Position.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rotation: {{ x: {Rotation.x}, y: {Rotation.y}, z: {Rotation.z}, w: {Rotation.w} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }
}

/* $CustomAxisKeyboardRotationSettingsView (6 fields) */
public record class CustomAxisKeyboardRotationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static CustomAxisKeyboardRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"CustomAxisKeyboardRotationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ExposedReference`1 (2 fields) */
public record class ExposedReference_1 (
    AsciiString exposedName,
    PPtr<Object> defaultValue) : IUnityStructure
{
    public static ExposedReference_1 Read(EndianBinaryReader reader)
    {
        AsciiString exposedName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exposedName */
        PPtr<Object> defaultValue_ = PPtr<Object>.Read(reader);
        
        return new(exposedName_,
            defaultValue_);
    }

    public override string ToString() => $"ExposedReference`1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exposedName: \"{exposedName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}defaultValue: {defaultValue}");
    }
}

/* $InteractionDisableTrapSettings (19 fields) */
public record class InteractionDisableTrapSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection) : IUnityStructure
{
    public static InteractionDisableTrapSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_);
    }

    public override string ToString() => $"InteractionDisableTrapSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }
}

/* $WeaponStyleSettings_4 (5 fields) */
public record class WeaponStyleSettings_4 (
    int Style,
    PPtr<AnimationClipWrapper> Clip,
    PPtr<AnimationClipWrapper>[] RandomClips,
    PPtr<AnimationClipWrapper> DodgeInFullCover,
    PPtr<AnimationClipWrapper> DodgeInHalfCover) : IUnityStructure
{
    public static WeaponStyleSettings_4 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> Clip_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper>[] RandomClips_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        PPtr<AnimationClipWrapper> DodgeInFullCover_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> DodgeInHalfCover_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Style_,
            Clip_,
            RandomClips_,
            DodgeInFullCover_,
            DodgeInHalfCover_);
    }

    public override string ToString() => $"WeaponStyleSettings_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Clip: {Clip}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RandomClips[{RandomClips.Length}] = {{");
        if (RandomClips.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in RandomClips)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (RandomClips.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DodgeInFullCover: {DodgeInFullCover}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DodgeInHalfCover: {DodgeInHalfCover}");
    }
}

/* $Channel (32 fields) */
public record class Channel (
    AsciiString name,
    int _iterationSeed,
    int _offsetSeed,
    int _rotationSeed,
    int _scaleSeed,
    PPtr<SplineMesh> owner,
    MeshDefinition[] meshes,
    double _clipFrom,
    double _clipTo,
    byte _randomOrder,
    int _overrideUVs,
    Vector2f _uvScale,
    Vector2f _uvOffset,
    byte _overrideNormal,
    Vector3f _customNormal,
    int _type,
    int _count,
    byte _autoCount,
    double _spacing,
    byte _randomRotation,
    Vector3f _minRotation,
    Vector3f _maxRotation,
    byte _randomOffset,
    Vector2f _minOffset,
    Vector2f _maxOffset,
    byte _randomScale,
    byte _uniformRandomScale,
    Vector3f _minScale,
    Vector3f _maxScale,
    byte _overrideMaterialID,
    int _targetMaterialID,
    MeshScaleModifier _scaleModifier) : IUnityStructure
{
    public static Channel Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int _iterationSeed_ = reader.ReadS32();
        int _offsetSeed_ = reader.ReadS32();
        int _rotationSeed_ = reader.ReadS32();
        int _scaleSeed_ = reader.ReadS32();
        PPtr<SplineMesh> owner_ = PPtr<SplineMesh>.Read(reader);
        MeshDefinition[] meshes_ = BuiltInArray<MeshDefinition>.Read(reader);
        reader.AlignTo(4); /* meshes */
        double _clipFrom_ = reader.ReadF64();
        double _clipTo_ = reader.ReadF64();
        byte _randomOrder_ = reader.ReadU8();
        reader.AlignTo(4); /* _randomOrder */
        int _overrideUVs_ = reader.ReadS32();
        Vector2f _uvScale_ = Vector2f.Read(reader);
        Vector2f _uvOffset_ = Vector2f.Read(reader);
        byte _overrideNormal_ = reader.ReadU8();
        reader.AlignTo(4); /* _overrideNormal */
        Vector3f _customNormal_ = Vector3f.Read(reader);
        int _type_ = reader.ReadS32();
        int _count_ = reader.ReadS32();
        byte _autoCount_ = reader.ReadU8();
        reader.AlignTo(4); /* _autoCount */
        double _spacing_ = reader.ReadF64();
        byte _randomRotation_ = reader.ReadU8();
        reader.AlignTo(4); /* _randomRotation */
        Vector3f _minRotation_ = Vector3f.Read(reader);
        Vector3f _maxRotation_ = Vector3f.Read(reader);
        byte _randomOffset_ = reader.ReadU8();
        reader.AlignTo(4); /* _randomOffset */
        Vector2f _minOffset_ = Vector2f.Read(reader);
        Vector2f _maxOffset_ = Vector2f.Read(reader);
        byte _randomScale_ = reader.ReadU8();
        reader.AlignTo(4); /* _randomScale */
        byte _uniformRandomScale_ = reader.ReadU8();
        reader.AlignTo(4); /* _uniformRandomScale */
        Vector3f _minScale_ = Vector3f.Read(reader);
        Vector3f _maxScale_ = Vector3f.Read(reader);
        byte _overrideMaterialID_ = reader.ReadU8();
        reader.AlignTo(4); /* _overrideMaterialID */
        int _targetMaterialID_ = reader.ReadS32();
        MeshScaleModifier _scaleModifier_ = MeshScaleModifier.Read(reader);
        reader.AlignTo(4); /* _scaleModifier */
        
        return new(name_,
            _iterationSeed_,
            _offsetSeed_,
            _rotationSeed_,
            _scaleSeed_,
            owner_,
            meshes_,
            _clipFrom_,
            _clipTo_,
            _randomOrder_,
            _overrideUVs_,
            _uvScale_,
            _uvOffset_,
            _overrideNormal_,
            _customNormal_,
            _type_,
            _count_,
            _autoCount_,
            _spacing_,
            _randomRotation_,
            _minRotation_,
            _maxRotation_,
            _randomOffset_,
            _minOffset_,
            _maxOffset_,
            _randomScale_,
            _uniformRandomScale_,
            _minScale_,
            _maxScale_,
            _overrideMaterialID_,
            _targetMaterialID_,
            _scaleModifier_);
    }

    public override string ToString() => $"Channel\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_iterationSeed: {_iterationSeed}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_offsetSeed: {_offsetSeed}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_rotationSeed: {_rotationSeed}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_scaleSeed: {_scaleSeed}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}owner: {owner}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}meshes[{meshes.Length}] = {{");
        if (meshes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (MeshDefinition _4 in meshes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (meshes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_clipFrom: {_clipFrom}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_clipTo: {_clipTo}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_randomOrder: {_randomOrder}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_overrideUVs: {_overrideUVs}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_uvScale: {{ x: {_uvScale.x}, y: {_uvScale.y} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_uvOffset: {{ x: {_uvOffset.x}, y: {_uvOffset.y} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_overrideNormal: {_overrideNormal}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_customNormal: {{ x: {_customNormal.x}, y: {_customNormal.y}, z: {_customNormal.z} }}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_type: {_type}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_count: {_count}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_autoCount: {_autoCount}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_spacing: {_spacing}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_randomRotation: {_randomRotation}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_minRotation: {{ x: {_minRotation.x}, y: {_minRotation.y}, z: {_minRotation.z} }}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_maxRotation: {{ x: {_maxRotation.x}, y: {_maxRotation.y}, z: {_maxRotation.z} }}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_randomOffset: {_randomOffset}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_minOffset: {{ x: {_minOffset.x}, y: {_minOffset.y} }}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_maxOffset: {{ x: {_maxOffset.x}, y: {_maxOffset.y} }}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_randomScale: {_randomScale}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_uniformRandomScale: {_uniformRandomScale}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_minScale: {{ x: {_minScale.x}, y: {_minScale.y}, z: {_minScale.z} }}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_maxScale: {{ x: {_maxScale.x}, y: {_maxScale.y}, z: {_maxScale.z} }}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_overrideMaterialID: {_overrideMaterialID}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_targetMaterialID: {_targetMaterialID}");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_scaleModifier: {{ \n{_scaleModifier.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MeshDefinition (25 fields) */
public record class MeshDefinition (
    Vector3f[] vertices,
    Vector3f[] normals,
    Vector4f[] tangents,
    ColorRGBA_1[] colors,
    Vector2f[] uv,
    Vector2f[] uv2,
    Vector2f[] uv3,
    Vector2f[] uv4,
    int[] triangles,
    Submesh[] subMeshes,
    TS_Bounds bounds,
    VertexGroup[] vertexGroups,
    PPtr<Mesh> _mesh,
    Vector3f _rotation,
    Vector3f _offset,
    Vector3f _scale,
    Vector2f _uvScale,
    Vector2f _uvOffset,
    float _uvRotation,
    int _mirror,
    BoundsSpacing _spacing,
    float _vertexGroupingMargin,
    byte _removeInnerFaces,
    byte _flipFaces,
    byte _doubleSided) : IUnityStructure
{
    public static MeshDefinition Read(EndianBinaryReader reader)
    {
        Vector3f[] vertices_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* vertices */
        Vector3f[] normals_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* normals */
        Vector4f[] tangents_ = BuiltInArray<Vector4f>.Read(reader);
        reader.AlignTo(4); /* tangents */
        ColorRGBA_1[] colors_ = BuiltInArray<ColorRGBA_1>.Read(reader);
        reader.AlignTo(4); /* colors */
        Vector2f[] uv_ = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv */
        Vector2f[] uv2_ = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv2 */
        Vector2f[] uv3_ = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv3 */
        Vector2f[] uv4_ = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* uv4 */
        int[] triangles_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* triangles */
        Submesh[] subMeshes_ = BuiltInArray<Submesh>.Read(reader);
        reader.AlignTo(4); /* subMeshes */
        TS_Bounds bounds_ = TS_Bounds.Read(reader);
        VertexGroup[] vertexGroups_ = BuiltInArray<VertexGroup>.Read(reader);
        reader.AlignTo(4); /* vertexGroups */
        PPtr<Mesh> _mesh_ = PPtr<Mesh>.Read(reader);
        Vector3f _rotation_ = Vector3f.Read(reader);
        Vector3f _offset_ = Vector3f.Read(reader);
        Vector3f _scale_ = Vector3f.Read(reader);
        Vector2f _uvScale_ = Vector2f.Read(reader);
        Vector2f _uvOffset_ = Vector2f.Read(reader);
        float _uvRotation_ = reader.ReadF32();
        int _mirror_ = reader.ReadS32();
        BoundsSpacing _spacing_ = BoundsSpacing.Read(reader);
        float _vertexGroupingMargin_ = reader.ReadF32();
        byte _removeInnerFaces_ = reader.ReadU8();
        reader.AlignTo(4); /* _removeInnerFaces */
        byte _flipFaces_ = reader.ReadU8();
        reader.AlignTo(4); /* _flipFaces */
        byte _doubleSided_ = reader.ReadU8();
        reader.AlignTo(4); /* _doubleSided */
        
        return new(vertices_,
            normals_,
            tangents_,
            colors_,
            uv_,
            uv2_,
            uv3_,
            uv4_,
            triangles_,
            subMeshes_,
            bounds_,
            vertexGroups_,
            _mesh_,
            _rotation_,
            _offset_,
            _scale_,
            _uvScale_,
            _uvOffset_,
            _uvRotation_,
            _mirror_,
            _spacing_,
            _vertexGroupingMargin_,
            _removeInnerFaces_,
            _flipFaces_,
            _doubleSided_);
    }

    public override string ToString() => $"MeshDefinition\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vertices[{vertices.Length}] = {{");
        if (vertices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in vertices)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (vertices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}normals[{normals.Length}] = {{");
        if (normals.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in normals)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (normals.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}tangents[{tangents.Length}] = {{");
        if (tangents.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector4f _4 in tangents)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z}, w: {_4.w} }}\n");
            ++_4i;
        }
        if (tangents.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}colors[{colors.Length}] = {{");
        if (colors.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ColorRGBA_1 _4 in colors)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ r: {_4.r}, g: {_4.g}, b: {_4.b}, a: {_4.a} }}\n");
            ++_4i;
        }
        if (colors.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uv[{uv.Length}] = {{");
        if (uv.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in uv)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (uv.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uv2[{uv2.Length}] = {{");
        if (uv2.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in uv2)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (uv2.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uv3[{uv3.Length}] = {{");
        if (uv3.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in uv3)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (uv3.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}uv4[{uv4.Length}] = {{");
        if (uv4.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in uv4)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (uv4.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}triangles[{triangles.Length}] = {{");
        if (triangles.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in triangles)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (triangles.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}subMeshes[{subMeshes.Length}] = {{");
        if (subMeshes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Submesh _4 in subMeshes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (subMeshes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}bounds: {{ \n{bounds.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vertexGroups[{vertexGroups.Length}] = {{");
        if (vertexGroups.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VertexGroup _4 in vertexGroups)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (vertexGroups.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mesh: {_mesh}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_rotation: {{ x: {_rotation.x}, y: {_rotation.y}, z: {_rotation.z} }}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_offset: {{ x: {_offset.x}, y: {_offset.y}, z: {_offset.z} }}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_scale: {{ x: {_scale.x}, y: {_scale.y}, z: {_scale.z} }}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_uvScale: {{ x: {_uvScale.x}, y: {_uvScale.y} }}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_uvOffset: {{ x: {_uvOffset.x}, y: {_uvOffset.y} }}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_uvRotation: {_uvRotation}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mirror: {_mirror}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_spacing: {{ front: {_spacing.front}, back: {_spacing.back} }}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_vertexGroupingMargin: {_vertexGroupingMargin}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_removeInnerFaces: {_removeInnerFaces}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_flipFaces: {_flipFaces}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_doubleSided: {_doubleSided}");
    }
}

/* $Submesh (1 fields) */
public record class Submesh (
    int[] triangles) : IUnityStructure
{
    public static Submesh Read(EndianBinaryReader reader)
    {
        int[] triangles_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* triangles */
        
        return new(triangles_);
    }

    public override string ToString() => $"Submesh\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}triangles[{triangles.Length}] = {{");
        if (triangles.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in triangles)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (triangles.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $TS_Bounds (5 fields) */
public record class TS_Bounds (
    Vector3f center,
    Vector3f extents,
    Vector3f max,
    Vector3f min,
    Vector3f size) : IUnityStructure
{
    public static TS_Bounds Read(EndianBinaryReader reader)
    {
        Vector3f center_ = Vector3f.Read(reader);
        Vector3f extents_ = Vector3f.Read(reader);
        Vector3f max_ = Vector3f.Read(reader);
        Vector3f min_ = Vector3f.Read(reader);
        Vector3f size_ = Vector3f.Read(reader);
        
        return new(center_,
            extents_,
            max_,
            min_,
            size_);
    }

    public override string ToString() => $"TS_Bounds\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}center: {{ x: {center.x}, y: {center.y}, z: {center.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}extents: {{ x: {extents.x}, y: {extents.y}, z: {extents.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}max: {{ x: {max.x}, y: {max.y}, z: {max.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}min: {{ x: {min.x}, y: {min.y}, z: {min.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}size: {{ x: {size.x}, y: {size.y}, z: {size.z} }}\n");
    }
}

/* $VertexGroup (3 fields) */
public record class VertexGroup (
    float @value,
    double percent,
    int[] ids) : IUnityStructure
{
    public static VertexGroup Read(EndianBinaryReader reader)
    {
        float @value_ = reader.ReadF32();
        double percent_ = reader.ReadF64();
        int[] ids_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ids */
        
        return new(@value_,
            percent_,
            ids_);
    }

    public override string ToString() => $"VertexGroup\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}percent: {percent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ids[{ids.Length}] = {{");
        if (ids.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ids)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ids.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $BoundsSpacing (2 fields) */
public readonly record struct BoundsSpacing (
    float front,
    float back) : IUnityStructure
{
    public static BoundsSpacing Read(EndianBinaryReader reader)
    {
        float front_ = reader.ReadF32();
        float back_ = reader.ReadF32();
        
        return new(front_,
            back_);
    }

    public override string ToString() => $"BoundsSpacing\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}front: {front}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}back: {back}");
    }
}

/* $MeshScaleModifier (3 fields) */
public record class MeshScaleModifier (
    float blend,
    byte useClippedPercent,
    ScaleKey[] keys) : IUnityStructure
{
    public static MeshScaleModifier Read(EndianBinaryReader reader)
    {
        float blend_ = reader.ReadF32();
        byte useClippedPercent_ = reader.ReadU8();
        reader.AlignTo(4); /* useClippedPercent */
        ScaleKey[] keys_ = BuiltInArray<ScaleKey>.Read(reader);
        reader.AlignTo(4); /* keys */
        
        return new(blend_,
            useClippedPercent_,
            keys_);
    }

    public override string ToString() => $"MeshScaleModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useClippedPercent: {useClippedPercent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keys[{keys.Length}] = {{");
        if (keys.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ScaleKey _4 in keys)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keys.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ScaleKey (7 fields) */
public record class ScaleKey (
    double _featherStart,
    double _featherEnd,
    double _centerStart,
    double _centerEnd,
    AnimationCurve interpolation,
    float blend,
    Vector3f scale) : IUnityStructure
{
    public static ScaleKey Read(EndianBinaryReader reader)
    {
        double _featherStart_ = reader.ReadF64();
        double _featherEnd_ = reader.ReadF64();
        double _centerStart_ = reader.ReadF64();
        double _centerEnd_ = reader.ReadF64();
        AnimationCurve interpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* interpolation */
        float blend_ = reader.ReadF32();
        Vector3f scale_ = Vector3f.Read(reader);
        
        return new(_featherStart_,
            _featherEnd_,
            _centerStart_,
            _centerEnd_,
            interpolation_,
            blend_,
            scale_);
    }

    public override string ToString() => $"ScaleKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherStart: {_featherStart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherEnd: {_featherEnd}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerStart: {_centerStart}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerEnd: {_centerEnd}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}interpolation: {{ \n{interpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}scale: {{ x: {scale.x}, y: {scale.y}, z: {scale.z} }}\n");
    }
}

/* $TextureCurveParameter (2 fields) */
public record class TextureCurveParameter (
    byte m_OverrideState,
    TextureCurve m_Value) : IUnityStructure
{
    public static TextureCurveParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        TextureCurve m_Value_ = TextureCurve.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"TextureCurveParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TextureCurve (5 fields) */
public record class TextureCurve (
    int __length__k__BackingField,
    byte m_Loop,
    float m_ZeroValue,
    float m_Range,
    AnimationCurve m_Curve) : IUnityStructure
{
    public static TextureCurve Read(EndianBinaryReader reader)
    {
        int __length__k__BackingField_ = reader.ReadS32();
        byte m_Loop_ = reader.ReadU8();
        reader.AlignTo(4); /* m_Loop */
        float m_ZeroValue_ = reader.ReadF32();
        float m_Range_ = reader.ReadF32();
        AnimationCurve m_Curve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        
        return new(__length__k__BackingField_,
            m_Loop_,
            m_ZeroValue_,
            m_Range_,
            m_Curve_);
    }

    public override string ToString() => $"TextureCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}__length__k__BackingField: {__length__k__BackingField}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Loop: {m_Loop}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ZeroValue: {m_ZeroValue}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Range: {m_Range}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve: {{ \n{m_Curve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SingleObjectPivotPointRenderSettingsView (6 fields) */
public record class SingleObjectPivotPointRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static SingleObjectPivotPointRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"SingleObjectPivotPointRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ShadowSettings_1 (14 fields) */
public record class ShadowSettings_1 (
    int ShadowQuality,
    ShadowUpdateDistances ShadowUpdateDistances_,
    int AtlasSize,
    bool StaticShadowsCacheEnabled,
    int CacheAtlasSize,
    float ShadowNearPlane,
    float m_ShadowDistance,
    int DirectionalLightCascadeResolution,
    Cascades DirectionalLightCascades,
    ShadowResolutionSettings PointLightResolution,
    ShadowResolutionSettings SpotLightResolution,
    float DepthBias,
    float NormalBias,
    float ReceiverNormalBias) : IUnityStructure
{
    public static ShadowSettings_1 Read(EndianBinaryReader reader)
    {
        int ShadowQuality_ = reader.ReadS32();
        ShadowUpdateDistances ShadowUpdateDistances__ = ShadowUpdateDistances.Read(reader);
        reader.AlignTo(4); /* ShadowUpdateDistances_ */
        int AtlasSize_ = reader.ReadS32();
        bool StaticShadowsCacheEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* StaticShadowsCacheEnabled */
        int CacheAtlasSize_ = reader.ReadS32();
        float ShadowNearPlane_ = reader.ReadF32();
        float m_ShadowDistance_ = reader.ReadF32();
        int DirectionalLightCascadeResolution_ = reader.ReadS32();
        Cascades DirectionalLightCascades_ = Cascades.Read(reader);
        reader.AlignTo(4); /* DirectionalLightCascades */
        ShadowResolutionSettings PointLightResolution_ = ShadowResolutionSettings.Read(reader);
        reader.AlignTo(4); /* PointLightResolution */
        ShadowResolutionSettings SpotLightResolution_ = ShadowResolutionSettings.Read(reader);
        reader.AlignTo(4); /* SpotLightResolution */
        float DepthBias_ = reader.ReadF32();
        float NormalBias_ = reader.ReadF32();
        float ReceiverNormalBias_ = reader.ReadF32();
        
        return new(ShadowQuality_,
            ShadowUpdateDistances__,
            AtlasSize_,
            StaticShadowsCacheEnabled_,
            CacheAtlasSize_,
            ShadowNearPlane_,
            m_ShadowDistance_,
            DirectionalLightCascadeResolution_,
            DirectionalLightCascades_,
            PointLightResolution_,
            SpotLightResolution_,
            DepthBias_,
            NormalBias_,
            ReceiverNormalBias_);
    }

    public override string ToString() => $"ShadowSettings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowQuality: {ShadowQuality}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShadowUpdateDistances_: {{ \n{ShadowUpdateDistances_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AtlasSize: {AtlasSize}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StaticShadowsCacheEnabled: {StaticShadowsCacheEnabled}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CacheAtlasSize: {CacheAtlasSize}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowNearPlane: {ShadowNearPlane}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ShadowDistance: {m_ShadowDistance}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DirectionalLightCascadeResolution: {DirectionalLightCascadeResolution}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DirectionalLightCascades: {{ \n{DirectionalLightCascades.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PointLightResolution: {{ \n{PointLightResolution.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpotLightResolution: {{ \n{SpotLightResolution.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthBias: {DepthBias}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NormalBias: {NormalBias}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ReceiverNormalBias: {ReceiverNormalBias}");
    }
}

/* $ShadowUpdateDistances (8 fields) */
public record class ShadowUpdateDistances (
    int Count,
    float Cascade2Splits,
    Vector2f Cascade3Splits,
    Vector3f Cascade4Splits,
    int Distance0UpdateMode,
    int Distance1UpdateMode,
    int Distance2UpdateMode,
    int Distance3UpdateMode) : IUnityStructure
{
    public static ShadowUpdateDistances Read(EndianBinaryReader reader)
    {
        int Count_ = reader.ReadS32();
        float Cascade2Splits_ = reader.ReadF32();
        Vector2f Cascade3Splits_ = Vector2f.Read(reader);
        reader.AlignTo(4); /* Cascade3Splits */
        Vector3f Cascade4Splits_ = Vector3f.Read(reader);
        reader.AlignTo(4); /* Cascade4Splits */
        int Distance0UpdateMode_ = reader.ReadS32();
        int Distance1UpdateMode_ = reader.ReadS32();
        int Distance2UpdateMode_ = reader.ReadS32();
        int Distance3UpdateMode_ = reader.ReadS32();
        
        return new(Count_,
            Cascade2Splits_,
            Cascade3Splits_,
            Cascade4Splits_,
            Distance0UpdateMode_,
            Distance1UpdateMode_,
            Distance2UpdateMode_,
            Distance3UpdateMode_);
    }

    public override string ToString() => $"ShadowUpdateDistances\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Count: {Count}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Cascade2Splits: {Cascade2Splits}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cascade3Splits: {{ x: {Cascade3Splits.x}, y: {Cascade3Splits.y} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cascade4Splits: {{ x: {Cascade4Splits.x}, y: {Cascade4Splits.y}, z: {Cascade4Splits.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Distance0UpdateMode: {Distance0UpdateMode}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Distance1UpdateMode: {Distance1UpdateMode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Distance2UpdateMode: {Distance2UpdateMode}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Distance3UpdateMode: {Distance3UpdateMode}");
    }
}

/* $Cascades (4 fields) */
public record class Cascades (
    int Count,
    float Cascade2Splits,
    Vector2f Cascade3Splits,
    Vector3f Cascade4Splits) : IUnityStructure
{
    public static Cascades Read(EndianBinaryReader reader)
    {
        int Count_ = reader.ReadS32();
        float Cascade2Splits_ = reader.ReadF32();
        Vector2f Cascade3Splits_ = Vector2f.Read(reader);
        reader.AlignTo(4); /* Cascade3Splits */
        Vector3f Cascade4Splits_ = Vector3f.Read(reader);
        reader.AlignTo(4); /* Cascade4Splits */
        
        return new(Count_,
            Cascade2Splits_,
            Cascade3Splits_,
            Cascade4Splits_);
    }

    public override string ToString() => $"Cascades\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Count: {Count}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Cascade2Splits: {Cascade2Splits}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cascade3Splits: {{ x: {Cascade3Splits.x}, y: {Cascade3Splits.y} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cascade4Splits: {{ x: {Cascade4Splits.x}, y: {Cascade4Splits.y}, z: {Cascade4Splits.z} }}\n");
    }
}

/* $ShadowResolutionSettings (5 fields) */
public readonly record struct ShadowResolutionSettings (
    int DefaultTier,
    int Low,
    int Medium,
    int High,
    int Ultra) : IUnityStructure
{
    public static ShadowResolutionSettings Read(EndianBinaryReader reader)
    {
        int DefaultTier_ = reader.ReadS32();
        int Low_ = reader.ReadS32();
        int Medium_ = reader.ReadS32();
        int High_ = reader.ReadS32();
        int Ultra_ = reader.ReadS32();
        
        return new(DefaultTier_,
            Low_,
            Medium_,
            High_,
            Ultra_);
    }

    public override string ToString() => $"ShadowResolutionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DefaultTier: {DefaultTier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Low: {Low}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Medium: {Medium}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}High: {High}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Ultra: {Ultra}");
    }
}

/* $PostProcessSettings (3 fields) */
public record class PostProcessSettings (
    int m_ColorGradingLutSize,
    int m_ColorGradingMode,
    TemporalAntialiasingSettings m_TemporalAntialiasingSettings) : IUnityStructure
{
    public static PostProcessSettings Read(EndianBinaryReader reader)
    {
        int m_ColorGradingLutSize_ = reader.ReadS32();
        int m_ColorGradingMode_ = reader.ReadS32();
        TemporalAntialiasingSettings m_TemporalAntialiasingSettings_ = TemporalAntialiasingSettings.Read(reader);
        reader.AlignTo(4); /* m_TemporalAntialiasingSettings */
        
        return new(m_ColorGradingLutSize_,
            m_ColorGradingMode_,
            m_TemporalAntialiasingSettings_);
    }

    public override string ToString() => $"PostProcessSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ColorGradingLutSize: {m_ColorGradingLutSize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ColorGradingMode: {m_ColorGradingMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_TemporalAntialiasingSettings: {{ FrameInfluence: {m_TemporalAntialiasingSettings.FrameInfluence} }}\n");
    }
}

/* $TemporalAntialiasingSettings (1 fields) */
public readonly record struct TemporalAntialiasingSettings (
    float FrameInfluence) : IUnityStructure
{
    public static TemporalAntialiasingSettings Read(EndianBinaryReader reader)
    {
        float FrameInfluence_ = reader.ReadF32();
        
        return new(FrameInfluence_);
    }

    public override string ToString() => $"TemporalAntialiasingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameInfluence: {FrameInfluence}");
    }
}

/* $LightCookieSettings (2 fields) */
public readonly record struct LightCookieSettings (
    int m_LightCookieFormat,
    int m_Resolution) : IUnityStructure
{
    public static LightCookieSettings Read(EndianBinaryReader reader)
    {
        int m_LightCookieFormat_ = reader.ReadS32();
        int m_Resolution_ = reader.ReadS32();
        
        return new(m_LightCookieFormat_,
            m_Resolution_);
    }

    public override string ToString() => $"LightCookieSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LightCookieFormat: {m_LightCookieFormat}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Resolution: {m_Resolution}");
    }
}

/* $LocalVolumetricFogSettings (4 fields) */
public record class LocalVolumetricFogSettings (
    PPtr<ComputeShader> Texture3DAtlasCS,
    int MaxLocalVolumetricFogSize,
    int MaxLocalVolumetricFogOnScreen,
    int MaxTexturesInAtlas) : IUnityStructure
{
    public static LocalVolumetricFogSettings Read(EndianBinaryReader reader)
    {
        PPtr<ComputeShader> Texture3DAtlasCS_ = PPtr<ComputeShader>.Read(reader);
        int MaxLocalVolumetricFogSize_ = reader.ReadS32();
        int MaxLocalVolumetricFogOnScreen_ = reader.ReadS32();
        int MaxTexturesInAtlas_ = reader.ReadS32();
        
        return new(Texture3DAtlasCS_,
            MaxLocalVolumetricFogSize_,
            MaxLocalVolumetricFogOnScreen_,
            MaxTexturesInAtlas_);
    }

    public override string ToString() => $"LocalVolumetricFogSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Texture3DAtlasCS: {Texture3DAtlasCS}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxLocalVolumetricFogSize: {MaxLocalVolumetricFogSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxLocalVolumetricFogOnScreen: {MaxLocalVolumetricFogOnScreen}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxTexturesInAtlas: {MaxTexturesInAtlas}");
    }
}

/* $TerrainSettings (2 fields) */
public readonly record struct TerrainSettings (
    bool TriplanarEnabled,
    bool SupportsTerrainHoles) : IUnityStructure
{
    public static TerrainSettings Read(EndianBinaryReader reader)
    {
        bool TriplanarEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* TriplanarEnabled */
        bool SupportsTerrainHoles_ = reader.ReadBool();
        reader.AlignTo(4); /* SupportsTerrainHoles */
        
        return new(TriplanarEnabled_,
            SupportsTerrainHoles_);
    }

    public override string ToString() => $"TerrainSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TriplanarEnabled: {TriplanarEnabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SupportsTerrainHoles: {SupportsTerrainHoles}");
    }
}

/* $DefaultMaterials (1 fields) */
public record class DefaultMaterials (
    PPtr<Material> DefaultUIMaterial) : IUnityStructure
{
    public static DefaultMaterials Read(EndianBinaryReader reader)
    {
        PPtr<Material> DefaultUIMaterial_ = PPtr<Material>.Read(reader);
        
        return new(DefaultUIMaterial_);
    }

    public override string ToString() => $"DefaultMaterials\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DefaultUIMaterial: {DefaultUIMaterial}");
    }
}

/* $TextureResources_1 (3 fields) */
public record class TextureResources_1 (
    PPtr<Texture2D> OwenScrambled256Tex,
    PPtr<Texture2D> RankingTile1SPP,
    PPtr<Texture2D> ScramblingTile1SPP) : IUnityStructure
{
    public static TextureResources_1 Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D> OwenScrambled256Tex_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> RankingTile1SPP_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> ScramblingTile1SPP_ = PPtr<Texture2D>.Read(reader);
        
        return new(OwenScrambled256Tex_,
            RankingTile1SPP_,
            ScramblingTile1SPP_);
    }

    public override string ToString() => $"TextureResources_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OwenScrambled256Tex: {OwenScrambled256Tex}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RankingTile1SPP: {RankingTile1SPP}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScramblingTile1SPP: {ScramblingTile1SPP}");
    }
}

/* $PlaneBox (4 fields) */
public record class PlaneBox (
    Vector4f PlaneX,
    Vector4f PlaneY,
    Vector4f PlaneZ,
    Vector3f Extents) : IUnityStructure
{
    public static PlaneBox Read(EndianBinaryReader reader)
    {
        Vector4f PlaneX_ = Vector4f.Read(reader);
        Vector4f PlaneY_ = Vector4f.Read(reader);
        Vector4f PlaneZ_ = Vector4f.Read(reader);
        Vector3f Extents_ = Vector3f.Read(reader);
        
        return new(PlaneX_,
            PlaneY_,
            PlaneZ_,
            Extents_);
    }

    public override string ToString() => $"PlaneBox\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlaneX: {{ x: {PlaneX.x}, y: {PlaneX.y}, z: {PlaneX.z}, w: {PlaneX.w} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlaneY: {{ x: {PlaneY.x}, y: {PlaneY.y}, z: {PlaneY.z}, w: {PlaneY.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlaneZ: {{ x: {PlaneZ.x}, y: {PlaneZ.y}, z: {PlaneZ.z}, w: {PlaneZ.w} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Extents: {{ x: {Extents.x}, y: {Extents.y}, z: {Extents.z} }}\n");
    }
}

/* $LockAxisSettings (3 fields) */
public record class LockAxisSettings (
    byte Enabled,
    Vector3f Axis,
    int Space) : IUnityStructure
{
    public static LockAxisSettings Read(EndianBinaryReader reader)
    {
        byte Enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* Enabled */
        Vector3f Axis_ = Vector3f.Read(reader);
        int Space_ = reader.ReadS32();
        
        return new(Enabled_,
            Axis_,
            Space_);
    }

    public override string ToString() => $"LockAxisSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Axis: {{ x: {Axis.x}, y: {Axis.y}, z: {Axis.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Space: {Space}");
    }
}

/* $ColonyProjectsNavigationBlock (3 fields) */
public record class ColonyProjectsNavigationBlock (
    PPtr<GameObject> Container,
    PPtr<WidgetListMVVM> WidgetList,
    int Rank) : IUnityStructure
{
    public static ColonyProjectsNavigationBlock Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Container_ = PPtr<GameObject>.Read(reader);
        PPtr<WidgetListMVVM> WidgetList_ = PPtr<WidgetListMVVM>.Read(reader);
        int Rank_ = reader.ReadS32();
        
        return new(Container_,
            WidgetList_,
            Rank_);
    }

    public override string ToString() => $"ColonyProjectsNavigationBlock\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Container: {Container}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WidgetList: {WidgetList}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Rank: {Rank}");
    }
}

/* $FloatPropertyAnimationData (5 fields) */
public record class FloatPropertyAnimationData (
    AsciiString m_PropertyName,
    AnimationCurve m_Curve,
    float m_CurveDuration,
    float m_Duration,
    float m_Delay) : IUnityStructure
{
    public static FloatPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString m_PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PropertyName */
        AnimationCurve m_Curve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* m_Curve */
        float m_CurveDuration_ = reader.ReadF32();
        float m_Duration_ = reader.ReadF32();
        float m_Delay_ = reader.ReadF32();
        
        return new(m_PropertyName_,
            m_Curve_,
            m_CurveDuration_,
            m_Duration_,
            m_Delay_);
    }

    public override string ToString() => $"FloatPropertyAnimationData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PropertyName: \"{m_PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Curve: {{ \n{m_Curve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CurveDuration: {m_CurveDuration}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Delay: {m_Delay}");
    }
}

/* $ColorPropertyAnimationData (6 fields) */
public record class ColorPropertyAnimationData (
    AsciiString m_PropertyName,
    Gradient_1 m_Gradient,
    int m_GradientWrapMode,
    float m_GradientDuration,
    float m_Duration,
    float m_Delay) : IUnityStructure
{
    public static ColorPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString m_PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PropertyName */
        Gradient_1 m_Gradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* m_Gradient */
        int m_GradientWrapMode_ = reader.ReadS32();
        float m_GradientDuration_ = reader.ReadF32();
        float m_Duration_ = reader.ReadF32();
        float m_Delay_ = reader.ReadF32();
        
        return new(m_PropertyName_,
            m_Gradient_,
            m_GradientWrapMode_,
            m_GradientDuration_,
            m_Duration_,
            m_Delay_);
    }

    public override string ToString() => $"ColorPropertyAnimationData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PropertyName: \"{m_PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Gradient: {{ \n{m_Gradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GradientWrapMode: {m_GradientWrapMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GradientDuration: {m_GradientDuration}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Delay: {m_Delay}");
    }
}

/* $TexturePropertyAnimationData (4 fields) */
public record class TexturePropertyAnimationData (
    AsciiString m_PropertyName,
    PPtr<Texture> m_Texture,
    float m_Duration,
    float m_Delay) : IUnityStructure
{
    public static TexturePropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString m_PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PropertyName */
        PPtr<Texture> m_Texture_ = PPtr<Texture>.Read(reader);
        float m_Duration_ = reader.ReadF32();
        float m_Delay_ = reader.ReadF32();
        
        return new(m_PropertyName_,
            m_Texture_,
            m_Duration_,
            m_Delay_);
    }

    public override string ToString() => $"TexturePropertyAnimationData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PropertyName: \"{m_PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Texture: {m_Texture}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Delay: {m_Delay}");
    }
}

/* $TransformPropertyAnimationData (5 fields) */
public record class TransformPropertyAnimationData (
    AsciiString m_WorldToLocalPropertyName,
    AsciiString m_LocalToWorldPropertyName,
    PPtr<Transform> m_Transform,
    float m_Duration,
    float m_Delay) : IUnityStructure
{
    public static TransformPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString m_WorldToLocalPropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_WorldToLocalPropertyName */
        AsciiString m_LocalToWorldPropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_LocalToWorldPropertyName */
        PPtr<Transform> m_Transform_ = PPtr<Transform>.Read(reader);
        float m_Duration_ = reader.ReadF32();
        float m_Delay_ = reader.ReadF32();
        
        return new(m_WorldToLocalPropertyName_,
            m_LocalToWorldPropertyName_,
            m_Transform_,
            m_Duration_,
            m_Delay_);
    }

    public override string ToString() => $"TransformPropertyAnimationData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WorldToLocalPropertyName: \"{m_WorldToLocalPropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LocalToWorldPropertyName: \"{m_LocalToWorldPropertyName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Transform: {m_Transform}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Delay: {m_Delay}");
    }
}

/* $TransferMaterialPropertyAnimationData (5 fields) */
public record class TransferMaterialPropertyAnimationData (
    AsciiString m_PropertyName,
    AsciiString m_BaseMaterialPropertyName,
    int m_PropertyType,
    float m_Duration,
    float m_Delay) : IUnityStructure
{
    public static TransferMaterialPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString m_PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PropertyName */
        AsciiString m_BaseMaterialPropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_BaseMaterialPropertyName */
        int m_PropertyType_ = reader.ReadS32();
        float m_Duration_ = reader.ReadF32();
        float m_Delay_ = reader.ReadF32();
        
        return new(m_PropertyName_,
            m_BaseMaterialPropertyName_,
            m_PropertyType_,
            m_Duration_,
            m_Delay_);
    }

    public override string ToString() => $"TransferMaterialPropertyAnimationData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PropertyName: \"{m_PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BaseMaterialPropertyName: \"{m_BaseMaterialPropertyName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PropertyType: {m_PropertyType}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Delay: {m_Delay}");
    }
}

/* $TransferScriptPropertyAnimationData (4 fields) */
public record class TransferScriptPropertyAnimationData (
    AsciiString m_PropertyName,
    int m_ScriptProperty,
    float m_Duration,
    float m_Delay) : IUnityStructure
{
    public static TransferScriptPropertyAnimationData Read(EndianBinaryReader reader)
    {
        AsciiString m_PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PropertyName */
        int m_ScriptProperty_ = reader.ReadS32();
        float m_Duration_ = reader.ReadF32();
        float m_Delay_ = reader.ReadF32();
        
        return new(m_PropertyName_,
            m_ScriptProperty_,
            m_Duration_,
            m_Delay_);
    }

    public override string ToString() => $"TransferScriptPropertyAnimationData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PropertyName: \"{m_PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ScriptProperty: {m_ScriptProperty}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Duration: {m_Duration}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Delay: {m_Delay}");
    }
}

/* $AkEventReference (1 fields) */
public record class AkEventReference (
    AsciiString Value) : IUnityStructure
{
    public static AkEventReference Read(EndianBinaryReader reader)
    {
        AsciiString Value_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Value */
        
        return new(Value_);
    }

    public override string ToString() => $"AkEventReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Value: \"{Value}\"");
    }
}

/* $AnimationSequence (1 fields) */
public record class AnimationSequence (
    AnimationSequenceAction[] Actions) : IUnityStructure
{
    public static AnimationSequence Read(EndianBinaryReader reader)
    {
        AnimationSequenceAction[] Actions_ = BuiltInArray<AnimationSequenceAction>.Read(reader);
        
        return new(Actions_);
    }

    public override string ToString() => $"AnimationSequence\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Actions[{Actions.Length}] = {{");
        if (Actions.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AnimationSequenceAction _4 in Actions)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Actions.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AnimationSequenceAction (3 fields) */
public record class AnimationSequenceAction (
    int UnitAnimationType,
    int UnitAnimationSpecialAttackType,
    PPtr<AnimationClipWrapper> AnimationClipWrapper) : IUnityStructure
{
    public static AnimationSequenceAction Read(EndianBinaryReader reader)
    {
        int UnitAnimationType_ = reader.ReadS32();
        int UnitAnimationSpecialAttackType_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> AnimationClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(UnitAnimationType_,
            UnitAnimationSpecialAttackType_,
            AnimationClipWrapper_);
    }

    public override string ToString() => $"AnimationSequenceAction\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnitAnimationType: {UnitAnimationType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnitAnimationSpecialAttackType: {UnitAnimationSpecialAttackType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AnimationClipWrapper: {AnimationClipWrapper}");
    }
}

/* $ObjectPlacementPathTileConnectionConfigurationCollection (2 fields) */
public record class ObjectPlacementPathTileConnectionConfigurationCollection (
    PPtr<ObjectPlacementPathTileConnectionConfiguration>[] _namedEntities,
    int _indexOfMarkedEntity) : IUnityStructure
{
    public static ObjectPlacementPathTileConnectionConfigurationCollection Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementPathTileConnectionConfiguration>[] _namedEntities_ = BuiltInArray<PPtr<ObjectPlacementPathTileConnectionConfiguration>>.Read(reader);
        int _indexOfMarkedEntity_ = reader.ReadS32();
        
        return new(_namedEntities_,
            _indexOfMarkedEntity_);
    }

    public override string ToString() => $"ObjectPlacementPathTileConnectionConfigurationCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_namedEntities[{_namedEntities.Length}] = {{");
        if (_namedEntities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<ObjectPlacementPathTileConnectionConfiguration> _4 in _namedEntities)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_namedEntities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indexOfMarkedEntity: {_indexOfMarkedEntity}");
    }
}

/* $ObjectPlacementPathTileConnectionConfigurationDatabaseView (7 fields) */
public record class ObjectPlacementPathTileConnectionConfigurationDatabaseView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<ObjectPlacementPathTileConnectionConfigurationDatabaseViewData> _viewData) : IUnityStructure
{
    public static ObjectPlacementPathTileConnectionConfigurationDatabaseView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<ObjectPlacementPathTileConnectionConfigurationDatabaseViewData> _viewData_ = PPtr<ObjectPlacementPathTileConnectionConfigurationDatabaseViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"ObjectPlacementPathTileConnectionConfigurationDatabaseView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $DestructionStageSettings (2 fields) */
public record class DestructionStageSettings (
    int Type,
    PPtr<GridNavmeshModifier> NavmeshModifier) : IUnityStructure
{
    public static DestructionStageSettings Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<GridNavmeshModifier> NavmeshModifier_ = PPtr<GridNavmeshModifier>.Read(reader);
        
        return new(Type_,
            NavmeshModifier_);
    }

    public override string ToString() => $"DestructionStageSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NavmeshModifier: {NavmeshModifier}");
    }
}

/* $ObjectSnapSettingsView (6 fields) */
public record class ObjectSnapSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSnapSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSnapSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $BlueprintStarSystemObjectReference (1 fields) */
public record class BlueprintStarSystemObjectReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintStarSystemObjectReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintStarSystemObjectReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BorderSettings (3 fields) */
public readonly record struct BorderSettings (
    byte Enabled,
    float Width,
    float Offset) : IUnityStructure
{
    public static BorderSettings Read(EndianBinaryReader reader)
    {
        byte Enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* Enabled */
        float Width_ = reader.ReadF32();
        float Offset_ = reader.ReadF32();
        
        return new(Enabled_,
            Width_,
            Offset_);
    }

    public override string ToString() => $"BorderSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Width: {Width}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Offset: {Offset}");
    }
}

/* $OutlineSettings (4 fields) */
public readonly record struct OutlineSettings (
    float lineThickness,
    float turnSmoothDistance,
    int turnSmoothSegmentsCount,
    bool mergeSubMeshes) : IUnityStructure
{
    public static OutlineSettings Read(EndianBinaryReader reader)
    {
        float lineThickness_ = reader.ReadF32();
        float turnSmoothDistance_ = reader.ReadF32();
        int turnSmoothSegmentsCount_ = reader.ReadS32();
        bool mergeSubMeshes_ = reader.ReadBool();
        reader.AlignTo(4); /* mergeSubMeshes */
        
        return new(lineThickness_,
            turnSmoothDistance_,
            turnSmoothSegmentsCount_,
            mergeSubMeshes_);
    }

    public override string ToString() => $"OutlineSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lineThickness: {lineThickness}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}turnSmoothDistance: {turnSmoothDistance}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}turnSmoothSegmentsCount: {turnSmoothSegmentsCount}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mergeSubMeshes: {mergeSubMeshes}");
    }
}

/* $FillSettings (3 fields) */
public readonly record struct FillSettings (
    float borderCutSize,
    float borderFadeSize,
    bool mergeSubMeshes) : IUnityStructure
{
    public static FillSettings Read(EndianBinaryReader reader)
    {
        float borderCutSize_ = reader.ReadF32();
        float borderFadeSize_ = reader.ReadF32();
        bool mergeSubMeshes_ = reader.ReadBool();
        reader.AlignTo(4); /* mergeSubMeshes */
        
        return new(borderCutSize_,
            borderFadeSize_,
            mergeSubMeshes_);
    }

    public override string ToString() => $"FillSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}borderCutSize: {borderCutSize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}borderFadeSize: {borderFadeSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mergeSubMeshes: {mergeSubMeshes}");
    }
}

/* $CombatHudCommand (4 fields) */
public record class CombatHudCommand (
    int code,
    WriteSurfaceArgs writeSurfaceArgs,
    BuildSurfaceArgs buildSurfaceArgs,
    BuildOutlineArgs buildOutlineArgs) : IUnityStructure
{
    public static CombatHudCommand Read(EndianBinaryReader reader)
    {
        int code_ = reader.ReadS32();
        WriteSurfaceArgs writeSurfaceArgs_ = WriteSurfaceArgs.Read(reader);
        reader.AlignTo(4); /* writeSurfaceArgs */
        BuildSurfaceArgs buildSurfaceArgs_ = BuildSurfaceArgs.Read(reader);
        reader.AlignTo(4); /* buildSurfaceArgs */
        BuildOutlineArgs buildOutlineArgs_ = BuildOutlineArgs.Read(reader);
        reader.AlignTo(4); /* buildOutlineArgs */
        
        return new(code_,
            writeSurfaceArgs_,
            buildSurfaceArgs_,
            buildOutlineArgs_);
    }

    public override string ToString() => $"CombatHudCommand\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}code: {code}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}writeSurfaceArgs: {{ \n{writeSurfaceArgs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buildSurfaceArgs: {{ meshOffset: {buildSurfaceArgs.meshOffset} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buildOutlineArgs: {{ \n{buildOutlineArgs.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $WriteSurfaceArgs (4 fields) */
public record class WriteSurfaceArgs (
    PPtr<Material> material,
    int materialRemapTag,
    int highlightBinding,
    SurfaceCellFilter shape) : IUnityStructure
{
    public static WriteSurfaceArgs Read(EndianBinaryReader reader)
    {
        PPtr<Material> material_ = PPtr<Material>.Read(reader);
        int materialRemapTag_ = reader.ReadS32();
        int highlightBinding_ = reader.ReadS32();
        SurfaceCellFilter shape_ = SurfaceCellFilter.Read(reader);
        reader.AlignTo(4); /* shape */
        
        return new(material_,
            materialRemapTag_,
            highlightBinding_,
            shape_);
    }

    public override string ToString() => $"WriteSurfaceArgs\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}material: {material}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}materialRemapTag: {materialRemapTag}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}highlightBinding: {highlightBinding}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}shape: {{ belongToAll: {shape.belongToAll}, belongToAny: {shape.belongToAny}, notBelongToAny: {shape.notBelongToAny} }}\n");
    }
}

/* $SurfaceCellFilter (3 fields) */
public readonly record struct SurfaceCellFilter (
    ushort belongToAll,
    ushort belongToAny,
    ushort notBelongToAny) : IUnityStructure
{
    public static SurfaceCellFilter Read(EndianBinaryReader reader)
    {
        ushort belongToAll_ = reader.ReadU16();
        reader.AlignTo(4); /* belongToAll */
        ushort belongToAny_ = reader.ReadU16();
        reader.AlignTo(4); /* belongToAny */
        ushort notBelongToAny_ = reader.ReadU16();
        reader.AlignTo(4); /* notBelongToAny */
        
        return new(belongToAll_,
            belongToAny_,
            notBelongToAny_);
    }

    public override string ToString() => $"SurfaceCellFilter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}belongToAll: {belongToAll}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}belongToAny: {belongToAny}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}notBelongToAny: {notBelongToAny}");
    }
}

/* $BuildSurfaceArgs (1 fields) */
public readonly record struct BuildSurfaceArgs (
    float meshOffset) : IUnityStructure
{
    public static BuildSurfaceArgs Read(EndianBinaryReader reader)
    {
        float meshOffset_ = reader.ReadF32();
        
        return new(meshOffset_);
    }

    public override string ToString() => $"BuildSurfaceArgs\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}meshOffset: {meshOffset}");
    }
}

/* $BuildOutlineArgs (8 fields) */
public record class BuildOutlineArgs (
    PPtr<Material> material,
    PPtr<Material>[] additionalMaterials,
    int materialRemapTag,
    int lineType,
    bool overwrite,
    float meshOffset,
    OutlineCellFilter shape,
    OutlineCellFilter mask) : IUnityStructure
{
    public static BuildOutlineArgs Read(EndianBinaryReader reader)
    {
        PPtr<Material> material_ = PPtr<Material>.Read(reader);
        PPtr<Material>[] additionalMaterials_ = BuiltInArray<PPtr<Material>>.Read(reader);
        reader.AlignTo(4); /* additionalMaterials */
        int materialRemapTag_ = reader.ReadS32();
        int lineType_ = reader.ReadS32();
        bool overwrite_ = reader.ReadBool();
        reader.AlignTo(4); /* overwrite */
        float meshOffset_ = reader.ReadF32();
        OutlineCellFilter shape_ = OutlineCellFilter.Read(reader);
        reader.AlignTo(4); /* shape */
        OutlineCellFilter mask_ = OutlineCellFilter.Read(reader);
        reader.AlignTo(4); /* mask */
        
        return new(material_,
            additionalMaterials_,
            materialRemapTag_,
            lineType_,
            overwrite_,
            meshOffset_,
            shape_,
            mask_);
    }

    public override string ToString() => $"BuildOutlineArgs\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}material: {material}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}additionalMaterials[{additionalMaterials.Length}] = {{");
        if (additionalMaterials.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Material> _4 in additionalMaterials)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (additionalMaterials.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}materialRemapTag: {materialRemapTag}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}lineType: {lineType}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}overwrite: {overwrite}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}meshOffset: {meshOffset}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}shape: {{ belongToAll: {shape.belongToAll}, belongToAny: {shape.belongToAny}, notBelongToAny: {shape.notBelongToAny}, surfaceBuffer: {shape.surfaceBuffer} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mask: {{ belongToAll: {mask.belongToAll}, belongToAny: {mask.belongToAny}, notBelongToAny: {mask.notBelongToAny}, surfaceBuffer: {mask.surfaceBuffer} }}\n");
    }
}

/* $OutlineCellFilter (4 fields) */
public readonly record struct OutlineCellFilter (
    ushort belongToAll,
    ushort belongToAny,
    ushort notBelongToAny,
    byte surfaceBuffer) : IUnityStructure
{
    public static OutlineCellFilter Read(EndianBinaryReader reader)
    {
        ushort belongToAll_ = reader.ReadU16();
        reader.AlignTo(4); /* belongToAll */
        ushort belongToAny_ = reader.ReadU16();
        reader.AlignTo(4); /* belongToAny */
        ushort notBelongToAny_ = reader.ReadU16();
        reader.AlignTo(4); /* notBelongToAny */
        byte surfaceBuffer_ = reader.ReadU8();
        reader.AlignTo(4); /* surfaceBuffer */
        
        return new(belongToAll_,
            belongToAny_,
            notBelongToAny_,
            surfaceBuffer_);
    }

    public override string ToString() => $"OutlineCellFilter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}belongToAll: {belongToAll}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}belongToAny: {belongToAny}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}notBelongToAny: {notBelongToAny}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}surfaceBuffer: {surfaceBuffer}");
    }
}

/* $WeaponStyleSettings_7 (14 fields) */
public record class WeaponStyleSettings_7 (
    int WeaponAnimationStyle,
    byte IsOffHand,
    PPtr<AnimationClipWrapper> HalfCoverEntering,
    PPtr<AnimationClipWrapper> HalfCoverIdle,
    PPtr<AnimationClipWrapper> HalfCoverExiting,
    PPtr<AnimationClipWrapper> FullCoverEntering,
    PPtr<AnimationClipWrapper> FullCoverIdle,
    PPtr<AnimationClipWrapper> FullCoverExiting,
    PPtr<AnimationClipWrapper> LeftStepFullCoverEntering,
    PPtr<AnimationClipWrapper> LeftStepFullCoverExiting,
    PPtr<AnimationClipWrapper> RightStepFullCoverEntering,
    PPtr<AnimationClipWrapper> RightStepFullCoverExiting,
    PPtr<AnimationClipWrapper> FullCoverInside,
    PPtr<AnimationClipWrapper> FullCoverOutside) : IUnityStructure
{
    public static WeaponStyleSettings_7 Read(EndianBinaryReader reader)
    {
        int WeaponAnimationStyle_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        PPtr<AnimationClipWrapper> HalfCoverEntering_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> HalfCoverIdle_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> HalfCoverExiting_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> FullCoverEntering_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> FullCoverIdle_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> FullCoverExiting_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> LeftStepFullCoverEntering_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> LeftStepFullCoverExiting_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> RightStepFullCoverEntering_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> RightStepFullCoverExiting_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> FullCoverInside_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> FullCoverOutside_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(WeaponAnimationStyle_,
            IsOffHand_,
            HalfCoverEntering_,
            HalfCoverIdle_,
            HalfCoverExiting_,
            FullCoverEntering_,
            FullCoverIdle_,
            FullCoverExiting_,
            LeftStepFullCoverEntering_,
            LeftStepFullCoverExiting_,
            RightStepFullCoverEntering_,
            RightStepFullCoverExiting_,
            FullCoverInside_,
            FullCoverOutside_);
    }

    public override string ToString() => $"WeaponStyleSettings_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WeaponAnimationStyle: {WeaponAnimationStyle}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HalfCoverEntering: {HalfCoverEntering}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HalfCoverIdle: {HalfCoverIdle}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HalfCoverExiting: {HalfCoverExiting}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FullCoverEntering: {FullCoverEntering}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FullCoverIdle: {FullCoverIdle}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FullCoverExiting: {FullCoverExiting}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LeftStepFullCoverEntering: {LeftStepFullCoverEntering}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LeftStepFullCoverExiting: {LeftStepFullCoverExiting}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RightStepFullCoverEntering: {RightStepFullCoverEntering}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RightStepFullCoverExiting: {RightStepFullCoverExiting}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FullCoverInside: {FullCoverInside}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FullCoverOutside: {FullCoverOutside}");
    }
}

/* $SeasonalData (3 fields) */
public record class SeasonalData (
    WeatherArray InclemencyChangeSpeed,
    WeatherArray InclemencyWeights,
    WeatherMinMaxArray InclemencyCooldownInMinutes) : IUnityStructure
{
    public static SeasonalData Read(EndianBinaryReader reader)
    {
        WeatherArray InclemencyChangeSpeed_ = WeatherArray.Read(reader);
        reader.AlignTo(4); /* InclemencyChangeSpeed */
        WeatherArray InclemencyWeights_ = WeatherArray.Read(reader);
        reader.AlignTo(4); /* InclemencyWeights */
        WeatherMinMaxArray InclemencyCooldownInMinutes_ = WeatherMinMaxArray.Read(reader);
        reader.AlignTo(4); /* InclemencyCooldownInMinutes */
        
        return new(InclemencyChangeSpeed_,
            InclemencyWeights_,
            InclemencyCooldownInMinutes_);
    }

    public override string ToString() => $"SeasonalData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InclemencyChangeSpeed: {{ \n{InclemencyChangeSpeed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InclemencyWeights: {{ \n{InclemencyWeights.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InclemencyCooldownInMinutes: {{ \n{InclemencyCooldownInMinutes.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $WeatherArray (1 fields) */
public record class WeatherArray (
    float[] Values) : IUnityStructure
{
    public static WeatherArray Read(EndianBinaryReader reader)
    {
        float[] Values_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* Values */
        
        return new(Values_);
    }

    public override string ToString() => $"WeatherArray\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Values[{Values.Length}] = {{");
        if (Values.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in Values)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Values.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $WeatherMinMaxArray (2 fields) */
public record class WeatherMinMaxArray (
    float[] MinValues,
    float[] MaxValues) : IUnityStructure
{
    public static WeatherMinMaxArray Read(EndianBinaryReader reader)
    {
        float[] MinValues_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* MinValues */
        float[] MaxValues_ = BuiltInArray<float>.Read(reader);
        reader.AlignTo(4); /* MaxValues */
        
        return new(MinValues_,
            MaxValues_);
    }

    public override string ToString() => $"WeatherMinMaxArray\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinValues[{MinValues.Length}] = {{");
        if (MinValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in MinValues)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (MinValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaxValues[{MaxValues.Length}] = {{");
        if (MaxValues.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (float _4 in MaxValues)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (MaxValues.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $WeatherDirectionalLightSettings (3 fields) */
public record class WeatherDirectionalLightSettings (
    AnimationCurve ShadowStrengthMultiplierOverRootIntensity,
    AnimationCurve LerpToNewColorOverRootIntensity,
    ColorRGBA_1 NewColor) : IUnityStructure
{
    public static WeatherDirectionalLightSettings Read(EndianBinaryReader reader)
    {
        AnimationCurve ShadowStrengthMultiplierOverRootIntensity_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ShadowStrengthMultiplierOverRootIntensity */
        AnimationCurve LerpToNewColorOverRootIntensity_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LerpToNewColorOverRootIntensity */
        ColorRGBA_1 NewColor_ = ColorRGBA_1.Read(reader);
        
        return new(ShadowStrengthMultiplierOverRootIntensity_,
            LerpToNewColorOverRootIntensity_,
            NewColor_);
    }

    public override string ToString() => $"WeatherDirectionalLightSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShadowStrengthMultiplierOverRootIntensity: {{ \n{ShadowStrengthMultiplierOverRootIntensity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LerpToNewColorOverRootIntensity: {{ \n{LerpToNewColorOverRootIntensity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewColor: {{ r: {NewColor.r}, g: {NewColor.g}, b: {NewColor.b}, a: {NewColor.a} }}\n");
    }
}

/* $VFXLocationWeatherDataProfile (5 fields) */
public record class VFXLocationWeatherDataProfile (
    BitField RaycastMask,
    byte RaycastIsBlockedByOtherLayers,
    int TextureDensity,
    int MaxAllowedTextureSize,
    byte CreateCollidersForAllMeshes) : IUnityStructure
{
    public static VFXLocationWeatherDataProfile Read(EndianBinaryReader reader)
    {
        BitField RaycastMask_ = BitField.Read(reader);
        byte RaycastIsBlockedByOtherLayers_ = reader.ReadU8();
        reader.AlignTo(4); /* RaycastIsBlockedByOtherLayers */
        int TextureDensity_ = reader.ReadS32();
        int MaxAllowedTextureSize_ = reader.ReadS32();
        byte CreateCollidersForAllMeshes_ = reader.ReadU8();
        reader.AlignTo(4); /* CreateCollidersForAllMeshes */
        
        return new(RaycastMask_,
            RaycastIsBlockedByOtherLayers_,
            TextureDensity_,
            MaxAllowedTextureSize_,
            CreateCollidersForAllMeshes_);
    }

    public override string ToString() => $"VFXLocationWeatherDataProfile\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RaycastMask: {{ m_Bits: {RaycastMask.m_Bits} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RaycastIsBlockedByOtherLayers: {RaycastIsBlockedByOtherLayers}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TextureDensity: {TextureDensity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxAllowedTextureSize: {MaxAllowedTextureSize}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CreateCollidersForAllMeshes: {CreateCollidersForAllMeshes}");
    }
}

/* $PointAndClickObjectPlacementSettingsView (6 fields) */
public record class PointAndClickObjectPlacementSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static PointAndClickObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"PointAndClickObjectPlacementSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $SpriteBone_1 (7 fields) */
public record class SpriteBone_1 (
    AsciiString m_Name,
    AsciiString m_Guid,
    Vector3f m_Position,
    Quaternionf m_Rotation,
    float m_Length,
    int m_ParentId,
    ColorRGBA m_Color) : IUnityStructure
{
    public static SpriteBone_1 Read(EndianBinaryReader reader)
    {
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        AsciiString m_Guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Guid */
        Vector3f m_Position_ = Vector3f.Read(reader);
        Quaternionf m_Rotation_ = Quaternionf.Read(reader);
        float m_Length_ = reader.ReadF32();
        int m_ParentId_ = reader.ReadS32();
        ColorRGBA m_Color_ = ColorRGBA.Read(reader);
        
        return new(m_Name_,
            m_Guid_,
            m_Position_,
            m_Rotation_,
            m_Length_,
            m_ParentId_,
            m_Color_);
    }

    public override string ToString() => $"SpriteBone_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Guid: \"{m_Guid}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Position: {{ x: {m_Position.x}, y: {m_Position.y}, z: {m_Position.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Rotation: {{ x: {m_Rotation.x}, y: {m_Rotation.y}, z: {m_Rotation.z}, w: {m_Rotation.w} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Length: {m_Length}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ParentId: {m_ParentId}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Color: {{ rgba: {m_Color.rgba} }}\n");
    }
}

/* $ProjectedBoxFacePivotPoints (3 fields) */
public record class ProjectedBoxFacePivotPoints (
    PivotPointCollection _pivotPointCollection,
    Vector3f[] _unprojectedPivotPoints,
    float _area) : IUnityStructure
{
    public static ProjectedBoxFacePivotPoints Read(EndianBinaryReader reader)
    {
        PivotPointCollection _pivotPointCollection_ = PivotPointCollection.Read(reader);
        reader.AlignTo(4); /* _pivotPointCollection */
        Vector3f[] _unprojectedPivotPoints_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _unprojectedPivotPoints */
        float _area_ = reader.ReadF32();
        
        return new(_pivotPointCollection_,
            _unprojectedPivotPoints_,
            _area_);
    }

    public override string ToString() => $"ProjectedBoxFacePivotPoints\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_pivotPointCollection: {{ \n{_pivotPointCollection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_unprojectedPivotPoints[{_unprojectedPivotPoints.Length}] = {{");
        if (_unprojectedPivotPoints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in _unprojectedPivotPoints)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (_unprojectedPivotPoints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_area: {_area}");
    }
}

/* $PivotPointCollection (2 fields) */
public record class PivotPointCollection (
    int _indexOfActivePoint,
    Vector3f[] _pivotPoints) : IUnityStructure
{
    public static PivotPointCollection Read(EndianBinaryReader reader)
    {
        int _indexOfActivePoint_ = reader.ReadS32();
        Vector3f[] _pivotPoints_ = BuiltInArray<Vector3f>.Read(reader);
        reader.AlignTo(4); /* _pivotPoints */
        
        return new(_indexOfActivePoint_,
            _pivotPoints_);
    }

    public override string ToString() => $"PivotPointCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indexOfActivePoint: {_indexOfActivePoint}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_pivotPoints[{_pivotPoints.Length}] = {{");
        if (_pivotPoints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector3f _4 in _pivotPoints)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z} }}\n");
            ++_4i;
        }
        if (_pivotPoints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PersistentObjectPlacementGuideData (1 fields) */
public record class PersistentObjectPlacementGuideData (
    Vector3f _lastUsedWorldPosition) : IUnityStructure
{
    public static PersistentObjectPlacementGuideData Read(EndianBinaryReader reader)
    {
        Vector3f _lastUsedWorldPosition_ = Vector3f.Read(reader);
        
        return new(_lastUsedWorldPosition_);
    }

    public override string ToString() => $"PersistentObjectPlacementGuideData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_lastUsedWorldPosition: {{ x: {_lastUsedWorldPosition.x}, y: {_lastUsedWorldPosition.y}, z: {_lastUsedWorldPosition.z} }}\n");
    }
}

/* $PathObjectPlacement (1 fields) */
public record class PathObjectPlacement (
    ObjectPlacementPath _objectPlacementPath) : IUnityStructure
{
    public static PathObjectPlacement Read(EndianBinaryReader reader)
    {
        ObjectPlacementPath _objectPlacementPath_ = ObjectPlacementPath.Read(reader);
        
        return new(_objectPlacementPath_);
    }

    public override string ToString() => $"PathObjectPlacement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectPlacementPath: {{ \n{_objectPlacementPath.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementPath (4 fields) */
public record class ObjectPlacementPath (
    PPtr<ObjectPlacementPathSettings> _settings,
    PPtr<ObjectPlacementPathRenderSettings> _renderSettings,
    int _extensionPlaneBoxFace,
    ObjectPlacementExtensionPlane _extensionPlane) : IUnityStructure
{
    public static ObjectPlacementPath Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementPathSettings> _settings_ = PPtr<ObjectPlacementPathSettings>.Read(reader);
        PPtr<ObjectPlacementPathRenderSettings> _renderSettings_ = PPtr<ObjectPlacementPathRenderSettings>.Read(reader);
        int _extensionPlaneBoxFace_ = reader.ReadS32();
        ObjectPlacementExtensionPlane _extensionPlane_ = ObjectPlacementExtensionPlane.Read(reader);
        
        return new(_settings_,
            _renderSettings_,
            _extensionPlaneBoxFace_,
            _extensionPlane_);
    }

    public override string ToString() => $"ObjectPlacementPath\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_settings: {_settings}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_extensionPlaneBoxFace: {_extensionPlaneBoxFace}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_extensionPlane: {{ \n{_extensionPlane.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementExtensionPlane (1 fields) */
public record class ObjectPlacementExtensionPlane (
    PPtr<ObjectPlacementExtensionPlaneRenderSettings> _renderSettings) : IUnityStructure
{
    public static ObjectPlacementExtensionPlane Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementExtensionPlaneRenderSettings> _renderSettings_ = PPtr<ObjectPlacementExtensionPlaneRenderSettings>.Read(reader);
        
        return new(_renderSettings_);
    }

    public override string ToString() => $"ObjectPlacementExtensionPlane\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }
}

/* $BlockObjectPlacement (1 fields) */
public record class BlockObjectPlacement (
    ObjectPlacementBlock _objectPlacementBlock) : IUnityStructure
{
    public static BlockObjectPlacement Read(EndianBinaryReader reader)
    {
        ObjectPlacementBlock _objectPlacementBlock_ = ObjectPlacementBlock.Read(reader);
        
        return new(_objectPlacementBlock_);
    }

    public override string ToString() => $"BlockObjectPlacement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectPlacementBlock: {{ \n{_objectPlacementBlock.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementBlock (4 fields) */
public record class ObjectPlacementBlock (
    PPtr<ObjectPlacementBlockSettings> _settings,
    PPtr<ObjectPlacementBlockRenderSettings> _renderSettings,
    ObjectPlacementExtensionPlane _extensionPlane,
    int _extensionPlaneBoxFace) : IUnityStructure
{
    public static ObjectPlacementBlock Read(EndianBinaryReader reader)
    {
        PPtr<ObjectPlacementBlockSettings> _settings_ = PPtr<ObjectPlacementBlockSettings>.Read(reader);
        PPtr<ObjectPlacementBlockRenderSettings> _renderSettings_ = PPtr<ObjectPlacementBlockRenderSettings>.Read(reader);
        ObjectPlacementExtensionPlane _extensionPlane_ = ObjectPlacementExtensionPlane.Read(reader);
        int _extensionPlaneBoxFace_ = reader.ReadS32();
        
        return new(_settings_,
            _renderSettings_,
            _extensionPlane_,
            _extensionPlaneBoxFace_);
    }

    public override string ToString() => $"ObjectPlacementBlock\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_settings: {_settings}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_extensionPlane: {{ \n{_extensionPlane.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_extensionPlaneBoxFace: {_extensionPlaneBoxFace}");
    }
}

/* $NextWaypointEntry (2 fields) */
public record class NextWaypointEntry (
    PPtr<RoamingWaypointView> Waypoint,
    float m_Weight) : IUnityStructure
{
    public static NextWaypointEntry Read(EndianBinaryReader reader)
    {
        PPtr<RoamingWaypointView> Waypoint_ = PPtr<RoamingWaypointView>.Read(reader);
        float m_Weight_ = reader.ReadF32();
        
        return new(Waypoint_,
            m_Weight_);
    }

    public override string ToString() => $"NextWaypointEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Waypoint: {Waypoint}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Weight: {m_Weight}");
    }
}

/* $SettingsViews_1 (6 fields) */
public record class SettingsViews_1 (
    PPtr<SettingsEntityHeaderView> m_SettingsEntityHeaderViewPrefab,
    PPtr<SettingsEntityBoolPCView> m_SettingsEntityBoolViewPrefab,
    PPtr<SettingsEntityDropdownPCView> m_SettingsEntityDropdownViewPrefab,
    PPtr<SettingsEntitySliderPCView> m_SettingsEntitySliderViewPrefab,
    PPtr<SettingsEntityDropdownGameDifficultyPCView> m_SettingsEntityDropdownGameDifficultyViewPrefab,
    PPtr<SettingsEntityBoolOnlyOneSavePCView> m_SettingsEntityBoolOnlyOneSaveViewPrefab) : IUnityStructure
{
    public static SettingsViews_1 Read(EndianBinaryReader reader)
    {
        PPtr<SettingsEntityHeaderView> m_SettingsEntityHeaderViewPrefab_ = PPtr<SettingsEntityHeaderView>.Read(reader);
        PPtr<SettingsEntityBoolPCView> m_SettingsEntityBoolViewPrefab_ = PPtr<SettingsEntityBoolPCView>.Read(reader);
        PPtr<SettingsEntityDropdownPCView> m_SettingsEntityDropdownViewPrefab_ = PPtr<SettingsEntityDropdownPCView>.Read(reader);
        PPtr<SettingsEntitySliderPCView> m_SettingsEntitySliderViewPrefab_ = PPtr<SettingsEntitySliderPCView>.Read(reader);
        PPtr<SettingsEntityDropdownGameDifficultyPCView> m_SettingsEntityDropdownGameDifficultyViewPrefab_ = PPtr<SettingsEntityDropdownGameDifficultyPCView>.Read(reader);
        PPtr<SettingsEntityBoolOnlyOneSavePCView> m_SettingsEntityBoolOnlyOneSaveViewPrefab_ = PPtr<SettingsEntityBoolOnlyOneSavePCView>.Read(reader);
        
        return new(m_SettingsEntityHeaderViewPrefab_,
            m_SettingsEntityBoolViewPrefab_,
            m_SettingsEntityDropdownViewPrefab_,
            m_SettingsEntitySliderViewPrefab_,
            m_SettingsEntityDropdownGameDifficultyViewPrefab_,
            m_SettingsEntityBoolOnlyOneSaveViewPrefab_);
    }

    public override string ToString() => $"SettingsViews_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityHeaderViewPrefab: {m_SettingsEntityHeaderViewPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolViewPrefab: {m_SettingsEntityBoolViewPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownViewPrefab: {m_SettingsEntityDropdownViewPrefab}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntitySliderViewPrefab: {m_SettingsEntitySliderViewPrefab}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityDropdownGameDifficultyViewPrefab: {m_SettingsEntityDropdownGameDifficultyViewPrefab}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SettingsEntityBoolOnlyOneSaveViewPrefab: {m_SettingsEntityBoolOnlyOneSaveViewPrefab}");
    }
}

/* $EntityReference (3 fields) */
public record class EntityReference (
    AsciiString EntityNameInEditor,
    AsciiString UniqueId,
    AsciiString SceneAssetGuid) : IUnityStructure
{
    public static EntityReference Read(EndianBinaryReader reader)
    {
        AsciiString EntityNameInEditor_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* EntityNameInEditor */
        AsciiString UniqueId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* UniqueId */
        AsciiString SceneAssetGuid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* SceneAssetGuid */
        
        return new(EntityNameInEditor_,
            UniqueId_,
            SceneAssetGuid_);
    }

    public override string ToString() => $"EntityReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EntityNameInEditor: \"{EntityNameInEditor}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UniqueId: \"{UniqueId}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SceneAssetGuid: \"{SceneAssetGuid}\"");
    }
}

/* $DifficultyPreset (24 fields) */
public readonly record struct DifficultyPreset (
    int GameDifficulty,
    byte OnlyOneSave,
    byte RespecAllowed,
    int AutoLevelUp,
    byte AdditionalAIBehaviors,
    int CombatEncountersCapacity,
    int EnemyDodgePercentModifier,
    int CoverHitBonusHalfModifier,
    int CoverHitBonusFullModifier,
    int MinPartyDamage,
    int MinPartyDamageFraction,
    int MinPartyStarshipDamage,
    int MinPartyStarshipDamageFraction,
    int PartyMomentumPercentModifier,
    int NPCAttributesBaseValuePercentModifier,
    int HardCrowdControlOnPartyMaxDurationRounds,
    int SkillCheckModifier,
    int EnemyHitPointsPercentModifier,
    int AllyResolveModifier,
    int PartyDamageDealtAfterArmorReductionPercentModifier,
    int WoundDamagePerTurnThresholdHPFraction,
    int OldWoundDelayRounds,
    int WoundStacksForTrauma,
    int SpaceCombatDifficulty) : IUnityStructure
{
    public static DifficultyPreset Read(EndianBinaryReader reader)
    {
        int GameDifficulty_ = reader.ReadS32();
        byte OnlyOneSave_ = reader.ReadU8();
        reader.AlignTo(4); /* OnlyOneSave */
        byte RespecAllowed_ = reader.ReadU8();
        reader.AlignTo(4); /* RespecAllowed */
        int AutoLevelUp_ = reader.ReadS32();
        byte AdditionalAIBehaviors_ = reader.ReadU8();
        reader.AlignTo(4); /* AdditionalAIBehaviors */
        int CombatEncountersCapacity_ = reader.ReadS32();
        int EnemyDodgePercentModifier_ = reader.ReadS32();
        int CoverHitBonusHalfModifier_ = reader.ReadS32();
        int CoverHitBonusFullModifier_ = reader.ReadS32();
        int MinPartyDamage_ = reader.ReadS32();
        int MinPartyDamageFraction_ = reader.ReadS32();
        int MinPartyStarshipDamage_ = reader.ReadS32();
        int MinPartyStarshipDamageFraction_ = reader.ReadS32();
        int PartyMomentumPercentModifier_ = reader.ReadS32();
        int NPCAttributesBaseValuePercentModifier_ = reader.ReadS32();
        int HardCrowdControlOnPartyMaxDurationRounds_ = reader.ReadS32();
        int SkillCheckModifier_ = reader.ReadS32();
        int EnemyHitPointsPercentModifier_ = reader.ReadS32();
        int AllyResolveModifier_ = reader.ReadS32();
        int PartyDamageDealtAfterArmorReductionPercentModifier_ = reader.ReadS32();
        int WoundDamagePerTurnThresholdHPFraction_ = reader.ReadS32();
        int OldWoundDelayRounds_ = reader.ReadS32();
        int WoundStacksForTrauma_ = reader.ReadS32();
        int SpaceCombatDifficulty_ = reader.ReadS32();
        
        return new(GameDifficulty_,
            OnlyOneSave_,
            RespecAllowed_,
            AutoLevelUp_,
            AdditionalAIBehaviors_,
            CombatEncountersCapacity_,
            EnemyDodgePercentModifier_,
            CoverHitBonusHalfModifier_,
            CoverHitBonusFullModifier_,
            MinPartyDamage_,
            MinPartyDamageFraction_,
            MinPartyStarshipDamage_,
            MinPartyStarshipDamageFraction_,
            PartyMomentumPercentModifier_,
            NPCAttributesBaseValuePercentModifier_,
            HardCrowdControlOnPartyMaxDurationRounds_,
            SkillCheckModifier_,
            EnemyHitPointsPercentModifier_,
            AllyResolveModifier_,
            PartyDamageDealtAfterArmorReductionPercentModifier_,
            WoundDamagePerTurnThresholdHPFraction_,
            OldWoundDelayRounds_,
            WoundStacksForTrauma_,
            SpaceCombatDifficulty_);
    }

    public override string ToString() => $"DifficultyPreset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameDifficulty: {GameDifficulty}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyOneSave: {OnlyOneSave}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RespecAllowed: {RespecAllowed}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoLevelUp: {AutoLevelUp}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AdditionalAIBehaviors: {AdditionalAIBehaviors}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CombatEncountersCapacity: {CombatEncountersCapacity}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyDodgePercentModifier: {EnemyDodgePercentModifier}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverHitBonusHalfModifier: {CoverHitBonusHalfModifier}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverHitBonusFullModifier: {CoverHitBonusFullModifier}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyDamage: {MinPartyDamage}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyDamageFraction: {MinPartyDamageFraction}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyStarshipDamage: {MinPartyStarshipDamage}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyStarshipDamageFraction: {MinPartyStarshipDamageFraction}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyMomentumPercentModifier: {PartyMomentumPercentModifier}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NPCAttributesBaseValuePercentModifier: {NPCAttributesBaseValuePercentModifier}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HardCrowdControlOnPartyMaxDurationRounds: {HardCrowdControlOnPartyMaxDurationRounds}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SkillCheckModifier: {SkillCheckModifier}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyHitPointsPercentModifier: {EnemyHitPointsPercentModifier}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AllyResolveModifier: {AllyResolveModifier}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyDamageDealtAfterArmorReductionPercentModifier: {PartyDamageDealtAfterArmorReductionPercentModifier}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WoundDamagePerTurnThresholdHPFraction: {WoundDamagePerTurnThresholdHPFraction}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OldWoundDelayRounds: {OldWoundDelayRounds}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WoundStacksForTrauma: {WoundStacksForTrauma}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpaceCombatDifficulty: {SpaceCombatDifficulty}");
    }
}

/* $LocalVolumetricFogArtistParameters (18 fields) */
public record class LocalVolumetricFogArtistParameters (
    ColorRGBA_1 Albedo,
    float MeanFreePath,
    float Anisotropy,
    PPtr<Texture> VolumeMask,
    Vector3f TextureScrollingSpeed,
    Vector3f TextureTiling,
    Vector3f TextureOffset,
    float m_EditorUniformFade,
    Vector3f m_EditorPositiveFade,
    Vector3f m_EditorNegativeFade,
    byte m_EditorAdvancedFade,
    float DistanceFadeStart,
    float DistanceFadeEnd,
    Vector3f Size,
    byte InvertFade,
    int FalloffMode,
    Vector3f PositiveFade,
    Vector3f NegativeFade) : IUnityStructure
{
    public static LocalVolumetricFogArtistParameters Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 Albedo_ = ColorRGBA_1.Read(reader);
        float MeanFreePath_ = reader.ReadF32();
        float Anisotropy_ = reader.ReadF32();
        PPtr<Texture> VolumeMask_ = PPtr<Texture>.Read(reader);
        Vector3f TextureScrollingSpeed_ = Vector3f.Read(reader);
        Vector3f TextureTiling_ = Vector3f.Read(reader);
        Vector3f TextureOffset_ = Vector3f.Read(reader);
        float m_EditorUniformFade_ = reader.ReadF32();
        Vector3f m_EditorPositiveFade_ = Vector3f.Read(reader);
        Vector3f m_EditorNegativeFade_ = Vector3f.Read(reader);
        byte m_EditorAdvancedFade_ = reader.ReadU8();
        reader.AlignTo(4); /* m_EditorAdvancedFade */
        float DistanceFadeStart_ = reader.ReadF32();
        float DistanceFadeEnd_ = reader.ReadF32();
        Vector3f Size_ = Vector3f.Read(reader);
        byte InvertFade_ = reader.ReadU8();
        reader.AlignTo(4); /* InvertFade */
        int FalloffMode_ = reader.ReadS32();
        Vector3f PositiveFade_ = Vector3f.Read(reader);
        Vector3f NegativeFade_ = Vector3f.Read(reader);
        
        return new(Albedo_,
            MeanFreePath_,
            Anisotropy_,
            VolumeMask_,
            TextureScrollingSpeed_,
            TextureTiling_,
            TextureOffset_,
            m_EditorUniformFade_,
            m_EditorPositiveFade_,
            m_EditorNegativeFade_,
            m_EditorAdvancedFade_,
            DistanceFadeStart_,
            DistanceFadeEnd_,
            Size_,
            InvertFade_,
            FalloffMode_,
            PositiveFade_,
            NegativeFade_);
    }

    public override string ToString() => $"LocalVolumetricFogArtistParameters\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Albedo: {{ r: {Albedo.r}, g: {Albedo.g}, b: {Albedo.b}, a: {Albedo.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MeanFreePath: {MeanFreePath}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Anisotropy: {Anisotropy}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMask: {VolumeMask}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TextureScrollingSpeed: {{ x: {TextureScrollingSpeed.x}, y: {TextureScrollingSpeed.y}, z: {TextureScrollingSpeed.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TextureTiling: {{ x: {TextureTiling.x}, y: {TextureTiling.y}, z: {TextureTiling.z} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TextureOffset: {{ x: {TextureOffset.x}, y: {TextureOffset.y}, z: {TextureOffset.z} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EditorUniformFade: {m_EditorUniformFade}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_EditorPositiveFade: {{ x: {m_EditorPositiveFade.x}, y: {m_EditorPositiveFade.y}, z: {m_EditorPositiveFade.z} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_EditorNegativeFade: {{ x: {m_EditorNegativeFade.x}, y: {m_EditorNegativeFade.y}, z: {m_EditorNegativeFade.z} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EditorAdvancedFade: {m_EditorAdvancedFade}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DistanceFadeStart: {DistanceFadeStart}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DistanceFadeEnd: {DistanceFadeEnd}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Size: {{ x: {Size.x}, y: {Size.y}, z: {Size.z} }}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InvertFade: {InvertFade}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FalloffMode: {FalloffMode}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PositiveFade: {{ x: {PositiveFade.x}, y: {PositiveFade.y}, z: {PositiveFade.z} }}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NegativeFade: {{ x: {NegativeFade.x}, y: {NegativeFade.y}, z: {NegativeFade.z} }}\n");
    }
}

/* $PrefabFoldersToCategoryDropSettingsView (8 fields) */
public record class PrefabFoldersToCategoryDropSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PrefabTagSelectionView _tagSelectionForDroppedPrefabFolders,
    PPtr<PrefabTagFilter> _prefabTagFilterForTagSelection) : IUnityStructure
{
    public static PrefabFoldersToCategoryDropSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PrefabTagSelectionView _tagSelectionForDroppedPrefabFolders_ = PrefabTagSelectionView.Read(reader);
        reader.AlignTo(4); /* _tagSelectionForDroppedPrefabFolders */
        PPtr<PrefabTagFilter> _prefabTagFilterForTagSelection_ = PPtr<PrefabTagFilter>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _tagSelectionForDroppedPrefabFolders_,
            _prefabTagFilterForTagSelection_);
    }

    public override string ToString() => $"PrefabFoldersToCategoryDropSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_tagSelectionForDroppedPrefabFolders: {{ \n{_tagSelectionForDroppedPrefabFolders.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_prefabTagFilterForTagSelection: {_prefabTagFilterForTagSelection}");
    }
}

/* $PrefabTagSelectionView (7 fields) */
public record class PrefabTagSelectionView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<PrefabTagSelectionViewData> _viewData) : IUnityStructure
{
    public static PrefabTagSelectionView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<PrefabTagSelectionViewData> _viewData_ = PPtr<PrefabTagSelectionViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"PrefabTagSelectionView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $EditorSettings (2 fields) */
public readonly record struct EditorSettings (
    double m_Framerate,
    byte m_ScenePreview) : IUnityStructure
{
    public static EditorSettings Read(EndianBinaryReader reader)
    {
        double m_Framerate_ = reader.ReadF64();
        byte m_ScenePreview_ = reader.ReadU8();
        reader.AlignTo(4); /* m_ScenePreview */
        
        return new(m_Framerate_,
            m_ScenePreview_);
    }

    public override string ToString() => $"EditorSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Framerate: {m_Framerate}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ScenePreview: {m_ScenePreview}");
    }
}

/* $SoundFXSettings (4 fields) */
public record class SoundFXSettings (
    AsciiString Event,
    float Gain,
    float Pitch,
    float Delay) : IUnityStructure
{
    public static SoundFXSettings Read(EndianBinaryReader reader)
    {
        AsciiString Event_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Event */
        float Gain_ = reader.ReadF32();
        float Pitch_ = reader.ReadF32();
        float Delay_ = reader.ReadF32();
        
        return new(Event_,
            Gain_,
            Pitch_,
            Delay_);
    }

    public override string ToString() => $"SoundFXSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Event: \"{Event}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Gain: {Gain}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Pitch: {Pitch}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }
}

/* $TMP_SpriteCharacter (6 fields) */
public record class TMP_SpriteCharacter (
    byte m_ElementType,
    uint m_Unicode,
    uint m_GlyphIndex,
    float m_Scale,
    AsciiString m_Name,
    int m_HashCode) : IUnityStructure
{
    public static TMP_SpriteCharacter Read(EndianBinaryReader reader)
    {
        byte m_ElementType_ = reader.ReadU8();
        reader.AlignTo(4); /* m_ElementType */
        uint m_Unicode_ = reader.ReadU32();
        uint m_GlyphIndex_ = reader.ReadU32();
        float m_Scale_ = reader.ReadF32();
        AsciiString m_Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Name */
        int m_HashCode_ = reader.ReadS32();
        
        return new(m_ElementType_,
            m_Unicode_,
            m_GlyphIndex_,
            m_Scale_,
            m_Name_,
            m_HashCode_);
    }

    public override string ToString() => $"TMP_SpriteCharacter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ElementType: {m_ElementType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Unicode: {m_Unicode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_GlyphIndex: {m_GlyphIndex}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Scale: {m_Scale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Name: \"{m_Name}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HashCode: {m_HashCode}");
    }
}

/* $TMP_SpriteGlyph (7 fields) */
public record class TMP_SpriteGlyph (
    uint m_Index,
    GlyphMetrics m_Metrics,
    GlyphRect m_GlyphRect,
    float m_Scale,
    int m_AtlasIndex,
    int m_ClassDefinitionType,
    PPtr<Sprite> sprite) : IUnityStructure
{
    public static TMP_SpriteGlyph Read(EndianBinaryReader reader)
    {
        uint m_Index_ = reader.ReadU32();
        GlyphMetrics m_Metrics_ = GlyphMetrics.Read(reader);
        GlyphRect m_GlyphRect_ = GlyphRect.Read(reader);
        float m_Scale_ = reader.ReadF32();
        int m_AtlasIndex_ = reader.ReadS32();
        int m_ClassDefinitionType_ = reader.ReadS32();
        PPtr<Sprite> sprite_ = PPtr<Sprite>.Read(reader);
        
        return new(m_Index_,
            m_Metrics_,
            m_GlyphRect_,
            m_Scale_,
            m_AtlasIndex_,
            m_ClassDefinitionType_,
            sprite_);
    }

    public override string ToString() => $"TMP_SpriteGlyph\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Index: {m_Index}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Metrics: {{ \n{m_Metrics.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_GlyphRect: {{ m_X: {m_GlyphRect.m_X}, m_Y: {m_GlyphRect.m_Y}, m_Width: {m_GlyphRect.m_Width}, m_Height: {m_GlyphRect.m_Height} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Scale: {m_Scale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AtlasIndex: {m_AtlasIndex}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ClassDefinitionType: {m_ClassDefinitionType}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sprite: {sprite}");
    }
}

/* $TMP_Sprite (14 fields) */
public record class TMP_Sprite (
    int id,
    float x,
    float y,
    float width,
    float height,
    float xOffset,
    float yOffset,
    float xAdvance,
    float scale,
    AsciiString name,
    int hashCode,
    int unicode,
    Vector2f pivot,
    PPtr<Sprite> sprite) : IUnityStructure
{
    public static TMP_Sprite Read(EndianBinaryReader reader)
    {
        int id_ = reader.ReadS32();
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        float width_ = reader.ReadF32();
        float height_ = reader.ReadF32();
        float xOffset_ = reader.ReadF32();
        float yOffset_ = reader.ReadF32();
        float xAdvance_ = reader.ReadF32();
        float scale_ = reader.ReadF32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int hashCode_ = reader.ReadS32();
        int unicode_ = reader.ReadS32();
        Vector2f pivot_ = Vector2f.Read(reader);
        PPtr<Sprite> sprite_ = PPtr<Sprite>.Read(reader);
        
        return new(id_,
            x_,
            y_,
            width_,
            height_,
            xOffset_,
            yOffset_,
            xAdvance_,
            scale_,
            name_,
            hashCode_,
            unicode_,
            pivot_,
            sprite_);
    }

    public override string ToString() => $"TMP_Sprite\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}id: {id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}width: {width}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}height: {height}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xOffset: {xOffset}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}yOffset: {yOffset}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xAdvance: {xAdvance}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}scale: {scale}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hashCode: {hashCode}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}unicode: {unicode}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}pivot: {{ x: {pivot.x}, y: {pivot.y} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sprite: {sprite}");
    }
}

/* $ControllerTemplateElementIdentifier_Editor (10 fields) */
public record class ControllerTemplateElementIdentifier_Editor (
    int _id,
    AsciiString _name,
    AsciiString _positiveName,
    AsciiString _negativeName,
    int _elementType,
    AsciiString _scriptingName,
    AsciiString _alternateScriptingName,
    byte _excludeFromExport,
    byte _useEditorElementTypeOverride,
    int _editorElementTypeOverride) : IUnityStructure
{
    public static ControllerTemplateElementIdentifier_Editor Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _positiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _positiveName */
        AsciiString _negativeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _negativeName */
        int _elementType_ = reader.ReadS32();
        AsciiString _scriptingName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _scriptingName */
        AsciiString _alternateScriptingName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _alternateScriptingName */
        byte _excludeFromExport_ = reader.ReadU8();
        reader.AlignTo(4); /* _excludeFromExport */
        byte _useEditorElementTypeOverride_ = reader.ReadU8();
        reader.AlignTo(4); /* _useEditorElementTypeOverride */
        int _editorElementTypeOverride_ = reader.ReadS32();
        
        return new(_id_,
            _name_,
            _positiveName_,
            _negativeName_,
            _elementType_,
            _scriptingName_,
            _alternateScriptingName_,
            _excludeFromExport_,
            _useEditorElementTypeOverride_,
            _editorElementTypeOverride_);
    }

    public override string ToString() => $"ControllerTemplateElementIdentifier_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_positiveName: \"{_positiveName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_negativeName: \"{_negativeName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementType: {_elementType}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_scriptingName: \"{_scriptingName}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_alternateScriptingName: \"{_alternateScriptingName}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_excludeFromExport: {_excludeFromExport}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_useEditorElementTypeOverride: {_useEditorElementTypeOverride}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_editorElementTypeOverride: {_editorElementTypeOverride}");
    }
}

/* $Entry_8 (5 fields) */
public record class Entry_8 (
    int id,
    AsciiString name,
    AsciiString joystickGuid,
    AsciiString fileGuid,
    ElementIdentifierMap[] elementIdentifierMappings) : IUnityStructure
{
    public static Entry_8 Read(EndianBinaryReader reader)
    {
        int id_ = reader.ReadS32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString joystickGuid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* joystickGuid */
        AsciiString fileGuid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* fileGuid */
        ElementIdentifierMap[] elementIdentifierMappings_ = BuiltInArray<ElementIdentifierMap>.Read(reader);
        reader.AlignTo(4); /* elementIdentifierMappings */
        
        return new(id_,
            name_,
            joystickGuid_,
            fileGuid_,
            elementIdentifierMappings_);
    }

    public override string ToString() => $"Entry_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}id: {id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joystickGuid: \"{joystickGuid}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}fileGuid: \"{fileGuid}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elementIdentifierMappings[{elementIdentifierMappings.Length}] = {{");
        if (elementIdentifierMappings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementIdentifierMap _4 in elementIdentifierMappings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ templateId: {_4.templateId}, joystickId: {_4.joystickId}, joystickId2: {_4.joystickId2}, splitAxis: {_4.splitAxis} }}\n");
            ++_4i;
        }
        if (elementIdentifierMappings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ElementIdentifierMap (4 fields) */
public readonly record struct ElementIdentifierMap (
    int templateId,
    int joystickId,
    int joystickId2,
    byte splitAxis) : IUnityStructure
{
    public static ElementIdentifierMap Read(EndianBinaryReader reader)
    {
        int templateId_ = reader.ReadS32();
        int joystickId_ = reader.ReadS32();
        int joystickId2_ = reader.ReadS32();
        byte splitAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* splitAxis */
        
        return new(templateId_,
            joystickId_,
            joystickId2_,
            splitAxis_);
    }

    public override string ToString() => $"ElementIdentifierMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}templateId: {templateId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joystickId: {joystickId}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joystickId2: {joystickId2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}splitAxis: {splitAxis}");
    }
}

/* $SpecialElementEntry (2 fields) */
public record class SpecialElementEntry (
    int elementIdentifierId,
    AsciiString data) : IUnityStructure
{
    public static SpecialElementEntry Read(EndianBinaryReader reader)
    {
        int elementIdentifierId_ = reader.ReadS32();
        AsciiString data_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* data */
        
        return new(elementIdentifierId_,
            data_);
    }

    public override string ToString() => $"SpecialElementEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifierId: {elementIdentifierId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}data: \"{data}\"");
    }
}

/* $UISettingsMechanicLinks (19 fields) */
public record class UISettingsMechanicLinks (
    UIDifficultySettings UIDifficultySettings_,
    UIGraphicsSettings UIGraphicsSettings_,
    UIDisplaySettings UIDisplaySettings_,
    UISoundSettings UISoundSettings_,
    UIAccessiabilitySettings UIAccessiabilitySettings_,
    UIGameMainSettings UIGameMainSettings_,
    UIGameSaveSettings UIGameSaveSettings_,
    UIGameTooltipsSettings UIGameTooltipsSettings_,
    UIGameTutorialSettings UIGameTutorialSettings_,
    UIGameMainMenuSettings UIGameMainMenuSettings_,
    UIGameCombatTextsSettings UIGameCombatTextsSettings_,
    UIGameDialogsSettings UIGameDialogsSettings_,
    UIGameAutopauseSettings UIGameAutopauseSettings_,
    UIGameTurnBasedSettings UIGameTurnBasedSettings_,
    UIControlsSettings UIControlsSettings_,
    UIKeybindGeneralSettings UIKeybindGeneralSettings_,
    UIKeybindActionBarSettings UIKeybindActionBarSettings_,
    UIKeybindDialogSettings UIKeybindDialogSettings_,
    UIKeybindSelectCharacterSettings UIKeybindSelectCharacterSettings_) : IUnityStructure
{
    public static UISettingsMechanicLinks Read(EndianBinaryReader reader)
    {
        UIDifficultySettings UIDifficultySettings__ = UIDifficultySettings.Read(reader);
        UIGraphicsSettings UIGraphicsSettings__ = UIGraphicsSettings.Read(reader);
        UIDisplaySettings UIDisplaySettings__ = UIDisplaySettings.Read(reader);
        UISoundSettings UISoundSettings__ = UISoundSettings.Read(reader);
        UIAccessiabilitySettings UIAccessiabilitySettings__ = UIAccessiabilitySettings.Read(reader);
        UIGameMainSettings UIGameMainSettings__ = UIGameMainSettings.Read(reader);
        UIGameSaveSettings UIGameSaveSettings__ = UIGameSaveSettings.Read(reader);
        UIGameTooltipsSettings UIGameTooltipsSettings__ = UIGameTooltipsSettings.Read(reader);
        UIGameTutorialSettings UIGameTutorialSettings__ = UIGameTutorialSettings.Read(reader);
        UIGameMainMenuSettings UIGameMainMenuSettings__ = UIGameMainMenuSettings.Read(reader);
        UIGameCombatTextsSettings UIGameCombatTextsSettings__ = UIGameCombatTextsSettings.Read(reader);
        UIGameDialogsSettings UIGameDialogsSettings__ = UIGameDialogsSettings.Read(reader);
        UIGameAutopauseSettings UIGameAutopauseSettings__ = UIGameAutopauseSettings.Read(reader);
        UIGameTurnBasedSettings UIGameTurnBasedSettings__ = UIGameTurnBasedSettings.Read(reader);
        UIControlsSettings UIControlsSettings__ = UIControlsSettings.Read(reader);
        UIKeybindGeneralSettings UIKeybindGeneralSettings__ = UIKeybindGeneralSettings.Read(reader);
        UIKeybindActionBarSettings UIKeybindActionBarSettings__ = UIKeybindActionBarSettings.Read(reader);
        UIKeybindDialogSettings UIKeybindDialogSettings__ = UIKeybindDialogSettings.Read(reader);
        UIKeybindSelectCharacterSettings UIKeybindSelectCharacterSettings__ = UIKeybindSelectCharacterSettings.Read(reader);
        
        return new(UIDifficultySettings__,
            UIGraphicsSettings__,
            UIDisplaySettings__,
            UISoundSettings__,
            UIAccessiabilitySettings__,
            UIGameMainSettings__,
            UIGameSaveSettings__,
            UIGameTooltipsSettings__,
            UIGameTutorialSettings__,
            UIGameMainMenuSettings__,
            UIGameCombatTextsSettings__,
            UIGameDialogsSettings__,
            UIGameAutopauseSettings__,
            UIGameTurnBasedSettings__,
            UIControlsSettings__,
            UIKeybindGeneralSettings__,
            UIKeybindActionBarSettings__,
            UIKeybindDialogSettings__,
            UIKeybindSelectCharacterSettings__);
    }

    public override string ToString() => $"UISettingsMechanicLinks\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIDifficultySettings_: {{ \n{UIDifficultySettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGraphicsSettings_: {{ \n{UIGraphicsSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIDisplaySettings_: {{ \n{UIDisplaySettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UISoundSettings_: {{ \n{UISoundSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIAccessiabilitySettings_: {{ \n{UIAccessiabilitySettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameMainSettings_: {{ \n{UIGameMainSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameSaveSettings_: {{ \n{UIGameSaveSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameTooltipsSettings_: {{ \n{UIGameTooltipsSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameTutorialSettings_: {{ \n{UIGameTutorialSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameMainMenuSettings_: {{ \n{UIGameMainMenuSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameCombatTextsSettings_: {{ \n{UIGameCombatTextsSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameDialogsSettings_: {{ \n{UIGameDialogsSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameAutopauseSettings_: {{ \n{UIGameAutopauseSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIGameTurnBasedSettings_: {{ \n{UIGameTurnBasedSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIControlsSettings_: {{ \n{UIControlsSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIKeybindGeneralSettings_: {{ \n{UIKeybindGeneralSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIKeybindActionBarSettings_: {{ \n{UIKeybindActionBarSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIKeybindDialogSettings_: {{ \n{UIKeybindDialogSettings_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIKeybindSelectCharacterSettings_: {{ \n{UIKeybindSelectCharacterSettings_.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIDifficultySettings (24 fields) */
public record class UIDifficultySettings (
    PPtr<UISettingsEntityGameDifficulty> GameDifficulty,
    PPtr<UISettingsEntityBoolOnlyOneSave> OnlyOneSave,
    PPtr<UISettingsEntityDropdownCombatEncountersCapacity> CombatEncountersCapacity,
    PPtr<UISettingsEntityDropdownAutoLevelUp> AutoLevelUp,
    PPtr<UISettingsEntityBool> RespecAllowed,
    PPtr<UISettingsEntityBool> AdditionalAIBehaviors,
    PPtr<UISettingsEntityBool> LimitedAI,
    PPtr<UISettingsEntitySliderInt> EnemyDodgePercentModifier,
    PPtr<UISettingsEntitySliderInt> CoverHitBonusHalfModifier,
    PPtr<UISettingsEntitySliderInt> CoverHitBonusFullModifier,
    PPtr<UISettingsEntitySliderInt> MinPartyDamage,
    PPtr<UISettingsEntitySliderInt> MinPartyDamageFraction,
    PPtr<UISettingsEntitySliderInt> MinPartyStarshipDamage,
    PPtr<UISettingsEntitySliderInt> MinPartyStarshipDamageFraction,
    PPtr<UISettingsEntitySliderInt> PartyMomentumPercentMultiplier,
    PPtr<UISettingsEntitySliderInt> NPCAttributesBaseValuePercentMultiplier,
    PPtr<UISettingDropdownHardCrowdControlDurationLimit> HardCrowdControlOnPartyMaxDurationRounds,
    PPtr<UISettingsEntitySliderInt> SkillCheckModifier,
    PPtr<UISettingsEntitySliderInt> EnemyHitPointsPercentModifier,
    PPtr<UISettingsEntitySliderInt> PartyDamageDealtAfterArmorReductionPercentModifier,
    PPtr<UISettingsEntitySliderInt> WoundDamagePerTurnThresholdHPFraction,
    PPtr<UISettingsEntitySliderInt> OldWoundDelayRounds,
    PPtr<UISettingsEntitySliderInt> WoundStacksForTrauma,
    PPtr<UISettingsEntityDropdownSpaceCombatDifficulty> SpaceCombatDifficulty) : IUnityStructure
{
    public static UIDifficultySettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityGameDifficulty> GameDifficulty_ = PPtr<UISettingsEntityGameDifficulty>.Read(reader);
        PPtr<UISettingsEntityBoolOnlyOneSave> OnlyOneSave_ = PPtr<UISettingsEntityBoolOnlyOneSave>.Read(reader);
        PPtr<UISettingsEntityDropdownCombatEncountersCapacity> CombatEncountersCapacity_ = PPtr<UISettingsEntityDropdownCombatEncountersCapacity>.Read(reader);
        PPtr<UISettingsEntityDropdownAutoLevelUp> AutoLevelUp_ = PPtr<UISettingsEntityDropdownAutoLevelUp>.Read(reader);
        PPtr<UISettingsEntityBool> RespecAllowed_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> AdditionalAIBehaviors_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> LimitedAI_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderInt> EnemyDodgePercentModifier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> CoverHitBonusHalfModifier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> CoverHitBonusFullModifier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> MinPartyDamage_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> MinPartyDamageFraction_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> MinPartyStarshipDamage_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> MinPartyStarshipDamageFraction_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> PartyMomentumPercentMultiplier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> NPCAttributesBaseValuePercentMultiplier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingDropdownHardCrowdControlDurationLimit> HardCrowdControlOnPartyMaxDurationRounds_ = PPtr<UISettingDropdownHardCrowdControlDurationLimit>.Read(reader);
        PPtr<UISettingsEntitySliderInt> SkillCheckModifier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> EnemyHitPointsPercentModifier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> PartyDamageDealtAfterArmorReductionPercentModifier_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> WoundDamagePerTurnThresholdHPFraction_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> OldWoundDelayRounds_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> WoundStacksForTrauma_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntityDropdownSpaceCombatDifficulty> SpaceCombatDifficulty_ = PPtr<UISettingsEntityDropdownSpaceCombatDifficulty>.Read(reader);
        
        return new(GameDifficulty_,
            OnlyOneSave_,
            CombatEncountersCapacity_,
            AutoLevelUp_,
            RespecAllowed_,
            AdditionalAIBehaviors_,
            LimitedAI_,
            EnemyDodgePercentModifier_,
            CoverHitBonusHalfModifier_,
            CoverHitBonusFullModifier_,
            MinPartyDamage_,
            MinPartyDamageFraction_,
            MinPartyStarshipDamage_,
            MinPartyStarshipDamageFraction_,
            PartyMomentumPercentMultiplier_,
            NPCAttributesBaseValuePercentMultiplier_,
            HardCrowdControlOnPartyMaxDurationRounds_,
            SkillCheckModifier_,
            EnemyHitPointsPercentModifier_,
            PartyDamageDealtAfterArmorReductionPercentModifier_,
            WoundDamagePerTurnThresholdHPFraction_,
            OldWoundDelayRounds_,
            WoundStacksForTrauma_,
            SpaceCombatDifficulty_);
    }

    public override string ToString() => $"UIDifficultySettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameDifficulty: {GameDifficulty}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyOneSave: {OnlyOneSave}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CombatEncountersCapacity: {CombatEncountersCapacity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoLevelUp: {AutoLevelUp}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RespecAllowed: {RespecAllowed}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AdditionalAIBehaviors: {AdditionalAIBehaviors}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LimitedAI: {LimitedAI}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyDodgePercentModifier: {EnemyDodgePercentModifier}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverHitBonusHalfModifier: {CoverHitBonusHalfModifier}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverHitBonusFullModifier: {CoverHitBonusFullModifier}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyDamage: {MinPartyDamage}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyDamageFraction: {MinPartyDamageFraction}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyStarshipDamage: {MinPartyStarshipDamage}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyStarshipDamageFraction: {MinPartyStarshipDamageFraction}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyMomentumPercentMultiplier: {PartyMomentumPercentMultiplier}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NPCAttributesBaseValuePercentMultiplier: {NPCAttributesBaseValuePercentMultiplier}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HardCrowdControlOnPartyMaxDurationRounds: {HardCrowdControlOnPartyMaxDurationRounds}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SkillCheckModifier: {SkillCheckModifier}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyHitPointsPercentModifier: {EnemyHitPointsPercentModifier}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyDamageDealtAfterArmorReductionPercentModifier: {PartyDamageDealtAfterArmorReductionPercentModifier}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WoundDamagePerTurnThresholdHPFraction: {WoundDamagePerTurnThresholdHPFraction}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OldWoundDelayRounds: {OldWoundDelayRounds}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WoundStacksForTrauma: {WoundStacksForTrauma}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpaceCombatDifficulty: {SpaceCombatDifficulty}");
    }
}

/* $UIGraphicsSettings (26 fields) */
public record class UIGraphicsSettings (
    PPtr<UISettingsEntityDropdownInt> Display,
    PPtr<UISettingsEntityDropdownFullScreenMode> FullScreenMode,
    PPtr<UISettingsEntityDropdownInt> ScreenResolution,
    PPtr<UISettingsEntityBool> WindowedMouseLock,
    PPtr<UISettingsEntityBool> CameraShake,
    PPtr<UISettingsEntityDropdownPS5ProGraphicsQuality> PS5ProGraphicsQuality,
    PPtr<UISettingsEntityDropdownGraphicsPreset> GraphicsQuality,
    PPtr<UISettingsEntityDropdownVSyncMode> VSyncMode,
    PPtr<UISettingsEntityBool> FrameRateLimitEnabled,
    PPtr<UISettingsEntitySliderInt> FrameRateLimit,
    PPtr<UISettingsEntityDropdownFsrMode> FsrMode,
    PPtr<UISettingsEntitySliderFloat> FsrSharpness,
    PPtr<UISettingsEntityDropdownQuality> VolumetricLightingQuality,
    PPtr<UISettingsEntityBool> ParticleSystemsLightingEnabled,
    PPtr<UISettingsEntityBool> ParticleSystemsShadowsEnabled,
    PPtr<UISettingsEntityDropdownQualityDisactivatable> ShadowsQuality,
    PPtr<UISettingsEntityDropdownQuality> TexturesQuality,
    PPtr<UISettingsEntityBool> DepthOfField,
    PPtr<UISettingsEntityBool> Bloom,
    PPtr<UISettingsEntityDropdownQualityDisactivatable> SSAOQuality,
    PPtr<UISettingsEntityDropdownQualityDisactivatable> SSRQuality,
    PPtr<UISettingsEntityBool> FilmGrainEnabled,
    PPtr<UISettingsEntityDropdownAntialiasingMode> AntialiasingMode,
    PPtr<UISettingsEntityDropdownQuality> AntialiasingQuality,
    PPtr<UISettingsEntityDropdownFootprintsMode> FootprintsMode,
    PPtr<UISettingsEntityDropdownCrowdQuality> CrowdQuality) : IUnityStructure
{
    public static UIGraphicsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownInt> Display_ = PPtr<UISettingsEntityDropdownInt>.Read(reader);
        PPtr<UISettingsEntityDropdownFullScreenMode> FullScreenMode_ = PPtr<UISettingsEntityDropdownFullScreenMode>.Read(reader);
        PPtr<UISettingsEntityDropdownInt> ScreenResolution_ = PPtr<UISettingsEntityDropdownInt>.Read(reader);
        PPtr<UISettingsEntityBool> WindowedMouseLock_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> CameraShake_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownPS5ProGraphicsQuality> PS5ProGraphicsQuality_ = PPtr<UISettingsEntityDropdownPS5ProGraphicsQuality>.Read(reader);
        PPtr<UISettingsEntityDropdownGraphicsPreset> GraphicsQuality_ = PPtr<UISettingsEntityDropdownGraphicsPreset>.Read(reader);
        PPtr<UISettingsEntityDropdownVSyncMode> VSyncMode_ = PPtr<UISettingsEntityDropdownVSyncMode>.Read(reader);
        PPtr<UISettingsEntityBool> FrameRateLimitEnabled_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderInt> FrameRateLimit_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntityDropdownFsrMode> FsrMode_ = PPtr<UISettingsEntityDropdownFsrMode>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> FsrSharpness_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityDropdownQuality> VolumetricLightingQuality_ = PPtr<UISettingsEntityDropdownQuality>.Read(reader);
        PPtr<UISettingsEntityBool> ParticleSystemsLightingEnabled_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ParticleSystemsShadowsEnabled_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownQualityDisactivatable> ShadowsQuality_ = PPtr<UISettingsEntityDropdownQualityDisactivatable>.Read(reader);
        PPtr<UISettingsEntityDropdownQuality> TexturesQuality_ = PPtr<UISettingsEntityDropdownQuality>.Read(reader);
        PPtr<UISettingsEntityBool> DepthOfField_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> Bloom_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownQualityDisactivatable> SSAOQuality_ = PPtr<UISettingsEntityDropdownQualityDisactivatable>.Read(reader);
        PPtr<UISettingsEntityDropdownQualityDisactivatable> SSRQuality_ = PPtr<UISettingsEntityDropdownQualityDisactivatable>.Read(reader);
        PPtr<UISettingsEntityBool> FilmGrainEnabled_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownAntialiasingMode> AntialiasingMode_ = PPtr<UISettingsEntityDropdownAntialiasingMode>.Read(reader);
        PPtr<UISettingsEntityDropdownQuality> AntialiasingQuality_ = PPtr<UISettingsEntityDropdownQuality>.Read(reader);
        PPtr<UISettingsEntityDropdownFootprintsMode> FootprintsMode_ = PPtr<UISettingsEntityDropdownFootprintsMode>.Read(reader);
        PPtr<UISettingsEntityDropdownCrowdQuality> CrowdQuality_ = PPtr<UISettingsEntityDropdownCrowdQuality>.Read(reader);
        
        return new(Display_,
            FullScreenMode_,
            ScreenResolution_,
            WindowedMouseLock_,
            CameraShake_,
            PS5ProGraphicsQuality_,
            GraphicsQuality_,
            VSyncMode_,
            FrameRateLimitEnabled_,
            FrameRateLimit_,
            FsrMode_,
            FsrSharpness_,
            VolumetricLightingQuality_,
            ParticleSystemsLightingEnabled_,
            ParticleSystemsShadowsEnabled_,
            ShadowsQuality_,
            TexturesQuality_,
            DepthOfField_,
            Bloom_,
            SSAOQuality_,
            SSRQuality_,
            FilmGrainEnabled_,
            AntialiasingMode_,
            AntialiasingQuality_,
            FootprintsMode_,
            CrowdQuality_);
    }

    public override string ToString() => $"UIGraphicsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Display: {Display}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FullScreenMode: {FullScreenMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenResolution: {ScreenResolution}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WindowedMouseLock: {WindowedMouseLock}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraShake: {CameraShake}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PS5ProGraphicsQuality: {PS5ProGraphicsQuality}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GraphicsQuality: {GraphicsQuality}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VSyncMode: {VSyncMode}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameRateLimitEnabled: {FrameRateLimitEnabled}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameRateLimit: {FrameRateLimit}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrMode: {FsrMode}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrSharpness: {FsrSharpness}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumetricLightingQuality: {VolumetricLightingQuality}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSystemsLightingEnabled: {ParticleSystemsLightingEnabled}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSystemsShadowsEnabled: {ParticleSystemsShadowsEnabled}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowsQuality: {ShadowsQuality}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TexturesQuality: {TexturesQuality}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthOfField: {DepthOfField}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Bloom: {Bloom}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SSAOQuality: {SSAOQuality}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SSRQuality: {SSRQuality}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FilmGrainEnabled: {FilmGrainEnabled}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AntialiasingMode: {AntialiasingMode}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AntialiasingQuality: {AntialiasingQuality}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FootprintsMode: {FootprintsMode}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CrowdQuality: {CrowdQuality}");
    }
}

/* $UIDisplaySettings (4 fields) */
public record class UIDisplaySettings (
    PPtr<UISettingsEntityGammaCorrection> GammaCorrection,
    PPtr<UISettingsEntityGammaCorrection> Brightness,
    PPtr<UISettingsEntitySliderFloat> Contrast,
    PPtr<UISettingsEntitySliderInt> SafeZoneOffset) : IUnityStructure
{
    public static UIDisplaySettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityGammaCorrection> GammaCorrection_ = PPtr<UISettingsEntityGammaCorrection>.Read(reader);
        PPtr<UISettingsEntityGammaCorrection> Brightness_ = PPtr<UISettingsEntityGammaCorrection>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> Contrast_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderInt> SafeZoneOffset_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        
        return new(GammaCorrection_,
            Brightness_,
            Contrast_,
            SafeZoneOffset_);
    }

    public override string ToString() => $"UIDisplaySettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GammaCorrection: {GammaCorrection}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Brightness: {Brightness}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Contrast: {Contrast}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SafeZoneOffset: {SafeZoneOffset}");
    }
}

/* $UISoundSettings (15 fields) */
public record class UISoundSettings (
    PPtr<UISettingsEntitySliderFloat> VolumeMaster,
    PPtr<UISettingsEntitySliderFloat> VolumeVoices,
    PPtr<UISettingsEntitySliderFloat> VolumeVoicesCharacterInGame,
    PPtr<UISettingsEntitySliderFloat> VolumeVoicesNpcInGame,
    PPtr<UISettingsEntitySliderFloat> VolumeVoicesDialogues,
    PPtr<UISettingsEntitySliderFloat> VolumeMusic,
    PPtr<UISettingsEntitySliderFloat> VolumeSfx,
    PPtr<UISettingsEntitySliderFloat> VolumeAmbience,
    PPtr<UISettingsEntitySliderFloat> VolumeAbilities,
    PPtr<UISettingsEntitySliderFloat> VolumeRangedWeapons,
    PPtr<UISettingsEntitySliderFloat> VolumeMeleeWeapons,
    PPtr<UISettingsEntitySliderFloat> VolumeHitsLevel,
    PPtr<UISettingsEntitySliderFloat> VolumeUI,
    PPtr<UISettingsEntityDropdownVoiceAskFrequency> VoicedAskFrequency,
    PPtr<UISettingsEntityBool> MuteAudioWhileTheGameIsOutFocus) : IUnityStructure
{
    public static UISoundSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntitySliderFloat> VolumeMaster_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeVoices_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeVoicesCharacterInGame_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeVoicesNpcInGame_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeVoicesDialogues_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeMusic_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeSfx_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeAmbience_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeAbilities_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeRangedWeapons_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeMeleeWeapons_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeHitsLevel_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> VolumeUI_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityDropdownVoiceAskFrequency> VoicedAskFrequency_ = PPtr<UISettingsEntityDropdownVoiceAskFrequency>.Read(reader);
        PPtr<UISettingsEntityBool> MuteAudioWhileTheGameIsOutFocus_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(VolumeMaster_,
            VolumeVoices_,
            VolumeVoicesCharacterInGame_,
            VolumeVoicesNpcInGame_,
            VolumeVoicesDialogues_,
            VolumeMusic_,
            VolumeSfx_,
            VolumeAmbience_,
            VolumeAbilities_,
            VolumeRangedWeapons_,
            VolumeMeleeWeapons_,
            VolumeHitsLevel_,
            VolumeUI_,
            VoicedAskFrequency_,
            MuteAudioWhileTheGameIsOutFocus_);
    }

    public override string ToString() => $"UISoundSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMaster: {VolumeMaster}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoices: {VolumeVoices}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoicesCharacterInGame: {VolumeVoicesCharacterInGame}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoicesNpcInGame: {VolumeVoicesNpcInGame}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoicesDialogues: {VolumeVoicesDialogues}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMusic: {VolumeMusic}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeSfx: {VolumeSfx}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeAmbience: {VolumeAmbience}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeAbilities: {VolumeAbilities}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeRangedWeapons: {VolumeRangedWeapons}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMeleeWeapons: {VolumeMeleeWeapons}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeHitsLevel: {VolumeHitsLevel}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeUI: {VolumeUI}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VoicedAskFrequency: {VoicedAskFrequency}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MuteAudioWhileTheGameIsOutFocus: {MuteAudioWhileTheGameIsOutFocus}");
    }
}

/* $UIAccessiabilitySettings (4 fields) */
public record class UIAccessiabilitySettings (
    PPtr<UISettingsEntitySliderFloat> Protanopia,
    PPtr<UISettingsEntitySliderFloat> Deuteranopia,
    PPtr<UISettingsEntitySliderFloat> Tritanopia,
    PPtr<UISettingsEntitySliderFontSize> FontSize) : IUnityStructure
{
    public static UIAccessiabilitySettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntitySliderFloat> Protanopia_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> Deuteranopia_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> Tritanopia_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFontSize> FontSize_ = PPtr<UISettingsEntitySliderFontSize>.Read(reader);
        
        return new(Protanopia_,
            Deuteranopia_,
            Tritanopia_,
            FontSize_);
    }

    public override string ToString() => $"UIAccessiabilitySettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Protanopia: {Protanopia}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Deuteranopia: {Deuteranopia}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Tritanopia: {Tritanopia}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FontSize: {FontSize}");
    }
}

/* $UIGameMainSettings (9 fields) */
public record class UIGameMainSettings (
    PPtr<UISettingsEntityDropdownLocale> Localization,
    PPtr<UISettingsEntityBool> AutofillActionbarSlots,
    PPtr<UISettingsEntityBool> LootInCombat,
    PPtr<UISettingsEntityBool> SendGameStatistic,
    PPtr<UISettingsEntityBool> SendSaves,
    PPtr<UISettingsEntityBool> UseHotAreas,
    PPtr<UISettingsEntityBool> BloodOnCharacters,
    PPtr<UISettingsEntityBool> DismemberCharacters,
    PPtr<UISettingsEntityBool> AcceleratedMove) : IUnityStructure
{
    public static UIGameMainSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownLocale> Localization_ = PPtr<UISettingsEntityDropdownLocale>.Read(reader);
        PPtr<UISettingsEntityBool> AutofillActionbarSlots_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> LootInCombat_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> SendGameStatistic_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> SendSaves_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> UseHotAreas_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> BloodOnCharacters_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> DismemberCharacters_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> AcceleratedMove_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(Localization_,
            AutofillActionbarSlots_,
            LootInCombat_,
            SendGameStatistic_,
            SendSaves_,
            UseHotAreas_,
            BloodOnCharacters_,
            DismemberCharacters_,
            AcceleratedMove_);
    }

    public override string ToString() => $"UIGameMainSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Localization: {Localization}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutofillActionbarSlots: {AutofillActionbarSlots}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LootInCombat: {LootInCombat}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SendGameStatistic: {SendGameStatistic}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SendSaves: {SendSaves}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseHotAreas: {UseHotAreas}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BloodOnCharacters: {BloodOnCharacters}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DismemberCharacters: {DismemberCharacters}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AcceleratedMove: {AcceleratedMove}");
    }
}

/* $UIGameSaveSettings (3 fields) */
public record class UIGameSaveSettings (
    PPtr<UISettingsEntityBool> AutosaveEnabled,
    PPtr<UISettingsEntitySliderInt> AutosaveSlots,
    PPtr<UISettingsEntitySliderInt> QuicksaveSlots) : IUnityStructure
{
    public static UIGameSaveSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> AutosaveEnabled_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderInt> AutosaveSlots_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        PPtr<UISettingsEntitySliderInt> QuicksaveSlots_ = PPtr<UISettingsEntitySliderInt>.Read(reader);
        
        return new(AutosaveEnabled_,
            AutosaveSlots_,
            QuicksaveSlots_);
    }

    public override string ToString() => $"UIGameSaveSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutosaveEnabled: {AutosaveEnabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutosaveSlots: {AutosaveSlots}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}QuicksaveSlots: {QuicksaveSlots}");
    }
}

/* $UIGameTooltipsSettings (3 fields) */
public record class UIGameTooltipsSettings (
    PPtr<UISettingsEntityBool> ShowComparative,
    PPtr<UISettingsEntitySliderFloat> ShowDelay,
    PPtr<UISettingsEntityBool> Shortened) : IUnityStructure
{
    public static UIGameTooltipsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> ShowComparative_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> ShowDelay_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> Shortened_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(ShowComparative_,
            ShowDelay_,
            Shortened_);
    }

    public override string ToString() => $"UIGameTooltipsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowComparative: {ShowComparative}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowDelay: {ShowDelay}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Shortened: {Shortened}");
    }
}

/* $UIGameTutorialSettings (12 fields) */
public record class UIGameTutorialSettings (
    PPtr<UISettingsEntityBool> ShowAllTutorials,
    PPtr<UISettingsEntityBool> ShowBasicTutorial,
    PPtr<UISettingsEntityBool> ShowControlsBasicTutorial,
    PPtr<UISettingsEntityBool> ShowControlsAdvancedTutorial,
    PPtr<UISettingsEntityBool> ShowGameplayBasicTutorial,
    PPtr<UISettingsEntityBool> ShowGameplayAdvancedTutorial,
    PPtr<UISettingsEntityBool> ShowWarhammerRulesTutorial,
    PPtr<UISettingsEntityBool> ShowSpaceEncountersTutorial,
    PPtr<UISettingsEntityBool> ShowSpaceExplorationTutorial,
    PPtr<UISettingsEntityBool> ShowGroundEncountersTutorial,
    PPtr<UISettingsEntityBool> ShowContextTutorial,
    PPtr<UISettingsEntityBool> ShowSpecialLoot) : IUnityStructure
{
    public static UIGameTutorialSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> ShowAllTutorials_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowBasicTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowControlsBasicTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowControlsAdvancedTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowGameplayBasicTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowGameplayAdvancedTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowWarhammerRulesTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowSpaceEncountersTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowSpaceExplorationTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowGroundEncountersTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowContextTutorial_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowSpecialLoot_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(ShowAllTutorials_,
            ShowBasicTutorial_,
            ShowControlsBasicTutorial_,
            ShowControlsAdvancedTutorial_,
            ShowGameplayBasicTutorial_,
            ShowGameplayAdvancedTutorial_,
            ShowWarhammerRulesTutorial_,
            ShowSpaceEncountersTutorial_,
            ShowSpaceExplorationTutorial_,
            ShowGroundEncountersTutorial_,
            ShowContextTutorial_,
            ShowSpecialLoot_);
    }

    public override string ToString() => $"UIGameTutorialSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAllTutorials: {ShowAllTutorials}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowBasicTutorial: {ShowBasicTutorial}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowControlsBasicTutorial: {ShowControlsBasicTutorial}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowControlsAdvancedTutorial: {ShowControlsAdvancedTutorial}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowGameplayBasicTutorial: {ShowGameplayBasicTutorial}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowGameplayAdvancedTutorial: {ShowGameplayAdvancedTutorial}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowWarhammerRulesTutorial: {ShowWarhammerRulesTutorial}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpaceEncountersTutorial: {ShowSpaceEncountersTutorial}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpaceExplorationTutorial: {ShowSpaceExplorationTutorial}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowGroundEncountersTutorial: {ShowGroundEncountersTutorial}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowContextTutorial: {ShowContextTutorial}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpecialLoot: {ShowSpecialLoot}");
    }
}

/* $UIGameMainMenuSettings (1 fields) */
public record class UIGameMainMenuSettings (
    PPtr<UISettingsEntityDropdownMainMenuTheme> MainMenuTheme) : IUnityStructure
{
    public static UIGameMainMenuSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownMainMenuTheme> MainMenuTheme_ = PPtr<UISettingsEntityDropdownMainMenuTheme>.Read(reader);
        
        return new(MainMenuTheme_);
    }

    public override string ToString() => $"UIGameMainMenuSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MainMenuTheme: {MainMenuTheme}");
    }
}

/* $UIGameCombatTextsSettings (8 fields) */
public record class UIGameCombatTextsSettings (
    PPtr<UISettingsEntityDropdownEntitiesType> ShowSpellName,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowAvoid,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowMiss,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowAttackOfOpportunity,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowCriticalHit,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowSneakAttack,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowDamage,
    PPtr<UISettingsEntityDropdownEntitiesType> ShowSaves) : IUnityStructure
{
    public static UIGameCombatTextsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityDropdownEntitiesType> ShowSpellName_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowAvoid_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowMiss_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowAttackOfOpportunity_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowCriticalHit_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowSneakAttack_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowDamage_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        PPtr<UISettingsEntityDropdownEntitiesType> ShowSaves_ = PPtr<UISettingsEntityDropdownEntitiesType>.Read(reader);
        
        return new(ShowSpellName_,
            ShowAvoid_,
            ShowMiss_,
            ShowAttackOfOpportunity_,
            ShowCriticalHit_,
            ShowSneakAttack_,
            ShowDamage_,
            ShowSaves_);
    }

    public override string ToString() => $"UIGameCombatTextsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpellName: {ShowSpellName}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAvoid: {ShowAvoid}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowMiss: {ShowMiss}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAttackOfOpportunity: {ShowAttackOfOpportunity}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowCriticalHit: {ShowCriticalHit}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSneakAttack: {ShowSneakAttack}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowDamage: {ShowDamage}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSaves: {ShowSaves}");
    }
}

/* $UIGameDialogsSettings (8 fields) */
public record class UIGameDialogsSettings (
    PPtr<UISettingsEntityBool> ShowItemsReceivedNotification,
    PPtr<UISettingsEntityBool> ShowLocationRevealedNotification,
    PPtr<UISettingsEntityBool> ShowXPGainedNotification,
    PPtr<UISettingsEntityBool> ShowAlignmentShiftsInAnswer,
    PPtr<UISettingsEntityBool> ShowAlignmentShiftsNotifications,
    PPtr<UISettingsEntityBool> ShowAlignmentRequirements,
    PPtr<UISettingsEntityBool> ShowSkillcheckDC,
    PPtr<UISettingsEntityBool> ShowSkillcheckResult) : IUnityStructure
{
    public static UIGameDialogsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> ShowItemsReceivedNotification_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowLocationRevealedNotification_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowXPGainedNotification_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowAlignmentShiftsInAnswer_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowAlignmentShiftsNotifications_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowAlignmentRequirements_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowSkillcheckDC_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> ShowSkillcheckResult_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(ShowItemsReceivedNotification_,
            ShowLocationRevealedNotification_,
            ShowXPGainedNotification_,
            ShowAlignmentShiftsInAnswer_,
            ShowAlignmentShiftsNotifications_,
            ShowAlignmentRequirements_,
            ShowSkillcheckDC_,
            ShowSkillcheckResult_);
    }

    public override string ToString() => $"UIGameDialogsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowItemsReceivedNotification: {ShowItemsReceivedNotification}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowLocationRevealedNotification: {ShowLocationRevealedNotification}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowXPGainedNotification: {ShowXPGainedNotification}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAlignmentShiftsInAnswer: {ShowAlignmentShiftsInAnswer}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAlignmentShiftsNotifications: {ShowAlignmentShiftsNotifications}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAlignmentRequirements: {ShowAlignmentRequirements}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSkillcheckDC: {ShowSkillcheckDC}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSkillcheckResult: {ShowSkillcheckResult}");
    }
}

/* $UIGameAutopauseSettings (5 fields) */
public record class UIGameAutopauseSettings (
    PPtr<UISettingsEntityBool> PauseOnLostFocus,
    PPtr<UISettingsEntityBool> PauseOnTrapDetected,
    PPtr<UISettingsEntityBool> PauseOnHiddenObjectDetected,
    PPtr<UISettingsEntityBool> PauseWhenAreaLoaded,
    PPtr<UISettingsEntityBool> PauseOnLoadingScreen) : IUnityStructure
{
    public static UIGameAutopauseSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> PauseOnLostFocus_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> PauseOnTrapDetected_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> PauseOnHiddenObjectDetected_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> PauseWhenAreaLoaded_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> PauseOnLoadingScreen_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(PauseOnLostFocus_,
            PauseOnTrapDetected_,
            PauseOnHiddenObjectDetected_,
            PauseWhenAreaLoaded_,
            PauseOnLoadingScreen_);
    }

    public override string ToString() => $"UIGameAutopauseSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnLostFocus: {PauseOnLostFocus}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnTrapDetected: {PauseOnTrapDetected}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnHiddenObjectDetected: {PauseOnHiddenObjectDetected}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseWhenAreaLoaded: {PauseWhenAreaLoaded}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnLoadingScreen: {PauseOnLoadingScreen}");
    }
}

/* $UIGameTurnBasedSettings (10 fields) */
public record class UIGameTurnBasedSettings (
    PPtr<UISettingsEntityBool> AutoEndTurn,
    PPtr<UISettingsEntityBool> CameraFollowUnit,
    PPtr<UISettingsEntityBool> CameraScrollToCurrentUnit,
    PPtr<UISettingsEntityDropdownSpeedUpMode> SpeedUpMode,
    PPtr<UISettingsEntityBool> FastMovement,
    PPtr<UISettingsEntityBool> FastPartyCast,
    PPtr<UISettingsEntityBool> DisableActionCamera,
    PPtr<UISettingsEntitySliderFloat> TimeScaleInPlayerTurn,
    PPtr<UISettingsEntitySliderFloat> TimeScaleInNonPlayerTurn,
    PPtr<UISettingsEntityBool> AutoSelectWeaponAbility) : IUnityStructure
{
    public static UIGameTurnBasedSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityBool> AutoEndTurn_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> CameraFollowUnit_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> CameraScrollToCurrentUnit_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownSpeedUpMode> SpeedUpMode_ = PPtr<UISettingsEntityDropdownSpeedUpMode>.Read(reader);
        PPtr<UISettingsEntityBool> FastMovement_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> FastPartyCast_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> DisableActionCamera_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> TimeScaleInPlayerTurn_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> TimeScaleInNonPlayerTurn_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> AutoSelectWeaponAbility_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(AutoEndTurn_,
            CameraFollowUnit_,
            CameraScrollToCurrentUnit_,
            SpeedUpMode_,
            FastMovement_,
            FastPartyCast_,
            DisableActionCamera_,
            TimeScaleInPlayerTurn_,
            TimeScaleInNonPlayerTurn_,
            AutoSelectWeaponAbility_);
    }

    public override string ToString() => $"UIGameTurnBasedSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoEndTurn: {AutoEndTurn}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraFollowUnit: {CameraFollowUnit}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollToCurrentUnit: {CameraScrollToCurrentUnit}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpeedUpMode: {SpeedUpMode}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FastMovement: {FastMovement}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FastPartyCast: {FastPartyCast}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisableActionCamera: {DisableActionCamera}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TimeScaleInPlayerTurn: {TimeScaleInPlayerTurn}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TimeScaleInNonPlayerTurn: {TimeScaleInNonPlayerTurn}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoSelectWeaponAbility: {AutoSelectWeaponAbility}");
    }
}

/* $UIControlsSettings (11 fields) */
public record class UIControlsSettings (
    PPtr<UISettingsEntitySliderFloat> MouseSensitivity,
    PPtr<UISettingsEntitySliderFloat> MouseClickDelay,
    PPtr<UISettingsEntityBool> ScreenEdgeScrolling,
    PPtr<UISettingsEntitySliderFloat> CameraScrollSpeedEdge,
    PPtr<UISettingsEntitySliderFloat> CameraScrollSpeedKeyboard,
    PPtr<UISettingsEntitySliderFloat> CameraRotationSpeedEdge,
    PPtr<UISettingsEntitySliderFloat> CameraRotationSpeedKeyboard,
    PPtr<UISettingsEntityBool> CameraScrollOutOfScreenEnabled,
    PPtr<UISettingsEntityDropdownMouseRightButtonFunction> MouseRightButtonFunction,
    PPtr<UISettingsEntityBool> ConvertSnapLogic,
    PPtr<UISettingsEntityBool> CameraFollowsUnit) : IUnityStructure
{
    public static UIControlsSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntitySliderFloat> MouseSensitivity_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> MouseClickDelay_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> ScreenEdgeScrolling_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> CameraScrollSpeedEdge_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> CameraScrollSpeedKeyboard_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> CameraRotationSpeedEdge_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntitySliderFloat> CameraRotationSpeedKeyboard_ = PPtr<UISettingsEntitySliderFloat>.Read(reader);
        PPtr<UISettingsEntityBool> CameraScrollOutOfScreenEnabled_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityDropdownMouseRightButtonFunction> MouseRightButtonFunction_ = PPtr<UISettingsEntityDropdownMouseRightButtonFunction>.Read(reader);
        PPtr<UISettingsEntityBool> ConvertSnapLogic_ = PPtr<UISettingsEntityBool>.Read(reader);
        PPtr<UISettingsEntityBool> CameraFollowsUnit_ = PPtr<UISettingsEntityBool>.Read(reader);
        
        return new(MouseSensitivity_,
            MouseClickDelay_,
            ScreenEdgeScrolling_,
            CameraScrollSpeedEdge_,
            CameraScrollSpeedKeyboard_,
            CameraRotationSpeedEdge_,
            CameraRotationSpeedKeyboard_,
            CameraScrollOutOfScreenEnabled_,
            MouseRightButtonFunction_,
            ConvertSnapLogic_,
            CameraFollowsUnit_);
    }

    public override string ToString() => $"UIControlsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MouseSensitivity: {MouseSensitivity}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MouseClickDelay: {MouseClickDelay}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenEdgeScrolling: {ScreenEdgeScrolling}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollSpeedEdge: {CameraScrollSpeedEdge}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollSpeedKeyboard: {CameraScrollSpeedKeyboard}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotationSpeedEdge: {CameraRotationSpeedEdge}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotationSpeedKeyboard: {CameraRotationSpeedKeyboard}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollOutOfScreenEnabled: {CameraScrollOutOfScreenEnabled}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MouseRightButtonFunction: {MouseRightButtonFunction}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ConvertSnapLogic: {ConvertSnapLogic}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraFollowsUnit: {CameraFollowsUnit}");
    }
}

/* $UIKeybindGeneralSettings (39 fields) */
public record class UIKeybindGeneralSettings (
    PPtr<UISettingsEntityKeyBinding> HighlightObjects,
    PPtr<UISettingsEntityKeyBinding> Hold,
    PPtr<UISettingsEntityKeyBinding> OpenCharacterScreen,
    PPtr<UISettingsEntityKeyBinding> OpenInventory,
    PPtr<UISettingsEntityKeyBinding> OpenJournal,
    PPtr<UISettingsEntityKeyBinding> OpenMap,
    PPtr<UISettingsEntityKeyBinding> OpenEncyclopedia,
    PPtr<UISettingsEntityKeyBinding> OpenColonyManagement,
    PPtr<UISettingsEntityKeyBinding> OpenShipCustomization,
    PPtr<UISettingsEntityKeyBinding> OpenCargoManagement,
    PPtr<UISettingsEntityKeyBinding> OpenFormation,
    PPtr<UISettingsEntityKeyBinding> Pause,
    PPtr<UISettingsEntityKeyBinding> QuickLoad,
    PPtr<UISettingsEntityKeyBinding> QuickSave,
    PPtr<UISettingsEntityKeyBinding> Screenshot,
    PPtr<UISettingsEntityKeyBinding> Stop,
    PPtr<UISettingsEntityKeyBinding> Unpause,
    PPtr<UISettingsEntityKeyBinding> CameraUp,
    PPtr<UISettingsEntityKeyBinding> CameraDown,
    PPtr<UISettingsEntityKeyBinding> CameraLeft,
    PPtr<UISettingsEntityKeyBinding> CameraRight,
    PPtr<UISettingsEntityKeyBinding> CameraRotateLeft,
    PPtr<UISettingsEntityKeyBinding> CameraRotateRight,
    PPtr<UISettingsEntityKeyBinding> CameraRotateToPointNorth,
    PPtr<UISettingsEntityKeyBinding> FollowUnit,
    PPtr<UISettingsEntityKeyBinding> SkipBark,
    PPtr<UISettingsEntityKeyBinding> SkipCutscene,
    PPtr<UISettingsEntityKeyBinding> OpenModificationsWindow,
    PPtr<UISettingsEntityKeyBinding> SpeedUpEnemiesTurn,
    PPtr<UISettingsEntityKeyBinding> SwitchUIVisibility,
    PPtr<UISettingsEntityKeyBinding> ShowHideCombatLog,
    PPtr<UISettingsEntityKeyBinding> EndTurn,
    PPtr<UISettingsEntityKeyBinding> OpenSearchInventory,
    PPtr<UISettingsEntityKeyBinding> CollectAllLoot,
    PPtr<UISettingsEntityKeyBinding> PrevTab,
    PPtr<UISettingsEntityKeyBinding> NextTab,
    PPtr<UISettingsEntityKeyBinding> PrevCharacter,
    PPtr<UISettingsEntityKeyBinding> NextCharacter,
    PPtr<UISettingsEntityKeyBinding> FlipZoneStrategist) : IUnityStructure
{
    public static UIKeybindGeneralSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding> HighlightObjects_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> Hold_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenCharacterScreen_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenInventory_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenJournal_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenMap_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenEncyclopedia_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenColonyManagement_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenShipCustomization_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenCargoManagement_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenFormation_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> Pause_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> QuickLoad_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> QuickSave_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> Screenshot_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> Stop_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> Unpause_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraUp_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraDown_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraLeft_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraRight_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraRotateLeft_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraRotateRight_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CameraRotateToPointNorth_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> FollowUnit_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> SkipBark_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> SkipCutscene_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenModificationsWindow_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> SpeedUpEnemiesTurn_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> SwitchUIVisibility_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> ShowHideCombatLog_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> EndTurn_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> OpenSearchInventory_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> CollectAllLoot_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> PrevTab_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> NextTab_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> PrevCharacter_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> NextCharacter_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> FlipZoneStrategist_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        
        return new(HighlightObjects_,
            Hold_,
            OpenCharacterScreen_,
            OpenInventory_,
            OpenJournal_,
            OpenMap_,
            OpenEncyclopedia_,
            OpenColonyManagement_,
            OpenShipCustomization_,
            OpenCargoManagement_,
            OpenFormation_,
            Pause_,
            QuickLoad_,
            QuickSave_,
            Screenshot_,
            Stop_,
            Unpause_,
            CameraUp_,
            CameraDown_,
            CameraLeft_,
            CameraRight_,
            CameraRotateLeft_,
            CameraRotateRight_,
            CameraRotateToPointNorth_,
            FollowUnit_,
            SkipBark_,
            SkipCutscene_,
            OpenModificationsWindow_,
            SpeedUpEnemiesTurn_,
            SwitchUIVisibility_,
            ShowHideCombatLog_,
            EndTurn_,
            OpenSearchInventory_,
            CollectAllLoot_,
            PrevTab_,
            NextTab_,
            PrevCharacter_,
            NextCharacter_,
            FlipZoneStrategist_);
    }

    public override string ToString() => $"UIKeybindGeneralSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HighlightObjects: {HighlightObjects}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Hold: {Hold}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenCharacterScreen: {OpenCharacterScreen}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenInventory: {OpenInventory}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenJournal: {OpenJournal}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenMap: {OpenMap}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenEncyclopedia: {OpenEncyclopedia}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenColonyManagement: {OpenColonyManagement}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenShipCustomization: {OpenShipCustomization}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenCargoManagement: {OpenCargoManagement}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenFormation: {OpenFormation}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Pause: {Pause}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}QuickLoad: {QuickLoad}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}QuickSave: {QuickSave}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Screenshot: {Screenshot}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Stop: {Stop}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Unpause: {Unpause}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraUp: {CameraUp}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraDown: {CameraDown}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraLeft: {CameraLeft}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRight: {CameraRight}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotateLeft: {CameraRotateLeft}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotateRight: {CameraRotateRight}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotateToPointNorth: {CameraRotateToPointNorth}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FollowUnit: {FollowUnit}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SkipBark: {SkipBark}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SkipCutscene: {SkipCutscene}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenModificationsWindow: {OpenModificationsWindow}");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpeedUpEnemiesTurn: {SpeedUpEnemiesTurn}");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SwitchUIVisibility: {SwitchUIVisibility}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHideCombatLog: {ShowHideCombatLog}");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EndTurn: {EndTurn}");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenSearchInventory: {OpenSearchInventory}");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CollectAllLoot: {CollectAllLoot}");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrevTab: {PrevTab}");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NextTab: {NextTab}");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrevCharacter: {PrevCharacter}");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NextCharacter: {NextCharacter}");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FlipZoneStrategist: {FlipZoneStrategist}");
    }
}

/* $UIKeybindActionBarSettings (4 fields) */
public record class UIKeybindActionBarSettings (
    PPtr<UISettingsEntityKeyBinding> ChangeWeaponSet,
    PPtr<UISettingsEntityKeyBinding>[] ActionBarConsumables,
    PPtr<UISettingsEntityKeyBinding>[] ActionBarWeapons,
    PPtr<UISettingsEntityKeyBinding>[] ActionBarAbilities) : IUnityStructure
{
    public static UIKeybindActionBarSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding> ChangeWeaponSet_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        PPtr<UISettingsEntityKeyBinding>[] ActionBarConsumables_ = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding>[] ActionBarWeapons_ = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding>[] ActionBarAbilities_ = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        
        return new(ChangeWeaponSet_,
            ActionBarConsumables_,
            ActionBarWeapons_,
            ActionBarAbilities_);
    }

    public override string ToString() => $"UIKeybindActionBarSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ChangeWeaponSet: {ChangeWeaponSet}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarConsumables[{ActionBarConsumables.Length}] = {{");
        if (ActionBarConsumables.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<UISettingsEntityKeyBinding> _4 in ActionBarConsumables)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ActionBarConsumables.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarWeapons[{ActionBarWeapons.Length}] = {{");
        if (ActionBarWeapons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<UISettingsEntityKeyBinding> _4 in ActionBarWeapons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ActionBarWeapons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarAbilities[{ActionBarAbilities.Length}] = {{");
        if (ActionBarAbilities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<UISettingsEntityKeyBinding> _4 in ActionBarAbilities)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ActionBarAbilities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UIKeybindDialogSettings (2 fields) */
public record class UIKeybindDialogSettings (
    PPtr<UISettingsEntityKeyBinding>[] DialogChoices,
    PPtr<UISettingsEntityKeyBinding> NextOrEnd) : IUnityStructure
{
    public static UIKeybindDialogSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding>[] DialogChoices_ = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> NextOrEnd_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        
        return new(DialogChoices_,
            NextOrEnd_);
    }

    public override string ToString() => $"UIKeybindDialogSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogChoices[{DialogChoices.Length}] = {{");
        if (DialogChoices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<UISettingsEntityKeyBinding> _4 in DialogChoices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (DialogChoices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NextOrEnd: {NextOrEnd}");
    }
}

/* $UIKeybindSelectCharacterSettings (2 fields) */
public record class UIKeybindSelectCharacterSettings (
    PPtr<UISettingsEntityKeyBinding>[] SelectCharacter,
    PPtr<UISettingsEntityKeyBinding> SelectAll) : IUnityStructure
{
    public static UIKeybindSelectCharacterSettings Read(EndianBinaryReader reader)
    {
        PPtr<UISettingsEntityKeyBinding>[] SelectCharacter_ = BuiltInArray<PPtr<UISettingsEntityKeyBinding>>.Read(reader);
        PPtr<UISettingsEntityKeyBinding> SelectAll_ = PPtr<UISettingsEntityKeyBinding>.Read(reader);
        
        return new(SelectCharacter_,
            SelectAll_);
    }

    public override string ToString() => $"UIKeybindSelectCharacterSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectCharacter[{SelectCharacter.Length}] = {{");
        if (SelectCharacter.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<UISettingsEntityKeyBinding> _4 in SelectCharacter)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (SelectCharacter.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SelectAll: {SelectAll}");
    }
}

/* $WeaponStyleSettings_2 (3 fields) */
public record class WeaponStyleSettings_2 (
    int m_Style,
    byte IsOffHand,
    PPtr<AnimationClipWrapper> m_Clip) : IUnityStructure
{
    public static WeaponStyleSettings_2 Read(EndianBinaryReader reader)
    {
        int m_Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        PPtr<AnimationClipWrapper> m_Clip_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(m_Style_,
            IsOffHand_,
            m_Clip_);
    }

    public override string ToString() => $"WeaponStyleSettings_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Style: {m_Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Clip: {m_Clip}");
    }
}

/* $WeaponStyleSettings_5 (5 fields) */
public record class WeaponStyleSettings_5 (
    int Style,
    byte IsOffHand,
    PPtr<AnimationClipWrapper> Start,
    PPtr<AnimationClipWrapper> Middle,
    PPtr<AnimationClipWrapper> End) : IUnityStructure
{
    public static WeaponStyleSettings_5 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        PPtr<AnimationClipWrapper> Start_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> Middle_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> End_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Style_,
            IsOffHand_,
            Start_,
            Middle_,
            End_);
    }

    public override string ToString() => $"WeaponStyleSettings_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Start: {Start}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Middle: {Middle}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}End: {End}");
    }
}

/* $Octave3DScene (1 fields) */
public record class Octave3DScene (
    GameObjectSphereTree _gameObjectSphereTree) : IUnityStructure
{
    public static Octave3DScene Read(EndianBinaryReader reader)
    {
        GameObjectSphereTree _gameObjectSphereTree_ = default! /* ?GameObjectSphereTree */;
        
        return new(_gameObjectSphereTree_);
    }

    public override string ToString() => $"Octave3DScene\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_gameObjectSphereTree: [[unimplemented]]");
    }
}

/* $PrefabPreviewGenerator (3 fields) */
public record class PrefabPreviewGenerator (
    PPtr<Camera> _renderCamera,
    PPtr<RenderTexture> _renderTexture,
    PPtr<Light>[] _previewLights) : IUnityStructure
{
    public static PrefabPreviewGenerator Read(EndianBinaryReader reader)
    {
        PPtr<Camera> _renderCamera_ = PPtr<Camera>.Read(reader);
        PPtr<RenderTexture> _renderTexture_ = PPtr<RenderTexture>.Read(reader);
        PPtr<Light>[] _previewLights_ = BuiltInArray<PPtr<Light>>.Read(reader);
        
        return new(_renderCamera_,
            _renderTexture_,
            _previewLights_);
    }

    public override string ToString() => $"PrefabPreviewGenerator\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderCamera: {_renderCamera}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderTexture: {_renderTexture}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_previewLights[{_previewLights.Length}] = {{");
        if (_previewLights.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Light> _4 in _previewLights)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_previewLights.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PrefabsToCategoryDropEventHandler (2 fields) */
public record class PrefabsToCategoryDropEventHandler (
    PPtr<PrefabsToCategoryDropSettings> _prefabsDropSettings,
    PPtr<PrefabFoldersToCategoryDropSettings> _prefabFoldersDropSettings) : IUnityStructure
{
    public static PrefabsToCategoryDropEventHandler Read(EndianBinaryReader reader)
    {
        PPtr<PrefabsToCategoryDropSettings> _prefabsDropSettings_ = PPtr<PrefabsToCategoryDropSettings>.Read(reader);
        PPtr<PrefabFoldersToCategoryDropSettings> _prefabFoldersDropSettings_ = PPtr<PrefabFoldersToCategoryDropSettings>.Read(reader);
        
        return new(_prefabsDropSettings_,
            _prefabFoldersDropSettings_);
    }

    public override string ToString() => $"PrefabsToCategoryDropEventHandler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_prefabsDropSettings: {_prefabsDropSettings}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_prefabFoldersDropSettings: {_prefabFoldersDropSettings}");
    }
}

/* $PrefabsToPathTileConectionDropEventHandler (1 fields) */
public record class PrefabsToPathTileConectionDropEventHandler (
    PPtr<PrefabsToPathTileConectionButtonDropSettings> _dropSettings) : IUnityStructure
{
    public static PrefabsToPathTileConectionDropEventHandler Read(EndianBinaryReader reader)
    {
        PPtr<PrefabsToPathTileConectionButtonDropSettings> _dropSettings_ = PPtr<PrefabsToPathTileConectionButtonDropSettings>.Read(reader);
        
        return new(_dropSettings_);
    }

    public override string ToString() => $"PrefabsToPathTileConectionDropEventHandler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_dropSettings: {_dropSettings}");
    }
}

/* $ShaderPool (1 fields) */
public record class ShaderPool (
    PPtr<Shader> _gridShader) : IUnityStructure
{
    public static ShaderPool Read(EndianBinaryReader reader)
    {
        PPtr<Shader> _gridShader_ = PPtr<Shader>.Read(reader);
        
        return new(_gridShader_);
    }

    public override string ToString() => $"ShaderPool\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_gridShader: {_gridShader}");
    }
}

/* $MaterialPool (1 fields) */
public record class MaterialPool (
    PPtr<Material> _xzGridMaterial) : IUnityStructure
{
    public static MaterialPool Read(EndianBinaryReader reader)
    {
        PPtr<Material> _xzGridMaterial_ = PPtr<Material>.Read(reader);
        
        return new(_xzGridMaterial_);
    }

    public override string ToString() => $"MaterialPool\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_xzGridMaterial: {_xzGridMaterial}");
    }
}

/* $RandomizeImages (6 fields) */
public record class RandomizeImages (
    PPtr<Image> LeftTopImage,
    PPtr<Image> LeftBottomImage,
    PPtr<Image> RightBottomImage,
    PPtr<Sprite>[] LeftTopSprites,
    PPtr<Sprite>[] LeftBottomSprites,
    PPtr<Sprite>[] RightBottomSprites) : IUnityStructure
{
    public static RandomizeImages Read(EndianBinaryReader reader)
    {
        PPtr<Image> LeftTopImage_ = PPtr<Image>.Read(reader);
        PPtr<Image> LeftBottomImage_ = PPtr<Image>.Read(reader);
        PPtr<Image> RightBottomImage_ = PPtr<Image>.Read(reader);
        PPtr<Sprite>[] LeftTopSprites_ = BuiltInArray<PPtr<Sprite>>.Read(reader);
        PPtr<Sprite>[] LeftBottomSprites_ = BuiltInArray<PPtr<Sprite>>.Read(reader);
        PPtr<Sprite>[] RightBottomSprites_ = BuiltInArray<PPtr<Sprite>>.Read(reader);
        
        return new(LeftTopImage_,
            LeftBottomImage_,
            RightBottomImage_,
            LeftTopSprites_,
            LeftBottomSprites_,
            RightBottomSprites_);
    }

    public override string ToString() => $"RandomizeImages\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LeftTopImage: {LeftTopImage}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LeftBottomImage: {LeftBottomImage}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RightBottomImage: {RightBottomImage}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LeftTopSprites[{LeftTopSprites.Length}] = {{");
        if (LeftTopSprites.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Sprite> _4 in LeftTopSprites)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (LeftTopSprites.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LeftBottomSprites[{LeftBottomSprites.Length}] = {{");
        if (LeftBottomSprites.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Sprite> _4 in LeftBottomSprites)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (LeftBottomSprites.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RightBottomSprites[{RightBottomSprites.Length}] = {{");
        if (RightBottomSprites.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Sprite> _4 in RightBottomSprites)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (RightBottomSprites.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CircleArtRotation (7 fields) */
public record class CircleArtRotation (
    PPtr<RectTransform> CircleArt,
    float CircleArtDefaultScale,
    float CircleArtMoveScale,
    float CircleArtMinRotation,
    float CircleArtMaxRotation,
    float CircleArtAnimationDuration,
    float CircleArtCloseAnimationDuration) : IUnityStructure
{
    public static CircleArtRotation Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> CircleArt_ = PPtr<RectTransform>.Read(reader);
        float CircleArtDefaultScale_ = reader.ReadF32();
        float CircleArtMoveScale_ = reader.ReadF32();
        float CircleArtMinRotation_ = reader.ReadF32();
        float CircleArtMaxRotation_ = reader.ReadF32();
        float CircleArtAnimationDuration_ = reader.ReadF32();
        float CircleArtCloseAnimationDuration_ = reader.ReadF32();
        
        return new(CircleArt_,
            CircleArtDefaultScale_,
            CircleArtMoveScale_,
            CircleArtMinRotation_,
            CircleArtMaxRotation_,
            CircleArtAnimationDuration_,
            CircleArtCloseAnimationDuration_);
    }

    public override string ToString() => $"CircleArtRotation\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArt: {CircleArt}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArtDefaultScale: {CircleArtDefaultScale}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArtMoveScale: {CircleArtMoveScale}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArtMinRotation: {CircleArtMinRotation}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArtMaxRotation: {CircleArtMaxRotation}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArtAnimationDuration: {CircleArtAnimationDuration}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CircleArtCloseAnimationDuration: {CircleArtCloseAnimationDuration}");
    }
}

/* $CallbackData (3 fields) */
public record class CallbackData (
    CallbackFlags Flags,
    AsciiString FunctionName,
    PPtr<GameObject> GameObject) : IUnityStructure
{
    public static CallbackData Read(EndianBinaryReader reader)
    {
        CallbackFlags Flags_ = CallbackFlags.Read(reader);
        AsciiString FunctionName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* FunctionName */
        PPtr<GameObject> GameObject_ = PPtr<GameObject>.Read(reader);
        
        return new(Flags_,
            FunctionName_,
            GameObject_);
    }

    public override string ToString() => $"CallbackData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Flags: {{ @value: {Flags.@value} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FunctionName: \"{FunctionName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameObject: {GameObject}");
    }
}

/* $CallbackFlags (1 fields) */
public readonly record struct CallbackFlags (
    uint @value) : IUnityStructure
{
    public static CallbackFlags Read(EndianBinaryReader reader)
    {
        uint @value_ = reader.ReadU32();
        
        return new(@value_);
    }

    public override string ToString() => $"CallbackFlags\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }
}

/* $InteractionStairsSettings (20 fields) */
public record class InteractionStairsSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection,
    PPtr<WarhammerNodeLink> NodeLink) : IUnityStructure
{
    public static InteractionStairsSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        PPtr<WarhammerNodeLink> NodeLink_ = PPtr<WarhammerNodeLink>.Read(reader);
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_,
            NodeLink_);
    }

    public override string ToString() => $"InteractionStairsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NodeLink: {NodeLink}");
    }
}

/* $BodyPartCoords (4 fields) */
public record class BodyPartCoords (
    long bodyPart,
    RectInt textureRectCoords,
    ColorRGBA_1 color,
    GpuCoords gpuCoords) : IUnityStructure
{
    public static BodyPartCoords Read(EndianBinaryReader reader)
    {
        long bodyPart_ = reader.ReadS64();
        RectInt textureRectCoords_ = RectInt.Read(reader);
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        GpuCoords gpuCoords_ = GpuCoords.Read(reader);
        
        return new(bodyPart_,
            textureRectCoords_,
            color_,
            gpuCoords_);
    }

    public override string ToString() => $"BodyPartCoords\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bodyPart: {bodyPart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}textureRectCoords: {{ x: {textureRectCoords.x}, y: {textureRectCoords.y}, width: {textureRectCoords.width}, height: {textureRectCoords.height} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}gpuCoords: {{ x: {gpuCoords.x}, y: {gpuCoords.y}, z: {gpuCoords.z}, w: {gpuCoords.w} }}\n");
    }
}

/* $RectInt (4 fields) */
public readonly record struct RectInt (
    int x,
    int y,
    int width,
    int height) : IUnityStructure
{
    public static RectInt Read(EndianBinaryReader reader)
    {
        int x_ = reader.ReadS32();
        int y_ = reader.ReadS32();
        int width_ = reader.ReadS32();
        int height_ = reader.ReadS32();
        
        return new(x_,
            y_,
            width_,
            height_);
    }

    public override string ToString() => $"RectInt\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}width: {width}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}height: {height}");
    }
}

/* $GpuCoords (4 fields) */
public readonly record struct GpuCoords (
    int x,
    int y,
    int z,
    int w) : IUnityStructure
{
    public static GpuCoords Read(EndianBinaryReader reader)
    {
        int x_ = reader.ReadS32();
        int y_ = reader.ReadS32();
        int z_ = reader.ReadS32();
        int w_ = reader.ReadS32();
        
        return new(x_,
            y_,
            z_,
            w_);
    }

    public override string ToString() => $"GpuCoords\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}z: {z}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}w: {w}");
    }
}

/* $TransitionMapPart (10 fields) */
public record class TransitionMapPart (
    int Map,
    PPtr<GameObject> MapObject,
    PPtr<TransitionEntryBaseView>[] Entries,
    PPtr<WidgetListMVVM> WidgetList,
    PPtr<RectTransform> LightBeam,
    PPtr<CanvasGroup> LightBeamCanvas,
    PointOnMap[] PointsOnMap,
    byte CustomPantographMaxY,
    float CustomPantographMaxYValue,
    PPtr<OwlcatButton> Close) : IUnityStructure
{
    public static TransitionMapPart Read(EndianBinaryReader reader)
    {
        int Map_ = reader.ReadS32();
        PPtr<GameObject> MapObject_ = PPtr<GameObject>.Read(reader);
        PPtr<TransitionEntryBaseView>[] Entries_ = BuiltInArray<PPtr<TransitionEntryBaseView>>.Read(reader);
        PPtr<WidgetListMVVM> WidgetList_ = PPtr<WidgetListMVVM>.Read(reader);
        PPtr<RectTransform> LightBeam_ = PPtr<RectTransform>.Read(reader);
        PPtr<CanvasGroup> LightBeamCanvas_ = PPtr<CanvasGroup>.Read(reader);
        PointOnMap[] PointsOnMap_ = BuiltInArray<PointOnMap>.Read(reader);
        reader.AlignTo(4); /* PointsOnMap */
        byte CustomPantographMaxY_ = reader.ReadU8();
        reader.AlignTo(4); /* CustomPantographMaxY */
        float CustomPantographMaxYValue_ = reader.ReadF32();
        PPtr<OwlcatButton> Close_ = PPtr<OwlcatButton>.Read(reader);
        
        return new(Map_,
            MapObject_,
            Entries_,
            WidgetList_,
            LightBeam_,
            LightBeamCanvas_,
            PointsOnMap_,
            CustomPantographMaxY_,
            CustomPantographMaxYValue_,
            Close_);
    }

    public override string ToString() => $"TransitionMapPart\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Map: {Map}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MapObject: {MapObject}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Entries[{Entries.Length}] = {{");
        if (Entries.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<TransitionEntryBaseView> _4 in Entries)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Entries.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WidgetList: {WidgetList}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LightBeam: {LightBeam}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LightBeamCanvas: {LightBeamCanvas}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PointsOnMap[{PointsOnMap.Length}] = {{");
        if (PointsOnMap.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PointOnMap _4 in PointsOnMap)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PointsOnMap.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CustomPantographMaxY: {CustomPantographMaxY}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CustomPantographMaxYValue: {CustomPantographMaxYValue}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Close: {Close}");
    }
}

/* $PointOnMap (3 fields) */
public record class PointOnMap (
    AsciiString Comment,
    CanvasTransformSettings LightBeamPointSettings,
    PPtr<OwlcatMultiButton> PointButton) : IUnityStructure
{
    public static PointOnMap Read(EndianBinaryReader reader)
    {
        AsciiString Comment_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Comment */
        CanvasTransformSettings LightBeamPointSettings_ = CanvasTransformSettings.Read(reader);
        PPtr<OwlcatMultiButton> PointButton_ = PPtr<OwlcatMultiButton>.Read(reader);
        
        return new(Comment_,
            LightBeamPointSettings_,
            PointButton_);
    }

    public override string ToString() => $"PointOnMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Comment: \"{Comment}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LightBeamPointSettings: {{ \n{LightBeamPointSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PointButton: {PointButton}");
    }
}

/* $ObjectPlacementBlockManualConstructionRenderSettingsView (6 fields) */
public record class ObjectPlacementBlockManualConstructionRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementBlockManualConstructionRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementBlockManualConstructionRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $PlatformAdvancedSettings_1 (23 fields) */
public record class PlatformAdvancedSettings_1 (
    uint m_IOMemorySize,
    float m_TargetAutoStreamBufferLengthMs,
    bool m_UseStreamCache,
    uint m_MaximumPinnedBytesInCache,
    bool m_EnableGameSyncPreparation,
    uint m_ContinuousPlaybackLookAhead,
    uint m_MonitorQueuePoolSize,
    uint m_MaximumHardwareTimeoutMs,
    bool m_DebugOutOfRangeCheckEnabled,
    float m_DebugOutOfRangeLimit,
    bool m_SuspendAudioDuringFocusLoss,
    bool m_RenderDuringFocusLoss,
    AsciiString m_SoundBankPersistentDataPath,
    bool m_UseAsyncOpen,
    uint m_MemoryAllocationSizeLimit,
    uint m_MemoryDebugLevel,
    int m_MemorySpanCount,
    ushort MaximumNumberOfXMAVoices,
    bool UseHardwareCodecLowLatencyMode,
    ushort MaximumNumberOfOpusVoices,
    uint APUHeapCachedSize,
    uint APUHeapNonCachedSize,
    uint MaxSystemAudioObjects) : IUnityStructure
{
    public static PlatformAdvancedSettings_1 Read(EndianBinaryReader reader)
    {
        uint m_IOMemorySize_ = reader.ReadU32();
        float m_TargetAutoStreamBufferLengthMs_ = reader.ReadF32();
        bool m_UseStreamCache_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseStreamCache */
        uint m_MaximumPinnedBytesInCache_ = reader.ReadU32();
        bool m_EnableGameSyncPreparation_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableGameSyncPreparation */
        uint m_ContinuousPlaybackLookAhead_ = reader.ReadU32();
        uint m_MonitorQueuePoolSize_ = reader.ReadU32();
        uint m_MaximumHardwareTimeoutMs_ = reader.ReadU32();
        bool m_DebugOutOfRangeCheckEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* m_DebugOutOfRangeCheckEnabled */
        float m_DebugOutOfRangeLimit_ = reader.ReadF32();
        bool m_SuspendAudioDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_SuspendAudioDuringFocusLoss */
        bool m_RenderDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_RenderDuringFocusLoss */
        AsciiString m_SoundBankPersistentDataPath_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_SoundBankPersistentDataPath */
        bool m_UseAsyncOpen_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseAsyncOpen */
        uint m_MemoryAllocationSizeLimit_ = reader.ReadU32();
        uint m_MemoryDebugLevel_ = reader.ReadU32();
        int m_MemorySpanCount_ = reader.ReadS32();
        ushort MaximumNumberOfXMAVoices_ = reader.ReadU16();
        reader.AlignTo(4); /* MaximumNumberOfXMAVoices */
        bool UseHardwareCodecLowLatencyMode_ = reader.ReadBool();
        reader.AlignTo(4); /* UseHardwareCodecLowLatencyMode */
        ushort MaximumNumberOfOpusVoices_ = reader.ReadU16();
        reader.AlignTo(4); /* MaximumNumberOfOpusVoices */
        uint APUHeapCachedSize_ = reader.ReadU32();
        uint APUHeapNonCachedSize_ = reader.ReadU32();
        uint MaxSystemAudioObjects_ = reader.ReadU32();
        
        return new(m_IOMemorySize_,
            m_TargetAutoStreamBufferLengthMs_,
            m_UseStreamCache_,
            m_MaximumPinnedBytesInCache_,
            m_EnableGameSyncPreparation_,
            m_ContinuousPlaybackLookAhead_,
            m_MonitorQueuePoolSize_,
            m_MaximumHardwareTimeoutMs_,
            m_DebugOutOfRangeCheckEnabled_,
            m_DebugOutOfRangeLimit_,
            m_SuspendAudioDuringFocusLoss_,
            m_RenderDuringFocusLoss_,
            m_SoundBankPersistentDataPath_,
            m_UseAsyncOpen_,
            m_MemoryAllocationSizeLimit_,
            m_MemoryDebugLevel_,
            m_MemorySpanCount_,
            MaximumNumberOfXMAVoices_,
            UseHardwareCodecLowLatencyMode_,
            MaximumNumberOfOpusVoices_,
            APUHeapCachedSize_,
            APUHeapNonCachedSize_,
            MaxSystemAudioObjects_);
    }

    public override string ToString() => $"PlatformAdvancedSettings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IOMemorySize: {m_IOMemorySize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetAutoStreamBufferLengthMs: {m_TargetAutoStreamBufferLengthMs}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseStreamCache: {m_UseStreamCache}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumPinnedBytesInCache: {m_MaximumPinnedBytesInCache}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableGameSyncPreparation: {m_EnableGameSyncPreparation}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ContinuousPlaybackLookAhead: {m_ContinuousPlaybackLookAhead}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MonitorQueuePoolSize: {m_MonitorQueuePoolSize}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumHardwareTimeoutMs: {m_MaximumHardwareTimeoutMs}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeCheckEnabled: {m_DebugOutOfRangeCheckEnabled}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeLimit: {m_DebugOutOfRangeLimit}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SuspendAudioDuringFocusLoss: {m_SuspendAudioDuringFocusLoss}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RenderDuringFocusLoss: {m_RenderDuringFocusLoss}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SoundBankPersistentDataPath: \"{m_SoundBankPersistentDataPath}\"");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseAsyncOpen: {m_UseAsyncOpen}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryAllocationSizeLimit: {m_MemoryAllocationSizeLimit}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryDebugLevel: {m_MemoryDebugLevel}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemorySpanCount: {m_MemorySpanCount}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaximumNumberOfXMAVoices: {MaximumNumberOfXMAVoices}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseHardwareCodecLowLatencyMode: {UseHardwareCodecLowLatencyMode}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaximumNumberOfOpusVoices: {MaximumNumberOfOpusVoices}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}APUHeapCachedSize: {APUHeapCachedSize}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}APUHeapNonCachedSize: {APUHeapNonCachedSize}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxSystemAudioObjects: {MaxSystemAudioObjects}");
    }
}

/* $UnitBinding (3 fields) */
public record class UnitBinding (
    AsciiString Name,
    UnitViewLink PreviewPrefab,
    PPtr<UnitSpawnerBase> DefaultSpawner) : IUnityStructure
{
    public static UnitBinding Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        UnitViewLink PreviewPrefab_ = UnitViewLink.Read(reader);
        reader.AlignTo(4); /* PreviewPrefab */
        PPtr<UnitSpawnerBase> DefaultSpawner_ = PPtr<UnitSpawnerBase>.Read(reader);
        
        return new(Name_,
            PreviewPrefab_,
            DefaultSpawner_);
    }

    public override string ToString() => $"UnitBinding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PreviewPrefab: {{ \n{PreviewPrefab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DefaultSpawner: {DefaultSpawner}");
    }
}

/* $TrackBinding (3 fields) */
public record class TrackBinding (
    AsciiString TrackName,
    AsciiString UnitName,
    int Type) : IUnityStructure
{
    public static TrackBinding Read(EndianBinaryReader reader)
    {
        AsciiString TrackName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* TrackName */
        AsciiString UnitName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* UnitName */
        int Type_ = reader.ReadS32();
        
        return new(TrackName_,
            UnitName_,
            Type_);
    }

    public override string ToString() => $"TrackBinding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TrackName: \"{TrackName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnitName: \"{UnitName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }
}

/* $TextureParameter (3 fields) */
public record class TextureParameter (
    byte m_OverrideState,
    PPtr<Texture> m_Value,
    int dimension) : IUnityStructure
{
    public static TextureParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        PPtr<Texture> m_Value_ = PPtr<Texture>.Read(reader);
        int dimension_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_,
            dimension_);
    }

    public override string ToString() => $"TextureParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}dimension: {dimension}");
    }
}

/* $EventKeyValue (2 fields) */
public record class EventKeyValue (
    PPtr<SignalAsset>[] m_Signals,
    UnityEvent[] m_Events) : IUnityStructure
{
    public static EventKeyValue Read(EndianBinaryReader reader)
    {
        PPtr<SignalAsset>[] m_Signals_ = BuiltInArray<PPtr<SignalAsset>>.Read(reader);
        UnityEvent[] m_Events_ = BuiltInArray<UnityEvent>.Read(reader);
        reader.AlignTo(4); /* m_Events */
        
        return new(m_Signals_,
            m_Events_);
    }

    public override string ToString() => $"EventKeyValue\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Signals[{m_Signals.Length}] = {{");
        if (m_Signals.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<SignalAsset> _4 in m_Signals)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Signals.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Events[{m_Events.Length}] = {{");
        if (m_Events.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (UnityEvent _4 in m_Events)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Events.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ObjectSelectionBoxCornerEdgesRenderModeSettings (2 fields) */
public record class ObjectSelectionBoxCornerEdgesRenderModeSettings (
    float _cornerEdgeLengthPercentage,
    ObjectSelectionBoxCornerEdgesRenderModeSettingsView _view) : IUnityStructure
{
    public static ObjectSelectionBoxCornerEdgesRenderModeSettings Read(EndianBinaryReader reader)
    {
        float _cornerEdgeLengthPercentage_ = reader.ReadF32();
        ObjectSelectionBoxCornerEdgesRenderModeSettingsView _view_ = ObjectSelectionBoxCornerEdgesRenderModeSettingsView.Read(reader);
        reader.AlignTo(4); /* _view */
        
        return new(_cornerEdgeLengthPercentage_,
            _view_);
    }

    public override string ToString() => $"ObjectSelectionBoxCornerEdgesRenderModeSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_cornerEdgeLengthPercentage: {_cornerEdgeLengthPercentage}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_view: {{ \n{_view.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectSelectionBoxCornerEdgesRenderModeSettingsView (6 fields) */
public record class ObjectSelectionBoxCornerEdgesRenderModeSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSelectionBoxCornerEdgesRenderModeSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSelectionBoxCornerEdgesRenderModeSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectSelectionBoxRenderModeSettingsView (6 fields) */
public record class ObjectSelectionBoxRenderModeSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSelectionBoxRenderModeSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSelectionBoxRenderModeSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ScreenUnit_1 (12 fields) */
public record class ScreenUnit_1 (
    PPtr<CanvasGroup> CanvasGroup,
    float InTime,
    float DelayTime,
    float OutTime,
    int Ease,
    PPtr<VideoPlayerHelper> VideoPlayer,
    AsciiString AKSoundEvent,
    uint SoundId,
    byte FirstLaunchAnotherSoundEvent,
    AsciiString AKFirstLaunchSoundEvent,
    uint FirstLaunchSoundId,
    byte HideInFirstLaunch) : IUnityStructure
{
    public static ScreenUnit_1 Read(EndianBinaryReader reader)
    {
        PPtr<CanvasGroup> CanvasGroup_ = PPtr<CanvasGroup>.Read(reader);
        float InTime_ = reader.ReadF32();
        float DelayTime_ = reader.ReadF32();
        float OutTime_ = reader.ReadF32();
        int Ease_ = reader.ReadS32();
        PPtr<VideoPlayerHelper> VideoPlayer_ = PPtr<VideoPlayerHelper>.Read(reader);
        AsciiString AKSoundEvent_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AKSoundEvent */
        uint SoundId_ = reader.ReadU32();
        byte FirstLaunchAnotherSoundEvent_ = reader.ReadU8();
        reader.AlignTo(4); /* FirstLaunchAnotherSoundEvent */
        AsciiString AKFirstLaunchSoundEvent_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AKFirstLaunchSoundEvent */
        uint FirstLaunchSoundId_ = reader.ReadU32();
        byte HideInFirstLaunch_ = reader.ReadU8();
        reader.AlignTo(4); /* HideInFirstLaunch */
        
        return new(CanvasGroup_,
            InTime_,
            DelayTime_,
            OutTime_,
            Ease_,
            VideoPlayer_,
            AKSoundEvent_,
            SoundId_,
            FirstLaunchAnotherSoundEvent_,
            AKFirstLaunchSoundEvent_,
            FirstLaunchSoundId_,
            HideInFirstLaunch_);
    }

    public override string ToString() => $"ScreenUnit_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CanvasGroup: {CanvasGroup}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InTime: {InTime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DelayTime: {DelayTime}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OutTime: {OutTime}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Ease: {Ease}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VideoPlayer: {VideoPlayer}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AKSoundEvent: \"{AKSoundEvent}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SoundId: {SoundId}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FirstLaunchAnotherSoundEvent: {FirstLaunchAnotherSoundEvent}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AKFirstLaunchSoundEvent: \"{AKFirstLaunchSoundEvent}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FirstLaunchSoundId: {FirstLaunchSoundId}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HideInFirstLaunch: {HideInFirstLaunch}");
    }
}

/* $managedReference (1 fields) */
public readonly record struct managedReference (
    long rid) : IUnityStructure
{
    public static managedReference Read(EndianBinaryReader reader)
    {
        long rid_ = reader.ReadS64();
        
        return new(rid_);
    }

    public override string ToString() => $"managedReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rid: {rid}");
    }
}

/* $ListItems (2 fields) */
public record class ListItems (
    PPtr<GameObject> itemGo,
    float itemFloat) : IUnityStructure
{
    public static ListItems Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> itemGo_ = PPtr<GameObject>.Read(reader);
        float itemFloat_ = reader.ReadF32();
        
        return new(itemGo_,
            itemFloat_);
    }

    public override string ToString() => $"ListItems\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemGo: {itemGo}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemFloat: {itemFloat}");
    }
}

/* $ListOriginalMeshes (2 fields) */
public record class ListOriginalMeshes (
    PPtr<MeshFilter> itemMeshFilter,
    PPtr<Mesh> itemMesh) : IUnityStructure
{
    public static ListOriginalMeshes Read(EndianBinaryReader reader)
    {
        PPtr<MeshFilter> itemMeshFilter_ = PPtr<MeshFilter>.Read(reader);
        PPtr<Mesh> itemMesh_ = PPtr<Mesh>.Read(reader);
        
        return new(itemMeshFilter_,
            itemMesh_);
    }

    public override string ToString() => $"ListOriginalMeshes\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemMeshFilter: {itemMeshFilter}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemMesh: {itemMesh}");
    }
}

/* $ListMeshes (2 fields) */
public record class ListMeshes (
    PPtr<MeshFilter> itemMeshFilter,
    PPtr<Mesh> itemMesh) : IUnityStructure
{
    public static ListMeshes Read(EndianBinaryReader reader)
    {
        PPtr<MeshFilter> itemMeshFilter_ = PPtr<MeshFilter>.Read(reader);
        PPtr<Mesh> itemMesh_ = PPtr<Mesh>.Read(reader);
        
        return new(itemMeshFilter_,
            itemMesh_);
    }

    public override string ToString() => $"ListMeshes\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemMeshFilter: {itemMeshFilter}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}itemMesh: {itemMesh}");
    }
}

/* $ObjectScaleRandomizationSettingsView (6 fields) */
public record class ObjectScaleRandomizationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectScaleRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectScaleRandomizationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $OvertipTorpedoHealthPoint (3 fields) */
public record class OvertipTorpedoHealthPoint (
    PPtr<GameObject> GameObject,
    PPtr<Image> Image,
    PPtr<Image> DamageImage) : IUnityStructure
{
    public static OvertipTorpedoHealthPoint Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> GameObject_ = PPtr<GameObject>.Read(reader);
        PPtr<Image> Image_ = PPtr<Image>.Read(reader);
        PPtr<Image> DamageImage_ = PPtr<Image>.Read(reader);
        
        return new(GameObject_,
            Image_,
            DamageImage_);
    }

    public override string ToString() => $"OvertipTorpedoHealthPoint\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameObject: {GameObject}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Image: {Image}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DamageImage: {DamageImage}");
    }
}

/* $TonemappingModeParameter (2 fields) */
public readonly record struct TonemappingModeParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static TonemappingModeParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"TonemappingModeParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $FogSettings (5 fields) */
public record class FogSettings (
    byte Enabled,
    AnimationCurve FogIntensityOverRootIntensity,
    ColorRGBA_1 Color,
    float StartDistance,
    float EndDistance) : IUnityStructure
{
    public static FogSettings Read(EndianBinaryReader reader)
    {
        byte Enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* Enabled */
        AnimationCurve FogIntensityOverRootIntensity_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* FogIntensityOverRootIntensity */
        ColorRGBA_1 Color_ = ColorRGBA_1.Read(reader);
        float StartDistance_ = reader.ReadF32();
        float EndDistance_ = reader.ReadF32();
        
        return new(Enabled_,
            FogIntensityOverRootIntensity_,
            Color_,
            StartDistance_,
            EndDistance_);
    }

    public override string ToString() => $"FogSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FogIntensityOverRootIntensity: {{ \n{FogIntensityOverRootIntensity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ r: {Color.r}, g: {Color.g}, b: {Color.b}, a: {Color.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StartDistance: {StartDistance}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EndDistance: {EndDistance}");
    }
}

/* $DecalSettings (2 fields) */
public record class DecalSettings (
    PPtr<GameObject> DecalPrefab,
    AnimationCurve AlphaOverIntensity) : IUnityStructure
{
    public static DecalSettings Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> DecalPrefab_ = PPtr<GameObject>.Read(reader);
        AnimationCurve AlphaOverIntensity_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* AlphaOverIntensity */
        
        return new(DecalPrefab_,
            AlphaOverIntensity_);
    }

    public override string ToString() => $"DecalSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DecalPrefab: {DecalPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlphaOverIntensity: {{ \n{AlphaOverIntensity.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PostProcessVolumeSettings (4 fields) */
public record class PostProcessVolumeSettings (
    AnimationCurve WeightOverLayerIntensity,
    float Priority,
    PPtr<VolumeProfile> Profile,
    int VolumeLayer) : IUnityStructure
{
    public static PostProcessVolumeSettings Read(EndianBinaryReader reader)
    {
        AnimationCurve WeightOverLayerIntensity_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* WeightOverLayerIntensity */
        float Priority_ = reader.ReadF32();
        PPtr<VolumeProfile> Profile_ = PPtr<VolumeProfile>.Read(reader);
        int VolumeLayer_ = reader.ReadS32();
        
        return new(WeightOverLayerIntensity_,
            Priority_,
            Profile_,
            VolumeLayer_);
    }

    public override string ToString() => $"PostProcessVolumeSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeightOverLayerIntensity: {{ \n{WeightOverLayerIntensity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Priority: {Priority}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Profile: {Profile}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeLayer: {VolumeLayer}");
    }
}

/* $WeatherEffect (8 fields) */
public record class WeatherEffect (
    AsciiString Name,
    AnimationCurve EffectIntensityOverLayerIntensity,
    int PositioningMode,
    float DistanceFromCamera,
    byte SnapToGround,
    BitField SnapRaycastMask,
    byte UseBakedLocationData,
    PPtr<GameObject> VisualEffectPrefab) : IUnityStructure
{
    public static WeatherEffect Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        AnimationCurve EffectIntensityOverLayerIntensity_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* EffectIntensityOverLayerIntensity */
        int PositioningMode_ = reader.ReadS32();
        float DistanceFromCamera_ = reader.ReadF32();
        byte SnapToGround_ = reader.ReadU8();
        reader.AlignTo(4); /* SnapToGround */
        BitField SnapRaycastMask_ = BitField.Read(reader);
        byte UseBakedLocationData_ = reader.ReadU8();
        reader.AlignTo(4); /* UseBakedLocationData */
        PPtr<GameObject> VisualEffectPrefab_ = PPtr<GameObject>.Read(reader);
        
        return new(Name_,
            EffectIntensityOverLayerIntensity_,
            PositioningMode_,
            DistanceFromCamera_,
            SnapToGround_,
            SnapRaycastMask_,
            UseBakedLocationData_,
            VisualEffectPrefab_);
    }

    public override string ToString() => $"WeatherEffect\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectIntensityOverLayerIntensity: {{ \n{EffectIntensityOverLayerIntensity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PositioningMode: {PositioningMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DistanceFromCamera: {DistanceFromCamera}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SnapToGround: {SnapToGround}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SnapRaycastMask: {{ m_Bits: {SnapRaycastMask.m_Bits} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseBakedLocationData: {UseBakedLocationData}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VisualEffectPrefab: {VisualEffectPrefab}");
    }
}

/* $UnitCustomizationPresetReference (1 fields) */
public record class UnitCustomizationPresetReference (
    AsciiString guid) : IUnityStructure
{
    public static UnitCustomizationPresetReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"UnitCustomizationPresetReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintUnitAsksListReference (1 fields) */
public record class BlueprintUnitAsksListReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintUnitAsksListReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintUnitAsksListReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $DetailInstanceData (5 fields) */
public record class DetailInstanceData (
    Vector3f Position,
    Vector3f TintColor,
    Vector4f Shadowmask,
    float Scale,
    float Rotation) : IUnityStructure
{
    public static DetailInstanceData Read(EndianBinaryReader reader)
    {
        Vector3f Position_ = Vector3f.Read(reader);
        Vector3f TintColor_ = Vector3f.Read(reader);
        Vector4f Shadowmask_ = Vector4f.Read(reader);
        float Scale_ = reader.ReadF32();
        float Rotation_ = reader.ReadF32();
        
        return new(Position_,
            TintColor_,
            Shadowmask_,
            Scale_,
            Rotation_);
    }

    public override string ToString() => $"DetailInstanceData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Position: {{ x: {Position.x}, y: {Position.y}, z: {Position.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TintColor: {{ x: {TintColor.x}, y: {TintColor.y}, z: {TintColor.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Shadowmask: {{ x: {Shadowmask.x}, y: {Shadowmask.y}, z: {Shadowmask.z}, w: {Shadowmask.w} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Rotation: {Rotation}");
    }
}

/* $BlueprintLogicConnectorReference (1 fields) */
public record class BlueprintLogicConnectorReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintLogicConnectorReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintLogicConnectorReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $MovePart (4 fields) */
public record class MovePart (
    float AppearPosition,
    float DisappearPosition,
    float AnimationTime,
    AnimationCurve Curve) : IUnityStructure
{
    public static MovePart Read(EndianBinaryReader reader)
    {
        float AppearPosition_ = reader.ReadF32();
        float DisappearPosition_ = reader.ReadF32();
        float AnimationTime_ = reader.ReadF32();
        AnimationCurve Curve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* Curve */
        
        return new(AppearPosition_,
            DisappearPosition_,
            AnimationTime_,
            Curve_);
    }

    public override string ToString() => $"MovePart\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AppearPosition: {AppearPosition}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisappearPosition: {DisappearPosition}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AnimationTime: {AnimationTime}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Curve: {{ \n{Curve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $LocalMapMarkerSettings (4 fields) */
public record class LocalMapMarkerSettings (
    int Type,
    PPtr<SharedStringAsset> Description,
    BlueprintUnitReference m_DescriptionUnit,
    byte StartHidden) : IUnityStructure
{
    public static LocalMapMarkerSettings Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<SharedStringAsset> Description_ = PPtr<SharedStringAsset>.Read(reader);
        BlueprintUnitReference m_DescriptionUnit_ = BlueprintUnitReference.Read(reader);
        reader.AlignTo(4); /* m_DescriptionUnit */
        byte StartHidden_ = reader.ReadU8();
        reader.AlignTo(4); /* StartHidden */
        
        return new(Type_,
            Description_,
            m_DescriptionUnit_,
            StartHidden_);
    }

    public override string ToString() => $"LocalMapMarkerSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Description: {Description}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DescriptionUnit: {{ \n{m_DescriptionUnit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StartHidden: {StartHidden}");
    }
}

/* $FxBone (7 fields) */
public record class FxBone (
    AsciiString Name,
    AsciiString[] Aliases,
    float ParticleSize,
    Vector3f LocalOffset,
    byte Rotate,
    float CameraOffset,
    int Flags) : IUnityStructure
{
    public static FxBone Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        AsciiString[] Aliases_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* Aliases */
        float ParticleSize_ = reader.ReadF32();
        Vector3f LocalOffset_ = Vector3f.Read(reader);
        byte Rotate_ = reader.ReadU8();
        reader.AlignTo(4); /* Rotate */
        float CameraOffset_ = reader.ReadF32();
        int Flags_ = reader.ReadS32();
        
        return new(Name_,
            Aliases_,
            ParticleSize_,
            LocalOffset_,
            Rotate_,
            CameraOffset_,
            Flags_);
    }

    public override string ToString() => $"FxBone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Aliases[{Aliases.Length}] = {{");
        if (Aliases.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in Aliases)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (Aliases.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSize: {ParticleSize}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LocalOffset: {{ x: {LocalOffset.x}, y: {LocalOffset.y}, z: {LocalOffset.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Rotate: {Rotate}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraOffset: {CameraOffset}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Flags: {Flags}");
    }
}

/* $TrailBonesPair (2 fields) */
public record class TrailBonesPair (
    FxBone Start,
    FxBone End) : IUnityStructure
{
    public static TrailBonesPair Read(EndianBinaryReader reader)
    {
        FxBone Start_ = FxBone.Read(reader);
        reader.AlignTo(4); /* Start */
        FxBone End_ = FxBone.Read(reader);
        reader.AlignTo(4); /* End */
        
        return new(Start_,
            End_);
    }

    public override string ToString() => $"TrailBonesPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Start: {{ \n{Start.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}End: {{ \n{End.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StencilRefParameter (2 fields) */
public readonly record struct StencilRefParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static StencilRefParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"StencilRefParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $CullStateChangedEvent_1 (1 fields) */
public record class CullStateChangedEvent_1 (
    PersistentCallGroup_1 m_PersistentCalls) : IUnityStructure
{
    public static CullStateChangedEvent_1 Read(EndianBinaryReader reader)
    {
        PersistentCallGroup_1 m_PersistentCalls_ = PersistentCallGroup_1.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"CullStateChangedEvent_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $FontData (12 fields) */
public record class FontData (
    PPtr<Font> m_Font,
    int m_FontSize,
    int m_FontStyle,
    bool m_BestFit,
    int m_MinSize,
    int m_MaxSize,
    int m_Alignment,
    bool m_AlignByGeometry,
    bool m_RichText,
    int m_HorizontalOverflow,
    int m_VerticalOverflow,
    float m_LineSpacing) : IUnityStructure
{
    public static FontData Read(EndianBinaryReader reader)
    {
        PPtr<Font> m_Font_ = PPtr<Font>.Read(reader);
        int m_FontSize_ = reader.ReadS32();
        int m_FontStyle_ = reader.ReadS32();
        bool m_BestFit_ = reader.ReadBool();
        reader.AlignTo(4); /* m_BestFit */
        int m_MinSize_ = reader.ReadS32();
        int m_MaxSize_ = reader.ReadS32();
        int m_Alignment_ = reader.ReadS32();
        bool m_AlignByGeometry_ = reader.ReadBool();
        reader.AlignTo(4); /* m_AlignByGeometry */
        bool m_RichText_ = reader.ReadBool();
        reader.AlignTo(4); /* m_RichText */
        int m_HorizontalOverflow_ = reader.ReadS32();
        int m_VerticalOverflow_ = reader.ReadS32();
        float m_LineSpacing_ = reader.ReadF32();
        
        return new(m_Font_,
            m_FontSize_,
            m_FontStyle_,
            m_BestFit_,
            m_MinSize_,
            m_MaxSize_,
            m_Alignment_,
            m_AlignByGeometry_,
            m_RichText_,
            m_HorizontalOverflow_,
            m_VerticalOverflow_,
            m_LineSpacing_);
    }

    public override string ToString() => $"FontData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Font: {m_Font}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FontSize: {m_FontSize}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FontStyle: {m_FontStyle}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_BestFit: {m_BestFit}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MinSize: {m_MinSize}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaxSize: {m_MaxSize}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Alignment: {m_Alignment}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AlignByGeometry: {m_AlignByGeometry}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RichText: {m_RichText}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HorizontalOverflow: {m_HorizontalOverflow}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_VerticalOverflow: {m_VerticalOverflow}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_LineSpacing: {m_LineSpacing}");
    }
}

/* $CustomAxisRotationRandomizationSettingsView (6 fields) */
public record class CustomAxisRotationRandomizationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static CustomAxisRotationRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"CustomAxisRotationRandomizationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectMouseMoveAlongDirectionSettingsView (6 fields) */
public record class ObjectMouseMoveAlongDirectionSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectMouseMoveAlongDirectionSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectMouseMoveAlongDirectionSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $TweenData (9 fields) */
public record class TweenData (
    float RubberBandPosition,
    float RubberBandRotation,
    float AnimationTime,
    byte UseEasing,
    byte SeparateCurves,
    PPtr<VectorSpline> PositionTrack,
    AnimationCurve PositionCurve,
    PPtr<VectorSpline> LootAtTrack,
    AnimationCurve LookAtCurve) : IUnityStructure
{
    public static TweenData Read(EndianBinaryReader reader)
    {
        float RubberBandPosition_ = reader.ReadF32();
        float RubberBandRotation_ = reader.ReadF32();
        float AnimationTime_ = reader.ReadF32();
        byte UseEasing_ = reader.ReadU8();
        reader.AlignTo(4); /* UseEasing */
        byte SeparateCurves_ = reader.ReadU8();
        reader.AlignTo(4); /* SeparateCurves */
        PPtr<VectorSpline> PositionTrack_ = PPtr<VectorSpline>.Read(reader);
        AnimationCurve PositionCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* PositionCurve */
        PPtr<VectorSpline> LootAtTrack_ = PPtr<VectorSpline>.Read(reader);
        AnimationCurve LookAtCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LookAtCurve */
        
        return new(RubberBandPosition_,
            RubberBandRotation_,
            AnimationTime_,
            UseEasing_,
            SeparateCurves_,
            PositionTrack_,
            PositionCurve_,
            LootAtTrack_,
            LookAtCurve_);
    }

    public override string ToString() => $"TweenData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RubberBandPosition: {RubberBandPosition}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RubberBandRotation: {RubberBandRotation}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AnimationTime: {AnimationTime}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseEasing: {UseEasing}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SeparateCurves: {SeparateCurves}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PositionTrack: {PositionTrack}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PositionCurve: {{ \n{PositionCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LootAtTrack: {LootAtTrack}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LookAtCurve: {{ \n{LookAtCurve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TweenDataWithPrev (10 fields) */
public record class TweenDataWithPrev (
    float RubberBandPosition,
    float RubberBandRotation,
    float AnimationTime,
    byte UseEasing,
    byte SeparateCurves,
    PPtr<VectorSpline> PositionTrack,
    AnimationCurve PositionCurve,
    PPtr<VectorSpline> LootAtTrack,
    AnimationCurve LookAtCurve,
    PPtr<CameraTweenAnchor> PreviousAnchor) : IUnityStructure
{
    public static TweenDataWithPrev Read(EndianBinaryReader reader)
    {
        float RubberBandPosition_ = reader.ReadF32();
        float RubberBandRotation_ = reader.ReadF32();
        float AnimationTime_ = reader.ReadF32();
        byte UseEasing_ = reader.ReadU8();
        reader.AlignTo(4); /* UseEasing */
        byte SeparateCurves_ = reader.ReadU8();
        reader.AlignTo(4); /* SeparateCurves */
        PPtr<VectorSpline> PositionTrack_ = PPtr<VectorSpline>.Read(reader);
        AnimationCurve PositionCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* PositionCurve */
        PPtr<VectorSpline> LootAtTrack_ = PPtr<VectorSpline>.Read(reader);
        AnimationCurve LookAtCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* LookAtCurve */
        PPtr<CameraTweenAnchor> PreviousAnchor_ = PPtr<CameraTweenAnchor>.Read(reader);
        
        return new(RubberBandPosition_,
            RubberBandRotation_,
            AnimationTime_,
            UseEasing_,
            SeparateCurves_,
            PositionTrack_,
            PositionCurve_,
            LootAtTrack_,
            LookAtCurve_,
            PreviousAnchor_);
    }

    public override string ToString() => $"TweenDataWithPrev\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RubberBandPosition: {RubberBandPosition}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RubberBandRotation: {RubberBandRotation}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AnimationTime: {AnimationTime}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseEasing: {UseEasing}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SeparateCurves: {SeparateCurves}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PositionTrack: {PositionTrack}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PositionCurve: {{ \n{PositionCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LootAtTrack: {LootAtTrack}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LookAtCurve: {{ \n{LookAtCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PreviousAnchor: {PreviousAnchor}");
    }
}

/* $ObjectSelectionPrefabCreationSettingsView (6 fields) */
public record class ObjectSelectionPrefabCreationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSelectionPrefabCreationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSelectionPrefabCreationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $AnimationContainer (2 fields) */
public record class AnimationContainer (
    PPtr<AnimationClipWrapper> DeathAnimation,
    PPtr<AnimationClipWrapper> LyingAnimation) : IUnityStructure
{
    public static AnimationContainer Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> DeathAnimation_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> LyingAnimation_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(DeathAnimation_,
            LyingAnimation_);
    }

    public override string ToString() => $"AnimationContainer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DeathAnimation: {DeathAnimation}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LyingAnimation: {LyingAnimation}");
    }
}

/* $WeaponStyleSettings (2 fields) */
public record class WeaponStyleSettings (
    float Distance,
    PPtr<AnimationClipWrapper> Clip) : IUnityStructure
{
    public static WeaponStyleSettings Read(EndianBinaryReader reader)
    {
        float Distance_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> Clip_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Distance_,
            Clip_);
    }

    public override string ToString() => $"WeaponStyleSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Distance: {Distance}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Clip: {Clip}");
    }
}

/* $ClipSetByHeight (5 fields) */
public record class ClipSetByHeight (
    float TraverseHeight,
    ClipSet m_UpAnimationsSet,
    ClipSet m_DownAnimationsSet,
    float m_DownVerticalInDistance,
    float m_UpVerticalOutDistance) : IUnityStructure
{
    public static ClipSetByHeight Read(EndianBinaryReader reader)
    {
        float TraverseHeight_ = reader.ReadF32();
        ClipSet m_UpAnimationsSet_ = ClipSet.Read(reader);
        ClipSet m_DownAnimationsSet_ = ClipSet.Read(reader);
        float m_DownVerticalInDistance_ = reader.ReadF32();
        float m_UpVerticalOutDistance_ = reader.ReadF32();
        
        return new(TraverseHeight_,
            m_UpAnimationsSet_,
            m_DownAnimationsSet_,
            m_DownVerticalInDistance_,
            m_UpVerticalOutDistance_);
    }

    public override string ToString() => $"ClipSetByHeight\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TraverseHeight: {TraverseHeight}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_UpAnimationsSet: {{ \n{m_UpAnimationsSet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DownAnimationsSet: {{ \n{m_DownAnimationsSet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DownVerticalInDistance: {m_DownVerticalInDistance}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UpVerticalOutDistance: {m_UpVerticalOutDistance}");
    }
}

/* $ClipSet (6 fields) */
public record class ClipSet (
    PPtr<AnimationClipWrapper> m_TraverseInHorizontal,
    PPtr<AnimationClipWrapper> m_TraverseInVertical,
    PPtr<AnimationClipWrapper> m_Traverse,
    PPtr<AnimationClipWrapper> m_TraverseOutVertical,
    PPtr<AnimationClipWrapper> m_TraverseOutHorizontal,
    float VerticalSpeed) : IUnityStructure
{
    public static ClipSet Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> m_TraverseInHorizontal_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_TraverseInVertical_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_Traverse_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_TraverseOutVertical_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_TraverseOutHorizontal_ = PPtr<AnimationClipWrapper>.Read(reader);
        float VerticalSpeed_ = reader.ReadF32();
        
        return new(m_TraverseInHorizontal_,
            m_TraverseInVertical_,
            m_Traverse_,
            m_TraverseOutVertical_,
            m_TraverseOutHorizontal_,
            VerticalSpeed_);
    }

    public override string ToString() => $"ClipSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TraverseInHorizontal: {m_TraverseInHorizontal}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TraverseInVertical: {m_TraverseInVertical}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Traverse: {m_Traverse}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TraverseOutVertical: {m_TraverseOutVertical}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TraverseOutHorizontal: {m_TraverseOutHorizontal}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VerticalSpeed: {VerticalSpeed}");
    }
}

/* $PregenCharacterNameList (4 fields) */
public record class PregenCharacterNameList (
    int Race,
    int Gender,
    int CharGenMode,
    LocalizedString NameList) : IUnityStructure
{
    public static PregenCharacterNameList Read(EndianBinaryReader reader)
    {
        int Race_ = reader.ReadS32();
        int Gender_ = reader.ReadS32();
        int CharGenMode_ = reader.ReadS32();
        LocalizedString NameList_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NameList */
        
        return new(Race_,
            Gender_,
            CharGenMode_,
            NameList_);
    }

    public override string ToString() => $"PregenCharacterNameList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Race: {Race}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Gender: {Gender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CharGenMode: {CharGenMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NameList: {{ \n{NameList.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CareerPathRoundProgressionConfig (3 fields) */
public readonly record struct CareerPathRoundProgressionConfig (
    int Tier,
    int ItemsRadius,
    int ProgressBarSize) : IUnityStructure
{
    public static CareerPathRoundProgressionConfig Read(EndianBinaryReader reader)
    {
        int Tier_ = reader.ReadS32();
        int ItemsRadius_ = reader.ReadS32();
        int ProgressBarSize_ = reader.ReadS32();
        
        return new(Tier_,
            ItemsRadius_,
            ProgressBarSize_);
    }

    public override string ToString() => $"CareerPathRoundProgressionConfig\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Tier: {Tier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ItemsRadius: {ItemsRadius}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProgressBarSize: {ProgressBarSize}");
    }
}

/* $ColonyStatTypeIcon (2 fields) */
public record class ColonyStatTypeIcon (
    int Type,
    PPtr<Sprite> Icon) : IUnityStructure
{
    public static ColonyStatTypeIcon Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<Sprite> Icon_ = PPtr<Sprite>.Read(reader);
        
        return new(Type_,
            Icon_);
    }

    public override string ToString() => $"ColonyStatTypeIcon\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }
}

/* $LocalMapMarkerSet (3 fields) */
public record class LocalMapMarkerSet (
    int Type,
    PPtr<LocalMapMarkerPCView> View,
    PPtr<RectTransform> Container) : IUnityStructure
{
    public static LocalMapMarkerSet Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<LocalMapMarkerPCView> View_ = PPtr<LocalMapMarkerPCView>.Read(reader);
        PPtr<RectTransform> Container_ = PPtr<RectTransform>.Read(reader);
        
        return new(Type_,
            View_,
            Container_);
    }

    public override string ToString() => $"LocalMapMarkerSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}View: {View}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Container: {Container}");
    }
}

/* $ShaderResources_1 (1 fields) */
public record class ShaderResources_1 (
    PPtr<Shader> BlurShader) : IUnityStructure
{
    public static ShaderResources_1 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> BlurShader_ = PPtr<Shader>.Read(reader);
        
        return new(BlurShader_);
    }

    public override string ToString() => $"ShaderResources_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlurShader: {BlurShader}");
    }
}

/* $TrapObjectViewSettings (7 fields) */
public record class TrapObjectViewSettings (
    PPtr<FxDecal> FxDecal,
    PPtr<Transform> ActorPosition,
    PPtr<Transform> TargetPoint,
    PPtr<ScriptZone> ScriptZoneTrigger,
    AsciiString TriggerSound,
    AsciiString DisabledSound,
    AsciiString DisableFailSound) : IUnityStructure
{
    public static TrapObjectViewSettings Read(EndianBinaryReader reader)
    {
        PPtr<FxDecal> FxDecal_ = PPtr<FxDecal>.Read(reader);
        PPtr<Transform> ActorPosition_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> TargetPoint_ = PPtr<Transform>.Read(reader);
        PPtr<ScriptZone> ScriptZoneTrigger_ = PPtr<ScriptZone>.Read(reader);
        AsciiString TriggerSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* TriggerSound */
        AsciiString DisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* DisabledSound */
        AsciiString DisableFailSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* DisableFailSound */
        
        return new(FxDecal_,
            ActorPosition_,
            TargetPoint_,
            ScriptZoneTrigger_,
            TriggerSound_,
            DisabledSound_,
            DisableFailSound_);
    }

    public override string ToString() => $"TrapObjectViewSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FxDecal: {FxDecal}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActorPosition: {ActorPosition}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TargetPoint: {TargetPoint}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScriptZoneTrigger: {ScriptZoneTrigger}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TriggerSound: \"{TriggerSound}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisabledSound: \"{DisabledSound}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisableFailSound: \"{DisableFailSound}\"");
    }
}

/* $SimpleTrapObjectInfo (13 fields) */
public record class SimpleTrapObjectInfo (
    int m_Type,
    byte OverridePerceptionRadius,
    float PerceptionRadius,
    BlueprintAbilityReference BlueprintSpell,
    BlueprintItemWeaponReference BlueprintWeapon,
    int WeaponAbilityType,
    float SecondsBetweenAbilityActions,
    int SpellAnchor,
    int AdditionalCR,
    LocalizedString TrapTriggeredText,
    int DisableDifficulty,
    byte DoNotHideWhenInactive,
    int DisarmSkill) : IUnityStructure
{
    public static SimpleTrapObjectInfo Read(EndianBinaryReader reader)
    {
        int m_Type_ = reader.ReadS32();
        byte OverridePerceptionRadius_ = reader.ReadU8();
        reader.AlignTo(4); /* OverridePerceptionRadius */
        float PerceptionRadius_ = reader.ReadF32();
        BlueprintAbilityReference BlueprintSpell_ = BlueprintAbilityReference.Read(reader);
        reader.AlignTo(4); /* BlueprintSpell */
        BlueprintItemWeaponReference BlueprintWeapon_ = BlueprintItemWeaponReference.Read(reader);
        reader.AlignTo(4); /* BlueprintWeapon */
        int WeaponAbilityType_ = reader.ReadS32();
        float SecondsBetweenAbilityActions_ = reader.ReadF32();
        int SpellAnchor_ = reader.ReadS32();
        int AdditionalCR_ = reader.ReadS32();
        LocalizedString TrapTriggeredText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrapTriggeredText */
        int DisableDifficulty_ = reader.ReadS32();
        byte DoNotHideWhenInactive_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotHideWhenInactive */
        int DisarmSkill_ = reader.ReadS32();
        
        return new(m_Type_,
            OverridePerceptionRadius_,
            PerceptionRadius_,
            BlueprintSpell_,
            BlueprintWeapon_,
            WeaponAbilityType_,
            SecondsBetweenAbilityActions_,
            SpellAnchor_,
            AdditionalCR_,
            TrapTriggeredText_,
            DisableDifficulty_,
            DoNotHideWhenInactive_,
            DisarmSkill_);
    }

    public override string ToString() => $"SimpleTrapObjectInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverridePerceptionRadius: {OverridePerceptionRadius}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PerceptionRadius: {PerceptionRadius}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BlueprintSpell: {{ \n{BlueprintSpell.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BlueprintWeapon: {{ \n{BlueprintWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WeaponAbilityType: {WeaponAbilityType}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondsBetweenAbilityActions: {SecondsBetweenAbilityActions}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpellAnchor: {SpellAnchor}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AdditionalCR: {AdditionalCR}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TrapTriggeredText: {{ \n{TrapTriggeredText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisableDifficulty: {DisableDifficulty}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotHideWhenInactive: {DoNotHideWhenInactive}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisarmSkill: {DisarmSkill}");
    }
}

/* $BlueprintAbilityReference (1 fields) */
public record class BlueprintAbilityReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintAbilityReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintAbilityReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintItemWeaponReference (1 fields) */
public record class BlueprintItemWeaponReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintItemWeaponReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintItemWeaponReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BipedReferences (17 fields) */
public record class BipedReferences (
    PPtr<Transform> root,
    PPtr<Transform> pelvis,
    PPtr<Transform> leftThigh,
    PPtr<Transform> leftCalf,
    PPtr<Transform> leftFoot,
    PPtr<Transform> rightThigh,
    PPtr<Transform> rightCalf,
    PPtr<Transform> rightFoot,
    PPtr<Transform> leftUpperArm,
    PPtr<Transform> leftForearm,
    PPtr<Transform> leftHand,
    PPtr<Transform> rightUpperArm,
    PPtr<Transform> rightForearm,
    PPtr<Transform> rightHand,
    PPtr<Transform> head,
    PPtr<Transform>[] spine,
    PPtr<Transform>[] eyes) : IUnityStructure
{
    public static BipedReferences Read(EndianBinaryReader reader)
    {
        PPtr<Transform> root_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> pelvis_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftThigh_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftCalf_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftFoot_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightThigh_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightCalf_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightFoot_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftUpperArm_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftForearm_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftHand_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightUpperArm_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightForearm_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightHand_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> head_ = PPtr<Transform>.Read(reader);
        PPtr<Transform>[] spine_ = BuiltInArray<PPtr<Transform>>.Read(reader);
        PPtr<Transform>[] eyes_ = BuiltInArray<PPtr<Transform>>.Read(reader);
        
        return new(root_,
            pelvis_,
            leftThigh_,
            leftCalf_,
            leftFoot_,
            rightThigh_,
            rightCalf_,
            rightFoot_,
            leftUpperArm_,
            leftForearm_,
            leftHand_,
            rightUpperArm_,
            rightForearm_,
            rightHand_,
            head_,
            spine_,
            eyes_);
    }

    public override string ToString() => $"BipedReferences\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}root: {root}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pelvis: {pelvis}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftThigh: {leftThigh}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftCalf: {leftCalf}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftFoot: {leftFoot}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightThigh: {rightThigh}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightCalf: {rightCalf}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightFoot: {rightFoot}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftUpperArm: {leftUpperArm}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftForearm: {leftForearm}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftHand: {leftHand}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightUpperArm: {rightUpperArm}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightForearm: {rightForearm}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightHand: {rightHand}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}head: {head}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}spine[{spine.Length}] = {{");
        if (spine.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Transform> _4 in spine)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (spine.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}eyes[{eyes.Length}] = {{");
        if (eyes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Transform> _4 in eyes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (eyes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $IKSolverFullBodyBiped (14 fields) */
public record class IKSolverFullBodyBiped (
    Vector3f IKPosition,
    float IKPositionWeight,
    PPtr<Transform> root,
    int iterations,
    FBIKChain[] chain,
    IKEffector[] effectors,
    IKMappingSpine spineMapping,
    IKMappingBone[] boneMappings,
    IKMappingLimb[] limbMappings,
    byte FABRIKPass,
    PPtr<Transform> rootNode,
    float spineStiffness,
    float pullBodyVertical,
    float pullBodyHorizontal) : IUnityStructure
{
    public static IKSolverFullBodyBiped Read(EndianBinaryReader reader)
    {
        Vector3f IKPosition_ = Vector3f.Read(reader);
        float IKPositionWeight_ = reader.ReadF32();
        PPtr<Transform> root_ = PPtr<Transform>.Read(reader);
        int iterations_ = reader.ReadS32();
        FBIKChain[] chain_ = BuiltInArray<FBIKChain>.Read(reader);
        reader.AlignTo(4); /* chain */
        IKEffector[] effectors_ = BuiltInArray<IKEffector>.Read(reader);
        reader.AlignTo(4); /* effectors */
        IKMappingSpine spineMapping_ = IKMappingSpine.Read(reader);
        IKMappingBone[] boneMappings_ = BuiltInArray<IKMappingBone>.Read(reader);
        IKMappingLimb[] limbMappings_ = BuiltInArray<IKMappingLimb>.Read(reader);
        byte FABRIKPass_ = reader.ReadU8();
        reader.AlignTo(4); /* FABRIKPass */
        PPtr<Transform> rootNode_ = PPtr<Transform>.Read(reader);
        float spineStiffness_ = reader.ReadF32();
        float pullBodyVertical_ = reader.ReadF32();
        float pullBodyHorizontal_ = reader.ReadF32();
        
        return new(IKPosition_,
            IKPositionWeight_,
            root_,
            iterations_,
            chain_,
            effectors_,
            spineMapping_,
            boneMappings_,
            limbMappings_,
            FABRIKPass_,
            rootNode_,
            spineStiffness_,
            pullBodyVertical_,
            pullBodyHorizontal_);
    }

    public override string ToString() => $"IKSolverFullBodyBiped\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IKPosition: {{ x: {IKPosition.x}, y: {IKPosition.y}, z: {IKPosition.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IKPositionWeight: {IKPositionWeight}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}root: {root}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}iterations: {iterations}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}chain[{chain.Length}] = {{");
        if (chain.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (FBIKChain _4 in chain)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (chain.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}effectors[{effectors.Length}] = {{");
        if (effectors.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (IKEffector _4 in effectors)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (effectors.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}spineMapping: {{ \n{spineMapping.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}boneMappings[{boneMappings.Length}] = {{");
        if (boneMappings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (IKMappingBone _4 in boneMappings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (boneMappings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}limbMappings[{limbMappings.Length}] = {{");
        if (limbMappings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (IKMappingLimb _4 in limbMappings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (limbMappings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FABRIKPass: {FABRIKPass}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rootNode: {rootNode}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}spineStiffness: {spineStiffness}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pullBodyVertical: {pullBodyVertical}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pullBodyHorizontal: {pullBodyHorizontal}");
    }
}

/* $FBIKChain (11 fields) */
public record class FBIKChain (
    float pin,
    float pull,
    float push,
    float pushParent,
    float reach,
    int reachSmoothing,
    int pushSmoothing,
    Node_2[] nodes,
    int[] children,
    ChildConstraint[] childConstraints,
    IKConstraintBend bendConstraint) : IUnityStructure
{
    public static FBIKChain Read(EndianBinaryReader reader)
    {
        float pin_ = reader.ReadF32();
        float pull_ = reader.ReadF32();
        float push_ = reader.ReadF32();
        float pushParent_ = reader.ReadF32();
        float reach_ = reader.ReadF32();
        int reachSmoothing_ = reader.ReadS32();
        int pushSmoothing_ = reader.ReadS32();
        Node_2[] nodes_ = BuiltInArray<Node_2>.Read(reader);
        int[] children_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* children */
        ChildConstraint[] childConstraints_ = BuiltInArray<ChildConstraint>.Read(reader);
        IKConstraintBend bendConstraint_ = IKConstraintBend.Read(reader);
        
        return new(pin_,
            pull_,
            push_,
            pushParent_,
            reach_,
            reachSmoothing_,
            pushSmoothing_,
            nodes_,
            children_,
            childConstraints_,
            bendConstraint_);
    }

    public override string ToString() => $"FBIKChain\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pin: {pin}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pull: {pull}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}push: {push}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pushParent: {pushParent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}reach: {reach}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}reachSmoothing: {reachSmoothing}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pushSmoothing: {pushSmoothing}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}nodes[{nodes.Length}] = {{");
        if (nodes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Node_2 _4 in nodes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (nodes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}children[{children.Length}] = {{");
        if (children.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in children)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (children.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}childConstraints[{childConstraints.Length}] = {{");
        if (childConstraints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ChildConstraint _4 in childConstraints)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (childConstraints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}bendConstraint: {{ \n{bendConstraint.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Node_2 (10 fields) */
public record class Node_2 (
    PPtr<Transform> transform,
    float weight,
    Vector3f solverPosition,
    Quaternionf solverRotation,
    Vector3f defaultLocalPosition,
    Quaternionf defaultLocalRotation,
    float length,
    float effectorPositionWeight,
    float effectorRotationWeight,
    Vector3f offset) : IUnityStructure
{
    public static Node_2 Read(EndianBinaryReader reader)
    {
        PPtr<Transform> transform_ = PPtr<Transform>.Read(reader);
        float weight_ = reader.ReadF32();
        Vector3f solverPosition_ = Vector3f.Read(reader);
        Quaternionf solverRotation_ = Quaternionf.Read(reader);
        Vector3f defaultLocalPosition_ = Vector3f.Read(reader);
        Quaternionf defaultLocalRotation_ = Quaternionf.Read(reader);
        float length_ = reader.ReadF32();
        float effectorPositionWeight_ = reader.ReadF32();
        float effectorRotationWeight_ = reader.ReadF32();
        Vector3f offset_ = Vector3f.Read(reader);
        
        return new(transform_,
            weight_,
            solverPosition_,
            solverRotation_,
            defaultLocalPosition_,
            defaultLocalRotation_,
            length_,
            effectorPositionWeight_,
            effectorRotationWeight_,
            offset_);
    }

    public override string ToString() => $"Node_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}transform: {transform}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}weight: {weight}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}solverPosition: {{ x: {solverPosition.x}, y: {solverPosition.y}, z: {solverPosition.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}solverRotation: {{ x: {solverRotation.x}, y: {solverRotation.y}, z: {solverRotation.z}, w: {solverRotation.w} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defaultLocalPosition: {{ x: {defaultLocalPosition.x}, y: {defaultLocalPosition.y}, z: {defaultLocalPosition.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defaultLocalRotation: {{ x: {defaultLocalRotation.x}, y: {defaultLocalRotation.y}, z: {defaultLocalRotation.z}, w: {defaultLocalRotation.w} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}length: {length}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}effectorPositionWeight: {effectorPositionWeight}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}effectorRotationWeight: {effectorRotationWeight}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}offset: {{ x: {offset.x}, y: {offset.y}, z: {offset.z} }}\n");
    }
}

/* $ChildConstraint (4 fields) */
public record class ChildConstraint (
    float pushElasticity,
    float pullElasticity,
    PPtr<Transform> bone1,
    PPtr<Transform> bone2) : IUnityStructure
{
    public static ChildConstraint Read(EndianBinaryReader reader)
    {
        float pushElasticity_ = reader.ReadF32();
        float pullElasticity_ = reader.ReadF32();
        PPtr<Transform> bone1_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bone2_ = PPtr<Transform>.Read(reader);
        
        return new(pushElasticity_,
            pullElasticity_,
            bone1_,
            bone2_);
    }

    public override string ToString() => $"ChildConstraint\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pushElasticity: {pushElasticity}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pullElasticity: {pullElasticity}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone1: {bone1}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone2: {bone2}");
    }
}

/* $IKConstraintBend (9 fields) */
public record class IKConstraintBend (
    PPtr<Transform> bone1,
    PPtr<Transform> bone2,
    PPtr<Transform> bone3,
    PPtr<Transform> bendGoal,
    Vector3f direction,
    Quaternionf rotationOffset,
    float weight,
    Vector3f defaultLocalDirection,
    Vector3f defaultChildDirection) : IUnityStructure
{
    public static IKConstraintBend Read(EndianBinaryReader reader)
    {
        PPtr<Transform> bone1_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bone2_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bone3_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bendGoal_ = PPtr<Transform>.Read(reader);
        Vector3f direction_ = Vector3f.Read(reader);
        Quaternionf rotationOffset_ = Quaternionf.Read(reader);
        float weight_ = reader.ReadF32();
        Vector3f defaultLocalDirection_ = Vector3f.Read(reader);
        Vector3f defaultChildDirection_ = Vector3f.Read(reader);
        
        return new(bone1_,
            bone2_,
            bone3_,
            bendGoal_,
            direction_,
            rotationOffset_,
            weight_,
            defaultLocalDirection_,
            defaultChildDirection_);
    }

    public override string ToString() => $"IKConstraintBend\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone1: {bone1}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone2: {bone2}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone3: {bone3}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bendGoal: {bendGoal}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}direction: {{ x: {direction.x}, y: {direction.y}, z: {direction.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rotationOffset: {{ x: {rotationOffset.x}, y: {rotationOffset.y}, z: {rotationOffset.z}, w: {rotationOffset.w} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}weight: {weight}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defaultLocalDirection: {{ x: {defaultLocalDirection.x}, y: {defaultLocalDirection.y}, z: {defaultLocalDirection.z} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}defaultChildDirection: {{ x: {defaultChildDirection.x}, y: {defaultChildDirection.y}, z: {defaultChildDirection.z} }}\n");
    }
}

/* $IKEffector (14 fields) */
public record class IKEffector (
    PPtr<Transform> bone,
    PPtr<Transform> target,
    float positionWeight,
    float rotationWeight,
    Vector3f position,
    Quaternionf rotation,
    Vector3f positionOffset,
    byte effectChildNodes,
    float maintainRelativePositionWeight,
    PPtr<Transform>[] childBones,
    PPtr<Transform> planeBone1,
    PPtr<Transform> planeBone2,
    PPtr<Transform> planeBone3,
    Quaternionf planeRotationOffset) : IUnityStructure
{
    public static IKEffector Read(EndianBinaryReader reader)
    {
        PPtr<Transform> bone_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> target_ = PPtr<Transform>.Read(reader);
        float positionWeight_ = reader.ReadF32();
        float rotationWeight_ = reader.ReadF32();
        Vector3f position_ = Vector3f.Read(reader);
        Quaternionf rotation_ = Quaternionf.Read(reader);
        Vector3f positionOffset_ = Vector3f.Read(reader);
        byte effectChildNodes_ = reader.ReadU8();
        reader.AlignTo(4); /* effectChildNodes */
        float maintainRelativePositionWeight_ = reader.ReadF32();
        PPtr<Transform>[] childBones_ = BuiltInArray<PPtr<Transform>>.Read(reader);
        PPtr<Transform> planeBone1_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> planeBone2_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> planeBone3_ = PPtr<Transform>.Read(reader);
        Quaternionf planeRotationOffset_ = Quaternionf.Read(reader);
        
        return new(bone_,
            target_,
            positionWeight_,
            rotationWeight_,
            position_,
            rotation_,
            positionOffset_,
            effectChildNodes_,
            maintainRelativePositionWeight_,
            childBones_,
            planeBone1_,
            planeBone2_,
            planeBone3_,
            planeRotationOffset_);
    }

    public override string ToString() => $"IKEffector\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone: {bone}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}target: {target}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}positionWeight: {positionWeight}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rotationWeight: {rotationWeight}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}position: {{ x: {position.x}, y: {position.y}, z: {position.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}rotation: {{ x: {rotation.x}, y: {rotation.y}, z: {rotation.z}, w: {rotation.w} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}positionOffset: {{ x: {positionOffset.x}, y: {positionOffset.y}, z: {positionOffset.z} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}effectChildNodes: {effectChildNodes}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maintainRelativePositionWeight: {maintainRelativePositionWeight}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}childBones[{childBones.Length}] = {{");
        if (childBones.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Transform> _4 in childBones)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (childBones.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}planeBone1: {planeBone1}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}planeBone2: {planeBone2}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}planeBone3: {planeBone3}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}planeRotationOffset: {{ x: {planeRotationOffset.x}, y: {planeRotationOffset.y}, z: {planeRotationOffset.z}, w: {planeRotationOffset.w} }}\n");
    }
}

/* $IKMappingSpine (7 fields) */
public record class IKMappingSpine (
    PPtr<Transform>[] spineBones,
    PPtr<Transform> leftUpperArmBone,
    PPtr<Transform> rightUpperArmBone,
    PPtr<Transform> leftThighBone,
    PPtr<Transform> rightThighBone,
    int iterations,
    float twistWeight) : IUnityStructure
{
    public static IKMappingSpine Read(EndianBinaryReader reader)
    {
        PPtr<Transform>[] spineBones_ = BuiltInArray<PPtr<Transform>>.Read(reader);
        PPtr<Transform> leftUpperArmBone_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightUpperArmBone_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> leftThighBone_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> rightThighBone_ = PPtr<Transform>.Read(reader);
        int iterations_ = reader.ReadS32();
        float twistWeight_ = reader.ReadF32();
        
        return new(spineBones_,
            leftUpperArmBone_,
            rightUpperArmBone_,
            leftThighBone_,
            rightThighBone_,
            iterations_,
            twistWeight_);
    }

    public override string ToString() => $"IKMappingSpine\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}spineBones[{spineBones.Length}] = {{");
        if (spineBones.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Transform> _4 in spineBones)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (spineBones.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftUpperArmBone: {leftUpperArmBone}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightUpperArmBone: {rightUpperArmBone}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}leftThighBone: {leftThighBone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}rightThighBone: {rightThighBone}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}iterations: {iterations}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}twistWeight: {twistWeight}");
    }
}

/* $IKMappingBone (2 fields) */
public record class IKMappingBone (
    PPtr<Transform> bone,
    float maintainRotationWeight) : IUnityStructure
{
    public static IKMappingBone Read(EndianBinaryReader reader)
    {
        PPtr<Transform> bone_ = PPtr<Transform>.Read(reader);
        float maintainRotationWeight_ = reader.ReadF32();
        
        return new(bone_,
            maintainRotationWeight_);
    }

    public override string ToString() => $"IKMappingBone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone: {bone}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maintainRotationWeight: {maintainRotationWeight}");
    }
}

/* $IKMappingLimb (6 fields) */
public record class IKMappingLimb (
    PPtr<Transform> parentBone,
    PPtr<Transform> bone1,
    PPtr<Transform> bone2,
    PPtr<Transform> bone3,
    float maintainRotationWeight,
    float weight) : IUnityStructure
{
    public static IKMappingLimb Read(EndianBinaryReader reader)
    {
        PPtr<Transform> parentBone_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bone1_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bone2_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> bone3_ = PPtr<Transform>.Read(reader);
        float maintainRotationWeight_ = reader.ReadF32();
        float weight_ = reader.ReadF32();
        
        return new(parentBone_,
            bone1_,
            bone2_,
            bone3_,
            maintainRotationWeight_,
            weight_);
    }

    public override string ToString() => $"IKMappingLimb\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}parentBone: {parentBone}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone1: {bone1}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone2: {bone2}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone3: {bone3}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maintainRotationWeight: {maintainRotationWeight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}weight: {weight}");
    }
}

/* $AstarData (5 fields) */
public record class AstarData (
    AsciiString dataString,
    byte[] upgradeData,
    PPtr<TextAsset> file_cachedStartup,
    byte[] data_cachedStartup,
    byte cacheStartup) : IUnityStructure
{
    public static AstarData Read(EndianBinaryReader reader)
    {
        AsciiString dataString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* dataString */
        byte[] upgradeData_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* upgradeData */
        PPtr<TextAsset> file_cachedStartup_ = PPtr<TextAsset>.Read(reader);
        byte[] data_cachedStartup_ = BuiltInArray<byte>.Read(reader);
        reader.AlignTo(4); /* data_cachedStartup */
        byte cacheStartup_ = reader.ReadU8();
        reader.AlignTo(4); /* cacheStartup */
        
        return new(dataString_,
            upgradeData_,
            file_cachedStartup_,
            data_cachedStartup_,
            cacheStartup_);
    }

    public override string ToString() => $"AstarData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}dataString: \"{dataString}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}upgradeData[{upgradeData.Length}] = {{");
        if (upgradeData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in upgradeData)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (upgradeData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}file_cachedStartup: {file_cachedStartup}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}data_cachedStartup[{data_cachedStartup.Length}] = {{");
        if (data_cachedStartup.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (byte _4 in data_cachedStartup)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (data_cachedStartup.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}cacheStartup: {cacheStartup}");
    }
}

/* $AstarColor (7 fields) */
public record class AstarColor (
    ColorRGBA_1 _SolidColor,
    ColorRGBA_1 _UnwalkableNode,
    ColorRGBA_1 _BoundsHandles,
    ColorRGBA_1 _ConnectionLowLerp,
    ColorRGBA_1 _ConnectionHighLerp,
    ColorRGBA_1 _MeshEdgeColor,
    ColorRGBA_1[] _AreaColors) : IUnityStructure
{
    public static AstarColor Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 _SolidColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 _UnwalkableNode_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 _BoundsHandles_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 _ConnectionLowLerp_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 _ConnectionHighLerp_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 _MeshEdgeColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1[] _AreaColors_ = BuiltInArray<ColorRGBA_1>.Read(reader);
        reader.AlignTo(4); /* _AreaColors */
        
        return new(_SolidColor_,
            _UnwalkableNode_,
            _BoundsHandles_,
            _ConnectionLowLerp_,
            _ConnectionHighLerp_,
            _MeshEdgeColor_,
            _AreaColors_);
    }

    public override string ToString() => $"AstarColor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_SolidColor: {{ r: {_SolidColor.r}, g: {_SolidColor.g}, b: {_SolidColor.b}, a: {_SolidColor.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_UnwalkableNode: {{ r: {_UnwalkableNode.r}, g: {_UnwalkableNode.g}, b: {_UnwalkableNode.b}, a: {_UnwalkableNode.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_BoundsHandles: {{ r: {_BoundsHandles.r}, g: {_BoundsHandles.g}, b: {_BoundsHandles.b}, a: {_BoundsHandles.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_ConnectionLowLerp: {{ r: {_ConnectionLowLerp.r}, g: {_ConnectionLowLerp.g}, b: {_ConnectionLowLerp.b}, a: {_ConnectionLowLerp.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_ConnectionHighLerp: {{ r: {_ConnectionHighLerp.r}, g: {_ConnectionHighLerp.g}, b: {_ConnectionHighLerp.b}, a: {_ConnectionHighLerp.a} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_MeshEdgeColor: {{ r: {_MeshEdgeColor.r}, g: {_MeshEdgeColor.g}, b: {_MeshEdgeColor.b}, a: {_MeshEdgeColor.a} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_AreaColors[{_AreaColors.Length}] = {{");
        if (_AreaColors.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ColorRGBA_1 _4 in _AreaColors)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ r: {_4.r}, g: {_4.g}, b: {_4.b}, a: {_4.a} }}\n");
            ++_4i;
        }
        if (_AreaColors.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $EuclideanEmbedding (4 fields) */
public record class EuclideanEmbedding (
    int mode,
    int seed,
    PPtr<Transform> pivotPointRoot,
    int spreadOutCount) : IUnityStructure
{
    public static EuclideanEmbedding Read(EndianBinaryReader reader)
    {
        int mode_ = reader.ReadS32();
        int seed_ = reader.ReadS32();
        PPtr<Transform> pivotPointRoot_ = PPtr<Transform>.Read(reader);
        int spreadOutCount_ = reader.ReadS32();
        
        return new(mode_,
            seed_,
            pivotPointRoot_,
            spreadOutCount_);
    }

    public override string ToString() => $"EuclideanEmbedding\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}seed: {seed}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pivotPointRoot: {pivotPointRoot}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}spreadOutCount: {spreadOutCount}");
    }
}

/* $HighlightSource (12 fields) */
public record class HighlightSource (
    float Lifetime,
    int Priority,
    int Mode,
    ColorRGBA_1 Color,
    float OnsetTime,
    float RemoveTime,
    ColorRGBA_1 AlternateColor,
    float FlashingFrequency,
    Gradient_1 ColorGradient,
    float GradientLifetime,
    byte UnscaledTime,
    float AddTime) : IUnityStructure
{
    public static HighlightSource Read(EndianBinaryReader reader)
    {
        float Lifetime_ = reader.ReadF32();
        int Priority_ = reader.ReadS32();
        int Mode_ = reader.ReadS32();
        ColorRGBA_1 Color_ = ColorRGBA_1.Read(reader);
        float OnsetTime_ = reader.ReadF32();
        float RemoveTime_ = reader.ReadF32();
        ColorRGBA_1 AlternateColor_ = ColorRGBA_1.Read(reader);
        float FlashingFrequency_ = reader.ReadF32();
        Gradient_1 ColorGradient_ = Gradient_1.Read(reader);
        reader.AlignTo(4); /* ColorGradient */
        float GradientLifetime_ = reader.ReadF32();
        byte UnscaledTime_ = reader.ReadU8();
        reader.AlignTo(4); /* UnscaledTime */
        float AddTime_ = reader.ReadF32();
        
        return new(Lifetime_,
            Priority_,
            Mode_,
            Color_,
            OnsetTime_,
            RemoveTime_,
            AlternateColor_,
            FlashingFrequency_,
            ColorGradient_,
            GradientLifetime_,
            UnscaledTime_,
            AddTime_);
    }

    public override string ToString() => $"HighlightSource\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Lifetime: {Lifetime}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Priority: {Priority}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Mode: {Mode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ r: {Color.r}, g: {Color.g}, b: {Color.b}, a: {Color.a} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnsetTime: {OnsetTime}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RemoveTime: {RemoveTime}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlternateColor: {{ r: {AlternateColor.r}, g: {AlternateColor.g}, b: {AlternateColor.b}, a: {AlternateColor.a} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FlashingFrequency: {FlashingFrequency}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColorGradient: {{ \n{ColorGradient.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GradientLifetime: {GradientLifetime}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnscaledTime: {UnscaledTime}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AddTime: {AddTime}");
    }
}

/* $ShaderResources_5 (5 fields) */
public record class ShaderResources_5 (
    PPtr<Shader> HighlighterShader,
    PPtr<Shader> BlurShader,
    PPtr<Shader> CutShader,
    PPtr<Shader> CompositeShader,
    PPtr<Shader> ParticlesShader) : IUnityStructure
{
    public static ShaderResources_5 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> HighlighterShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BlurShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CutShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CompositeShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ParticlesShader_ = PPtr<Shader>.Read(reader);
        
        return new(HighlighterShader_,
            BlurShader_,
            CutShader_,
            CompositeShader_,
            ParticlesShader_);
    }

    public override string ToString() => $"ShaderResources_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HighlighterShader: {HighlighterShader}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlurShader: {BlurShader}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CutShader: {CutShader}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CompositeShader: {CompositeShader}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticlesShader: {ParticlesShader}");
    }
}

/* $DecorPaintObjectPlacementBrushCollection (2 fields) */
public record class DecorPaintObjectPlacementBrushCollection (
    PPtr<DecorPaintObjectPlacementBrush>[] _namedEntities,
    int _indexOfMarkedEntity) : IUnityStructure
{
    public static DecorPaintObjectPlacementBrushCollection Read(EndianBinaryReader reader)
    {
        PPtr<DecorPaintObjectPlacementBrush>[] _namedEntities_ = BuiltInArray<PPtr<DecorPaintObjectPlacementBrush>>.Read(reader);
        int _indexOfMarkedEntity_ = reader.ReadS32();
        
        return new(_namedEntities_,
            _indexOfMarkedEntity_);
    }

    public override string ToString() => $"DecorPaintObjectPlacementBrushCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_namedEntities[{_namedEntities.Length}] = {{");
        if (_namedEntities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<DecorPaintObjectPlacementBrush> _4 in _namedEntities)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_namedEntities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indexOfMarkedEntity: {_indexOfMarkedEntity}");
    }
}

/* $DecorPaintObjectPlacementBrushDatabaseView (7 fields) */
public record class DecorPaintObjectPlacementBrushDatabaseView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<DecorPaintObjectPlacementBrushDatabaseViewData> _viewData) : IUnityStructure
{
    public static DecorPaintObjectPlacementBrushDatabaseView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<DecorPaintObjectPlacementBrushDatabaseViewData> _viewData_ = PPtr<DecorPaintObjectPlacementBrushDatabaseViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"DecorPaintObjectPlacementBrushDatabaseView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $SliderEvent (1 fields) */
public record class SliderEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static SliderEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"SliderEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $WeaponStyleOverride_1 (6 fields) */
public record class WeaponStyleOverride_1 (
    int WeaponAnimationStyle,
    byte IsOffhand,
    PPtr<AnimationClipWrapper> ClipWrapper,
    PPtr<AnimationClipWrapper>[] RandomClips,
    PPtr<AnimationClipWrapper>[] HitInFullCover,
    PPtr<AnimationClipWrapper>[] HitInHalfCover) : IUnityStructure
{
    public static WeaponStyleOverride_1 Read(EndianBinaryReader reader)
    {
        int WeaponAnimationStyle_ = reader.ReadS32();
        byte IsOffhand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffhand */
        PPtr<AnimationClipWrapper> ClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper>[] RandomClips_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        PPtr<AnimationClipWrapper>[] HitInFullCover_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        PPtr<AnimationClipWrapper>[] HitInHalfCover_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(WeaponAnimationStyle_,
            IsOffhand_,
            ClipWrapper_,
            RandomClips_,
            HitInFullCover_,
            HitInHalfCover_);
    }

    public override string ToString() => $"WeaponStyleOverride_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WeaponAnimationStyle: {WeaponAnimationStyle}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffhand: {IsOffhand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipWrapper: {ClipWrapper}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RandomClips[{RandomClips.Length}] = {{");
        if (RandomClips.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in RandomClips)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (RandomClips.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitInFullCover[{HitInFullCover.Length}] = {{");
        if (HitInFullCover.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in HitInFullCover)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (HitInFullCover.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitInHalfCover[{HitInHalfCover.Length}] = {{");
        if (HitInHalfCover.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in HitInHalfCover)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (HitInHalfCover.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VFXBakedGroundAreaAsset (2 fields) */
public record class VFXBakedGroundAreaAsset (
    AsciiString m_Identifier,
    PPtr<Texture2D> Texture) : IUnityStructure
{
    public static VFXBakedGroundAreaAsset Read(EndianBinaryReader reader)
    {
        AsciiString m_Identifier_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Identifier */
        PPtr<Texture2D> Texture_ = PPtr<Texture2D>.Read(reader);
        
        return new(m_Identifier_,
            Texture_);
    }

    public override string ToString() => $"VFXBakedGroundAreaAsset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Identifier: \"{m_Identifier}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Texture: {Texture}");
    }
}

/* $SettingsDefaultValues (7 fields) */
public record class SettingsDefaultValues (
    SoundSettingsDefaultValues Sound,
    GraphicsSettingsDefaultValues Graphics,
    GameSettingsDefaultValues Game,
    DifficultySettingsDefaultValues Difficulty,
    ControlsSettingsDefaultValues Controls,
    DisplaySettingsDefaultValues Display,
    AccessiabilitySettingsDefaultValues Accessiability) : IUnityStructure
{
    public static SettingsDefaultValues Read(EndianBinaryReader reader)
    {
        SoundSettingsDefaultValues Sound_ = SoundSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Sound */
        GraphicsSettingsDefaultValues Graphics_ = GraphicsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Graphics */
        GameSettingsDefaultValues Game_ = GameSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Game */
        DifficultySettingsDefaultValues Difficulty_ = DifficultySettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Difficulty */
        ControlsSettingsDefaultValues Controls_ = ControlsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Controls */
        DisplaySettingsDefaultValues Display_ = DisplaySettingsDefaultValues.Read(reader);
        AccessiabilitySettingsDefaultValues Accessiability_ = AccessiabilitySettingsDefaultValues.Read(reader);
        
        return new(Sound_,
            Graphics_,
            Game_,
            Difficulty_,
            Controls_,
            Display_,
            Accessiability_);
    }

    public override string ToString() => $"SettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Sound: {{ \n{Sound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Graphics: {{ WindowedCursorLock: {Graphics.WindowedCursorLock}, CameraShake: {Graphics.CameraShake}, GraphicsQuality: {Graphics.GraphicsQuality} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Game: {{ \n{Game.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Difficulty: {{ \n{Difficulty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Controls: {{ \n{Controls.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Display: {{ GammaCorrection: {Display.GammaCorrection}, Brightness: {Display.Brightness}, Contrast: {Display.Contrast}, SafeZoneOffset: {Display.SafeZoneOffset} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Accessiability: {{ \n{Accessiability.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SoundSettingsDefaultValues (15 fields) */
public readonly record struct SoundSettingsDefaultValues (
    float VolumeMaster,
    float VolumeVoices,
    float VolumeVoicesCharacterInGame,
    float VolumeVoicesNpcInGame,
    float VolumeVoicesDialogues,
    float VolumeMusic,
    float VolumeSfx,
    float VolumeAmbience,
    float VolumeAbilities,
    float VolumeRangedWeapons,
    float VolumeMeleeWeapons,
    float VolumeHitsLevel,
    float VolumeUI,
    int VoicedAskFrequency,
    byte MuteAudioWhileTheGameIsOutFocus) : IUnityStructure
{
    public static SoundSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        float VolumeMaster_ = reader.ReadF32();
        float VolumeVoices_ = reader.ReadF32();
        float VolumeVoicesCharacterInGame_ = reader.ReadF32();
        float VolumeVoicesNpcInGame_ = reader.ReadF32();
        float VolumeVoicesDialogues_ = reader.ReadF32();
        float VolumeMusic_ = reader.ReadF32();
        float VolumeSfx_ = reader.ReadF32();
        float VolumeAmbience_ = reader.ReadF32();
        float VolumeAbilities_ = reader.ReadF32();
        float VolumeRangedWeapons_ = reader.ReadF32();
        float VolumeMeleeWeapons_ = reader.ReadF32();
        float VolumeHitsLevel_ = reader.ReadF32();
        float VolumeUI_ = reader.ReadF32();
        int VoicedAskFrequency_ = reader.ReadS32();
        byte MuteAudioWhileTheGameIsOutFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* MuteAudioWhileTheGameIsOutFocus */
        
        return new(VolumeMaster_,
            VolumeVoices_,
            VolumeVoicesCharacterInGame_,
            VolumeVoicesNpcInGame_,
            VolumeVoicesDialogues_,
            VolumeMusic_,
            VolumeSfx_,
            VolumeAmbience_,
            VolumeAbilities_,
            VolumeRangedWeapons_,
            VolumeMeleeWeapons_,
            VolumeHitsLevel_,
            VolumeUI_,
            VoicedAskFrequency_,
            MuteAudioWhileTheGameIsOutFocus_);
    }

    public override string ToString() => $"SoundSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMaster: {VolumeMaster}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoices: {VolumeVoices}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoicesCharacterInGame: {VolumeVoicesCharacterInGame}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoicesNpcInGame: {VolumeVoicesNpcInGame}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeVoicesDialogues: {VolumeVoicesDialogues}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMusic: {VolumeMusic}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeSfx: {VolumeSfx}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeAmbience: {VolumeAmbience}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeAbilities: {VolumeAbilities}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeRangedWeapons: {VolumeRangedWeapons}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeMeleeWeapons: {VolumeMeleeWeapons}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeHitsLevel: {VolumeHitsLevel}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumeUI: {VolumeUI}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VoicedAskFrequency: {VoicedAskFrequency}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MuteAudioWhileTheGameIsOutFocus: {MuteAudioWhileTheGameIsOutFocus}");
    }
}

/* $GraphicsSettingsDefaultValues (3 fields) */
public readonly record struct GraphicsSettingsDefaultValues (
    byte WindowedCursorLock,
    byte CameraShake,
    int GraphicsQuality) : IUnityStructure
{
    public static GraphicsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte WindowedCursorLock_ = reader.ReadU8();
        reader.AlignTo(4); /* WindowedCursorLock */
        byte CameraShake_ = reader.ReadU8();
        reader.AlignTo(4); /* CameraShake */
        int GraphicsQuality_ = reader.ReadS32();
        
        return new(WindowedCursorLock_,
            CameraShake_,
            GraphicsQuality_);
    }

    public override string ToString() => $"GraphicsSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WindowedCursorLock: {WindowedCursorLock}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraShake: {CameraShake}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GraphicsQuality: {GraphicsQuality}");
    }
}

/* $GameSettingsDefaultValues (11 fields) */
public record class GameSettingsDefaultValues (
    GameMainSettingsDefaultValues Main,
    GameTutorialSettingsDefaultValues Tutorial,
    GameSaveSettingsDefaultValues Save,
    GameSaveSettingsDefaultValues SaveConsole,
    GameTooltipsSettingsDefaultValues Tooltips,
    GameMainMenuSettingsDefaultValues MainMenu,
    GameCombatTextsSettingsDefaultValues CombatTexts,
    GameDialogsSettingsDefaultValues Dialogs,
    GameAutopauseSettingsDefaultValues Autopause,
    GameTurnBasedSettingsDefaultValues TurnBased,
    GameSillyCheatCodesSettingsDefaultValues SillyCheatCodes) : IUnityStructure
{
    public static GameSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        GameMainSettingsDefaultValues Main_ = GameMainSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Main */
        GameTutorialSettingsDefaultValues Tutorial_ = GameTutorialSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Tutorial */
        GameSaveSettingsDefaultValues Save_ = GameSaveSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Save */
        GameSaveSettingsDefaultValues SaveConsole_ = GameSaveSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* SaveConsole */
        GameTooltipsSettingsDefaultValues Tooltips_ = GameTooltipsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Tooltips */
        GameMainMenuSettingsDefaultValues MainMenu_ = GameMainMenuSettingsDefaultValues.Read(reader);
        GameCombatTextsSettingsDefaultValues CombatTexts_ = GameCombatTextsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* CombatTexts */
        GameDialogsSettingsDefaultValues Dialogs_ = GameDialogsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Dialogs */
        GameAutopauseSettingsDefaultValues Autopause_ = GameAutopauseSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Autopause */
        GameTurnBasedSettingsDefaultValues TurnBased_ = GameTurnBasedSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* TurnBased */
        GameSillyCheatCodesSettingsDefaultValues SillyCheatCodes_ = GameSillyCheatCodesSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* SillyCheatCodes */
        
        return new(Main_,
            Tutorial_,
            Save_,
            SaveConsole_,
            Tooltips_,
            MainMenu_,
            CombatTexts_,
            Dialogs_,
            Autopause_,
            TurnBased_,
            SillyCheatCodes_);
    }

    public override string ToString() => $"GameSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Main: {{ \n{Main.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tutorial: {{ \n{Tutorial.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Save: {{ AutosaveEnabled: {Save.AutosaveEnabled}, AutosaveSlots: {Save.AutosaveSlots}, QuicksaveSlots: {Save.QuicksaveSlots} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveConsole: {{ AutosaveEnabled: {SaveConsole.AutosaveEnabled}, AutosaveSlots: {SaveConsole.AutosaveSlots}, QuicksaveSlots: {SaveConsole.QuicksaveSlots} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tooltips: {{ ShowComparative: {Tooltips.ShowComparative}, ShowDelay: {Tooltips.ShowDelay}, Shortened: {Tooltips.Shortened} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MainMenu: {{ MainMenuTheme: {MainMenu.MainMenuTheme} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CombatTexts: {{ \n{CombatTexts.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dialogs: {{ \n{Dialogs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Autopause: {{ \n{Autopause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TurnBased: {{ \n{TurnBased.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SillyCheatCodes: {{ \n{SillyCheatCodes.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $GameMainSettingsDefaultValues (9 fields) */
public readonly record struct GameMainSettingsDefaultValues (
    int Localization,
    byte AutofillActionbarSlots,
    byte LootInCombat,
    byte SendGameStatistic,
    byte SendSaves,
    byte UseHotAreas,
    byte BloodOnCharacters,
    byte DismemberCharacters,
    byte AcceleratedMove) : IUnityStructure
{
    public static GameMainSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        int Localization_ = reader.ReadS32();
        byte AutofillActionbarSlots_ = reader.ReadU8();
        reader.AlignTo(4); /* AutofillActionbarSlots */
        byte LootInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* LootInCombat */
        byte SendGameStatistic_ = reader.ReadU8();
        reader.AlignTo(4); /* SendGameStatistic */
        byte SendSaves_ = reader.ReadU8();
        reader.AlignTo(4); /* SendSaves */
        byte UseHotAreas_ = reader.ReadU8();
        reader.AlignTo(4); /* UseHotAreas */
        byte BloodOnCharacters_ = reader.ReadU8();
        reader.AlignTo(4); /* BloodOnCharacters */
        byte DismemberCharacters_ = reader.ReadU8();
        reader.AlignTo(4); /* DismemberCharacters */
        byte AcceleratedMove_ = reader.ReadU8();
        reader.AlignTo(4); /* AcceleratedMove */
        
        return new(Localization_,
            AutofillActionbarSlots_,
            LootInCombat_,
            SendGameStatistic_,
            SendSaves_,
            UseHotAreas_,
            BloodOnCharacters_,
            DismemberCharacters_,
            AcceleratedMove_);
    }

    public override string ToString() => $"GameMainSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Localization: {Localization}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutofillActionbarSlots: {AutofillActionbarSlots}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LootInCombat: {LootInCombat}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SendGameStatistic: {SendGameStatistic}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SendSaves: {SendSaves}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseHotAreas: {UseHotAreas}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BloodOnCharacters: {BloodOnCharacters}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DismemberCharacters: {DismemberCharacters}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AcceleratedMove: {AcceleratedMove}");
    }
}

/* $GameTutorialSettingsDefaultValues (12 fields) */
public readonly record struct GameTutorialSettingsDefaultValues (
    byte ShowAllTutorials,
    byte ShowBasicTutorial,
    byte ShowControlsBasicTutorial,
    byte ShowControlsAdvancedTutorial,
    byte ShowGameplayBasicTutorial,
    byte ShowGameplayAdvancedTutorial,
    byte ShowWarhammerRulesTutorial,
    byte ShowSpaceEncountersTutorial,
    byte ShowSpaceExplorationTutorial,
    byte ShowGroundEncountersTutorial,
    byte ShowContextTutorial,
    byte ShowSpecialLoot) : IUnityStructure
{
    public static GameTutorialSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte ShowAllTutorials_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowAllTutorials */
        byte ShowBasicTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowBasicTutorial */
        byte ShowControlsBasicTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowControlsBasicTutorial */
        byte ShowControlsAdvancedTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowControlsAdvancedTutorial */
        byte ShowGameplayBasicTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowGameplayBasicTutorial */
        byte ShowGameplayAdvancedTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowGameplayAdvancedTutorial */
        byte ShowWarhammerRulesTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowWarhammerRulesTutorial */
        byte ShowSpaceEncountersTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowSpaceEncountersTutorial */
        byte ShowSpaceExplorationTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowSpaceExplorationTutorial */
        byte ShowGroundEncountersTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowGroundEncountersTutorial */
        byte ShowContextTutorial_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowContextTutorial */
        byte ShowSpecialLoot_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowSpecialLoot */
        
        return new(ShowAllTutorials_,
            ShowBasicTutorial_,
            ShowControlsBasicTutorial_,
            ShowControlsAdvancedTutorial_,
            ShowGameplayBasicTutorial_,
            ShowGameplayAdvancedTutorial_,
            ShowWarhammerRulesTutorial_,
            ShowSpaceEncountersTutorial_,
            ShowSpaceExplorationTutorial_,
            ShowGroundEncountersTutorial_,
            ShowContextTutorial_,
            ShowSpecialLoot_);
    }

    public override string ToString() => $"GameTutorialSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAllTutorials: {ShowAllTutorials}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowBasicTutorial: {ShowBasicTutorial}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowControlsBasicTutorial: {ShowControlsBasicTutorial}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowControlsAdvancedTutorial: {ShowControlsAdvancedTutorial}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowGameplayBasicTutorial: {ShowGameplayBasicTutorial}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowGameplayAdvancedTutorial: {ShowGameplayAdvancedTutorial}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowWarhammerRulesTutorial: {ShowWarhammerRulesTutorial}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpaceEncountersTutorial: {ShowSpaceEncountersTutorial}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpaceExplorationTutorial: {ShowSpaceExplorationTutorial}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowGroundEncountersTutorial: {ShowGroundEncountersTutorial}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowContextTutorial: {ShowContextTutorial}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpecialLoot: {ShowSpecialLoot}");
    }
}

/* $GameSaveSettingsDefaultValues (3 fields) */
public readonly record struct GameSaveSettingsDefaultValues (
    byte AutosaveEnabled,
    int AutosaveSlots,
    int QuicksaveSlots) : IUnityStructure
{
    public static GameSaveSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte AutosaveEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AutosaveEnabled */
        int AutosaveSlots_ = reader.ReadS32();
        int QuicksaveSlots_ = reader.ReadS32();
        
        return new(AutosaveEnabled_,
            AutosaveSlots_,
            QuicksaveSlots_);
    }

    public override string ToString() => $"GameSaveSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutosaveEnabled: {AutosaveEnabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutosaveSlots: {AutosaveSlots}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}QuicksaveSlots: {QuicksaveSlots}");
    }
}

/* $GameTooltipsSettingsDefaultValues (3 fields) */
public readonly record struct GameTooltipsSettingsDefaultValues (
    byte ShowComparative,
    float ShowDelay,
    byte Shortened) : IUnityStructure
{
    public static GameTooltipsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte ShowComparative_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowComparative */
        float ShowDelay_ = reader.ReadF32();
        byte Shortened_ = reader.ReadU8();
        reader.AlignTo(4); /* Shortened */
        
        return new(ShowComparative_,
            ShowDelay_,
            Shortened_);
    }

    public override string ToString() => $"GameTooltipsSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowComparative: {ShowComparative}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowDelay: {ShowDelay}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Shortened: {Shortened}");
    }
}

/* $GameMainMenuSettingsDefaultValues (1 fields) */
public readonly record struct GameMainMenuSettingsDefaultValues (
    int MainMenuTheme) : IUnityStructure
{
    public static GameMainMenuSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        int MainMenuTheme_ = reader.ReadS32();
        
        return new(MainMenuTheme_);
    }

    public override string ToString() => $"GameMainMenuSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MainMenuTheme: {MainMenuTheme}");
    }
}

/* $GameCombatTextsSettingsDefaultValues (22 fields) */
public readonly record struct GameCombatTextsSettingsDefaultValues (
    int ShowSpellName,
    int ShowAvoid,
    int ShowMiss,
    int ShowAttackOfOpportunity,
    int ShowCriticalHit,
    int ShowSneakAttack,
    int ShowDamage,
    int ShowSaves,
    int ShowPartyActions,
    int ShowPartyActionsNoIdle,
    int ShowEnemyActions,
    int ShowPartyHP,
    int ShowEnemyHP,
    byte PartyHPIsShort,
    byte EnemyHPIsShort,
    int ShowNumericCooldownParty,
    int ShowNumericCooldownEnemy,
    int ShowNamesForParty,
    int ShowNamesForEnemy,
    int ShowPartyAttackIntentions,
    int ShowPartyCastIntentions,
    int ShowEnemyIntentions) : IUnityStructure
{
    public static GameCombatTextsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        int ShowSpellName_ = reader.ReadS32();
        int ShowAvoid_ = reader.ReadS32();
        int ShowMiss_ = reader.ReadS32();
        int ShowAttackOfOpportunity_ = reader.ReadS32();
        int ShowCriticalHit_ = reader.ReadS32();
        int ShowSneakAttack_ = reader.ReadS32();
        int ShowDamage_ = reader.ReadS32();
        int ShowSaves_ = reader.ReadS32();
        int ShowPartyActions_ = reader.ReadS32();
        int ShowPartyActionsNoIdle_ = reader.ReadS32();
        int ShowEnemyActions_ = reader.ReadS32();
        int ShowPartyHP_ = reader.ReadS32();
        int ShowEnemyHP_ = reader.ReadS32();
        byte PartyHPIsShort_ = reader.ReadU8();
        reader.AlignTo(4); /* PartyHPIsShort */
        byte EnemyHPIsShort_ = reader.ReadU8();
        reader.AlignTo(4); /* EnemyHPIsShort */
        int ShowNumericCooldownParty_ = reader.ReadS32();
        int ShowNumericCooldownEnemy_ = reader.ReadS32();
        int ShowNamesForParty_ = reader.ReadS32();
        int ShowNamesForEnemy_ = reader.ReadS32();
        int ShowPartyAttackIntentions_ = reader.ReadS32();
        int ShowPartyCastIntentions_ = reader.ReadS32();
        int ShowEnemyIntentions_ = reader.ReadS32();
        
        return new(ShowSpellName_,
            ShowAvoid_,
            ShowMiss_,
            ShowAttackOfOpportunity_,
            ShowCriticalHit_,
            ShowSneakAttack_,
            ShowDamage_,
            ShowSaves_,
            ShowPartyActions_,
            ShowPartyActionsNoIdle_,
            ShowEnemyActions_,
            ShowPartyHP_,
            ShowEnemyHP_,
            PartyHPIsShort_,
            EnemyHPIsShort_,
            ShowNumericCooldownParty_,
            ShowNumericCooldownEnemy_,
            ShowNamesForParty_,
            ShowNamesForEnemy_,
            ShowPartyAttackIntentions_,
            ShowPartyCastIntentions_,
            ShowEnemyIntentions_);
    }

    public override string ToString() => $"GameCombatTextsSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSpellName: {ShowSpellName}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAvoid: {ShowAvoid}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowMiss: {ShowMiss}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAttackOfOpportunity: {ShowAttackOfOpportunity}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowCriticalHit: {ShowCriticalHit}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSneakAttack: {ShowSneakAttack}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowDamage: {ShowDamage}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSaves: {ShowSaves}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowPartyActions: {ShowPartyActions}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowPartyActionsNoIdle: {ShowPartyActionsNoIdle}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowEnemyActions: {ShowEnemyActions}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowPartyHP: {ShowPartyHP}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowEnemyHP: {ShowEnemyHP}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyHPIsShort: {PartyHPIsShort}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyHPIsShort: {EnemyHPIsShort}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowNumericCooldownParty: {ShowNumericCooldownParty}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowNumericCooldownEnemy: {ShowNumericCooldownEnemy}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowNamesForParty: {ShowNamesForParty}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowNamesForEnemy: {ShowNamesForEnemy}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowPartyAttackIntentions: {ShowPartyAttackIntentions}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowPartyCastIntentions: {ShowPartyCastIntentions}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowEnemyIntentions: {ShowEnemyIntentions}");
    }
}

/* $GameDialogsSettingsDefaultValues (10 fields) */
public readonly record struct GameDialogsSettingsDefaultValues (
    byte ShowItemsReceivedNotification,
    byte ShowLocationRevealedNotification,
    byte ShowXPGainedNotification,
    byte ShowAlignmentShiftsInAnswer,
    byte ShowAlignmentShiftsNotifications,
    byte ShowAlignmentRequirements,
    byte ShowMythicRequirements,
    byte ShowSkillcheckDC,
    byte ShowSkillcheckResult,
    byte ShowKingdomNotifications) : IUnityStructure
{
    public static GameDialogsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte ShowItemsReceivedNotification_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowItemsReceivedNotification */
        byte ShowLocationRevealedNotification_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowLocationRevealedNotification */
        byte ShowXPGainedNotification_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowXPGainedNotification */
        byte ShowAlignmentShiftsInAnswer_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowAlignmentShiftsInAnswer */
        byte ShowAlignmentShiftsNotifications_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowAlignmentShiftsNotifications */
        byte ShowAlignmentRequirements_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowAlignmentRequirements */
        byte ShowMythicRequirements_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowMythicRequirements */
        byte ShowSkillcheckDC_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowSkillcheckDC */
        byte ShowSkillcheckResult_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowSkillcheckResult */
        byte ShowKingdomNotifications_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowKingdomNotifications */
        
        return new(ShowItemsReceivedNotification_,
            ShowLocationRevealedNotification_,
            ShowXPGainedNotification_,
            ShowAlignmentShiftsInAnswer_,
            ShowAlignmentShiftsNotifications_,
            ShowAlignmentRequirements_,
            ShowMythicRequirements_,
            ShowSkillcheckDC_,
            ShowSkillcheckResult_,
            ShowKingdomNotifications_);
    }

    public override string ToString() => $"GameDialogsSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowItemsReceivedNotification: {ShowItemsReceivedNotification}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowLocationRevealedNotification: {ShowLocationRevealedNotification}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowXPGainedNotification: {ShowXPGainedNotification}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAlignmentShiftsInAnswer: {ShowAlignmentShiftsInAnswer}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAlignmentShiftsNotifications: {ShowAlignmentShiftsNotifications}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowAlignmentRequirements: {ShowAlignmentRequirements}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowMythicRequirements: {ShowMythicRequirements}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSkillcheckDC: {ShowSkillcheckDC}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowSkillcheckResult: {ShowSkillcheckResult}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowKingdomNotifications: {ShowKingdomNotifications}");
    }
}

/* $GameAutopauseSettingsDefaultValues (26 fields) */
public readonly record struct GameAutopauseSettingsDefaultValues (
    byte ContinueMovementOnEngagement,
    byte PauseOnLostFocus,
    byte PauseOnTrapDetected,
    byte PauseOnHiddenObjectDetected,
    byte PauseOnEngagement,
    byte PauseOnMeleeEngagement,
    byte PauseOnPartyIsAttacked,
    byte PauseOnEndOfPartyMembersRound,
    byte PauseOnEndOfRound,
    byte PauseOnPartyMemberFinishedAbility,
    int PauseOnSpellcastInterrupted,
    int PauseOnSpellcastStarted,
    byte PauseOnSpellcastFinished,
    byte PauseOnEndedBuffSummon,
    byte PauseOnAllyDown,
    byte PauseOnEnemyDown,
    byte PauseOnNewEnemyAppeared,
    byte PauseOnLowHealth,
    byte PauseOnAttackOfOpportunity,
    byte PauseOnPartyMemberRanOutOfConsumable,
    byte PauseOnEnemySpotted,
    byte PauseOnWeaponIsIneffective,
    byte PauseOnAreaLoaded,
    byte PauseWhenAllyUnconscious,
    byte PauseWhenEnemyUnconscious,
    byte PauseOnLoadingScreen) : IUnityStructure
{
    public static GameAutopauseSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte ContinueMovementOnEngagement_ = reader.ReadU8();
        reader.AlignTo(4); /* ContinueMovementOnEngagement */
        byte PauseOnLostFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnLostFocus */
        byte PauseOnTrapDetected_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnTrapDetected */
        byte PauseOnHiddenObjectDetected_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnHiddenObjectDetected */
        byte PauseOnEngagement_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEngagement */
        byte PauseOnMeleeEngagement_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnMeleeEngagement */
        byte PauseOnPartyIsAttacked_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnPartyIsAttacked */
        byte PauseOnEndOfPartyMembersRound_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEndOfPartyMembersRound */
        byte PauseOnEndOfRound_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEndOfRound */
        byte PauseOnPartyMemberFinishedAbility_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnPartyMemberFinishedAbility */
        int PauseOnSpellcastInterrupted_ = reader.ReadS32();
        int PauseOnSpellcastStarted_ = reader.ReadS32();
        byte PauseOnSpellcastFinished_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnSpellcastFinished */
        byte PauseOnEndedBuffSummon_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEndedBuffSummon */
        byte PauseOnAllyDown_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnAllyDown */
        byte PauseOnEnemyDown_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEnemyDown */
        byte PauseOnNewEnemyAppeared_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnNewEnemyAppeared */
        byte PauseOnLowHealth_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnLowHealth */
        byte PauseOnAttackOfOpportunity_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnAttackOfOpportunity */
        byte PauseOnPartyMemberRanOutOfConsumable_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnPartyMemberRanOutOfConsumable */
        byte PauseOnEnemySpotted_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnEnemySpotted */
        byte PauseOnWeaponIsIneffective_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnWeaponIsIneffective */
        byte PauseOnAreaLoaded_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnAreaLoaded */
        byte PauseWhenAllyUnconscious_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseWhenAllyUnconscious */
        byte PauseWhenEnemyUnconscious_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseWhenEnemyUnconscious */
        byte PauseOnLoadingScreen_ = reader.ReadU8();
        reader.AlignTo(4); /* PauseOnLoadingScreen */
        
        return new(ContinueMovementOnEngagement_,
            PauseOnLostFocus_,
            PauseOnTrapDetected_,
            PauseOnHiddenObjectDetected_,
            PauseOnEngagement_,
            PauseOnMeleeEngagement_,
            PauseOnPartyIsAttacked_,
            PauseOnEndOfPartyMembersRound_,
            PauseOnEndOfRound_,
            PauseOnPartyMemberFinishedAbility_,
            PauseOnSpellcastInterrupted_,
            PauseOnSpellcastStarted_,
            PauseOnSpellcastFinished_,
            PauseOnEndedBuffSummon_,
            PauseOnAllyDown_,
            PauseOnEnemyDown_,
            PauseOnNewEnemyAppeared_,
            PauseOnLowHealth_,
            PauseOnAttackOfOpportunity_,
            PauseOnPartyMemberRanOutOfConsumable_,
            PauseOnEnemySpotted_,
            PauseOnWeaponIsIneffective_,
            PauseOnAreaLoaded_,
            PauseWhenAllyUnconscious_,
            PauseWhenEnemyUnconscious_,
            PauseOnLoadingScreen_);
    }

    public override string ToString() => $"GameAutopauseSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ContinueMovementOnEngagement: {ContinueMovementOnEngagement}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnLostFocus: {PauseOnLostFocus}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnTrapDetected: {PauseOnTrapDetected}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnHiddenObjectDetected: {PauseOnHiddenObjectDetected}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnEngagement: {PauseOnEngagement}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnMeleeEngagement: {PauseOnMeleeEngagement}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnPartyIsAttacked: {PauseOnPartyIsAttacked}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnEndOfPartyMembersRound: {PauseOnEndOfPartyMembersRound}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnEndOfRound: {PauseOnEndOfRound}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnPartyMemberFinishedAbility: {PauseOnPartyMemberFinishedAbility}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnSpellcastInterrupted: {PauseOnSpellcastInterrupted}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnSpellcastStarted: {PauseOnSpellcastStarted}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnSpellcastFinished: {PauseOnSpellcastFinished}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnEndedBuffSummon: {PauseOnEndedBuffSummon}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnAllyDown: {PauseOnAllyDown}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnEnemyDown: {PauseOnEnemyDown}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnNewEnemyAppeared: {PauseOnNewEnemyAppeared}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnLowHealth: {PauseOnLowHealth}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnAttackOfOpportunity: {PauseOnAttackOfOpportunity}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnPartyMemberRanOutOfConsumable: {PauseOnPartyMemberRanOutOfConsumable}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnEnemySpotted: {PauseOnEnemySpotted}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnWeaponIsIneffective: {PauseOnWeaponIsIneffective}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnAreaLoaded: {PauseOnAreaLoaded}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseWhenAllyUnconscious: {PauseWhenAllyUnconscious}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseWhenEnemyUnconscious: {PauseWhenEnemyUnconscious}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PauseOnLoadingScreen: {PauseOnLoadingScreen}");
    }
}

/* $GameTurnBasedSettingsDefaultValues (13 fields) */
public readonly record struct GameTurnBasedSettingsDefaultValues (
    byte EnableTurnBasedMode,
    byte AutoEndTurn,
    byte AutoStopAfterFirstMoveAction,
    byte CameraFollowUnit,
    byte CameraScrollToCurrentUnit,
    byte EnableTurnBaseCombatText,
    int SpeedUpMode,
    byte FastMovement,
    byte FastPartyCast,
    byte DisableActionCamera,
    float TimeScaleInPlayerTurn,
    float TimeScaleInNonPlayerTurn,
    byte AutoSelectWeaponAbility) : IUnityStructure
{
    public static GameTurnBasedSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte EnableTurnBasedMode_ = reader.ReadU8();
        reader.AlignTo(4); /* EnableTurnBasedMode */
        byte AutoEndTurn_ = reader.ReadU8();
        reader.AlignTo(4); /* AutoEndTurn */
        byte AutoStopAfterFirstMoveAction_ = reader.ReadU8();
        reader.AlignTo(4); /* AutoStopAfterFirstMoveAction */
        byte CameraFollowUnit_ = reader.ReadU8();
        reader.AlignTo(4); /* CameraFollowUnit */
        byte CameraScrollToCurrentUnit_ = reader.ReadU8();
        reader.AlignTo(4); /* CameraScrollToCurrentUnit */
        byte EnableTurnBaseCombatText_ = reader.ReadU8();
        reader.AlignTo(4); /* EnableTurnBaseCombatText */
        int SpeedUpMode_ = reader.ReadS32();
        byte FastMovement_ = reader.ReadU8();
        reader.AlignTo(4); /* FastMovement */
        byte FastPartyCast_ = reader.ReadU8();
        reader.AlignTo(4); /* FastPartyCast */
        byte DisableActionCamera_ = reader.ReadU8();
        reader.AlignTo(4); /* DisableActionCamera */
        float TimeScaleInPlayerTurn_ = reader.ReadF32();
        float TimeScaleInNonPlayerTurn_ = reader.ReadF32();
        byte AutoSelectWeaponAbility_ = reader.ReadU8();
        reader.AlignTo(4); /* AutoSelectWeaponAbility */
        
        return new(EnableTurnBasedMode_,
            AutoEndTurn_,
            AutoStopAfterFirstMoveAction_,
            CameraFollowUnit_,
            CameraScrollToCurrentUnit_,
            EnableTurnBaseCombatText_,
            SpeedUpMode_,
            FastMovement_,
            FastPartyCast_,
            DisableActionCamera_,
            TimeScaleInPlayerTurn_,
            TimeScaleInNonPlayerTurn_,
            AutoSelectWeaponAbility_);
    }

    public override string ToString() => $"GameTurnBasedSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnableTurnBasedMode: {EnableTurnBasedMode}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoEndTurn: {AutoEndTurn}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoStopAfterFirstMoveAction: {AutoStopAfterFirstMoveAction}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraFollowUnit: {CameraFollowUnit}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollToCurrentUnit: {CameraScrollToCurrentUnit}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnableTurnBaseCombatText: {EnableTurnBaseCombatText}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpeedUpMode: {SpeedUpMode}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FastMovement: {FastMovement}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FastPartyCast: {FastPartyCast}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisableActionCamera: {DisableActionCamera}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TimeScaleInPlayerTurn: {TimeScaleInPlayerTurn}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TimeScaleInNonPlayerTurn: {TimeScaleInNonPlayerTurn}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoSelectWeaponAbility: {AutoSelectWeaponAbility}");
    }
}

/* $GameSillyCheatCodesSettingsDefaultValues (5 fields) */
public readonly record struct GameSillyCheatCodesSettingsDefaultValues (
    byte CanSeeTheirClassSpecificClothes,
    byte DressAllCompanionsInDrobyshevskysShirt,
    byte FeedCritters,
    byte InsteadOfBloodSprinkleRandomCritters,
    byte SpawnOwlcatOnGlobalmap) : IUnityStructure
{
    public static GameSillyCheatCodesSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte CanSeeTheirClassSpecificClothes_ = reader.ReadU8();
        reader.AlignTo(4); /* CanSeeTheirClassSpecificClothes */
        byte DressAllCompanionsInDrobyshevskysShirt_ = reader.ReadU8();
        reader.AlignTo(4); /* DressAllCompanionsInDrobyshevskysShirt */
        byte FeedCritters_ = reader.ReadU8();
        reader.AlignTo(4); /* FeedCritters */
        byte InsteadOfBloodSprinkleRandomCritters_ = reader.ReadU8();
        reader.AlignTo(4); /* InsteadOfBloodSprinkleRandomCritters */
        byte SpawnOwlcatOnGlobalmap_ = reader.ReadU8();
        reader.AlignTo(4); /* SpawnOwlcatOnGlobalmap */
        
        return new(CanSeeTheirClassSpecificClothes_,
            DressAllCompanionsInDrobyshevskysShirt_,
            FeedCritters_,
            InsteadOfBloodSprinkleRandomCritters_,
            SpawnOwlcatOnGlobalmap_);
    }

    public override string ToString() => $"GameSillyCheatCodesSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CanSeeTheirClassSpecificClothes: {CanSeeTheirClassSpecificClothes}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DressAllCompanionsInDrobyshevskysShirt: {DressAllCompanionsInDrobyshevskysShirt}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FeedCritters: {FeedCritters}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InsteadOfBloodSprinkleRandomCritters: {InsteadOfBloodSprinkleRandomCritters}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpawnOwlcatOnGlobalmap: {SpawnOwlcatOnGlobalmap}");
    }
}

/* $DifficultySettingsDefaultValues (26 fields) */
public readonly record struct DifficultySettingsDefaultValues (
    byte OnlyOneSave,
    byte ImmersiveMode,
    byte OnlyActiveCompanionsReceiveExperience,
    byte OnlyInitiatorReceiveSkillCheckExperience,
    byte LimitedAI,
    int EnemyDodgePercentModifier,
    int CoverHitBonusHalfModifier,
    int CoverHitBonusFullModifier,
    int MinPartyDamage,
    int MinPartyDamageFraction,
    int MinPartyStarshipDamage,
    int MinPartyStarshipDamageFraction,
    int PartyMomentumPercentModifier,
    int NPCAttributesBaseValuePercentModifier,
    int HardCrowdControlOnPartyMaxDurationRounds,
    int SkillCheckModifier,
    int EnemyHitPointsPercentModifier,
    int AllyResolveModifier,
    int PartyDamageDealtAfterArmorReductionPercentModifier,
    int WoundDamagePerTurnThresholdHPFraction,
    int OldWoundDelayRounds,
    int WoundStacksForTrauma,
    int MinCR,
    int MaxCR,
    int SpaceCombatDifficulty,
    int GameDifficulty) : IUnityStructure
{
    public static DifficultySettingsDefaultValues Read(EndianBinaryReader reader)
    {
        byte OnlyOneSave_ = reader.ReadU8();
        reader.AlignTo(4); /* OnlyOneSave */
        byte ImmersiveMode_ = reader.ReadU8();
        reader.AlignTo(4); /* ImmersiveMode */
        byte OnlyActiveCompanionsReceiveExperience_ = reader.ReadU8();
        reader.AlignTo(4); /* OnlyActiveCompanionsReceiveExperience */
        byte OnlyInitiatorReceiveSkillCheckExperience_ = reader.ReadU8();
        reader.AlignTo(4); /* OnlyInitiatorReceiveSkillCheckExperience */
        byte LimitedAI_ = reader.ReadU8();
        reader.AlignTo(4); /* LimitedAI */
        int EnemyDodgePercentModifier_ = reader.ReadS32();
        int CoverHitBonusHalfModifier_ = reader.ReadS32();
        int CoverHitBonusFullModifier_ = reader.ReadS32();
        int MinPartyDamage_ = reader.ReadS32();
        int MinPartyDamageFraction_ = reader.ReadS32();
        int MinPartyStarshipDamage_ = reader.ReadS32();
        int MinPartyStarshipDamageFraction_ = reader.ReadS32();
        int PartyMomentumPercentModifier_ = reader.ReadS32();
        int NPCAttributesBaseValuePercentModifier_ = reader.ReadS32();
        int HardCrowdControlOnPartyMaxDurationRounds_ = reader.ReadS32();
        int SkillCheckModifier_ = reader.ReadS32();
        int EnemyHitPointsPercentModifier_ = reader.ReadS32();
        int AllyResolveModifier_ = reader.ReadS32();
        int PartyDamageDealtAfterArmorReductionPercentModifier_ = reader.ReadS32();
        int WoundDamagePerTurnThresholdHPFraction_ = reader.ReadS32();
        int OldWoundDelayRounds_ = reader.ReadS32();
        int WoundStacksForTrauma_ = reader.ReadS32();
        int MinCR_ = reader.ReadS32();
        int MaxCR_ = reader.ReadS32();
        int SpaceCombatDifficulty_ = reader.ReadS32();
        int GameDifficulty_ = reader.ReadS32();
        
        return new(OnlyOneSave_,
            ImmersiveMode_,
            OnlyActiveCompanionsReceiveExperience_,
            OnlyInitiatorReceiveSkillCheckExperience_,
            LimitedAI_,
            EnemyDodgePercentModifier_,
            CoverHitBonusHalfModifier_,
            CoverHitBonusFullModifier_,
            MinPartyDamage_,
            MinPartyDamageFraction_,
            MinPartyStarshipDamage_,
            MinPartyStarshipDamageFraction_,
            PartyMomentumPercentModifier_,
            NPCAttributesBaseValuePercentModifier_,
            HardCrowdControlOnPartyMaxDurationRounds_,
            SkillCheckModifier_,
            EnemyHitPointsPercentModifier_,
            AllyResolveModifier_,
            PartyDamageDealtAfterArmorReductionPercentModifier_,
            WoundDamagePerTurnThresholdHPFraction_,
            OldWoundDelayRounds_,
            WoundStacksForTrauma_,
            MinCR_,
            MaxCR_,
            SpaceCombatDifficulty_,
            GameDifficulty_);
    }

    public override string ToString() => $"DifficultySettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyOneSave: {OnlyOneSave}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ImmersiveMode: {ImmersiveMode}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyActiveCompanionsReceiveExperience: {OnlyActiveCompanionsReceiveExperience}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OnlyInitiatorReceiveSkillCheckExperience: {OnlyInitiatorReceiveSkillCheckExperience}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LimitedAI: {LimitedAI}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyDodgePercentModifier: {EnemyDodgePercentModifier}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverHitBonusHalfModifier: {CoverHitBonusHalfModifier}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CoverHitBonusFullModifier: {CoverHitBonusFullModifier}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyDamage: {MinPartyDamage}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyDamageFraction: {MinPartyDamageFraction}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyStarshipDamage: {MinPartyStarshipDamage}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinPartyStarshipDamageFraction: {MinPartyStarshipDamageFraction}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyMomentumPercentModifier: {PartyMomentumPercentModifier}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NPCAttributesBaseValuePercentModifier: {NPCAttributesBaseValuePercentModifier}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HardCrowdControlOnPartyMaxDurationRounds: {HardCrowdControlOnPartyMaxDurationRounds}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SkillCheckModifier: {SkillCheckModifier}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnemyHitPointsPercentModifier: {EnemyHitPointsPercentModifier}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AllyResolveModifier: {AllyResolveModifier}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PartyDamageDealtAfterArmorReductionPercentModifier: {PartyDamageDealtAfterArmorReductionPercentModifier}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WoundDamagePerTurnThresholdHPFraction: {WoundDamagePerTurnThresholdHPFraction}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OldWoundDelayRounds: {OldWoundDelayRounds}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WoundStacksForTrauma: {WoundStacksForTrauma}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MinCR: {MinCR}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxCR: {MaxCR}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SpaceCombatDifficulty: {SpaceCombatDifficulty}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameDifficulty: {GameDifficulty}");
    }
}

/* $ControlsSettingsDefaultValues (12 fields) */
public record class ControlsSettingsDefaultValues (
    float MouseSensitivity,
    float MouseClickDelay,
    byte ScreenEdgeScrolling,
    float CameraScrollSpeedEdge,
    float CameraScrollSpeedKeyboard,
    float CameraRotationSpeedEdge,
    float CameraRotationSpeedKeyboard,
    byte CameraScrollOutOfScreenEnabled,
    int MouseRightButtonFunction,
    byte ConvertSnapLogic,
    byte CameraFollowsUnit,
    ControlsKeybindingsSettingsDefaultValues Keybindings) : IUnityStructure
{
    public static ControlsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        float MouseSensitivity_ = reader.ReadF32();
        float MouseClickDelay_ = reader.ReadF32();
        byte ScreenEdgeScrolling_ = reader.ReadU8();
        reader.AlignTo(4); /* ScreenEdgeScrolling */
        float CameraScrollSpeedEdge_ = reader.ReadF32();
        float CameraScrollSpeedKeyboard_ = reader.ReadF32();
        float CameraRotationSpeedEdge_ = reader.ReadF32();
        float CameraRotationSpeedKeyboard_ = reader.ReadF32();
        byte CameraScrollOutOfScreenEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* CameraScrollOutOfScreenEnabled */
        int MouseRightButtonFunction_ = reader.ReadS32();
        byte ConvertSnapLogic_ = reader.ReadU8();
        reader.AlignTo(4); /* ConvertSnapLogic */
        byte CameraFollowsUnit_ = reader.ReadU8();
        reader.AlignTo(4); /* CameraFollowsUnit */
        ControlsKeybindingsSettingsDefaultValues Keybindings_ = ControlsKeybindingsSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Keybindings */
        
        return new(MouseSensitivity_,
            MouseClickDelay_,
            ScreenEdgeScrolling_,
            CameraScrollSpeedEdge_,
            CameraScrollSpeedKeyboard_,
            CameraRotationSpeedEdge_,
            CameraRotationSpeedKeyboard_,
            CameraScrollOutOfScreenEnabled_,
            MouseRightButtonFunction_,
            ConvertSnapLogic_,
            CameraFollowsUnit_,
            Keybindings_);
    }

    public override string ToString() => $"ControlsSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MouseSensitivity: {MouseSensitivity}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MouseClickDelay: {MouseClickDelay}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenEdgeScrolling: {ScreenEdgeScrolling}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollSpeedEdge: {CameraScrollSpeedEdge}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollSpeedKeyboard: {CameraScrollSpeedKeyboard}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotationSpeedEdge: {CameraRotationSpeedEdge}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraRotationSpeedKeyboard: {CameraRotationSpeedKeyboard}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraScrollOutOfScreenEnabled: {CameraScrollOutOfScreenEnabled}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MouseRightButtonFunction: {MouseRightButtonFunction}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ConvertSnapLogic: {ConvertSnapLogic}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraFollowsUnit: {CameraFollowsUnit}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Keybindings: {{ \n{Keybindings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ControlsKeybindingsSettingsDefaultValues (5 fields) */
public record class ControlsKeybindingsSettingsDefaultValues (
    ControlsKeybindingsGeneralSettingsDefaultValues General,
    ControlsKeybindingsActionBarSettingsDefaultValues ActionBar,
    ControlsKeybindingsDialogSettingsDefaultValues Dialog,
    ControlsKeybindingsSelectCharacterSettingsDefaultValues SelectCharacter,
    ControlsKeybindingsTurnBasedSettingsDefaultValues TurnBased) : IUnityStructure
{
    public static ControlsKeybindingsSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        ControlsKeybindingsGeneralSettingsDefaultValues General_ = ControlsKeybindingsGeneralSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* General */
        ControlsKeybindingsActionBarSettingsDefaultValues ActionBar_ = ControlsKeybindingsActionBarSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* ActionBar */
        ControlsKeybindingsDialogSettingsDefaultValues Dialog_ = ControlsKeybindingsDialogSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* Dialog */
        ControlsKeybindingsSelectCharacterSettingsDefaultValues SelectCharacter_ = ControlsKeybindingsSelectCharacterSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* SelectCharacter */
        ControlsKeybindingsTurnBasedSettingsDefaultValues TurnBased_ = ControlsKeybindingsTurnBasedSettingsDefaultValues.Read(reader);
        reader.AlignTo(4); /* TurnBased */
        
        return new(General_,
            ActionBar_,
            Dialog_,
            SelectCharacter_,
            TurnBased_);
    }

    public override string ToString() => $"ControlsKeybindingsSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}General: {{ \n{General.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBar: {{ \n{ActionBar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dialog: {{ \n{Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectCharacter: {{ \n{SelectCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TurnBased: {{ \n{TurnBased.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ControlsKeybindingsGeneralSettingsDefaultValues (47 fields) */
public record class ControlsKeybindingsGeneralSettingsDefaultValues (
    KeyBindingPair HighlightObjects,
    KeyBindingPair Hold,
    KeyBindingPair MuteMusic,
    KeyBindingPair MuteSound,
    KeyBindingPair OpenCharacterScreen,
    KeyBindingPair OpenInventory,
    KeyBindingPair OpenJournal,
    KeyBindingPair OpenMap,
    KeyBindingPair OpenEncyclopedia,
    KeyBindingPair OpenColonyManagement,
    KeyBindingPair OpenShipCustomization,
    KeyBindingPair OpenCargoManagement,
    KeyBindingPair OpenFormation,
    KeyBindingPair OpenRestCamp,
    KeyBindingPair OpenSpells,
    KeyBindingPair FlipZoneStrategist,
    KeyBindingPair Inspect,
    KeyBindingPair Pause,
    KeyBindingPair QuickLoad,
    KeyBindingPair QuickSave,
    KeyBindingPair Screenshot,
    KeyBindingPair Stop,
    KeyBindingPair Unpause,
    KeyBindingPair CameraUp,
    KeyBindingPair CameraDown,
    KeyBindingPair CameraLeft,
    KeyBindingPair CameraRight,
    KeyBindingPair CameraRotateLeft,
    KeyBindingPair CameraRotateRight,
    KeyBindingPair CameraRotateToPointNorth,
    KeyBindingPair FollowUnit,
    KeyBindingPair SkipBark,
    KeyBindingPair SkipCutscene,
    KeyBindingPair SwitchTBM,
    KeyBindingPair ChangeCursorAction,
    KeyBindingPair ModifyMovementLimit,
    KeyBindingPair OpenModificationWindow,
    KeyBindingPair SpeedUpEnemiesTurn,
    KeyBindingPair SwitchUIVisibility,
    KeyBindingPair ShowHideCombatLog,
    KeyBindingPair EndTurn,
    KeyBindingPair OpenSearchInventory,
    KeyBindingPair CollectAllLoot,
    KeyBindingPair PrevTab,
    KeyBindingPair NextTab,
    KeyBindingPair PrevCharacter,
    KeyBindingPair NextCharacter) : IUnityStructure
{
    public static ControlsKeybindingsGeneralSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        KeyBindingPair HighlightObjects_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* HighlightObjects */
        KeyBindingPair Hold_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Hold */
        KeyBindingPair MuteMusic_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* MuteMusic */
        KeyBindingPair MuteSound_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* MuteSound */
        KeyBindingPair OpenCharacterScreen_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenCharacterScreen */
        KeyBindingPair OpenInventory_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenInventory */
        KeyBindingPair OpenJournal_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenJournal */
        KeyBindingPair OpenMap_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenMap */
        KeyBindingPair OpenEncyclopedia_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenEncyclopedia */
        KeyBindingPair OpenColonyManagement_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenColonyManagement */
        KeyBindingPair OpenShipCustomization_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenShipCustomization */
        KeyBindingPair OpenCargoManagement_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenCargoManagement */
        KeyBindingPair OpenFormation_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenFormation */
        KeyBindingPair OpenRestCamp_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenRestCamp */
        KeyBindingPair OpenSpells_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenSpells */
        KeyBindingPair FlipZoneStrategist_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* FlipZoneStrategist */
        KeyBindingPair Inspect_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Inspect */
        KeyBindingPair Pause_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Pause */
        KeyBindingPair QuickLoad_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* QuickLoad */
        KeyBindingPair QuickSave_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* QuickSave */
        KeyBindingPair Screenshot_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Screenshot */
        KeyBindingPair Stop_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Stop */
        KeyBindingPair Unpause_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* Unpause */
        KeyBindingPair CameraUp_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraUp */
        KeyBindingPair CameraDown_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraDown */
        KeyBindingPair CameraLeft_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraLeft */
        KeyBindingPair CameraRight_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRight */
        KeyBindingPair CameraRotateLeft_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRotateLeft */
        KeyBindingPair CameraRotateRight_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRotateRight */
        KeyBindingPair CameraRotateToPointNorth_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CameraRotateToPointNorth */
        KeyBindingPair FollowUnit_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* FollowUnit */
        KeyBindingPair SkipBark_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SkipBark */
        KeyBindingPair SkipCutscene_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SkipCutscene */
        KeyBindingPair SwitchTBM_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SwitchTBM */
        KeyBindingPair ChangeCursorAction_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ChangeCursorAction */
        KeyBindingPair ModifyMovementLimit_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ModifyMovementLimit */
        KeyBindingPair OpenModificationWindow_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenModificationWindow */
        KeyBindingPair SpeedUpEnemiesTurn_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SpeedUpEnemiesTurn */
        KeyBindingPair SwitchUIVisibility_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SwitchUIVisibility */
        KeyBindingPair ShowHideCombatLog_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ShowHideCombatLog */
        KeyBindingPair EndTurn_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* EndTurn */
        KeyBindingPair OpenSearchInventory_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* OpenSearchInventory */
        KeyBindingPair CollectAllLoot_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* CollectAllLoot */
        KeyBindingPair PrevTab_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* PrevTab */
        KeyBindingPair NextTab_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* NextTab */
        KeyBindingPair PrevCharacter_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* PrevCharacter */
        KeyBindingPair NextCharacter_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* NextCharacter */
        
        return new(HighlightObjects_,
            Hold_,
            MuteMusic_,
            MuteSound_,
            OpenCharacterScreen_,
            OpenInventory_,
            OpenJournal_,
            OpenMap_,
            OpenEncyclopedia_,
            OpenColonyManagement_,
            OpenShipCustomization_,
            OpenCargoManagement_,
            OpenFormation_,
            OpenRestCamp_,
            OpenSpells_,
            FlipZoneStrategist_,
            Inspect_,
            Pause_,
            QuickLoad_,
            QuickSave_,
            Screenshot_,
            Stop_,
            Unpause_,
            CameraUp_,
            CameraDown_,
            CameraLeft_,
            CameraRight_,
            CameraRotateLeft_,
            CameraRotateRight_,
            CameraRotateToPointNorth_,
            FollowUnit_,
            SkipBark_,
            SkipCutscene_,
            SwitchTBM_,
            ChangeCursorAction_,
            ModifyMovementLimit_,
            OpenModificationWindow_,
            SpeedUpEnemiesTurn_,
            SwitchUIVisibility_,
            ShowHideCombatLog_,
            EndTurn_,
            OpenSearchInventory_,
            CollectAllLoot_,
            PrevTab_,
            NextTab_,
            PrevCharacter_,
            NextCharacter_);
    }

    public override string ToString() => $"ControlsKeybindingsGeneralSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighlightObjects: {{ \n{HighlightObjects.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Hold: {{ \n{Hold.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MuteMusic: {{ \n{MuteMusic.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MuteSound: {{ \n{MuteSound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenCharacterScreen: {{ \n{OpenCharacterScreen.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenInventory: {{ \n{OpenInventory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenJournal: {{ \n{OpenJournal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenMap: {{ \n{OpenMap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenEncyclopedia: {{ \n{OpenEncyclopedia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenColonyManagement: {{ \n{OpenColonyManagement.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenShipCustomization: {{ \n{OpenShipCustomization.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenCargoManagement: {{ \n{OpenCargoManagement.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenFormation: {{ \n{OpenFormation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenRestCamp: {{ \n{OpenRestCamp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenSpells: {{ \n{OpenSpells.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FlipZoneStrategist: {{ \n{FlipZoneStrategist.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Inspect: {{ \n{Inspect.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pause: {{ \n{Pause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuickLoad: {{ \n{QuickLoad.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuickSave: {{ \n{QuickSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Screenshot: {{ \n{Screenshot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Stop: {{ \n{Stop.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unpause: {{ \n{Unpause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraUp: {{ \n{CameraUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraDown: {{ \n{CameraDown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraLeft: {{ \n{CameraLeft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraRight: {{ \n{CameraRight.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraRotateLeft: {{ \n{CameraRotateLeft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraRotateRight: {{ \n{CameraRotateRight.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CameraRotateToPointNorth: {{ \n{CameraRotateToPointNorth.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FollowUnit: {{ \n{FollowUnit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkipBark: {{ \n{SkipBark.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkipCutscene: {{ \n{SkipCutscene.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchTBM: {{ \n{SwitchTBM.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeCursorAction: {{ \n{ChangeCursorAction.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ModifyMovementLimit: {{ \n{ModifyMovementLimit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenModificationWindow: {{ \n{OpenModificationWindow.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpeedUpEnemiesTurn: {{ \n{SpeedUpEnemiesTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchUIVisibility: {{ \n{SwitchUIVisibility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowHideCombatLog: {{ \n{ShowHideCombatLog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EndTurn: {{ \n{EndTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenSearchInventory: {{ \n{OpenSearchInventory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CollectAllLoot: {{ \n{CollectAllLoot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrevTab: {{ \n{PrevTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextTab: {{ \n{NextTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrevCharacter: {{ \n{PrevCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextCharacter: {{ \n{NextCharacter.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $KeyBindingPair (4 fields) */
public record class KeyBindingPair (
    KeyBindingData Binding1,
    KeyBindingData Binding2,
    int GameModesGroup,
    byte TriggerOnHold) : IUnityStructure
{
    public static KeyBindingPair Read(EndianBinaryReader reader)
    {
        KeyBindingData Binding1_ = KeyBindingData.Read(reader);
        reader.AlignTo(4); /* Binding1 */
        KeyBindingData Binding2_ = KeyBindingData.Read(reader);
        reader.AlignTo(4); /* Binding2 */
        int GameModesGroup_ = reader.ReadS32();
        byte TriggerOnHold_ = reader.ReadU8();
        reader.AlignTo(4); /* TriggerOnHold */
        
        return new(Binding1_,
            Binding2_,
            GameModesGroup_,
            TriggerOnHold_);
    }

    public override string ToString() => $"KeyBindingPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Binding1: {{ Key: {Binding1.Key}, IsCtrlDown: {Binding1.IsCtrlDown}, IsAltDown: {Binding1.IsAltDown}, IsShiftDown: {Binding1.IsShiftDown} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Binding2: {{ Key: {Binding2.Key}, IsCtrlDown: {Binding2.IsCtrlDown}, IsAltDown: {Binding2.IsAltDown}, IsShiftDown: {Binding2.IsShiftDown} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameModesGroup: {GameModesGroup}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TriggerOnHold: {TriggerOnHold}");
    }
}

/* $KeyBindingData (4 fields) */
public readonly record struct KeyBindingData (
    int Key,
    byte IsCtrlDown,
    byte IsAltDown,
    byte IsShiftDown) : IUnityStructure
{
    public static KeyBindingData Read(EndianBinaryReader reader)
    {
        int Key_ = reader.ReadS32();
        byte IsCtrlDown_ = reader.ReadU8();
        reader.AlignTo(4); /* IsCtrlDown */
        byte IsAltDown_ = reader.ReadU8();
        reader.AlignTo(4); /* IsAltDown */
        byte IsShiftDown_ = reader.ReadU8();
        reader.AlignTo(4); /* IsShiftDown */
        
        return new(Key_,
            IsCtrlDown_,
            IsAltDown_,
            IsShiftDown_);
    }

    public override string ToString() => $"KeyBindingData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Key: {Key}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsCtrlDown: {IsCtrlDown}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsAltDown: {IsAltDown}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsShiftDown: {IsShiftDown}");
    }
}

/* $ControlsKeybindingsActionBarSettingsDefaultValues (4 fields) */
public record class ControlsKeybindingsActionBarSettingsDefaultValues (
    KeyBindingPair ChangeWeaponSet,
    KeyBindingPair[] ActionBarConsumables,
    KeyBindingPair[] ActionBarWeapons,
    KeyBindingPair[] ActionBarAbilities) : IUnityStructure
{
    public static ControlsKeybindingsActionBarSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        KeyBindingPair ChangeWeaponSet_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ChangeWeaponSet */
        KeyBindingPair[] ActionBarConsumables_ = BuiltInArray<KeyBindingPair>.Read(reader);
        reader.AlignTo(4); /* ActionBarConsumables */
        KeyBindingPair[] ActionBarWeapons_ = BuiltInArray<KeyBindingPair>.Read(reader);
        reader.AlignTo(4); /* ActionBarWeapons */
        KeyBindingPair[] ActionBarAbilities_ = BuiltInArray<KeyBindingPair>.Read(reader);
        reader.AlignTo(4); /* ActionBarAbilities */
        
        return new(ChangeWeaponSet_,
            ActionBarConsumables_,
            ActionBarWeapons_,
            ActionBarAbilities_);
    }

    public override string ToString() => $"ControlsKeybindingsActionBarSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeWeaponSet: {{ \n{ChangeWeaponSet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarConsumables[{ActionBarConsumables.Length}] = {{");
        if (ActionBarConsumables.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyBindingPair _4 in ActionBarConsumables)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (ActionBarConsumables.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarWeapons[{ActionBarWeapons.Length}] = {{");
        if (ActionBarWeapons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyBindingPair _4 in ActionBarWeapons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (ActionBarWeapons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarAbilities[{ActionBarAbilities.Length}] = {{");
        if (ActionBarAbilities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyBindingPair _4 in ActionBarAbilities)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (ActionBarAbilities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ControlsKeybindingsDialogSettingsDefaultValues (2 fields) */
public record class ControlsKeybindingsDialogSettingsDefaultValues (
    KeyBindingPair[] DialogChoices,
    KeyBindingPair NextOrEnd) : IUnityStructure
{
    public static ControlsKeybindingsDialogSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        KeyBindingPair[] DialogChoices_ = BuiltInArray<KeyBindingPair>.Read(reader);
        reader.AlignTo(4); /* DialogChoices */
        KeyBindingPair NextOrEnd_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* NextOrEnd */
        
        return new(DialogChoices_,
            NextOrEnd_);
    }

    public override string ToString() => $"ControlsKeybindingsDialogSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogChoices[{DialogChoices.Length}] = {{");
        if (DialogChoices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyBindingPair _4 in DialogChoices)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (DialogChoices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextOrEnd: {{ \n{NextOrEnd.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ControlsKeybindingsSelectCharacterSettingsDefaultValues (2 fields) */
public record class ControlsKeybindingsSelectCharacterSettingsDefaultValues (
    KeyBindingPair[] SelectCharacter,
    KeyBindingPair SelectAll) : IUnityStructure
{
    public static ControlsKeybindingsSelectCharacterSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        KeyBindingPair[] SelectCharacter_ = BuiltInArray<KeyBindingPair>.Read(reader);
        reader.AlignTo(4); /* SelectCharacter */
        KeyBindingPair SelectAll_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SelectAll */
        
        return new(SelectCharacter_,
            SelectAll_);
    }

    public override string ToString() => $"ControlsKeybindingsSelectCharacterSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectCharacter[{SelectCharacter.Length}] = {{");
        if (SelectCharacter.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyBindingPair _4 in SelectCharacter)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (SelectCharacter.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectAll: {{ \n{SelectAll.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ControlsKeybindingsTurnBasedSettingsDefaultValues (3 fields) */
public record class ControlsKeybindingsTurnBasedSettingsDefaultValues (
    KeyBindingPair ChangeCursorAction,
    KeyBindingPair ModifyMovementLimit,
    KeyBindingPair SwitchTBM) : IUnityStructure
{
    public static ControlsKeybindingsTurnBasedSettingsDefaultValues Read(EndianBinaryReader reader)
    {
        KeyBindingPair ChangeCursorAction_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ChangeCursorAction */
        KeyBindingPair ModifyMovementLimit_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* ModifyMovementLimit */
        KeyBindingPair SwitchTBM_ = KeyBindingPair.Read(reader);
        reader.AlignTo(4); /* SwitchTBM */
        
        return new(ChangeCursorAction_,
            ModifyMovementLimit_,
            SwitchTBM_);
    }

    public override string ToString() => $"ControlsKeybindingsTurnBasedSettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeCursorAction: {{ \n{ChangeCursorAction.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ModifyMovementLimit: {{ \n{ModifyMovementLimit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchTBM: {{ \n{SwitchTBM.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DisplaySettingsDefaultValues (4 fields) */
public readonly record struct DisplaySettingsDefaultValues (
    float GammaCorrection,
    float Brightness,
    float Contrast,
    int SafeZoneOffset) : IUnityStructure
{
    public static DisplaySettingsDefaultValues Read(EndianBinaryReader reader)
    {
        float GammaCorrection_ = reader.ReadF32();
        float Brightness_ = reader.ReadF32();
        float Contrast_ = reader.ReadF32();
        int SafeZoneOffset_ = reader.ReadS32();
        
        return new(GammaCorrection_,
            Brightness_,
            Contrast_,
            SafeZoneOffset_);
    }

    public override string ToString() => $"DisplaySettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GammaCorrection: {GammaCorrection}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Brightness: {Brightness}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Contrast: {Contrast}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SafeZoneOffset: {SafeZoneOffset}");
    }
}

/* $AccessiabilitySettingsDefaultValues (5 fields) */
public readonly record struct AccessiabilitySettingsDefaultValues (
    float Protanopia,
    float Deuteranopia,
    float Tritanopia,
    float FontSizePC,
    float FontSizeConsole) : IUnityStructure
{
    public static AccessiabilitySettingsDefaultValues Read(EndianBinaryReader reader)
    {
        float Protanopia_ = reader.ReadF32();
        float Deuteranopia_ = reader.ReadF32();
        float Tritanopia_ = reader.ReadF32();
        float FontSizePC_ = reader.ReadF32();
        float FontSizeConsole_ = reader.ReadF32();
        
        return new(Protanopia_,
            Deuteranopia_,
            Tritanopia_,
            FontSizePC_,
            FontSizeConsole_);
    }

    public override string ToString() => $"AccessiabilitySettingsDefaultValues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Protanopia: {Protanopia}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Deuteranopia: {Deuteranopia}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Tritanopia: {Tritanopia}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FontSizePC: {FontSizePC}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FontSizeConsole: {FontSizeConsole}");
    }
}

/* $Settings (4 fields) */
public record class Settings (
    AsciiString[] MipMapGroups,
    int MipLimitBiasIncreaseThresholdMb,
    int MipLimitBiasDecreaseThresholdMb,
    int MaxMipmapLimit) : IUnityStructure
{
    public static Settings Read(EndianBinaryReader reader)
    {
        AsciiString[] MipMapGroups_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* MipMapGroups */
        int MipLimitBiasIncreaseThresholdMb_ = reader.ReadS32();
        int MipLimitBiasDecreaseThresholdMb_ = reader.ReadS32();
        int MaxMipmapLimit_ = reader.ReadS32();
        
        return new(MipMapGroups_,
            MipLimitBiasIncreaseThresholdMb_,
            MipLimitBiasDecreaseThresholdMb_,
            MaxMipmapLimit_);
    }

    public override string ToString() => $"Settings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MipMapGroups[{MipMapGroups.Length}] = {{");
        if (MipMapGroups.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in MipMapGroups)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (MipMapGroups.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MipLimitBiasIncreaseThresholdMb: {MipLimitBiasIncreaseThresholdMb}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MipLimitBiasDecreaseThresholdMb: {MipLimitBiasDecreaseThresholdMb}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxMipmapLimit: {MaxMipmapLimit}");
    }
}

/* $BlueprintAbilityAreaEffectReference (1 fields) */
public record class BlueprintAbilityAreaEffectReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintAbilityAreaEffectReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintAbilityAreaEffectReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $WeaponStyleSettings_3 (3 fields) */
public record class WeaponStyleSettings_3 (
    int Style,
    AttackVariantSettings_1 Single,
    AttackVariantSettings_1 Burst) : IUnityStructure
{
    public static WeaponStyleSettings_3 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AttackVariantSettings_1 Single_ = AttackVariantSettings_1.Read(reader);
        reader.AlignTo(4); /* Single */
        AttackVariantSettings_1 Burst_ = AttackVariantSettings_1.Read(reader);
        reader.AlignTo(4); /* Burst */
        
        return new(Style_,
            Single_,
            Burst_);
    }

    public override string ToString() => $"WeaponStyleSettings_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Single: {{ \n{Single.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Burst: {{ \n{Burst.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AttackVariantSettings_1 (12 fields) */
public record class AttackVariantSettings_1 (
    ClipSettings[] Ready,
    ClipSettings[] Unready,
    ClipSettings[] LowRecoil,
    ClipSettings[] MediumRecoil,
    ClipSettings[] HighRecoil,
    ClipSettings[] PlasmaRecoil,
    ClipSettings[] LinearFlamerRecoil,
    ClipSettings[] CornerFlamerRecoil,
    ClipSettings[] LaserRecoil,
    ClipSettings[] MeleeCornerAttack,
    byte UseStrictAnimationOrderInsteadOfRandom,
    AlternativeAttackVariantSettings_1[] AlternativeAnimations) : IUnityStructure
{
    public static AttackVariantSettings_1 Read(EndianBinaryReader reader)
    {
        ClipSettings[] Ready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Unready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LowRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MediumRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] HighRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] PlasmaRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LinearFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] CornerFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LaserRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MeleeCornerAttack_ = BuiltInArray<ClipSettings>.Read(reader);
        byte UseStrictAnimationOrderInsteadOfRandom_ = reader.ReadU8();
        reader.AlignTo(4); /* UseStrictAnimationOrderInsteadOfRandom */
        AlternativeAttackVariantSettings_1[] AlternativeAnimations_ = BuiltInArray<AlternativeAttackVariantSettings_1>.Read(reader);
        reader.AlignTo(4); /* AlternativeAnimations */
        
        return new(Ready_,
            Unready_,
            LowRecoil_,
            MediumRecoil_,
            HighRecoil_,
            PlasmaRecoil_,
            LinearFlamerRecoil_,
            CornerFlamerRecoil_,
            LaserRecoil_,
            MeleeCornerAttack_,
            UseStrictAnimationOrderInsteadOfRandom_,
            AlternativeAnimations_);
    }

    public override string ToString() => $"AttackVariantSettings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ready[{Ready.Length}] = {{");
        if (Ready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Ready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Ready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unready[{Unready.Length}] = {{");
        if (Unready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Unready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Unready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LowRecoil[{LowRecoil.Length}] = {{");
        if (LowRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LowRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LowRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MediumRecoil[{MediumRecoil.Length}] = {{");
        if (MediumRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MediumRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MediumRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighRecoil[{HighRecoil.Length}] = {{");
        if (HighRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in HighRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (HighRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlasmaRecoil[{PlasmaRecoil.Length}] = {{");
        if (PlasmaRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in PlasmaRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PlasmaRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinearFlamerRecoil[{LinearFlamerRecoil.Length}] = {{");
        if (LinearFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LinearFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LinearFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CornerFlamerRecoil[{CornerFlamerRecoil.Length}] = {{");
        if (CornerFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in CornerFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (CornerFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LaserRecoil[{LaserRecoil.Length}] = {{");
        if (LaserRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LaserRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LaserRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeCornerAttack[{MeleeCornerAttack.Length}] = {{");
        if (MeleeCornerAttack.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MeleeCornerAttack)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MeleeCornerAttack.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseStrictAnimationOrderInsteadOfRandom: {UseStrictAnimationOrderInsteadOfRandom}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlternativeAnimations[{AlternativeAnimations.Length}] = {{");
        if (AlternativeAnimations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AlternativeAttackVariantSettings_1 _4 in AlternativeAnimations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (AlternativeAnimations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AlternativeAttackVariantSettings_1 (2 fields) */
public record class AlternativeAttackVariantSettings_1 (
    int Style,
    AttackVariantSettings_2 Settings) : IUnityStructure
{
    public static AlternativeAttackVariantSettings_1 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AttackVariantSettings_2 Settings_ = AttackVariantSettings_2.Read(reader);
        reader.AlignTo(4); /* Settings */
        
        return new(Style_,
            Settings_);
    }

    public override string ToString() => $"AlternativeAttackVariantSettings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Settings: {{ \n{Settings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AttackVariantSettings_2 (12 fields) */
public record class AttackVariantSettings_2 (
    ClipSettings[] Ready,
    ClipSettings[] Unready,
    ClipSettings[] LowRecoil,
    ClipSettings[] MediumRecoil,
    ClipSettings[] HighRecoil,
    ClipSettings[] PlasmaRecoil,
    ClipSettings[] LinearFlamerRecoil,
    ClipSettings[] CornerFlamerRecoil,
    ClipSettings[] LaserRecoil,
    ClipSettings[] MeleeCornerAttack,
    byte UseStrictAnimationOrderInsteadOfRandom,
    AlternativeAttackVariantSettings_2[] AlternativeAnimations) : IUnityStructure
{
    public static AttackVariantSettings_2 Read(EndianBinaryReader reader)
    {
        ClipSettings[] Ready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Unready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LowRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MediumRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] HighRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] PlasmaRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LinearFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] CornerFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LaserRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MeleeCornerAttack_ = BuiltInArray<ClipSettings>.Read(reader);
        byte UseStrictAnimationOrderInsteadOfRandom_ = reader.ReadU8();
        reader.AlignTo(4); /* UseStrictAnimationOrderInsteadOfRandom */
        AlternativeAttackVariantSettings_2[] AlternativeAnimations_ = BuiltInArray<AlternativeAttackVariantSettings_2>.Read(reader);
        reader.AlignTo(4); /* AlternativeAnimations */
        
        return new(Ready_,
            Unready_,
            LowRecoil_,
            MediumRecoil_,
            HighRecoil_,
            PlasmaRecoil_,
            LinearFlamerRecoil_,
            CornerFlamerRecoil_,
            LaserRecoil_,
            MeleeCornerAttack_,
            UseStrictAnimationOrderInsteadOfRandom_,
            AlternativeAnimations_);
    }

    public override string ToString() => $"AttackVariantSettings_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ready[{Ready.Length}] = {{");
        if (Ready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Ready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Ready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unready[{Unready.Length}] = {{");
        if (Unready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Unready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Unready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LowRecoil[{LowRecoil.Length}] = {{");
        if (LowRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LowRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LowRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MediumRecoil[{MediumRecoil.Length}] = {{");
        if (MediumRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MediumRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MediumRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighRecoil[{HighRecoil.Length}] = {{");
        if (HighRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in HighRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (HighRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlasmaRecoil[{PlasmaRecoil.Length}] = {{");
        if (PlasmaRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in PlasmaRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PlasmaRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinearFlamerRecoil[{LinearFlamerRecoil.Length}] = {{");
        if (LinearFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LinearFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LinearFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CornerFlamerRecoil[{CornerFlamerRecoil.Length}] = {{");
        if (CornerFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in CornerFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (CornerFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LaserRecoil[{LaserRecoil.Length}] = {{");
        if (LaserRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LaserRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LaserRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeCornerAttack[{MeleeCornerAttack.Length}] = {{");
        if (MeleeCornerAttack.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MeleeCornerAttack)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MeleeCornerAttack.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseStrictAnimationOrderInsteadOfRandom: {UseStrictAnimationOrderInsteadOfRandom}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlternativeAnimations[{AlternativeAnimations.Length}] = {{");
        if (AlternativeAnimations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AlternativeAttackVariantSettings_2 _4 in AlternativeAnimations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (AlternativeAnimations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AlternativeAttackVariantSettings_2 (2 fields) */
public record class AlternativeAttackVariantSettings_2 (
    int Style,
    AttackVariantSettings_3 Settings) : IUnityStructure
{
    public static AlternativeAttackVariantSettings_2 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AttackVariantSettings_3 Settings_ = AttackVariantSettings_3.Read(reader);
        reader.AlignTo(4); /* Settings */
        
        return new(Style_,
            Settings_);
    }

    public override string ToString() => $"AlternativeAttackVariantSettings_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Settings: {{ \n{Settings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AttackVariantSettings_3 (12 fields) */
public record class AttackVariantSettings_3 (
    ClipSettings[] Ready,
    ClipSettings[] Unready,
    ClipSettings[] LowRecoil,
    ClipSettings[] MediumRecoil,
    ClipSettings[] HighRecoil,
    ClipSettings[] PlasmaRecoil,
    ClipSettings[] LinearFlamerRecoil,
    ClipSettings[] CornerFlamerRecoil,
    ClipSettings[] LaserRecoil,
    ClipSettings[] MeleeCornerAttack,
    byte UseStrictAnimationOrderInsteadOfRandom,
    AlternativeAttackVariantSettings_3[] AlternativeAnimations) : IUnityStructure
{
    public static AttackVariantSettings_3 Read(EndianBinaryReader reader)
    {
        ClipSettings[] Ready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Unready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LowRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MediumRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] HighRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] PlasmaRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LinearFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] CornerFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LaserRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MeleeCornerAttack_ = BuiltInArray<ClipSettings>.Read(reader);
        byte UseStrictAnimationOrderInsteadOfRandom_ = reader.ReadU8();
        reader.AlignTo(4); /* UseStrictAnimationOrderInsteadOfRandom */
        AlternativeAttackVariantSettings_3[] AlternativeAnimations_ = BuiltInArray<AlternativeAttackVariantSettings_3>.Read(reader);
        reader.AlignTo(4); /* AlternativeAnimations */
        
        return new(Ready_,
            Unready_,
            LowRecoil_,
            MediumRecoil_,
            HighRecoil_,
            PlasmaRecoil_,
            LinearFlamerRecoil_,
            CornerFlamerRecoil_,
            LaserRecoil_,
            MeleeCornerAttack_,
            UseStrictAnimationOrderInsteadOfRandom_,
            AlternativeAnimations_);
    }

    public override string ToString() => $"AttackVariantSettings_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ready[{Ready.Length}] = {{");
        if (Ready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Ready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Ready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unready[{Unready.Length}] = {{");
        if (Unready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Unready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Unready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LowRecoil[{LowRecoil.Length}] = {{");
        if (LowRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LowRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LowRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MediumRecoil[{MediumRecoil.Length}] = {{");
        if (MediumRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MediumRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MediumRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighRecoil[{HighRecoil.Length}] = {{");
        if (HighRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in HighRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (HighRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlasmaRecoil[{PlasmaRecoil.Length}] = {{");
        if (PlasmaRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in PlasmaRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PlasmaRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinearFlamerRecoil[{LinearFlamerRecoil.Length}] = {{");
        if (LinearFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LinearFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LinearFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CornerFlamerRecoil[{CornerFlamerRecoil.Length}] = {{");
        if (CornerFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in CornerFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (CornerFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LaserRecoil[{LaserRecoil.Length}] = {{");
        if (LaserRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LaserRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LaserRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeCornerAttack[{MeleeCornerAttack.Length}] = {{");
        if (MeleeCornerAttack.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MeleeCornerAttack)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MeleeCornerAttack.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseStrictAnimationOrderInsteadOfRandom: {UseStrictAnimationOrderInsteadOfRandom}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlternativeAnimations[{AlternativeAnimations.Length}] = {{");
        if (AlternativeAnimations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AlternativeAttackVariantSettings_3 _4 in AlternativeAnimations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (AlternativeAnimations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AlternativeAttackVariantSettings_3 (2 fields) */
public record class AlternativeAttackVariantSettings_3 (
    int Style,
    AttackVariantSettings_4 Settings) : IUnityStructure
{
    public static AlternativeAttackVariantSettings_3 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AttackVariantSettings_4 Settings_ = AttackVariantSettings_4.Read(reader);
        reader.AlignTo(4); /* Settings */
        
        return new(Style_,
            Settings_);
    }

    public override string ToString() => $"AlternativeAttackVariantSettings_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Settings: {{ \n{Settings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AttackVariantSettings_4 (12 fields) */
public record class AttackVariantSettings_4 (
    ClipSettings[] Ready,
    ClipSettings[] Unready,
    ClipSettings[] LowRecoil,
    ClipSettings[] MediumRecoil,
    ClipSettings[] HighRecoil,
    ClipSettings[] PlasmaRecoil,
    ClipSettings[] LinearFlamerRecoil,
    ClipSettings[] CornerFlamerRecoil,
    ClipSettings[] LaserRecoil,
    ClipSettings[] MeleeCornerAttack,
    byte UseStrictAnimationOrderInsteadOfRandom,
    AlternativeAttackVariantSettings_4[] AlternativeAnimations) : IUnityStructure
{
    public static AttackVariantSettings_4 Read(EndianBinaryReader reader)
    {
        ClipSettings[] Ready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Unready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LowRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MediumRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] HighRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] PlasmaRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LinearFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] CornerFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LaserRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MeleeCornerAttack_ = BuiltInArray<ClipSettings>.Read(reader);
        byte UseStrictAnimationOrderInsteadOfRandom_ = reader.ReadU8();
        reader.AlignTo(4); /* UseStrictAnimationOrderInsteadOfRandom */
        AlternativeAttackVariantSettings_4[] AlternativeAnimations_ = BuiltInArray<AlternativeAttackVariantSettings_4>.Read(reader);
        reader.AlignTo(4); /* AlternativeAnimations */
        
        return new(Ready_,
            Unready_,
            LowRecoil_,
            MediumRecoil_,
            HighRecoil_,
            PlasmaRecoil_,
            LinearFlamerRecoil_,
            CornerFlamerRecoil_,
            LaserRecoil_,
            MeleeCornerAttack_,
            UseStrictAnimationOrderInsteadOfRandom_,
            AlternativeAnimations_);
    }

    public override string ToString() => $"AttackVariantSettings_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ready[{Ready.Length}] = {{");
        if (Ready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Ready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Ready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unready[{Unready.Length}] = {{");
        if (Unready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Unready)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Unready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LowRecoil[{LowRecoil.Length}] = {{");
        if (LowRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LowRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LowRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MediumRecoil[{MediumRecoil.Length}] = {{");
        if (MediumRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MediumRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MediumRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighRecoil[{HighRecoil.Length}] = {{");
        if (HighRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in HighRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (HighRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlasmaRecoil[{PlasmaRecoil.Length}] = {{");
        if (PlasmaRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in PlasmaRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PlasmaRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinearFlamerRecoil[{LinearFlamerRecoil.Length}] = {{");
        if (LinearFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LinearFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LinearFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CornerFlamerRecoil[{CornerFlamerRecoil.Length}] = {{");
        if (CornerFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in CornerFlamerRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (CornerFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LaserRecoil[{LaserRecoil.Length}] = {{");
        if (LaserRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LaserRecoil)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (LaserRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeCornerAttack[{MeleeCornerAttack.Length}] = {{");
        if (MeleeCornerAttack.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MeleeCornerAttack)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (MeleeCornerAttack.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseStrictAnimationOrderInsteadOfRandom: {UseStrictAnimationOrderInsteadOfRandom}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlternativeAnimations[{AlternativeAnimations.Length}] = {{");
        if (AlternativeAnimations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AlternativeAttackVariantSettings_4 _4 in AlternativeAnimations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (AlternativeAnimations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AlternativeAttackVariantSettings_4 (2 fields) */
public record class AlternativeAttackVariantSettings_4 (
    int Style,
    AttackVariantSettings_5 Settings) : IUnityStructure
{
    public static AlternativeAttackVariantSettings_4 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AttackVariantSettings_5 Settings_ = AttackVariantSettings_5.Read(reader);
        reader.AlignTo(4); /* Settings */
        
        return new(Style_,
            Settings_);
    }

    public override string ToString() => $"AlternativeAttackVariantSettings_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Settings: {{ \n{Settings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AttackVariantSettings_5 (12 fields) */
public record class AttackVariantSettings_5 (
    ClipSettings[] Ready,
    ClipSettings[] Unready,
    ClipSettings[] LowRecoil,
    ClipSettings[] MediumRecoil,
    ClipSettings[] HighRecoil,
    ClipSettings[] PlasmaRecoil,
    ClipSettings[] LinearFlamerRecoil,
    ClipSettings[] CornerFlamerRecoil,
    ClipSettings[] LaserRecoil,
    ClipSettings[] MeleeCornerAttack,
    byte UseStrictAnimationOrderInsteadOfRandom,
    AlternativeAttackVariantSettings[] AlternativeAnimations) : IUnityStructure
{
    public static AttackVariantSettings_5 Read(EndianBinaryReader reader)
    {
        ClipSettings[] Ready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] Unready_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LowRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MediumRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] HighRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] PlasmaRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LinearFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] CornerFlamerRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] LaserRecoil_ = BuiltInArray<ClipSettings>.Read(reader);
        ClipSettings[] MeleeCornerAttack_ = BuiltInArray<ClipSettings>.Read(reader);
        byte UseStrictAnimationOrderInsteadOfRandom_ = reader.ReadU8();
        reader.AlignTo(4); /* UseStrictAnimationOrderInsteadOfRandom */
        AlternativeAttackVariantSettings[] AlternativeAnimations_ = BuiltInArray<AlternativeAttackVariantSettings>.Read(reader);
        
        return new(Ready_,
            Unready_,
            LowRecoil_,
            MediumRecoil_,
            HighRecoil_,
            PlasmaRecoil_,
            LinearFlamerRecoil_,
            CornerFlamerRecoil_,
            LaserRecoil_,
            MeleeCornerAttack_,
            UseStrictAnimationOrderInsteadOfRandom_,
            AlternativeAnimations_);
    }

    public override string ToString() => $"AttackVariantSettings_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ready[{Ready.Length}] = {{");
        if (Ready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Ready)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (Ready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unready[{Unready.Length}] = {{");
        if (Unready.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in Unready)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (Unready.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LowRecoil[{LowRecoil.Length}] = {{");
        if (LowRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LowRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (LowRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MediumRecoil[{MediumRecoil.Length}] = {{");
        if (MediumRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MediumRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (MediumRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighRecoil[{HighRecoil.Length}] = {{");
        if (HighRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in HighRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (HighRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlasmaRecoil[{PlasmaRecoil.Length}] = {{");
        if (PlasmaRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in PlasmaRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (PlasmaRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinearFlamerRecoil[{LinearFlamerRecoil.Length}] = {{");
        if (LinearFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LinearFlamerRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (LinearFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CornerFlamerRecoil[{CornerFlamerRecoil.Length}] = {{");
        if (CornerFlamerRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in CornerFlamerRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (CornerFlamerRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LaserRecoil[{LaserRecoil.Length}] = {{");
        if (LaserRecoil.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in LaserRecoil)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (LaserRecoil.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeCornerAttack[{MeleeCornerAttack.Length}] = {{");
        if (MeleeCornerAttack.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClipSettings _4 in MeleeCornerAttack)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = : [[unimplemented]]");
            ++_4i;
        }
        if (MeleeCornerAttack.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseStrictAnimationOrderInsteadOfRandom: {UseStrictAnimationOrderInsteadOfRandom}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlternativeAnimations[{AlternativeAnimations.Length}] = {{");
        if (AlternativeAnimations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AlternativeAttackVariantSettings _4 in AlternativeAnimations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ Style: {_4.Style} }}\n");
            ++_4i;
        }
        if (AlternativeAnimations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AlternativeAttackVariantSettings (1 fields) */
public readonly record struct AlternativeAttackVariantSettings (
    int Style) : IUnityStructure
{
    public static AlternativeAttackVariantSettings Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        
        return new(Style_);
    }

    public override string ToString() => $"AlternativeAttackVariantSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }
}

/* $ObjectMouseUniformScaleSettingsView (6 fields) */
public record class ObjectMouseUniformScaleSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectMouseUniformScaleSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectMouseUniformScaleSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $PlatformAdvancedSettings (18 fields) */
public record class PlatformAdvancedSettings (
    uint m_IOMemorySize,
    float m_TargetAutoStreamBufferLengthMs,
    bool m_UseStreamCache,
    uint m_MaximumPinnedBytesInCache,
    bool m_EnableGameSyncPreparation,
    uint m_ContinuousPlaybackLookAhead,
    uint m_MonitorQueuePoolSize,
    uint m_MaximumHardwareTimeoutMs,
    bool m_DebugOutOfRangeCheckEnabled,
    float m_DebugOutOfRangeLimit,
    bool m_SuspendAudioDuringFocusLoss,
    bool m_RenderDuringFocusLoss,
    AsciiString m_SoundBankPersistentDataPath,
    bool m_UseAsyncOpen,
    uint m_MemoryAllocationSizeLimit,
    uint m_MemoryDebugLevel,
    int m_MemorySpanCount,
    uint MaxSystemAudioObjects) : IUnityStructure
{
    public static PlatformAdvancedSettings Read(EndianBinaryReader reader)
    {
        uint m_IOMemorySize_ = reader.ReadU32();
        float m_TargetAutoStreamBufferLengthMs_ = reader.ReadF32();
        bool m_UseStreamCache_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseStreamCache */
        uint m_MaximumPinnedBytesInCache_ = reader.ReadU32();
        bool m_EnableGameSyncPreparation_ = reader.ReadBool();
        reader.AlignTo(4); /* m_EnableGameSyncPreparation */
        uint m_ContinuousPlaybackLookAhead_ = reader.ReadU32();
        uint m_MonitorQueuePoolSize_ = reader.ReadU32();
        uint m_MaximumHardwareTimeoutMs_ = reader.ReadU32();
        bool m_DebugOutOfRangeCheckEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* m_DebugOutOfRangeCheckEnabled */
        float m_DebugOutOfRangeLimit_ = reader.ReadF32();
        bool m_SuspendAudioDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_SuspendAudioDuringFocusLoss */
        bool m_RenderDuringFocusLoss_ = reader.ReadBool();
        reader.AlignTo(4); /* m_RenderDuringFocusLoss */
        AsciiString m_SoundBankPersistentDataPath_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_SoundBankPersistentDataPath */
        bool m_UseAsyncOpen_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UseAsyncOpen */
        uint m_MemoryAllocationSizeLimit_ = reader.ReadU32();
        uint m_MemoryDebugLevel_ = reader.ReadU32();
        int m_MemorySpanCount_ = reader.ReadS32();
        uint MaxSystemAudioObjects_ = reader.ReadU32();
        
        return new(m_IOMemorySize_,
            m_TargetAutoStreamBufferLengthMs_,
            m_UseStreamCache_,
            m_MaximumPinnedBytesInCache_,
            m_EnableGameSyncPreparation_,
            m_ContinuousPlaybackLookAhead_,
            m_MonitorQueuePoolSize_,
            m_MaximumHardwareTimeoutMs_,
            m_DebugOutOfRangeCheckEnabled_,
            m_DebugOutOfRangeLimit_,
            m_SuspendAudioDuringFocusLoss_,
            m_RenderDuringFocusLoss_,
            m_SoundBankPersistentDataPath_,
            m_UseAsyncOpen_,
            m_MemoryAllocationSizeLimit_,
            m_MemoryDebugLevel_,
            m_MemorySpanCount_,
            MaxSystemAudioObjects_);
    }

    public override string ToString() => $"PlatformAdvancedSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_IOMemorySize: {m_IOMemorySize}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetAutoStreamBufferLengthMs: {m_TargetAutoStreamBufferLengthMs}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseStreamCache: {m_UseStreamCache}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumPinnedBytesInCache: {m_MaximumPinnedBytesInCache}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EnableGameSyncPreparation: {m_EnableGameSyncPreparation}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ContinuousPlaybackLookAhead: {m_ContinuousPlaybackLookAhead}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MonitorQueuePoolSize: {m_MonitorQueuePoolSize}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MaximumHardwareTimeoutMs: {m_MaximumHardwareTimeoutMs}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeCheckEnabled: {m_DebugOutOfRangeCheckEnabled}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DebugOutOfRangeLimit: {m_DebugOutOfRangeLimit}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SuspendAudioDuringFocusLoss: {m_SuspendAudioDuringFocusLoss}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RenderDuringFocusLoss: {m_RenderDuringFocusLoss}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SoundBankPersistentDataPath: \"{m_SoundBankPersistentDataPath}\"");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseAsyncOpen: {m_UseAsyncOpen}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryAllocationSizeLimit: {m_MemoryAllocationSizeLimit}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemoryDebugLevel: {m_MemoryDebugLevel}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_MemorySpanCount: {m_MemorySpanCount}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaxSystemAudioObjects: {MaxSystemAudioObjects}");
    }
}

/* $ObjectPlacementBlockRenderSettingsView (6 fields) */
public record class ObjectPlacementBlockRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementBlockRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementBlockRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $CustomPostPocessParameter (2 fields) */
public record class CustomPostPocessParameter (
    byte m_OverrideState,
    CustomPostProcessSettings m_Value) : IUnityStructure
{
    public static CustomPostPocessParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        CustomPostProcessSettings m_Value_ = CustomPostProcessSettings.Read(reader);
        reader.AlignTo(4); /* m_Value */
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"CustomPostPocessParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Value: {{ \n{m_Value.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CustomPostProcessSettings (1 fields) */
public record class CustomPostProcessSettings (
    EffectOverride[] EffectOverrides) : IUnityStructure
{
    public static CustomPostProcessSettings Read(EndianBinaryReader reader)
    {
        EffectOverride[] EffectOverrides_ = BuiltInArray<EffectOverride>.Read(reader);
        reader.AlignTo(4); /* EffectOverrides */
        
        return new(EffectOverrides_);
    }

    public override string ToString() => $"CustomPostProcessSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectOverrides[{EffectOverrides.Length}] = {{");
        if (EffectOverrides.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (EffectOverride _4 in EffectOverrides)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (EffectOverrides.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $EffectOverride (3 fields) */
public record class EffectOverride (
    byte OverrideState,
    PPtr<CustomPostProcessEffect> Effect,
    ShaderPropertyParameter[] Parameters) : IUnityStructure
{
    public static EffectOverride Read(EndianBinaryReader reader)
    {
        byte OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideState */
        PPtr<CustomPostProcessEffect> Effect_ = PPtr<CustomPostProcessEffect>.Read(reader);
        ShaderPropertyParameter[] Parameters_ = BuiltInArray<ShaderPropertyParameter>.Read(reader);
        reader.AlignTo(4); /* Parameters */
        
        return new(OverrideState_,
            Effect_,
            Parameters_);
    }

    public override string ToString() => $"EffectOverride\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideState: {OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Effect: {Effect}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Parameters[{Parameters.Length}] = {{");
        if (Parameters.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ShaderPropertyParameter _4 in Parameters)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Parameters.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ShaderPropertyParameter (3 fields) */
public record class ShaderPropertyParameter (
    byte OverrideState,
    int PassIndex,
    ShaderPropertyDescriptor Property) : IUnityStructure
{
    public static ShaderPropertyParameter Read(EndianBinaryReader reader)
    {
        byte OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideState */
        int PassIndex_ = reader.ReadS32();
        ShaderPropertyDescriptor Property_ = ShaderPropertyDescriptor.Read(reader);
        reader.AlignTo(4); /* Property */
        
        return new(OverrideState_,
            PassIndex_,
            Property_);
    }

    public override string ToString() => $"ShaderPropertyParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideState: {OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PassIndex: {PassIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Property: {{ \n{Property.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ShaderPropertyDescriptor (14 fields) */
public record class ShaderPropertyDescriptor (
    PPtr<Shader> Shader,
    int Index,
    AsciiString Name,
    AsciiString Description,
    int Type,
    int Flags,
    AsciiString[] Attibutes,
    float FloatValue,
    Vector2f RangeLimits,
    int IntValue,
    Vector4f VectorValue,
    ColorRGBA_1 ColorValue,
    AsciiString DefaultTextureNameValue,
    PPtr<Texture> TextureValue) : IUnityStructure
{
    public static ShaderPropertyDescriptor Read(EndianBinaryReader reader)
    {
        PPtr<Shader> Shader_ = PPtr<Shader>.Read(reader);
        int Index_ = reader.ReadS32();
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        AsciiString Description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Description */
        int Type_ = reader.ReadS32();
        int Flags_ = reader.ReadS32();
        AsciiString[] Attibutes_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* Attibutes */
        float FloatValue_ = reader.ReadF32();
        Vector2f RangeLimits_ = Vector2f.Read(reader);
        int IntValue_ = reader.ReadS32();
        Vector4f VectorValue_ = Vector4f.Read(reader);
        ColorRGBA_1 ColorValue_ = ColorRGBA_1.Read(reader);
        AsciiString DefaultTextureNameValue_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* DefaultTextureNameValue */
        PPtr<Texture> TextureValue_ = PPtr<Texture>.Read(reader);
        
        return new(Shader_,
            Index_,
            Name_,
            Description_,
            Type_,
            Flags_,
            Attibutes_,
            FloatValue_,
            RangeLimits_,
            IntValue_,
            VectorValue_,
            ColorValue_,
            DefaultTextureNameValue_,
            TextureValue_);
    }

    public override string ToString() => $"ShaderPropertyDescriptor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Shader: {Shader}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Index: {Index}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Description: \"{Description}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Flags: {Flags}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Attibutes[{Attibutes.Length}] = {{");
        if (Attibutes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in Attibutes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (Attibutes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FloatValue: {FloatValue}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RangeLimits: {{ x: {RangeLimits.x}, y: {RangeLimits.y} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IntValue: {IntValue}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VectorValue: {{ x: {VectorValue.x}, y: {VectorValue.y}, z: {VectorValue.z}, w: {VectorValue.w} }}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColorValue: {{ r: {ColorValue.r}, g: {ColorValue.g}, b: {ColorValue.b}, a: {ColorValue.a} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DefaultTextureNameValue: \"{DefaultTextureNameValue}\"");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TextureValue: {TextureValue}");
    }
}

/* $CameraContourLightSettings (2 fields) */
public record class CameraContourLightSettings (
    float Intensity,
    ColorRGBA_1 LightColor) : IUnityStructure
{
    public static CameraContourLightSettings Read(EndianBinaryReader reader)
    {
        float Intensity_ = reader.ReadF32();
        ColorRGBA_1 LightColor_ = ColorRGBA_1.Read(reader);
        
        return new(Intensity_,
            LightColor_);
    }

    public override string ToString() => $"CameraContourLightSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Intensity: {Intensity}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LightColor: {{ r: {LightColor.r}, g: {LightColor.g}, b: {LightColor.b}, a: {LightColor.a} }}\n");
    }
}

/* $LocalLightSettings (5 fields) */
public record class LocalLightSettings (
    PPtr<Light> Light,
    LightConfig MorningConfig,
    LightConfig DayConfig,
    LightConfig EveningConfig,
    LightConfig NightConfig) : IUnityStructure
{
    public static LocalLightSettings Read(EndianBinaryReader reader)
    {
        PPtr<Light> Light_ = PPtr<Light>.Read(reader);
        LightConfig MorningConfig_ = LightConfig.Read(reader);
        reader.AlignTo(4); /* MorningConfig */
        LightConfig DayConfig_ = LightConfig.Read(reader);
        reader.AlignTo(4); /* DayConfig */
        LightConfig EveningConfig_ = LightConfig.Read(reader);
        reader.AlignTo(4); /* EveningConfig */
        LightConfig NightConfig_ = LightConfig.Read(reader);
        reader.AlignTo(4); /* NightConfig */
        
        return new(Light_,
            MorningConfig_,
            DayConfig_,
            EveningConfig_,
            NightConfig_);
    }

    public override string ToString() => $"LocalLightSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Light: {Light}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MorningConfig: {{ \n{MorningConfig.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DayConfig: {{ \n{DayConfig.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EveningConfig: {{ \n{EveningConfig.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NightConfig: {{ \n{NightConfig.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $LightConfig (3 fields) */
public record class LightConfig (
    float intensity,
    ColorRGBA_1 color,
    byte enabled) : IUnityStructure
{
    public static LightConfig Read(EndianBinaryReader reader)
    {
        float intensity_ = reader.ReadF32();
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        byte enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* enabled */
        
        return new(intensity_,
            color_,
            enabled_);
    }

    public override string ToString() => $"LightConfig\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}intensity: {intensity}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }
}

/* $LocalObjectsSettings (5 fields) */
public record class LocalObjectsSettings (
    PPtr<GameObject> Obj,
    ObjectConfig MorningConfig,
    ObjectConfig DayConfig,
    ObjectConfig EveningConfig,
    ObjectConfig NightConfig) : IUnityStructure
{
    public static LocalObjectsSettings Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Obj_ = PPtr<GameObject>.Read(reader);
        ObjectConfig MorningConfig_ = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* MorningConfig */
        ObjectConfig DayConfig_ = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* DayConfig */
        ObjectConfig EveningConfig_ = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* EveningConfig */
        ObjectConfig NightConfig_ = ObjectConfig.Read(reader);
        reader.AlignTo(4); /* NightConfig */
        
        return new(Obj_,
            MorningConfig_,
            DayConfig_,
            EveningConfig_,
            NightConfig_);
    }

    public override string ToString() => $"LocalObjectsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Obj: {Obj}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MorningConfig: {{ enabled: {MorningConfig.enabled} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DayConfig: {{ enabled: {DayConfig.enabled} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EveningConfig: {{ enabled: {EveningConfig.enabled} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NightConfig: {{ enabled: {NightConfig.enabled} }}\n");
    }
}

/* $ObjectConfig (1 fields) */
public readonly record struct ObjectConfig (
    byte enabled) : IUnityStructure
{
    public static ObjectConfig Read(EndianBinaryReader reader)
    {
        byte enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* enabled */
        
        return new(enabled_);
    }

    public override string ToString() => $"ObjectConfig\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }
}

/* $PrefabCollection (2 fields) */
public record class PrefabCollection (
    Prefab[] _namedEntities,
    int _indexOfMarkedEntity) : IUnityStructure
{
    public static PrefabCollection Read(EndianBinaryReader reader)
    {
        Prefab[] _namedEntities_ = BuiltInArray<Prefab>.Read(reader);
        reader.AlignTo(4); /* _namedEntities */
        int _indexOfMarkedEntity_ = reader.ReadS32();
        
        return new(_namedEntities_,
            _indexOfMarkedEntity_);
    }

    public override string ToString() => $"PrefabCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_namedEntities[{_namedEntities.Length}] = {{");
        if (_namedEntities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Prefab _4 in _namedEntities)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_namedEntities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indexOfMarkedEntity: {_indexOfMarkedEntity}");
    }
}

/* $Prefab (10 fields) */
public record class Prefab (
    PPtr<GameObject> _unityPrefab,
    Quaternionf _initialWorldRotation,
    Vector3f _initialWorldScale,
    PPtr<PrefabInstantiationSettings> _instantiationSettings,
    PPtr<PrefabActivationSettings> _activationSettings,
    PPtr<PrefabTagAssociations> _tagAssociations,
    AsciiString _name,
    float _offsetFromGridSurface,
    float _offsetFromObjectSurface,
    PrefabView _view) : IUnityStructure
{
    public static Prefab Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> _unityPrefab_ = PPtr<GameObject>.Read(reader);
        Quaternionf _initialWorldRotation_ = Quaternionf.Read(reader);
        Vector3f _initialWorldScale_ = Vector3f.Read(reader);
        PPtr<PrefabInstantiationSettings> _instantiationSettings_ = PPtr<PrefabInstantiationSettings>.Read(reader);
        PPtr<PrefabActivationSettings> _activationSettings_ = PPtr<PrefabActivationSettings>.Read(reader);
        PPtr<PrefabTagAssociations> _tagAssociations_ = PPtr<PrefabTagAssociations>.Read(reader);
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        float _offsetFromGridSurface_ = reader.ReadF32();
        float _offsetFromObjectSurface_ = reader.ReadF32();
        PrefabView _view_ = PrefabView.Read(reader);
        reader.AlignTo(4); /* _view */
        
        return new(_unityPrefab_,
            _initialWorldRotation_,
            _initialWorldScale_,
            _instantiationSettings_,
            _activationSettings_,
            _tagAssociations_,
            _name_,
            _offsetFromGridSurface_,
            _offsetFromObjectSurface_,
            _view_);
    }

    public override string ToString() => $"Prefab\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_unityPrefab: {_unityPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_initialWorldRotation: {{ x: {_initialWorldRotation.x}, y: {_initialWorldRotation.y}, z: {_initialWorldRotation.z}, w: {_initialWorldRotation.w} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_initialWorldScale: {{ x: {_initialWorldScale.x}, y: {_initialWorldScale.y}, z: {_initialWorldScale.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_instantiationSettings: {_instantiationSettings}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_activationSettings: {_activationSettings}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tagAssociations: {_tagAssociations}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_offsetFromGridSurface: {_offsetFromGridSurface}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_offsetFromObjectSurface: {_offsetFromObjectSurface}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_view: {{ \n{_view.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PrefabView (6 fields) */
public record class PrefabView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static PrefabView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"PrefabView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $DlcText (2 fields) */
public record class DlcText (
    BlueprintScriptableObjectReference m_Dlc,
    PPtr<SharedStringAsset> Text) : IUnityStructure
{
    public static DlcText Read(EndianBinaryReader reader)
    {
        BlueprintScriptableObjectReference m_Dlc_ = BlueprintScriptableObjectReference.Read(reader);
        reader.AlignTo(4); /* m_Dlc */
        PPtr<SharedStringAsset> Text_ = PPtr<SharedStringAsset>.Read(reader);
        
        return new(m_Dlc_,
            Text_);
    }

    public override string ToString() => $"DlcText\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dlc: {{ \n{m_Dlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Text: {Text}");
    }
}

/* $BlueprintScriptableObjectReference (1 fields) */
public record class BlueprintScriptableObjectReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintScriptableObjectReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintScriptableObjectReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $WeaponStyleSettings_6 (5 fields) */
public record class WeaponStyleSettings_6 (
    int Style,
    PPtr<AnimationClipWrapper>[] Single,
    PPtr<AnimationClipWrapper>[] Burst,
    PPtr<AnimationClipWrapper> CornerShotLeft,
    PPtr<AnimationClipWrapper> CornerShotRight) : IUnityStructure
{
    public static WeaponStyleSettings_6 Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        PPtr<AnimationClipWrapper>[] Single_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        PPtr<AnimationClipWrapper>[] Burst_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        PPtr<AnimationClipWrapper> CornerShotLeft_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> CornerShotRight_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Style_,
            Single_,
            Burst_,
            CornerShotLeft_,
            CornerShotRight_);
    }

    public override string ToString() => $"WeaponStyleSettings_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Single[{Single.Length}] = {{");
        if (Single.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in Single)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Single.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Burst[{Burst.Length}] = {{");
        if (Burst.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in Burst)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Burst.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CornerShotLeft: {CornerShotLeft}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CornerShotRight: {CornerShotRight}");
    }
}

/* $EquipmentEntityLink (1 fields) */
public record class EquipmentEntityLink (
    AsciiString AssetId) : IUnityStructure
{
    public static EquipmentEntityLink Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        
        return new(AssetId_);
    }

    public override string ToString() => $"EquipmentEntityLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }
}

/* $SavedSelectedRampIndices (3 fields) */
public record class SavedSelectedRampIndices (
    EquipmentEntityLink EquipmentEntityLink_,
    int PrimaryIndex,
    int SecondaryIndex) : IUnityStructure
{
    public static SavedSelectedRampIndices Read(EndianBinaryReader reader)
    {
        EquipmentEntityLink EquipmentEntityLink__ = EquipmentEntityLink.Read(reader);
        reader.AlignTo(4); /* EquipmentEntityLink_ */
        int PrimaryIndex_ = reader.ReadS32();
        int SecondaryIndex_ = reader.ReadS32();
        
        return new(EquipmentEntityLink__,
            PrimaryIndex_,
            SecondaryIndex_);
    }

    public override string ToString() => $"SavedSelectedRampIndices\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EquipmentEntityLink_: {{ \n{EquipmentEntityLink_.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrimaryIndex: {PrimaryIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondaryIndex: {SecondaryIndex}");
    }
}

/* $WeaponStyleStandUp (2 fields) */
public record class WeaponStyleStandUp (
    int Style,
    PPtr<AnimationClipWrapper> Wrapper) : IUnityStructure
{
    public static WeaponStyleStandUp Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> Wrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Style_,
            Wrapper_);
    }

    public override string ToString() => $"WeaponStyleStandUp\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Wrapper: {Wrapper}");
    }
}

/* $Face (8 fields) */
public record class Face (
    int[] m_Indexes,
    int m_SmoothingGroup,
    AutoUnwrapSettings m_Uv,
    PPtr<Material> m_Material,
    int m_SubmeshIndex,
    byte m_ManualUV,
    int elementGroup,
    int m_TextureGroup) : IUnityStructure
{
    public static Face Read(EndianBinaryReader reader)
    {
        int[] m_Indexes_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_Indexes */
        int m_SmoothingGroup_ = reader.ReadS32();
        AutoUnwrapSettings m_Uv_ = AutoUnwrapSettings.Read(reader);
        reader.AlignTo(4); /* m_Uv */
        PPtr<Material> m_Material_ = PPtr<Material>.Read(reader);
        int m_SubmeshIndex_ = reader.ReadS32();
        byte m_ManualUV_ = reader.ReadU8();
        reader.AlignTo(4); /* m_ManualUV */
        int elementGroup_ = reader.ReadS32();
        int m_TextureGroup_ = reader.ReadS32();
        
        return new(m_Indexes_,
            m_SmoothingGroup_,
            m_Uv_,
            m_Material_,
            m_SubmeshIndex_,
            m_ManualUV_,
            elementGroup_,
            m_TextureGroup_);
    }

    public override string ToString() => $"Face\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Indexes[{m_Indexes.Length}] = {{");
        if (m_Indexes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_Indexes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Indexes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SmoothingGroup: {m_SmoothingGroup}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Uv: {{ \n{m_Uv.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Material: {m_Material}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SubmeshIndex: {m_SubmeshIndex}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ManualUV: {m_ManualUV}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementGroup: {elementGroup}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TextureGroup: {m_TextureGroup}");
    }
}

/* $AutoUnwrapSettings (9 fields) */
public record class AutoUnwrapSettings (
    byte m_UseWorldSpace,
    byte m_FlipU,
    byte m_FlipV,
    byte m_SwapUV,
    int m_Fill,
    Vector2f m_Scale,
    Vector2f m_Offset,
    float m_Rotation,
    int m_Anchor) : IUnityStructure
{
    public static AutoUnwrapSettings Read(EndianBinaryReader reader)
    {
        byte m_UseWorldSpace_ = reader.ReadU8();
        reader.AlignTo(4); /* m_UseWorldSpace */
        byte m_FlipU_ = reader.ReadU8();
        reader.AlignTo(4); /* m_FlipU */
        byte m_FlipV_ = reader.ReadU8();
        reader.AlignTo(4); /* m_FlipV */
        byte m_SwapUV_ = reader.ReadU8();
        reader.AlignTo(4); /* m_SwapUV */
        int m_Fill_ = reader.ReadS32();
        Vector2f m_Scale_ = Vector2f.Read(reader);
        Vector2f m_Offset_ = Vector2f.Read(reader);
        float m_Rotation_ = reader.ReadF32();
        int m_Anchor_ = reader.ReadS32();
        
        return new(m_UseWorldSpace_,
            m_FlipU_,
            m_FlipV_,
            m_SwapUV_,
            m_Fill_,
            m_Scale_,
            m_Offset_,
            m_Rotation_,
            m_Anchor_);
    }

    public override string ToString() => $"AutoUnwrapSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UseWorldSpace: {m_UseWorldSpace}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FlipU: {m_FlipU}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_FlipV: {m_FlipV}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SwapUV: {m_SwapUV}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Fill: {m_Fill}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Scale: {{ x: {m_Scale.x}, y: {m_Scale.y} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Offset: {{ x: {m_Offset.x}, y: {m_Offset.y} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Rotation: {m_Rotation}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Anchor: {m_Anchor}");
    }
}

/* $SharedVertex (1 fields) */
public record class SharedVertex (
    int[] m_Vertices) : IUnityStructure
{
    public static SharedVertex Read(EndianBinaryReader reader)
    {
        int[] m_Vertices_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* m_Vertices */
        
        return new(m_Vertices_);
    }

    public override string ToString() => $"SharedVertex\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Vertices[{m_Vertices.Length}] = {{");
        if (m_Vertices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in m_Vertices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Vertices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UnwrapParameters (4 fields) */
public readonly record struct UnwrapParameters (
    float m_HardAngle,
    float m_PackMargin,
    float m_AngleError,
    float m_AreaError) : IUnityStructure
{
    public static UnwrapParameters Read(EndianBinaryReader reader)
    {
        float m_HardAngle_ = reader.ReadF32();
        float m_PackMargin_ = reader.ReadF32();
        float m_AngleError_ = reader.ReadF32();
        float m_AreaError_ = reader.ReadF32();
        
        return new(m_HardAngle_,
            m_PackMargin_,
            m_AngleError_,
            m_AreaError_);
    }

    public override string ToString() => $"UnwrapParameters\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_HardAngle: {m_HardAngle}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PackMargin: {m_PackMargin}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AngleError: {m_AngleError}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_AreaError: {m_AreaError}");
    }
}

/* $Edge (2 fields) */
public readonly record struct Edge (
    int a,
    int b) : IUnityStructure
{
    public static Edge Read(EndianBinaryReader reader)
    {
        int a_ = reader.ReadS32();
        int b_ = reader.ReadS32();
        
        return new(a_,
            b_);
    }

    public override string ToString() => $"Edge\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}a: {a}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}b: {b}");
    }
}

/* $UserData (34 fields) */
public record class UserData (
    ConfigVars configVars,
    Player_Editor[] players,
    InputAction[] actions,
    InputCategory[] actionCategories,
    ActionCategoryMap actionCategoryMap,
    InputBehavior[] inputBehaviors,
    InputMapCategory[] mapCategories,
    InputLayout[] joystickLayouts,
    InputLayout[] keyboardLayouts,
    InputLayout[] mouseLayouts,
    InputLayout[] customControllerLayouts,
    ControllerMap_Editor[] joystickMaps,
    ControllerMap_Editor[] keyboardMaps,
    ControllerMap_Editor[] mouseMaps,
    ControllerMap_Editor[] customControllerMaps,
    CustomController_Editor[] customControllers,
    ControllerMapLayoutManager_RuleSet_Editor[] controllerMapLayoutManagerRuleSets,
    ControllerMapEnabler_RuleSet_Editor[] controllerMapEnablerRuleSets,
    int playerIdCounter,
    int actionIdCounter,
    int actionCategoryIdCounter,
    int inputBehaviorIdCounter,
    int mapCategoryIdCounter,
    int joystickLayoutIdCounter,
    int keyboardLayoutIdCounter,
    int mouseLayoutIdCounter,
    int customControllerLayoutIdCounter,
    int joystickMapIdCounter,
    int keyboardMapIdCounter,
    int mouseMapIdCounter,
    int customControllerMapIdCounter,
    int customControllerIdCounter,
    int controllerMapLayoutManagerSetIdCounter,
    int controllerMapEnablerSetIdCounter) : IUnityStructure
{
    public static UserData Read(EndianBinaryReader reader)
    {
        ConfigVars configVars_ = ConfigVars.Read(reader);
        reader.AlignTo(4); /* configVars */
        Player_Editor[] players_ = BuiltInArray<Player_Editor>.Read(reader);
        reader.AlignTo(4); /* players */
        InputAction[] actions_ = BuiltInArray<InputAction>.Read(reader);
        reader.AlignTo(4); /* actions */
        InputCategory[] actionCategories_ = BuiltInArray<InputCategory>.Read(reader);
        reader.AlignTo(4); /* actionCategories */
        ActionCategoryMap actionCategoryMap_ = ActionCategoryMap.Read(reader);
        reader.AlignTo(4); /* actionCategoryMap */
        InputBehavior[] inputBehaviors_ = BuiltInArray<InputBehavior>.Read(reader);
        reader.AlignTo(4); /* inputBehaviors */
        InputMapCategory[] mapCategories_ = BuiltInArray<InputMapCategory>.Read(reader);
        reader.AlignTo(4); /* mapCategories */
        InputLayout[] joystickLayouts_ = BuiltInArray<InputLayout>.Read(reader);
        reader.AlignTo(4); /* joystickLayouts */
        InputLayout[] keyboardLayouts_ = BuiltInArray<InputLayout>.Read(reader);
        reader.AlignTo(4); /* keyboardLayouts */
        InputLayout[] mouseLayouts_ = BuiltInArray<InputLayout>.Read(reader);
        reader.AlignTo(4); /* mouseLayouts */
        InputLayout[] customControllerLayouts_ = BuiltInArray<InputLayout>.Read(reader);
        reader.AlignTo(4); /* customControllerLayouts */
        ControllerMap_Editor[] joystickMaps_ = BuiltInArray<ControllerMap_Editor>.Read(reader);
        reader.AlignTo(4); /* joystickMaps */
        ControllerMap_Editor[] keyboardMaps_ = BuiltInArray<ControllerMap_Editor>.Read(reader);
        reader.AlignTo(4); /* keyboardMaps */
        ControllerMap_Editor[] mouseMaps_ = BuiltInArray<ControllerMap_Editor>.Read(reader);
        reader.AlignTo(4); /* mouseMaps */
        ControllerMap_Editor[] customControllerMaps_ = BuiltInArray<ControllerMap_Editor>.Read(reader);
        reader.AlignTo(4); /* customControllerMaps */
        CustomController_Editor[] customControllers_ = BuiltInArray<CustomController_Editor>.Read(reader);
        reader.AlignTo(4); /* customControllers */
        ControllerMapLayoutManager_RuleSet_Editor[] controllerMapLayoutManagerRuleSets_ = BuiltInArray<ControllerMapLayoutManager_RuleSet_Editor>.Read(reader);
        reader.AlignTo(4); /* controllerMapLayoutManagerRuleSets */
        ControllerMapEnabler_RuleSet_Editor[] controllerMapEnablerRuleSets_ = BuiltInArray<ControllerMapEnabler_RuleSet_Editor>.Read(reader);
        reader.AlignTo(4); /* controllerMapEnablerRuleSets */
        int playerIdCounter_ = reader.ReadS32();
        int actionIdCounter_ = reader.ReadS32();
        int actionCategoryIdCounter_ = reader.ReadS32();
        int inputBehaviorIdCounter_ = reader.ReadS32();
        int mapCategoryIdCounter_ = reader.ReadS32();
        int joystickLayoutIdCounter_ = reader.ReadS32();
        int keyboardLayoutIdCounter_ = reader.ReadS32();
        int mouseLayoutIdCounter_ = reader.ReadS32();
        int customControllerLayoutIdCounter_ = reader.ReadS32();
        int joystickMapIdCounter_ = reader.ReadS32();
        int keyboardMapIdCounter_ = reader.ReadS32();
        int mouseMapIdCounter_ = reader.ReadS32();
        int customControllerMapIdCounter_ = reader.ReadS32();
        int customControllerIdCounter_ = reader.ReadS32();
        int controllerMapLayoutManagerSetIdCounter_ = reader.ReadS32();
        int controllerMapEnablerSetIdCounter_ = reader.ReadS32();
        
        return new(configVars_,
            players_,
            actions_,
            actionCategories_,
            actionCategoryMap_,
            inputBehaviors_,
            mapCategories_,
            joystickLayouts_,
            keyboardLayouts_,
            mouseLayouts_,
            customControllerLayouts_,
            joystickMaps_,
            keyboardMaps_,
            mouseMaps_,
            customControllerMaps_,
            customControllers_,
            controllerMapLayoutManagerRuleSets_,
            controllerMapEnablerRuleSets_,
            playerIdCounter_,
            actionIdCounter_,
            actionCategoryIdCounter_,
            inputBehaviorIdCounter_,
            mapCategoryIdCounter_,
            joystickLayoutIdCounter_,
            keyboardLayoutIdCounter_,
            mouseLayoutIdCounter_,
            customControllerLayoutIdCounter_,
            joystickMapIdCounter_,
            keyboardMapIdCounter_,
            mouseMapIdCounter_,
            customControllerMapIdCounter_,
            customControllerIdCounter_,
            controllerMapLayoutManagerSetIdCounter_,
            controllerMapEnablerSetIdCounter_);
    }

    public override string ToString() => $"UserData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}configVars: {{ \n{configVars.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}players[{players.Length}] = {{");
        if (players.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Player_Editor _4 in players)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (players.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}actions[{actions.Length}] = {{");
        if (actions.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputAction _4 in actions)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (actions.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}actionCategories[{actionCategories.Length}] = {{");
        if (actionCategories.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputCategory _4 in actionCategories)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (actionCategories.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}actionCategoryMap: {{ \n{actionCategoryMap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}inputBehaviors[{inputBehaviors.Length}] = {{");
        if (inputBehaviors.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputBehavior _4 in inputBehaviors)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (inputBehaviors.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mapCategories[{mapCategories.Length}] = {{");
        if (mapCategories.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputMapCategory _4 in mapCategories)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (mapCategories.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}joystickLayouts[{joystickLayouts.Length}] = {{");
        if (joystickLayouts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputLayout _4 in joystickLayouts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (joystickLayouts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keyboardLayouts[{keyboardLayouts.Length}] = {{");
        if (keyboardLayouts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputLayout _4 in keyboardLayouts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keyboardLayouts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mouseLayouts[{mouseLayouts.Length}] = {{");
        if (mouseLayouts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputLayout _4 in mouseLayouts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (mouseLayouts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customControllerLayouts[{customControllerLayouts.Length}] = {{");
        if (customControllerLayouts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (InputLayout _4 in customControllerLayouts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customControllerLayouts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}joystickMaps[{joystickMaps.Length}] = {{");
        if (joystickMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMap_Editor _4 in joystickMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (joystickMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keyboardMaps[{keyboardMaps.Length}] = {{");
        if (keyboardMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMap_Editor _4 in keyboardMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keyboardMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mouseMaps[{mouseMaps.Length}] = {{");
        if (mouseMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMap_Editor _4 in mouseMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (mouseMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customControllerMaps[{customControllerMaps.Length}] = {{");
        if (customControllerMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMap_Editor _4 in customControllerMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customControllerMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customControllers[{customControllers.Length}] = {{");
        if (customControllers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomController_Editor _4 in customControllers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customControllers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}controllerMapLayoutManagerRuleSets[{controllerMapLayoutManagerRuleSets.Length}] = {{");
        if (controllerMapLayoutManagerRuleSets.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMapLayoutManager_RuleSet_Editor _4 in controllerMapLayoutManagerRuleSets)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (controllerMapLayoutManagerRuleSets.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}controllerMapEnablerRuleSets[{controllerMapEnablerRuleSets.Length}] = {{");
        if (controllerMapEnablerRuleSets.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMapEnabler_RuleSet_Editor _4 in controllerMapEnablerRuleSets)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (controllerMapEnablerRuleSets.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}playerIdCounter: {playerIdCounter}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}actionIdCounter: {actionIdCounter}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}actionCategoryIdCounter: {actionCategoryIdCounter}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}inputBehaviorIdCounter: {inputBehaviorIdCounter}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mapCategoryIdCounter: {mapCategoryIdCounter}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joystickLayoutIdCounter: {joystickLayoutIdCounter}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}keyboardLayoutIdCounter: {keyboardLayoutIdCounter}");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mouseLayoutIdCounter: {mouseLayoutIdCounter}");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customControllerLayoutIdCounter: {customControllerLayoutIdCounter}");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joystickMapIdCounter: {joystickMapIdCounter}");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}keyboardMapIdCounter: {keyboardMapIdCounter}");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mouseMapIdCounter: {mouseMapIdCounter}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customControllerMapIdCounter: {customControllerMapIdCounter}");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customControllerIdCounter: {customControllerIdCounter}");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerMapLayoutManagerSetIdCounter: {controllerMapLayoutManagerSetIdCounter}");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerMapEnablerSetIdCounter: {controllerMapEnablerSetIdCounter}");
    }
}

/* $ConfigVars (54 fields) */
public record class ConfigVars (
    int updateLoop,
    byte alwaysUseUnityInput,
    int windowsStandalonePrimaryInputSource,
    int osx_primaryInputSource,
    int linux_primaryInputSource,
    int windowsUWP_primaryInputSource,
    int xboxOne_primaryInputSource,
    int gameCoreXboxOne_primaryInputSource,
    int gameCoreScarlett_primaryInputSource,
    int ps4_primaryInputSource,
    int ps5_primaryInputSource,
    int webGL_primaryInputSource,
    int stadia_primaryInputSource,
    byte useXInput,
    byte useNativeMouse,
    byte useEnhancedDeviceSupport,
    byte windowsStandalone_useSteamRawInputControllerWorkaround,
    byte osxStandalone_useEnhancedDeviceSupport,
    byte android_supportUnknownGamepads,
    byte ps4_assignJoysticksByPS4JoyId,
    byte useSteamControllerSupport,
    byte logToScreen,
    byte runInEditMode,
    byte allowInputInEditorSceneView,
    PlatformVars_WindowsStandalone platformVars_windowsStandalone,
    PlatformVars platformVars_linuxStandalone,
    PlatformVars_OSXStandalone platformVars_osxStandalone,
    PlatformVars_WindowsUWP platformVars_windowsUWP,
    PlatformVars platformVars_iOS,
    PlatformVars platformVars_tvOS,
    PlatformVars platformVars_android,
    PlatformVars platformVars_ps4,
    PlatformVars_PS5 platformVars_ps5,
    PlatformVars platformVars_psVita,
    PlatformVars platformVars_xboxOne,
    PlatformVars_GameCoreXboxOne platformVars_gameCoreXboxOne,
    PlatformVars_GameCoreScarlett platformVars_gameCoreScarlett,
    PlatformVars platformVars_switch,
    PlatformVars platformVars_webGL,
    PlatformVars_Stadia platformVars_stadia,
    int maxJoysticksPerPlayer,
    byte autoAssignJoysticks,
    byte assignJoysticksToPlayingPlayersOnly,
    byte distributeJoysticksEvenly,
    byte reassignJoystickToPreviousOwnerOnReconnect,
    int defaultJoystickAxis2DDeadZoneType,
    int defaultJoystickAxis2DSensitivityType,
    int defaultAxisSensitivityType,
    byte force4WayHats,
    int throttleCalibrationMode,
    byte activateActionButtonsOnNegativeValue,
    byte deferControllerConnectedEventsOnStart,
    int logLevel,
    EditorVars editorSettings) : IUnityStructure
{
    public static ConfigVars Read(EndianBinaryReader reader)
    {
        int updateLoop_ = reader.ReadS32();
        byte alwaysUseUnityInput_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysUseUnityInput */
        int windowsStandalonePrimaryInputSource_ = reader.ReadS32();
        int osx_primaryInputSource_ = reader.ReadS32();
        int linux_primaryInputSource_ = reader.ReadS32();
        int windowsUWP_primaryInputSource_ = reader.ReadS32();
        int xboxOne_primaryInputSource_ = reader.ReadS32();
        int gameCoreXboxOne_primaryInputSource_ = reader.ReadS32();
        int gameCoreScarlett_primaryInputSource_ = reader.ReadS32();
        int ps4_primaryInputSource_ = reader.ReadS32();
        int ps5_primaryInputSource_ = reader.ReadS32();
        int webGL_primaryInputSource_ = reader.ReadS32();
        int stadia_primaryInputSource_ = reader.ReadS32();
        byte useXInput_ = reader.ReadU8();
        reader.AlignTo(4); /* useXInput */
        byte useNativeMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* useNativeMouse */
        byte useEnhancedDeviceSupport_ = reader.ReadU8();
        reader.AlignTo(4); /* useEnhancedDeviceSupport */
        byte windowsStandalone_useSteamRawInputControllerWorkaround_ = reader.ReadU8();
        reader.AlignTo(4); /* windowsStandalone_useSteamRawInputControllerWorkaround */
        byte osxStandalone_useEnhancedDeviceSupport_ = reader.ReadU8();
        reader.AlignTo(4); /* osxStandalone_useEnhancedDeviceSupport */
        byte android_supportUnknownGamepads_ = reader.ReadU8();
        reader.AlignTo(4); /* android_supportUnknownGamepads */
        byte ps4_assignJoysticksByPS4JoyId_ = reader.ReadU8();
        reader.AlignTo(4); /* ps4_assignJoysticksByPS4JoyId */
        byte useSteamControllerSupport_ = reader.ReadU8();
        reader.AlignTo(4); /* useSteamControllerSupport */
        byte logToScreen_ = reader.ReadU8();
        reader.AlignTo(4); /* logToScreen */
        byte runInEditMode_ = reader.ReadU8();
        reader.AlignTo(4); /* runInEditMode */
        byte allowInputInEditorSceneView_ = reader.ReadU8();
        reader.AlignTo(4); /* allowInputInEditorSceneView */
        PlatformVars_WindowsStandalone platformVars_windowsStandalone_ = PlatformVars_WindowsStandalone.Read(reader);
        reader.AlignTo(4); /* platformVars_windowsStandalone */
        PlatformVars platformVars_linuxStandalone_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_linuxStandalone */
        PlatformVars_OSXStandalone platformVars_osxStandalone_ = PlatformVars_OSXStandalone.Read(reader);
        reader.AlignTo(4); /* platformVars_osxStandalone */
        PlatformVars_WindowsUWP platformVars_windowsUWP_ = PlatformVars_WindowsUWP.Read(reader);
        reader.AlignTo(4); /* platformVars_windowsUWP */
        PlatformVars platformVars_iOS_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_iOS */
        PlatformVars platformVars_tvOS_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_tvOS */
        PlatformVars platformVars_android_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_android */
        PlatformVars platformVars_ps4_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_ps4 */
        PlatformVars_PS5 platformVars_ps5_ = PlatformVars_PS5.Read(reader);
        reader.AlignTo(4); /* platformVars_ps5 */
        PlatformVars platformVars_psVita_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_psVita */
        PlatformVars platformVars_xboxOne_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_xboxOne */
        PlatformVars_GameCoreXboxOne platformVars_gameCoreXboxOne_ = PlatformVars_GameCoreXboxOne.Read(reader);
        reader.AlignTo(4); /* platformVars_gameCoreXboxOne */
        PlatformVars_GameCoreScarlett platformVars_gameCoreScarlett_ = PlatformVars_GameCoreScarlett.Read(reader);
        reader.AlignTo(4); /* platformVars_gameCoreScarlett */
        PlatformVars platformVars_switch_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_switch */
        PlatformVars platformVars_webGL_ = PlatformVars.Read(reader);
        reader.AlignTo(4); /* platformVars_webGL */
        PlatformVars_Stadia platformVars_stadia_ = PlatformVars_Stadia.Read(reader);
        reader.AlignTo(4); /* platformVars_stadia */
        int maxJoysticksPerPlayer_ = reader.ReadS32();
        byte autoAssignJoysticks_ = reader.ReadU8();
        reader.AlignTo(4); /* autoAssignJoysticks */
        byte assignJoysticksToPlayingPlayersOnly_ = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksToPlayingPlayersOnly */
        byte distributeJoysticksEvenly_ = reader.ReadU8();
        reader.AlignTo(4); /* distributeJoysticksEvenly */
        byte reassignJoystickToPreviousOwnerOnReconnect_ = reader.ReadU8();
        reader.AlignTo(4); /* reassignJoystickToPreviousOwnerOnReconnect */
        int defaultJoystickAxis2DDeadZoneType_ = reader.ReadS32();
        int defaultJoystickAxis2DSensitivityType_ = reader.ReadS32();
        int defaultAxisSensitivityType_ = reader.ReadS32();
        byte force4WayHats_ = reader.ReadU8();
        reader.AlignTo(4); /* force4WayHats */
        int throttleCalibrationMode_ = reader.ReadS32();
        byte activateActionButtonsOnNegativeValue_ = reader.ReadU8();
        reader.AlignTo(4); /* activateActionButtonsOnNegativeValue */
        byte deferControllerConnectedEventsOnStart_ = reader.ReadU8();
        reader.AlignTo(4); /* deferControllerConnectedEventsOnStart */
        int logLevel_ = reader.ReadS32();
        EditorVars editorSettings_ = EditorVars.Read(reader);
        reader.AlignTo(4); /* editorSettings */
        
        return new(updateLoop_,
            alwaysUseUnityInput_,
            windowsStandalonePrimaryInputSource_,
            osx_primaryInputSource_,
            linux_primaryInputSource_,
            windowsUWP_primaryInputSource_,
            xboxOne_primaryInputSource_,
            gameCoreXboxOne_primaryInputSource_,
            gameCoreScarlett_primaryInputSource_,
            ps4_primaryInputSource_,
            ps5_primaryInputSource_,
            webGL_primaryInputSource_,
            stadia_primaryInputSource_,
            useXInput_,
            useNativeMouse_,
            useEnhancedDeviceSupport_,
            windowsStandalone_useSteamRawInputControllerWorkaround_,
            osxStandalone_useEnhancedDeviceSupport_,
            android_supportUnknownGamepads_,
            ps4_assignJoysticksByPS4JoyId_,
            useSteamControllerSupport_,
            logToScreen_,
            runInEditMode_,
            allowInputInEditorSceneView_,
            platformVars_windowsStandalone_,
            platformVars_linuxStandalone_,
            platformVars_osxStandalone_,
            platformVars_windowsUWP_,
            platformVars_iOS_,
            platformVars_tvOS_,
            platformVars_android_,
            platformVars_ps4_,
            platformVars_ps5_,
            platformVars_psVita_,
            platformVars_xboxOne_,
            platformVars_gameCoreXboxOne_,
            platformVars_gameCoreScarlett_,
            platformVars_switch_,
            platformVars_webGL_,
            platformVars_stadia_,
            maxJoysticksPerPlayer_,
            autoAssignJoysticks_,
            assignJoysticksToPlayingPlayersOnly_,
            distributeJoysticksEvenly_,
            reassignJoystickToPreviousOwnerOnReconnect_,
            defaultJoystickAxis2DDeadZoneType_,
            defaultJoystickAxis2DSensitivityType_,
            defaultAxisSensitivityType_,
            force4WayHats_,
            throttleCalibrationMode_,
            activateActionButtonsOnNegativeValue_,
            deferControllerConnectedEventsOnStart_,
            logLevel_,
            editorSettings_);
    }

    public override string ToString() => $"ConfigVars\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}updateLoop: {updateLoop}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysUseUnityInput: {alwaysUseUnityInput}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}windowsStandalonePrimaryInputSource: {windowsStandalonePrimaryInputSource}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}osx_primaryInputSource: {osx_primaryInputSource}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}linux_primaryInputSource: {linux_primaryInputSource}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}windowsUWP_primaryInputSource: {windowsUWP_primaryInputSource}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}xboxOne_primaryInputSource: {xboxOne_primaryInputSource}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}gameCoreXboxOne_primaryInputSource: {gameCoreXboxOne_primaryInputSource}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}gameCoreScarlett_primaryInputSource: {gameCoreScarlett_primaryInputSource}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ps4_primaryInputSource: {ps4_primaryInputSource}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ps5_primaryInputSource: {ps5_primaryInputSource}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}webGL_primaryInputSource: {webGL_primaryInputSource}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stadia_primaryInputSource: {stadia_primaryInputSource}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useXInput: {useXInput}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useNativeMouse: {useNativeMouse}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useEnhancedDeviceSupport: {useEnhancedDeviceSupport}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}windowsStandalone_useSteamRawInputControllerWorkaround: {windowsStandalone_useSteamRawInputControllerWorkaround}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}osxStandalone_useEnhancedDeviceSupport: {osxStandalone_useEnhancedDeviceSupport}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}android_supportUnknownGamepads: {android_supportUnknownGamepads}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ps4_assignJoysticksByPS4JoyId: {ps4_assignJoysticksByPS4JoyId}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useSteamControllerSupport: {useSteamControllerSupport}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}logToScreen: {logToScreen}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}runInEditMode: {runInEditMode}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}allowInputInEditorSceneView: {allowInputInEditorSceneView}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_windowsStandalone: {{ \n{platformVars_windowsStandalone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_linuxStandalone: {{ disableKeyboard: {platformVars_linuxStandalone.disableKeyboard}, disableMouse: {platformVars_linuxStandalone.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_linuxStandalone.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_osxStandalone: {{ \n{platformVars_osxStandalone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_windowsUWP: {{ \n{platformVars_windowsUWP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_iOS: {{ disableKeyboard: {platformVars_iOS.disableKeyboard}, disableMouse: {platformVars_iOS.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_iOS.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_tvOS: {{ disableKeyboard: {platformVars_tvOS.disableKeyboard}, disableMouse: {platformVars_tvOS.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_tvOS.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_android: {{ disableKeyboard: {platformVars_android.disableKeyboard}, disableMouse: {platformVars_android.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_android.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_ps4: {{ disableKeyboard: {platformVars_ps4.disableKeyboard}, disableMouse: {platformVars_ps4.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_ps4.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_ps5: {{ disableKeyboard: {platformVars_ps5.disableKeyboard}, disableMouse: {platformVars_ps5.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_ps5.ignoreInputWhenAppNotInFocus}, assignJoysticksByPS5JoyId: {platformVars_ps5.assignJoysticksByPS5JoyId} }}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_psVita: {{ disableKeyboard: {platformVars_psVita.disableKeyboard}, disableMouse: {platformVars_psVita.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_psVita.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_xboxOne: {{ disableKeyboard: {platformVars_xboxOne.disableKeyboard}, disableMouse: {platformVars_xboxOne.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_xboxOne.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_gameCoreXboxOne: {{ disableKeyboard: {platformVars_gameCoreXboxOne.disableKeyboard}, disableMouse: {platformVars_gameCoreXboxOne.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_gameCoreXboxOne.ignoreInputWhenAppNotInFocus}, assignJoysticksByUserId: {platformVars_gameCoreXboxOne.assignJoysticksByUserId} }}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_gameCoreScarlett: {{ disableKeyboard: {platformVars_gameCoreScarlett.disableKeyboard}, disableMouse: {platformVars_gameCoreScarlett.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_gameCoreScarlett.ignoreInputWhenAppNotInFocus}, assignJoysticksByUserId: {platformVars_gameCoreScarlett.assignJoysticksByUserId} }}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_switch: {{ disableKeyboard: {platformVars_switch.disableKeyboard}, disableMouse: {platformVars_switch.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_switch.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_webGL: {{ disableKeyboard: {platformVars_webGL.disableKeyboard}, disableMouse: {platformVars_webGL.disableMouse}, ignoreInputWhenAppNotInFocus: {platformVars_webGL.ignoreInputWhenAppNotInFocus} }}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}platformVars_stadia: {{ \n{platformVars_stadia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}maxJoysticksPerPlayer: {maxJoysticksPerPlayer}");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}autoAssignJoysticks: {autoAssignJoysticks}");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}assignJoysticksToPlayingPlayersOnly: {assignJoysticksToPlayingPlayersOnly}");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}distributeJoysticksEvenly: {distributeJoysticksEvenly}");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}reassignJoystickToPreviousOwnerOnReconnect: {reassignJoystickToPreviousOwnerOnReconnect}");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}defaultJoystickAxis2DDeadZoneType: {defaultJoystickAxis2DDeadZoneType}");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}defaultJoystickAxis2DSensitivityType: {defaultJoystickAxis2DSensitivityType}");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}defaultAxisSensitivityType: {defaultAxisSensitivityType}");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}force4WayHats: {force4WayHats}");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}throttleCalibrationMode: {throttleCalibrationMode}");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}activateActionButtonsOnNegativeValue: {activateActionButtonsOnNegativeValue}");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}deferControllerConnectedEventsOnStart: {deferControllerConnectedEventsOnStart}");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}logLevel: {logLevel}");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}editorSettings: {{ \n{editorSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PlatformVars_WindowsStandalone (5 fields) */
public readonly record struct PlatformVars_WindowsStandalone (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte useNativeKeyboard,
    int joystickRefreshRate) : IUnityStructure
{
    public static PlatformVars_WindowsStandalone Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte useNativeKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* useNativeKeyboard */
        int joystickRefreshRate_ = reader.ReadS32();
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            useNativeKeyboard_,
            joystickRefreshRate_);
    }

    public override string ToString() => $"PlatformVars_WindowsStandalone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useNativeKeyboard: {useNativeKeyboard}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}joystickRefreshRate: {joystickRefreshRate}");
    }
}

/* $PlatformVars (3 fields) */
public readonly record struct PlatformVars (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus) : IUnityStructure
{
    public static PlatformVars Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_);
    }

    public override string ToString() => $"PlatformVars\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }
}

/* $PlatformVars_OSXStandalone (5 fields) */
public readonly record struct PlatformVars_OSXStandalone (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte useAppleGameController,
    byte assignJoysticksByUserId) : IUnityStructure
{
    public static PlatformVars_OSXStandalone Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte useAppleGameController_ = reader.ReadU8();
        reader.AlignTo(4); /* useAppleGameController */
        byte assignJoysticksByUserId_ = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByUserId */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            useAppleGameController_,
            assignJoysticksByUserId_);
    }

    public override string ToString() => $"PlatformVars_OSXStandalone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useAppleGameController: {useAppleGameController}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}assignJoysticksByUserId: {assignJoysticksByUserId}");
    }
}

/* $PlatformVars_WindowsUWP (5 fields) */
public readonly record struct PlatformVars_WindowsUWP (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte useGamepadAPI,
    byte useHIDAPI) : IUnityStructure
{
    public static PlatformVars_WindowsUWP Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte useGamepadAPI_ = reader.ReadU8();
        reader.AlignTo(4); /* useGamepadAPI */
        byte useHIDAPI_ = reader.ReadU8();
        reader.AlignTo(4); /* useHIDAPI */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            useGamepadAPI_,
            useHIDAPI_);
    }

    public override string ToString() => $"PlatformVars_WindowsUWP\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useGamepadAPI: {useGamepadAPI}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useHIDAPI: {useHIDAPI}");
    }
}

/* $PlatformVars_PS5 (4 fields) */
public readonly record struct PlatformVars_PS5 (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte assignJoysticksByPS5JoyId) : IUnityStructure
{
    public static PlatformVars_PS5 Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte assignJoysticksByPS5JoyId_ = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByPS5JoyId */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            assignJoysticksByPS5JoyId_);
    }

    public override string ToString() => $"PlatformVars_PS5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}assignJoysticksByPS5JoyId: {assignJoysticksByPS5JoyId}");
    }
}

/* $PlatformVars_GameCoreXboxOne (4 fields) */
public readonly record struct PlatformVars_GameCoreXboxOne (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte assignJoysticksByUserId) : IUnityStructure
{
    public static PlatformVars_GameCoreXboxOne Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte assignJoysticksByUserId_ = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByUserId */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            assignJoysticksByUserId_);
    }

    public override string ToString() => $"PlatformVars_GameCoreXboxOne\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}assignJoysticksByUserId: {assignJoysticksByUserId}");
    }
}

/* $PlatformVars_GameCoreScarlett (4 fields) */
public readonly record struct PlatformVars_GameCoreScarlett (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte assignJoysticksByUserId) : IUnityStructure
{
    public static PlatformVars_GameCoreScarlett Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte assignJoysticksByUserId_ = reader.ReadU8();
        reader.AlignTo(4); /* assignJoysticksByUserId */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            assignJoysticksByUserId_);
    }

    public override string ToString() => $"PlatformVars_GameCoreScarlett\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}assignJoysticksByUserId: {assignJoysticksByUserId}");
    }
}

/* $PlatformVars_Stadia (5 fields) */
public readonly record struct PlatformVars_Stadia (
    byte disableKeyboard,
    byte disableMouse,
    byte ignoreInputWhenAppNotInFocus,
    byte useNativeKeyboard,
    byte useNativeMouse) : IUnityStructure
{
    public static PlatformVars_Stadia Read(EndianBinaryReader reader)
    {
        byte disableKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* disableKeyboard */
        byte disableMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* disableMouse */
        byte ignoreInputWhenAppNotInFocus_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreInputWhenAppNotInFocus */
        byte useNativeKeyboard_ = reader.ReadU8();
        reader.AlignTo(4); /* useNativeKeyboard */
        byte useNativeMouse_ = reader.ReadU8();
        reader.AlignTo(4); /* useNativeMouse */
        
        return new(disableKeyboard_,
            disableMouse_,
            ignoreInputWhenAppNotInFocus_,
            useNativeKeyboard_,
            useNativeMouse_);
    }

    public override string ToString() => $"PlatformVars_Stadia\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableKeyboard: {disableKeyboard}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disableMouse: {disableMouse}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreInputWhenAppNotInFocus: {ignoreInputWhenAppNotInFocus}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useNativeKeyboard: {useNativeKeyboard}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useNativeMouse: {useNativeMouse}");
    }
}

/* $EditorVars (25 fields) */
public record class EditorVars (
    byte exportConsts_useParentClass,
    AsciiString exportConsts_parentClassName,
    byte exportConsts_useNamespace,
    AsciiString exportConsts_namespace,
    byte exportConsts_actions,
    AsciiString exportConsts_actionsClassName,
    byte exportConsts_actionsIncludeActionCategory,
    byte exportConsts_actionsCreateClassesForActionCategories,
    byte exportConsts_mapCategories,
    AsciiString exportConsts_mapCategoriesClassName,
    byte exportConsts_layouts,
    AsciiString exportConsts_layoutsClassName,
    byte exportConsts_players,
    AsciiString exportConsts_playersClassName,
    byte exportConsts_inputBehaviors,
    AsciiString exportConsts_inputBehaviorsClassName,
    byte exportConsts_customControllers,
    AsciiString exportConsts_customControllersClassName,
    AsciiString exportConsts_customControllersAxesClassName,
    AsciiString exportConsts_customControllersButtonsClassName,
    byte exportConsts_layoutManagerRuleSets,
    AsciiString exportConsts_layoutManagerRuleSetsClassName,
    byte exportConsts_mapEnablerRuleSets,
    AsciiString exportConsts_mapEnablerRuleSetsClassName,
    byte exportConsts_allCapsConstantNames) : IUnityStructure
{
    public static EditorVars Read(EndianBinaryReader reader)
    {
        byte exportConsts_useParentClass_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_useParentClass */
        AsciiString exportConsts_parentClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_parentClassName */
        byte exportConsts_useNamespace_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_useNamespace */
        AsciiString exportConsts_namespace_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_namespace */
        byte exportConsts_actions_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_actions */
        AsciiString exportConsts_actionsClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_actionsClassName */
        byte exportConsts_actionsIncludeActionCategory_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_actionsIncludeActionCategory */
        byte exportConsts_actionsCreateClassesForActionCategories_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_actionsCreateClassesForActionCategories */
        byte exportConsts_mapCategories_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_mapCategories */
        AsciiString exportConsts_mapCategoriesClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_mapCategoriesClassName */
        byte exportConsts_layouts_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_layouts */
        AsciiString exportConsts_layoutsClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_layoutsClassName */
        byte exportConsts_players_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_players */
        AsciiString exportConsts_playersClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_playersClassName */
        byte exportConsts_inputBehaviors_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_inputBehaviors */
        AsciiString exportConsts_inputBehaviorsClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_inputBehaviorsClassName */
        byte exportConsts_customControllers_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_customControllers */
        AsciiString exportConsts_customControllersClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_customControllersClassName */
        AsciiString exportConsts_customControllersAxesClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_customControllersAxesClassName */
        AsciiString exportConsts_customControllersButtonsClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_customControllersButtonsClassName */
        byte exportConsts_layoutManagerRuleSets_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_layoutManagerRuleSets */
        AsciiString exportConsts_layoutManagerRuleSetsClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_layoutManagerRuleSetsClassName */
        byte exportConsts_mapEnablerRuleSets_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_mapEnablerRuleSets */
        AsciiString exportConsts_mapEnablerRuleSetsClassName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* exportConsts_mapEnablerRuleSetsClassName */
        byte exportConsts_allCapsConstantNames_ = reader.ReadU8();
        reader.AlignTo(4); /* exportConsts_allCapsConstantNames */
        
        return new(exportConsts_useParentClass_,
            exportConsts_parentClassName_,
            exportConsts_useNamespace_,
            exportConsts_namespace_,
            exportConsts_actions_,
            exportConsts_actionsClassName_,
            exportConsts_actionsIncludeActionCategory_,
            exportConsts_actionsCreateClassesForActionCategories_,
            exportConsts_mapCategories_,
            exportConsts_mapCategoriesClassName_,
            exportConsts_layouts_,
            exportConsts_layoutsClassName_,
            exportConsts_players_,
            exportConsts_playersClassName_,
            exportConsts_inputBehaviors_,
            exportConsts_inputBehaviorsClassName_,
            exportConsts_customControllers_,
            exportConsts_customControllersClassName_,
            exportConsts_customControllersAxesClassName_,
            exportConsts_customControllersButtonsClassName_,
            exportConsts_layoutManagerRuleSets_,
            exportConsts_layoutManagerRuleSetsClassName_,
            exportConsts_mapEnablerRuleSets_,
            exportConsts_mapEnablerRuleSetsClassName_,
            exportConsts_allCapsConstantNames_);
    }

    public override string ToString() => $"EditorVars\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_useParentClass: {exportConsts_useParentClass}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_parentClassName: \"{exportConsts_parentClassName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_useNamespace: {exportConsts_useNamespace}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_namespace: \"{exportConsts_namespace}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_actions: {exportConsts_actions}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_actionsClassName: \"{exportConsts_actionsClassName}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_actionsIncludeActionCategory: {exportConsts_actionsIncludeActionCategory}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_actionsCreateClassesForActionCategories: {exportConsts_actionsCreateClassesForActionCategories}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_mapCategories: {exportConsts_mapCategories}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_mapCategoriesClassName: \"{exportConsts_mapCategoriesClassName}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_layouts: {exportConsts_layouts}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_layoutsClassName: \"{exportConsts_layoutsClassName}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_players: {exportConsts_players}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_playersClassName: \"{exportConsts_playersClassName}\"");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_inputBehaviors: {exportConsts_inputBehaviors}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_inputBehaviorsClassName: \"{exportConsts_inputBehaviorsClassName}\"");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_customControllers: {exportConsts_customControllers}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_customControllersClassName: \"{exportConsts_customControllersClassName}\"");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_customControllersAxesClassName: \"{exportConsts_customControllersAxesClassName}\"");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_customControllersButtonsClassName: \"{exportConsts_customControllersButtonsClassName}\"");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_layoutManagerRuleSets: {exportConsts_layoutManagerRuleSets}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_layoutManagerRuleSetsClassName: \"{exportConsts_layoutManagerRuleSetsClassName}\"");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_mapEnablerRuleSets: {exportConsts_mapEnablerRuleSets}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_mapEnablerRuleSetsClassName: \"{exportConsts_mapEnablerRuleSetsClassName}\"");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exportConsts_allCapsConstantNames: {exportConsts_allCapsConstantNames}");
    }
}

/* $Player_Editor (14 fields) */
public record class Player_Editor (
    int _id,
    AsciiString _name,
    AsciiString _descriptiveName,
    byte _startPlaying,
    Mapping_1[] _defaultJoystickMaps,
    Mapping_1[] _defaultMouseMaps,
    Mapping_1[] _defaultKeyboardMaps,
    Mapping_1[] _defaultCustomControllerMaps,
    CreateControllerInfo[] _startingCustomControllers,
    byte _assignMouseOnStart,
    byte _assignKeyboardOnStart,
    byte _excludeFromControllerAutoAssignment,
    ControllerMapLayoutManagerSettings _controllerMapLayoutManagerSettings,
    ControllerMapEnablerSettings _controllerMapEnablerSettings) : IUnityStructure
{
    public static Player_Editor Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        byte _startPlaying_ = reader.ReadU8();
        reader.AlignTo(4); /* _startPlaying */
        Mapping_1[] _defaultJoystickMaps_ = BuiltInArray<Mapping_1>.Read(reader);
        reader.AlignTo(4); /* _defaultJoystickMaps */
        Mapping_1[] _defaultMouseMaps_ = BuiltInArray<Mapping_1>.Read(reader);
        reader.AlignTo(4); /* _defaultMouseMaps */
        Mapping_1[] _defaultKeyboardMaps_ = BuiltInArray<Mapping_1>.Read(reader);
        reader.AlignTo(4); /* _defaultKeyboardMaps */
        Mapping_1[] _defaultCustomControllerMaps_ = BuiltInArray<Mapping_1>.Read(reader);
        reader.AlignTo(4); /* _defaultCustomControllerMaps */
        CreateControllerInfo[] _startingCustomControllers_ = BuiltInArray<CreateControllerInfo>.Read(reader);
        reader.AlignTo(4); /* _startingCustomControllers */
        byte _assignMouseOnStart_ = reader.ReadU8();
        reader.AlignTo(4); /* _assignMouseOnStart */
        byte _assignKeyboardOnStart_ = reader.ReadU8();
        reader.AlignTo(4); /* _assignKeyboardOnStart */
        byte _excludeFromControllerAutoAssignment_ = reader.ReadU8();
        reader.AlignTo(4); /* _excludeFromControllerAutoAssignment */
        ControllerMapLayoutManagerSettings _controllerMapLayoutManagerSettings_ = ControllerMapLayoutManagerSettings.Read(reader);
        reader.AlignTo(4); /* _controllerMapLayoutManagerSettings */
        ControllerMapEnablerSettings _controllerMapEnablerSettings_ = ControllerMapEnablerSettings.Read(reader);
        reader.AlignTo(4); /* _controllerMapEnablerSettings */
        
        return new(_id_,
            _name_,
            _descriptiveName_,
            _startPlaying_,
            _defaultJoystickMaps_,
            _defaultMouseMaps_,
            _defaultKeyboardMaps_,
            _defaultCustomControllerMaps_,
            _startingCustomControllers_,
            _assignMouseOnStart_,
            _assignKeyboardOnStart_,
            _excludeFromControllerAutoAssignment_,
            _controllerMapLayoutManagerSettings_,
            _controllerMapEnablerSettings_);
    }

    public override string ToString() => $"Player_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_descriptiveName: \"{_descriptiveName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_startPlaying: {_startPlaying}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_defaultJoystickMaps[{_defaultJoystickMaps.Length}] = {{");
        if (_defaultJoystickMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Mapping_1 _4 in _defaultJoystickMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ _enabled: {_4._enabled}, _categoryId: {_4._categoryId}, _layoutId: {_4._layoutId} }}\n");
            ++_4i;
        }
        if (_defaultJoystickMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_defaultMouseMaps[{_defaultMouseMaps.Length}] = {{");
        if (_defaultMouseMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Mapping_1 _4 in _defaultMouseMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ _enabled: {_4._enabled}, _categoryId: {_4._categoryId}, _layoutId: {_4._layoutId} }}\n");
            ++_4i;
        }
        if (_defaultMouseMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_defaultKeyboardMaps[{_defaultKeyboardMaps.Length}] = {{");
        if (_defaultKeyboardMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Mapping_1 _4 in _defaultKeyboardMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ _enabled: {_4._enabled}, _categoryId: {_4._categoryId}, _layoutId: {_4._layoutId} }}\n");
            ++_4i;
        }
        if (_defaultKeyboardMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_defaultCustomControllerMaps[{_defaultCustomControllerMaps.Length}] = {{");
        if (_defaultCustomControllerMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Mapping_1 _4 in _defaultCustomControllerMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ _enabled: {_4._enabled}, _categoryId: {_4._categoryId}, _layoutId: {_4._layoutId} }}\n");
            ++_4i;
        }
        if (_defaultCustomControllerMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_startingCustomControllers[{_startingCustomControllers.Length}] = {{");
        if (_startingCustomControllers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CreateControllerInfo _4 in _startingCustomControllers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_startingCustomControllers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_assignMouseOnStart: {_assignMouseOnStart}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_assignKeyboardOnStart: {_assignKeyboardOnStart}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_excludeFromControllerAutoAssignment: {_excludeFromControllerAutoAssignment}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_controllerMapLayoutManagerSettings: {{ \n{_controllerMapLayoutManagerSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_controllerMapEnablerSettings: {{ \n{_controllerMapEnablerSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Mapping_1 (3 fields) */
public readonly record struct Mapping_1 (
    byte _enabled,
    int _categoryId,
    int _layoutId) : IUnityStructure
{
    public static Mapping_1 Read(EndianBinaryReader reader)
    {
        byte _enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* _enabled */
        int _categoryId_ = reader.ReadS32();
        int _layoutId_ = reader.ReadS32();
        
        return new(_enabled_,
            _categoryId_,
            _layoutId_);
    }

    public override string ToString() => $"Mapping_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enabled: {_enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_categoryId: {_categoryId}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_layoutId: {_layoutId}");
    }
}

/* $CreateControllerInfo (2 fields) */
public record class CreateControllerInfo (
    int _sourceId,
    AsciiString _tag) : IUnityStructure
{
    public static CreateControllerInfo Read(EndianBinaryReader reader)
    {
        int _sourceId_ = reader.ReadS32();
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        
        return new(_sourceId_,
            _tag_);
    }

    public override string ToString() => $"CreateControllerInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_sourceId: {_sourceId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }
}

/* $ControllerMapLayoutManagerSettings (3 fields) */
public record class ControllerMapLayoutManagerSettings (
    byte _enabled,
    byte _loadFromUserDataStore,
    RuleSetMapping[] _ruleSets) : IUnityStructure
{
    public static ControllerMapLayoutManagerSettings Read(EndianBinaryReader reader)
    {
        byte _enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* _enabled */
        byte _loadFromUserDataStore_ = reader.ReadU8();
        reader.AlignTo(4); /* _loadFromUserDataStore */
        RuleSetMapping[] _ruleSets_ = BuiltInArray<RuleSetMapping>.Read(reader);
        reader.AlignTo(4); /* _ruleSets */
        
        return new(_enabled_,
            _loadFromUserDataStore_,
            _ruleSets_);
    }

    public override string ToString() => $"ControllerMapLayoutManagerSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enabled: {_enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_loadFromUserDataStore: {_loadFromUserDataStore}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_ruleSets[{_ruleSets.Length}] = {{");
        if (_ruleSets.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (RuleSetMapping _4 in _ruleSets)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ _enabled: {_4._enabled}, _id: {_4._id} }}\n");
            ++_4i;
        }
        if (_ruleSets.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $RuleSetMapping (2 fields) */
public readonly record struct RuleSetMapping (
    byte _enabled,
    int _id) : IUnityStructure
{
    public static RuleSetMapping Read(EndianBinaryReader reader)
    {
        byte _enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* _enabled */
        int _id_ = reader.ReadS32();
        
        return new(_enabled_,
            _id_);
    }

    public override string ToString() => $"RuleSetMapping\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enabled: {_enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }
}

/* $ControllerMapEnablerSettings (2 fields) */
public record class ControllerMapEnablerSettings (
    byte _enabled,
    RuleSetMapping[] _ruleSets) : IUnityStructure
{
    public static ControllerMapEnablerSettings Read(EndianBinaryReader reader)
    {
        byte _enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* _enabled */
        RuleSetMapping[] _ruleSets_ = BuiltInArray<RuleSetMapping>.Read(reader);
        reader.AlignTo(4); /* _ruleSets */
        
        return new(_enabled_,
            _ruleSets_);
    }

    public override string ToString() => $"ControllerMapEnablerSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enabled: {_enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_ruleSets[{_ruleSets.Length}] = {{");
        if (_ruleSets.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (RuleSetMapping _4 in _ruleSets)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ _enabled: {_4._enabled}, _id: {_4._id} }}\n");
            ++_4i;
        }
        if (_ruleSets.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $InputAction (9 fields) */
public record class InputAction (
    int _id,
    AsciiString _name,
    int _type,
    AsciiString _descriptiveName,
    AsciiString _positiveDescriptiveName,
    AsciiString _negativeDescriptiveName,
    int _behaviorId,
    byte _userAssignable,
    int _categoryId) : IUnityStructure
{
    public static InputAction Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        int _type_ = reader.ReadS32();
        AsciiString _descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString _positiveDescriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _positiveDescriptiveName */
        AsciiString _negativeDescriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _negativeDescriptiveName */
        int _behaviorId_ = reader.ReadS32();
        byte _userAssignable_ = reader.ReadU8();
        reader.AlignTo(4); /* _userAssignable */
        int _categoryId_ = reader.ReadS32();
        
        return new(_id_,
            _name_,
            _type_,
            _descriptiveName_,
            _positiveDescriptiveName_,
            _negativeDescriptiveName_,
            _behaviorId_,
            _userAssignable_,
            _categoryId_);
    }

    public override string ToString() => $"InputAction\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_type: {_type}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_descriptiveName: \"{_descriptiveName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_positiveDescriptiveName: \"{_positiveDescriptiveName}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_negativeDescriptiveName: \"{_negativeDescriptiveName}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_behaviorId: {_behaviorId}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_userAssignable: {_userAssignable}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_categoryId: {_categoryId}");
    }
}

/* $InputCategory (5 fields) */
public record class InputCategory (
    AsciiString _name,
    AsciiString _descriptiveName,
    AsciiString _tag,
    int _id,
    byte _userAssignable) : IUnityStructure
{
    public static InputCategory Read(EndianBinaryReader reader)
    {
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        int _id_ = reader.ReadS32();
        byte _userAssignable_ = reader.ReadU8();
        reader.AlignTo(4); /* _userAssignable */
        
        return new(_name_,
            _descriptiveName_,
            _tag_,
            _id_,
            _userAssignable_);
    }

    public override string ToString() => $"InputCategory\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_descriptiveName: \"{_descriptiveName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_userAssignable: {_userAssignable}");
    }
}

/* $ActionCategoryMap (1 fields) */
public record class ActionCategoryMap (
    Entry_2[] list) : IUnityStructure
{
    public static ActionCategoryMap Read(EndianBinaryReader reader)
    {
        Entry_2[] list_ = BuiltInArray<Entry_2>.Read(reader);
        reader.AlignTo(4); /* list */
        
        return new(list_);
    }

    public override string ToString() => $"ActionCategoryMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}list[{list.Length}] = {{");
        if (list.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Entry_2 _4 in list)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (list.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Entry_2 (2 fields) */
public record class Entry_2 (
    int categoryId,
    int[] actionIds) : IUnityStructure
{
    public static Entry_2 Read(EndianBinaryReader reader)
    {
        int categoryId_ = reader.ReadS32();
        int[] actionIds_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* actionIds */
        
        return new(categoryId_,
            actionIds_);
    }

    public override string ToString() => $"Entry_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}categoryId: {categoryId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}actionIds[{actionIds.Length}] = {{");
        if (actionIds.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in actionIds)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (actionIds.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $InputBehavior (23 fields) */
public record class InputBehavior (
    int _id,
    AsciiString _name,
    float _joystickAxisSensitivity,
    byte _digitalAxisSimulation,
    byte _digitalAxisSnap,
    byte _digitalAxisInstantReverse,
    float _digitalAxisGravity,
    float _digitalAxisSensitivity,
    int _mouseXYAxisMode,
    int _mouseOtherAxisMode,
    float _mouseXYAxisSensitivity,
    int _mouseXYAxisDeltaCalc,
    float _mouseOtherAxisSensitivity,
    float _customControllerAxisSensitivity,
    float _buttonDoublePressSpeed,
    float _buttonShortPressTime,
    float _buttonShortPressExpiresIn,
    float _buttonLongPressTime,
    float _buttonLongPressExpiresIn,
    float _buttonDeadZone,
    float _buttonDownBuffer,
    float _buttonRepeatRate,
    float _buttonRepeatDelay) : IUnityStructure
{
    public static InputBehavior Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        float _joystickAxisSensitivity_ = reader.ReadF32();
        byte _digitalAxisSimulation_ = reader.ReadU8();
        reader.AlignTo(4); /* _digitalAxisSimulation */
        byte _digitalAxisSnap_ = reader.ReadU8();
        reader.AlignTo(4); /* _digitalAxisSnap */
        byte _digitalAxisInstantReverse_ = reader.ReadU8();
        reader.AlignTo(4); /* _digitalAxisInstantReverse */
        float _digitalAxisGravity_ = reader.ReadF32();
        float _digitalAxisSensitivity_ = reader.ReadF32();
        int _mouseXYAxisMode_ = reader.ReadS32();
        int _mouseOtherAxisMode_ = reader.ReadS32();
        float _mouseXYAxisSensitivity_ = reader.ReadF32();
        int _mouseXYAxisDeltaCalc_ = reader.ReadS32();
        float _mouseOtherAxisSensitivity_ = reader.ReadF32();
        float _customControllerAxisSensitivity_ = reader.ReadF32();
        float _buttonDoublePressSpeed_ = reader.ReadF32();
        float _buttonShortPressTime_ = reader.ReadF32();
        float _buttonShortPressExpiresIn_ = reader.ReadF32();
        float _buttonLongPressTime_ = reader.ReadF32();
        float _buttonLongPressExpiresIn_ = reader.ReadF32();
        float _buttonDeadZone_ = reader.ReadF32();
        float _buttonDownBuffer_ = reader.ReadF32();
        float _buttonRepeatRate_ = reader.ReadF32();
        float _buttonRepeatDelay_ = reader.ReadF32();
        
        return new(_id_,
            _name_,
            _joystickAxisSensitivity_,
            _digitalAxisSimulation_,
            _digitalAxisSnap_,
            _digitalAxisInstantReverse_,
            _digitalAxisGravity_,
            _digitalAxisSensitivity_,
            _mouseXYAxisMode_,
            _mouseOtherAxisMode_,
            _mouseXYAxisSensitivity_,
            _mouseXYAxisDeltaCalc_,
            _mouseOtherAxisSensitivity_,
            _customControllerAxisSensitivity_,
            _buttonDoublePressSpeed_,
            _buttonShortPressTime_,
            _buttonShortPressExpiresIn_,
            _buttonLongPressTime_,
            _buttonLongPressExpiresIn_,
            _buttonDeadZone_,
            _buttonDownBuffer_,
            _buttonRepeatRate_,
            _buttonRepeatDelay_);
    }

    public override string ToString() => $"InputBehavior\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_joystickAxisSensitivity: {_joystickAxisSensitivity}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_digitalAxisSimulation: {_digitalAxisSimulation}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_digitalAxisSnap: {_digitalAxisSnap}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_digitalAxisInstantReverse: {_digitalAxisInstantReverse}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_digitalAxisGravity: {_digitalAxisGravity}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_digitalAxisSensitivity: {_digitalAxisSensitivity}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mouseXYAxisMode: {_mouseXYAxisMode}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mouseOtherAxisMode: {_mouseOtherAxisMode}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mouseXYAxisSensitivity: {_mouseXYAxisSensitivity}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mouseXYAxisDeltaCalc: {_mouseXYAxisDeltaCalc}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_mouseOtherAxisSensitivity: {_mouseOtherAxisSensitivity}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_customControllerAxisSensitivity: {_customControllerAxisSensitivity}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonDoublePressSpeed: {_buttonDoublePressSpeed}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonShortPressTime: {_buttonShortPressTime}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonShortPressExpiresIn: {_buttonShortPressExpiresIn}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonLongPressTime: {_buttonLongPressTime}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonLongPressExpiresIn: {_buttonLongPressExpiresIn}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonDeadZone: {_buttonDeadZone}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonDownBuffer: {_buttonDownBuffer}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonRepeatRate: {_buttonRepeatRate}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonRepeatDelay: {_buttonRepeatDelay}");
    }
}

/* $InputMapCategory (7 fields) */
public record class InputMapCategory (
    AsciiString _name,
    AsciiString _descriptiveName,
    AsciiString _tag,
    int _id,
    byte _userAssignable,
    byte _checkConflictsWithAllCategories,
    int[] _checkConflictsCategoryIds) : IUnityStructure
{
    public static InputMapCategory Read(EndianBinaryReader reader)
    {
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        int _id_ = reader.ReadS32();
        byte _userAssignable_ = reader.ReadU8();
        reader.AlignTo(4); /* _userAssignable */
        byte _checkConflictsWithAllCategories_ = reader.ReadU8();
        reader.AlignTo(4); /* _checkConflictsWithAllCategories */
        int[] _checkConflictsCategoryIds_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _checkConflictsCategoryIds */
        
        return new(_name_,
            _descriptiveName_,
            _tag_,
            _id_,
            _userAssignable_,
            _checkConflictsWithAllCategories_,
            _checkConflictsCategoryIds_);
    }

    public override string ToString() => $"InputMapCategory\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_descriptiveName: \"{_descriptiveName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_userAssignable: {_userAssignable}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_checkConflictsWithAllCategories: {_checkConflictsWithAllCategories}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_checkConflictsCategoryIds[{_checkConflictsCategoryIds.Length}] = {{");
        if (_checkConflictsCategoryIds.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in _checkConflictsCategoryIds)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_checkConflictsCategoryIds.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $InputLayout (3 fields) */
public record class InputLayout (
    AsciiString _name,
    AsciiString _descriptiveName,
    int _id) : IUnityStructure
{
    public static InputLayout Read(EndianBinaryReader reader)
    {
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        int _id_ = reader.ReadS32();
        
        return new(_name_,
            _descriptiveName_,
            _id_);
    }

    public override string ToString() => $"InputLayout\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_descriptiveName: \"{_descriptiveName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }
}

/* $ControllerMap_Editor (7 fields) */
public record class ControllerMap_Editor (
    int id,
    int categoryId,
    int layoutId,
    AsciiString name,
    AsciiString hardwareGuidString,
    int customControllerUid,
    ActionElementMap[] actionElementMaps) : IUnityStructure
{
    public static ControllerMap_Editor Read(EndianBinaryReader reader)
    {
        int id_ = reader.ReadS32();
        int categoryId_ = reader.ReadS32();
        int layoutId_ = reader.ReadS32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString hardwareGuidString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* hardwareGuidString */
        int customControllerUid_ = reader.ReadS32();
        ActionElementMap[] actionElementMaps_ = BuiltInArray<ActionElementMap>.Read(reader);
        reader.AlignTo(4); /* actionElementMaps */
        
        return new(id_,
            categoryId_,
            layoutId_,
            name_,
            hardwareGuidString_,
            customControllerUid_,
            actionElementMaps_);
    }

    public override string ToString() => $"ControllerMap_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}id: {id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}categoryId: {categoryId}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}layoutId: {layoutId}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hardwareGuidString: \"{hardwareGuidString}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customControllerUid: {customControllerUid}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}actionElementMaps[{actionElementMaps.Length}] = {{");
        if (actionElementMaps.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ActionElementMap _4 in actionElementMaps)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (actionElementMaps.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ActionElementMap (11 fields) */
public readonly record struct ActionElementMap (
    int _actionCategoryId,
    int _actionId,
    int _elementType,
    int _elementIdentifierId,
    int _axisRange,
    byte _invert,
    int _axisContribution,
    int _keyboardKeyCode,
    int _modifierKey1,
    int _modifierKey2,
    int _modifierKey3) : IUnityStructure
{
    public static ActionElementMap Read(EndianBinaryReader reader)
    {
        int _actionCategoryId_ = reader.ReadS32();
        int _actionId_ = reader.ReadS32();
        int _elementType_ = reader.ReadS32();
        int _elementIdentifierId_ = reader.ReadS32();
        int _axisRange_ = reader.ReadS32();
        byte _invert_ = reader.ReadU8();
        reader.AlignTo(4); /* _invert */
        int _axisContribution_ = reader.ReadS32();
        int _keyboardKeyCode_ = reader.ReadS32();
        int _modifierKey1_ = reader.ReadS32();
        int _modifierKey2_ = reader.ReadS32();
        int _modifierKey3_ = reader.ReadS32();
        
        return new(_actionCategoryId_,
            _actionId_,
            _elementType_,
            _elementIdentifierId_,
            _axisRange_,
            _invert_,
            _axisContribution_,
            _keyboardKeyCode_,
            _modifierKey1_,
            _modifierKey2_,
            _modifierKey3_);
    }

    public override string ToString() => $"ActionElementMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_actionCategoryId: {_actionCategoryId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_actionId: {_actionId}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementType: {_elementType}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementIdentifierId: {_elementIdentifierId}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_axisRange: {_axisRange}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_invert: {_invert}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_axisContribution: {_axisContribution}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_keyboardKeyCode: {_keyboardKeyCode}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_modifierKey1: {_modifierKey1}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_modifierKey2: {_modifierKey2}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_modifierKey3: {_modifierKey3}");
    }
}

/* $CustomController_Editor (8 fields) */
public record class CustomController_Editor (
    AsciiString _name,
    AsciiString _descriptiveName,
    int _id,
    AsciiString _typeGuidString,
    ControllerElementIdentifier[] _elementIdentifiers,
    Axis[] _axes,
    Button_1[] _buttons,
    int _elementIdentifierIdCounter) : IUnityStructure
{
    public static CustomController_Editor Read(EndianBinaryReader reader)
    {
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _descriptiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _descriptiveName */
        int _id_ = reader.ReadS32();
        AsciiString _typeGuidString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _typeGuidString */
        ControllerElementIdentifier[] _elementIdentifiers_ = BuiltInArray<ControllerElementIdentifier>.Read(reader);
        reader.AlignTo(4); /* _elementIdentifiers */
        Axis[] _axes_ = BuiltInArray<Axis>.Read(reader);
        reader.AlignTo(4); /* _axes */
        Button_1[] _buttons_ = BuiltInArray<Button_1>.Read(reader);
        reader.AlignTo(4); /* _buttons */
        int _elementIdentifierIdCounter_ = reader.ReadS32();
        
        return new(_name_,
            _descriptiveName_,
            _id_,
            _typeGuidString_,
            _elementIdentifiers_,
            _axes_,
            _buttons_,
            _elementIdentifierIdCounter_);
    }

    public override string ToString() => $"CustomController_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_descriptiveName: \"{_descriptiveName}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_typeGuidString: \"{_typeGuidString}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_elementIdentifiers[{_elementIdentifiers.Length}] = {{");
        if (_elementIdentifiers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerElementIdentifier _4 in _elementIdentifiers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_elementIdentifiers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_axes[{_axes.Length}] = {{");
        if (_axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis _4 in _axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_buttons[{_buttons.Length}] = {{");
        if (_buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_1 _4 in _buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementIdentifierIdCounter: {_elementIdentifierIdCounter}");
    }
}

/* $ControllerElementIdentifier (6 fields) */
public record class ControllerElementIdentifier (
    int _id,
    AsciiString _name,
    AsciiString _positiveName,
    AsciiString _negativeName,
    int _elementType,
    int _compoundElementType) : IUnityStructure
{
    public static ControllerElementIdentifier Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _positiveName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _positiveName */
        AsciiString _negativeName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _negativeName */
        int _elementType_ = reader.ReadS32();
        int _compoundElementType_ = reader.ReadS32();
        
        return new(_id_,
            _name_,
            _positiveName_,
            _negativeName_,
            _elementType_,
            _compoundElementType_);
    }

    public override string ToString() => $"ControllerElementIdentifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_positiveName: \"{_positiveName}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_negativeName: \"{_negativeName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementType: {_elementType}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_compoundElementType: {_compoundElementType}");
    }
}

/* $Axis (13 fields) */
public record class Axis (
    int elementIdentifierId,
    AsciiString name,
    int range,
    byte invert,
    float deadZone,
    float zero,
    float min,
    float max,
    byte doNotCalibrateRange,
    int sensitivityType,
    float sensitivity,
    AnimationCurve sensitivityCurve,
    HardwareAxisInfo axisInfo) : IUnityStructure
{
    public static Axis Read(EndianBinaryReader reader)
    {
        int elementIdentifierId_ = reader.ReadS32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int range_ = reader.ReadS32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        float deadZone_ = reader.ReadF32();
        float zero_ = reader.ReadF32();
        float min_ = reader.ReadF32();
        float max_ = reader.ReadF32();
        byte doNotCalibrateRange_ = reader.ReadU8();
        reader.AlignTo(4); /* doNotCalibrateRange */
        int sensitivityType_ = reader.ReadS32();
        float sensitivity_ = reader.ReadF32();
        AnimationCurve sensitivityCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* sensitivityCurve */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        
        return new(elementIdentifierId_,
            name_,
            range_,
            invert_,
            deadZone_,
            zero_,
            min_,
            max_,
            doNotCalibrateRange_,
            sensitivityType_,
            sensitivity_,
            sensitivityCurve_,
            axisInfo_);
    }

    public override string ToString() => $"Axis\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifierId: {elementIdentifierId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}range: {range}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}deadZone: {deadZone}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}zero: {zero}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}min: {min}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}max: {max}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}doNotCalibrateRange: {doNotCalibrateRange}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sensitivityType: {sensitivityType}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sensitivity: {sensitivity}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}sensitivityCurve: {{ \n{sensitivityCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }
}

/* $HardwareAxisInfo (4 fields) */
public readonly record struct HardwareAxisInfo (
    int _dataFormat,
    byte _excludeFromPolling,
    int _specialAxisType,
    float _pollingDeadZone) : IUnityStructure
{
    public static HardwareAxisInfo Read(EndianBinaryReader reader)
    {
        int _dataFormat_ = reader.ReadS32();
        byte _excludeFromPolling_ = reader.ReadU8();
        reader.AlignTo(4); /* _excludeFromPolling */
        int _specialAxisType_ = reader.ReadS32();
        float _pollingDeadZone_ = reader.ReadF32();
        
        return new(_dataFormat_,
            _excludeFromPolling_,
            _specialAxisType_,
            _pollingDeadZone_);
    }

    public override string ToString() => $"HardwareAxisInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_dataFormat: {_dataFormat}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_excludeFromPolling: {_excludeFromPolling}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_specialAxisType: {_specialAxisType}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_pollingDeadZone: {_pollingDeadZone}");
    }
}

/* $Button_1 (2 fields) */
public record class Button_1 (
    int elementIdentifierId,
    AsciiString name) : IUnityStructure
{
    public static Button_1 Read(EndianBinaryReader reader)
    {
        int elementIdentifierId_ = reader.ReadS32();
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        
        return new(elementIdentifierId_,
            name_);
    }

    public override string ToString() => $"Button_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifierId: {elementIdentifierId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }
}

/* $ControllerMapLayoutManager_RuleSet_Editor (4 fields) */
public record class ControllerMapLayoutManager_RuleSet_Editor (
    int _id,
    AsciiString _name,
    AsciiString _tag,
    ControllerMapLayoutManager_Rule_Editor[] _rules) : IUnityStructure
{
    public static ControllerMapLayoutManager_RuleSet_Editor Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        ControllerMapLayoutManager_Rule_Editor[] _rules_ = BuiltInArray<ControllerMapLayoutManager_Rule_Editor>.Read(reader);
        reader.AlignTo(4); /* _rules */
        
        return new(_id_,
            _name_,
            _tag_,
            _rules_);
    }

    public override string ToString() => $"ControllerMapLayoutManager_RuleSet_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_rules[{_rules.Length}] = {{");
        if (_rules.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMapLayoutManager_Rule_Editor _4 in _rules)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_rules.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ControllerMapLayoutManager_Rule_Editor (4 fields) */
public record class ControllerMapLayoutManager_Rule_Editor (
    AsciiString _tag,
    int[] _categoryIds,
    int _layoutId,
    ControllerSetSelector_Editor _controllerSetSelector) : IUnityStructure
{
    public static ControllerMapLayoutManager_Rule_Editor Read(EndianBinaryReader reader)
    {
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        int[] _categoryIds_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _categoryIds */
        int _layoutId_ = reader.ReadS32();
        ControllerSetSelector_Editor _controllerSetSelector_ = ControllerSetSelector_Editor.Read(reader);
        reader.AlignTo(4); /* _controllerSetSelector */
        
        return new(_tag_,
            _categoryIds_,
            _layoutId_,
            _controllerSetSelector_);
    }

    public override string ToString() => $"ControllerMapLayoutManager_Rule_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_categoryIds[{_categoryIds.Length}] = {{");
        if (_categoryIds.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in _categoryIds)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_categoryIds.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_layoutId: {_layoutId}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_controllerSetSelector: {{ \n{_controllerSetSelector.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ControllerSetSelector_Editor (8 fields) */
public record class ControllerSetSelector_Editor (
    int _type,
    int _controllerType,
    AsciiString _hardwareTypeGuidString,
    AsciiString _hardwareIdentifier,
    AsciiString _controllerTemplateTypeGuidString,
    AsciiString _deviceInstanceGuidString,
    int _customControllerSourceId,
    int _controllerId) : IUnityStructure
{
    public static ControllerSetSelector_Editor Read(EndianBinaryReader reader)
    {
        int _type_ = reader.ReadS32();
        int _controllerType_ = reader.ReadS32();
        AsciiString _hardwareTypeGuidString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _hardwareTypeGuidString */
        AsciiString _hardwareIdentifier_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _hardwareIdentifier */
        AsciiString _controllerTemplateTypeGuidString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _controllerTemplateTypeGuidString */
        AsciiString _deviceInstanceGuidString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _deviceInstanceGuidString */
        int _customControllerSourceId_ = reader.ReadS32();
        int _controllerId_ = reader.ReadS32();
        
        return new(_type_,
            _controllerType_,
            _hardwareTypeGuidString_,
            _hardwareIdentifier_,
            _controllerTemplateTypeGuidString_,
            _deviceInstanceGuidString_,
            _customControllerSourceId_,
            _controllerId_);
    }

    public override string ToString() => $"ControllerSetSelector_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_type: {_type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_controllerType: {_controllerType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_hardwareTypeGuidString: \"{_hardwareTypeGuidString}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_hardwareIdentifier: \"{_hardwareIdentifier}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_controllerTemplateTypeGuidString: \"{_controllerTemplateTypeGuidString}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_deviceInstanceGuidString: \"{_deviceInstanceGuidString}\"");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_customControllerSourceId: {_customControllerSourceId}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_controllerId: {_controllerId}");
    }
}

/* $ControllerMapEnabler_RuleSet_Editor (4 fields) */
public record class ControllerMapEnabler_RuleSet_Editor (
    int _id,
    AsciiString _name,
    AsciiString _tag,
    ControllerMapEnabler_Rule_Editor[] _rules) : IUnityStructure
{
    public static ControllerMapEnabler_RuleSet_Editor Read(EndianBinaryReader reader)
    {
        int _id_ = reader.ReadS32();
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        ControllerMapEnabler_Rule_Editor[] _rules_ = BuiltInArray<ControllerMapEnabler_Rule_Editor>.Read(reader);
        reader.AlignTo(4); /* _rules */
        
        return new(_id_,
            _name_,
            _tag_,
            _rules_);
    }

    public override string ToString() => $"ControllerMapEnabler_RuleSet_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_id: {_id}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_rules[{_rules.Length}] = {{");
        if (_rules.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ControllerMapEnabler_Rule_Editor _4 in _rules)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_rules.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ControllerMapEnabler_Rule_Editor (5 fields) */
public record class ControllerMapEnabler_Rule_Editor (
    AsciiString _tag,
    byte _enable,
    int[] _categoryIds,
    int[] _layoutIds,
    ControllerSetSelector_Editor _controllerSetSelector) : IUnityStructure
{
    public static ControllerMapEnabler_Rule_Editor Read(EndianBinaryReader reader)
    {
        AsciiString _tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _tag */
        byte _enable_ = reader.ReadU8();
        reader.AlignTo(4); /* _enable */
        int[] _categoryIds_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _categoryIds */
        int[] _layoutIds_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* _layoutIds */
        ControllerSetSelector_Editor _controllerSetSelector_ = ControllerSetSelector_Editor.Read(reader);
        reader.AlignTo(4); /* _controllerSetSelector */
        
        return new(_tag_,
            _enable_,
            _categoryIds_,
            _layoutIds_,
            _controllerSetSelector_);
    }

    public override string ToString() => $"ControllerMapEnabler_Rule_Editor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_tag: \"{_tag}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enable: {_enable}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_categoryIds[{_categoryIds.Length}] = {{");
        if (_categoryIds.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in _categoryIds)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_categoryIds.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_layoutIds[{_layoutIds.Length}] = {{");
        if (_layoutIds.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in _layoutIds)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_layoutIds.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_controllerSetSelector: {{ \n{_controllerSetSelector.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $InteractableMirrorSettingsView (6 fields) */
public record class InteractableMirrorSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static InteractableMirrorSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"InteractableMirrorSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $Entry_9 (5 fields) */
public readonly record struct Entry_9 (
    float Amplitude,
    float Frequency,
    float OffsetX,
    float OffsetY,
    float ScrollSpeed) : IUnityStructure
{
    public static Entry_9 Read(EndianBinaryReader reader)
    {
        float Amplitude_ = reader.ReadF32();
        float Frequency_ = reader.ReadF32();
        float OffsetX_ = reader.ReadF32();
        float OffsetY_ = reader.ReadF32();
        float ScrollSpeed_ = reader.ReadF32();
        
        return new(Amplitude_,
            Frequency_,
            OffsetX_,
            OffsetY_,
            ScrollSpeed_);
    }

    public override string ToString() => $"Entry_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Amplitude: {Amplitude}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Frequency: {Frequency}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OffsetX: {OffsetX}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OffsetY: {OffsetY}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScrollSpeed: {ScrollSpeed}");
    }
}

/* $CompositeAnimationCurve (2 fields) */
public record class CompositeAnimationCurve (
    AnimationCurve ScaleCurve,
    Entry_9[] Entries) : IUnityStructure
{
    public static CompositeAnimationCurve Read(EndianBinaryReader reader)
    {
        AnimationCurve ScaleCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* ScaleCurve */
        Entry_9[] Entries_ = BuiltInArray<Entry_9>.Read(reader);
        
        return new(ScaleCurve_,
            Entries_);
    }

    public override string ToString() => $"CompositeAnimationCurve\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScaleCurve: {{ \n{ScaleCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Entries[{Entries.Length}] = {{");
        if (Entries.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Entry_9 _4 in Entries)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Entries.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $TrailEmitter (13 fields) */
public record class TrailEmitter (
    PPtr<GameObject> Spawner,
    PPtr<GameObject> SecondSpawner,
    byte Smooth,
    float WidthFactor,
    byte UseSpawnerScale,
    int WidthOffset,
    float UvOffset,
    float RandomUvOffset,
    int VelocityType,
    float RandomizeVelocity,
    float Delay,
    byte UseUnscaledTime,
    byte DontDestroyOnDisable) : IUnityStructure
{
    public static TrailEmitter Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Spawner_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> SecondSpawner_ = PPtr<GameObject>.Read(reader);
        byte Smooth_ = reader.ReadU8();
        reader.AlignTo(4); /* Smooth */
        float WidthFactor_ = reader.ReadF32();
        byte UseSpawnerScale_ = reader.ReadU8();
        reader.AlignTo(4); /* UseSpawnerScale */
        int WidthOffset_ = reader.ReadS32();
        float UvOffset_ = reader.ReadF32();
        float RandomUvOffset_ = reader.ReadF32();
        int VelocityType_ = reader.ReadS32();
        float RandomizeVelocity_ = reader.ReadF32();
        float Delay_ = reader.ReadF32();
        byte UseUnscaledTime_ = reader.ReadU8();
        reader.AlignTo(4); /* UseUnscaledTime */
        byte DontDestroyOnDisable_ = reader.ReadU8();
        reader.AlignTo(4); /* DontDestroyOnDisable */
        
        return new(Spawner_,
            SecondSpawner_,
            Smooth_,
            WidthFactor_,
            UseSpawnerScale_,
            WidthOffset_,
            UvOffset_,
            RandomUvOffset_,
            VelocityType_,
            RandomizeVelocity_,
            Delay_,
            UseUnscaledTime_,
            DontDestroyOnDisable_);
    }

    public override string ToString() => $"TrailEmitter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Spawner: {Spawner}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondSpawner: {SecondSpawner}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Smooth: {Smooth}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WidthFactor: {WidthFactor}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseSpawnerScale: {UseSpawnerScale}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WidthOffset: {WidthOffset}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UvOffset: {UvOffset}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RandomUvOffset: {RandomUvOffset}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VelocityType: {VelocityType}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RandomizeVelocity: {RandomizeVelocity}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Delay: {Delay}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseUnscaledTime: {UseUnscaledTime}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DontDestroyOnDisable: {DontDestroyOnDisable}");
    }
}

/* $DismembermentSet (3 fields) */
public record class DismembermentSet (
    int Type,
    DismembermentBone[] SliceBones,
    PrefabLink Prefab) : IUnityStructure
{
    public static DismembermentSet Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        DismembermentBone[] SliceBones_ = BuiltInArray<DismembermentBone>.Read(reader);
        PrefabLink Prefab_ = PrefabLink.Read(reader);
        reader.AlignTo(4); /* Prefab */
        
        return new(Type_,
            SliceBones_,
            Prefab_);
    }

    public override string ToString() => $"DismembermentSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SliceBones[{SliceBones.Length}] = {{");
        if (SliceBones.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (DismembermentBone _4 in SliceBones)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (SliceBones.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prefab: {{ \n{Prefab.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DismembermentBone (3 fields) */
public record class DismembermentBone (
    PPtr<Transform> Transform,
    float SliceOffset,
    Vector3f SliceOrientationEuler) : IUnityStructure
{
    public static DismembermentBone Read(EndianBinaryReader reader)
    {
        PPtr<Transform> Transform_ = PPtr<Transform>.Read(reader);
        float SliceOffset_ = reader.ReadF32();
        Vector3f SliceOrientationEuler_ = Vector3f.Read(reader);
        
        return new(Transform_,
            SliceOffset_,
            SliceOrientationEuler_);
    }

    public override string ToString() => $"DismembermentBone\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Transform: {Transform}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SliceOffset: {SliceOffset}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SliceOrientationEuler: {{ x: {SliceOrientationEuler.x}, y: {SliceOrientationEuler.y}, z: {SliceOrientationEuler.z} }}\n");
    }
}

/* $DebugUIPrefabBundle (2 fields) */
public record class DebugUIPrefabBundle (
    AsciiString type,
    PPtr<RectTransform> prefab) : IUnityStructure
{
    public static DebugUIPrefabBundle Read(EndianBinaryReader reader)
    {
        AsciiString type_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* type */
        PPtr<RectTransform> prefab_ = PPtr<RectTransform>.Read(reader);
        
        return new(type_,
            prefab_);
    }

    public override string ToString() => $"DebugUIPrefabBundle\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: \"{type}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}prefab: {prefab}");
    }
}

/* $ObjectPlacementBlockManualConstructionSettingsView (6 fields) */
public record class ObjectPlacementBlockManualConstructionSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementBlockManualConstructionSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementBlockManualConstructionSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $DialogColors (14 fields) */
public record class DialogColors (
    ColorRGBA_1 NameColorMultiplyer,
    ColorRGBA Narrator,
    ColorRGBA SelectedAnswer,
    ColorRGBA FocusAnswer,
    ColorRGBA FocusSelectedAnswer,
    ColorRGBA FocusDisableAnswer,
    ColorRGBA NormalAnswer,
    ColorRGBA DisabledAnswer,
    ColorRGBA SoulMarkShiftBePositive,
    ColorRGBA SoulMarkShiftBeNegative,
    ColorRGBA SkillCheckSuccessfulDialogue,
    ColorRGBA SkillCheckFailedDialogue,
    ColorRGBA SkillCheckSuccessfulBE,
    ColorRGBA SkillCheckFailedBE) : IUnityStructure
{
    public static DialogColors Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 NameColorMultiplyer_ = ColorRGBA_1.Read(reader);
        ColorRGBA Narrator_ = ColorRGBA.Read(reader);
        ColorRGBA SelectedAnswer_ = ColorRGBA.Read(reader);
        ColorRGBA FocusAnswer_ = ColorRGBA.Read(reader);
        ColorRGBA FocusSelectedAnswer_ = ColorRGBA.Read(reader);
        ColorRGBA FocusDisableAnswer_ = ColorRGBA.Read(reader);
        ColorRGBA NormalAnswer_ = ColorRGBA.Read(reader);
        ColorRGBA DisabledAnswer_ = ColorRGBA.Read(reader);
        ColorRGBA SoulMarkShiftBePositive_ = ColorRGBA.Read(reader);
        ColorRGBA SoulMarkShiftBeNegative_ = ColorRGBA.Read(reader);
        ColorRGBA SkillCheckSuccessfulDialogue_ = ColorRGBA.Read(reader);
        ColorRGBA SkillCheckFailedDialogue_ = ColorRGBA.Read(reader);
        ColorRGBA SkillCheckSuccessfulBE_ = ColorRGBA.Read(reader);
        ColorRGBA SkillCheckFailedBE_ = ColorRGBA.Read(reader);
        
        return new(NameColorMultiplyer_,
            Narrator_,
            SelectedAnswer_,
            FocusAnswer_,
            FocusSelectedAnswer_,
            FocusDisableAnswer_,
            NormalAnswer_,
            DisabledAnswer_,
            SoulMarkShiftBePositive_,
            SoulMarkShiftBeNegative_,
            SkillCheckSuccessfulDialogue_,
            SkillCheckFailedDialogue_,
            SkillCheckSuccessfulBE_,
            SkillCheckFailedBE_);
    }

    public override string ToString() => $"DialogColors\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NameColorMultiplyer: {{ r: {NameColorMultiplyer.r}, g: {NameColorMultiplyer.g}, b: {NameColorMultiplyer.b}, a: {NameColorMultiplyer.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Narrator: {{ rgba: {Narrator.rgba} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectedAnswer: {{ rgba: {SelectedAnswer.rgba} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FocusAnswer: {{ rgba: {FocusAnswer.rgba} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FocusSelectedAnswer: {{ rgba: {FocusSelectedAnswer.rgba} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FocusDisableAnswer: {{ rgba: {FocusDisableAnswer.rgba} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalAnswer: {{ rgba: {NormalAnswer.rgba} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DisabledAnswer: {{ rgba: {DisabledAnswer.rgba} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkShiftBePositive: {{ rgba: {SoulMarkShiftBePositive.rgba} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkShiftBeNegative: {{ rgba: {SoulMarkShiftBeNegative.rgba} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckSuccessfulDialogue: {{ rgba: {SkillCheckSuccessfulDialogue.rgba} }}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckFailedDialogue: {{ rgba: {SkillCheckFailedDialogue.rgba} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckSuccessfulBE: {{ rgba: {SkillCheckSuccessfulBE.rgba} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckFailedBE: {{ rgba: {SkillCheckFailedBE.rgba} }}\n");
    }
}

/* $int2_storage (2 fields) */
public readonly record struct int2_storage (
    int x,
    int y) : IUnityStructure
{
    public static int2_storage Read(EndianBinaryReader reader)
    {
        int x_ = reader.ReadS32();
        int y_ = reader.ReadS32();
        
        return new(x_,
            y_);
    }

    public override string ToString() => $"int2_storage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }
}

/* $ShaderResources_8 (18 fields) */
public record class ShaderResources_8 (
    PPtr<Shader> LutBuilderLdrPS,
    PPtr<Shader> LutBuilderHdrPS,
    PPtr<Shader> StopNanPS,
    PPtr<Shader> SubpixelMorphologicalAntialiasingPS,
    PPtr<Shader> TemporalAntialiasingPS,
    PPtr<Shader> GaussianDepthOfFieldPS,
    PPtr<Shader> BokehDepthOfFieldPS,
    PPtr<Shader> CameraMotionBlurPS,
    PPtr<Shader> PaniniProjectionPS,
    PPtr<Shader> BloomPS,
    PPtr<Shader> BloomEnhancedPS,
    PPtr<Shader> RadialBlurPS,
    PPtr<Shader> MaskedColorTransformPS,
    PPtr<Shader> UberPostPS,
    PPtr<Shader> FinalPostPassPS,
    PPtr<Shader> DaltonizationPS,
    PPtr<Shader> ScreenSpaceCloudShadowsShader,
    PPtr<Shader> FinalBlitPS) : IUnityStructure
{
    public static ShaderResources_8 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> LutBuilderLdrPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> LutBuilderHdrPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> StopNanPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> SubpixelMorphologicalAntialiasingPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> TemporalAntialiasingPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> GaussianDepthOfFieldPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BokehDepthOfFieldPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> CameraMotionBlurPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> PaniniProjectionPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BloomPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BloomEnhancedPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> RadialBlurPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> MaskedColorTransformPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> UberPostPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> FinalPostPassPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> DaltonizationPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ScreenSpaceCloudShadowsShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> FinalBlitPS_ = PPtr<Shader>.Read(reader);
        
        return new(LutBuilderLdrPS_,
            LutBuilderHdrPS_,
            StopNanPS_,
            SubpixelMorphologicalAntialiasingPS_,
            TemporalAntialiasingPS_,
            GaussianDepthOfFieldPS_,
            BokehDepthOfFieldPS_,
            CameraMotionBlurPS_,
            PaniniProjectionPS_,
            BloomPS_,
            BloomEnhancedPS_,
            RadialBlurPS_,
            MaskedColorTransformPS_,
            UberPostPS_,
            FinalPostPassPS_,
            DaltonizationPS_,
            ScreenSpaceCloudShadowsShader_,
            FinalBlitPS_);
    }

    public override string ToString() => $"ShaderResources_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LutBuilderLdrPS: {LutBuilderLdrPS}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LutBuilderHdrPS: {LutBuilderHdrPS}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StopNanPS: {StopNanPS}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SubpixelMorphologicalAntialiasingPS: {SubpixelMorphologicalAntialiasingPS}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TemporalAntialiasingPS: {TemporalAntialiasingPS}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GaussianDepthOfFieldPS: {GaussianDepthOfFieldPS}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BokehDepthOfFieldPS: {BokehDepthOfFieldPS}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CameraMotionBlurPS: {CameraMotionBlurPS}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PaniniProjectionPS: {PaniniProjectionPS}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BloomPS: {BloomPS}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BloomEnhancedPS: {BloomEnhancedPS}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RadialBlurPS: {RadialBlurPS}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaskedColorTransformPS: {MaskedColorTransformPS}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UberPostPS: {UberPostPS}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FinalPostPassPS: {FinalPostPassPS}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DaltonizationPS: {DaltonizationPS}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenSpaceCloudShadowsShader: {ScreenSpaceCloudShadowsShader}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FinalBlitPS: {FinalBlitPS}");
    }
}

/* $TextureResources_2 (4 fields) */
public record class TextureResources_2 (
    PPtr<Texture2D>[] BlueNoise16LTex,
    PPtr<Texture2D>[] FilmGrainTex,
    PPtr<Texture2D> SmaaAreaTex,
    PPtr<Texture2D> SmaaSearchTex) : IUnityStructure
{
    public static TextureResources_2 Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D>[] BlueNoise16LTex_ = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* BlueNoise16LTex */
        PPtr<Texture2D>[] FilmGrainTex_ = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* FilmGrainTex */
        PPtr<Texture2D> SmaaAreaTex_ = PPtr<Texture2D>.Read(reader);
        PPtr<Texture2D> SmaaSearchTex_ = PPtr<Texture2D>.Read(reader);
        
        return new(BlueNoise16LTex_,
            FilmGrainTex_,
            SmaaAreaTex_,
            SmaaSearchTex_);
    }

    public override string ToString() => $"TextureResources_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BlueNoise16LTex[{BlueNoise16LTex.Length}] = {{");
        if (BlueNoise16LTex.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Texture2D> _4 in BlueNoise16LTex)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (BlueNoise16LTex.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilmGrainTex[{FilmGrainTex.Length}] = {{");
        if (FilmGrainTex.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Texture2D> _4 in FilmGrainTex)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (FilmGrainTex.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SmaaAreaTex: {SmaaAreaTex}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SmaaSearchTex: {SmaaSearchTex}");
    }
}

/* $JumpVariantSettings (5 fields) */
public record class JumpVariantSettings (
    int Style,
    byte IsOffHand,
    PPtr<AnimationClipWrapper> m_JumpIn,
    PPtr<AnimationClipWrapper> m_JumpOut,
    PPtr<AnimationClipWrapper> m_JumpFly) : IUnityStructure
{
    public static JumpVariantSettings Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        PPtr<AnimationClipWrapper> m_JumpIn_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_JumpOut_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> m_JumpFly_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Style_,
            IsOffHand_,
            m_JumpIn_,
            m_JumpOut_,
            m_JumpFly_);
    }

    public override string ToString() => $"JumpVariantSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_JumpIn: {m_JumpIn}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_JumpOut: {m_JumpOut}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_JumpFly: {m_JumpFly}");
    }
}

/* $CustomBlend (3 fields) */
public record class CustomBlend (
    AsciiString m_From,
    AsciiString m_To,
    CinemachineBlendDefinition m_Blend) : IUnityStructure
{
    public static CustomBlend Read(EndianBinaryReader reader)
    {
        AsciiString m_From_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_From */
        AsciiString m_To_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_To */
        CinemachineBlendDefinition m_Blend_ = CinemachineBlendDefinition.Read(reader);
        reader.AlignTo(4); /* m_Blend */
        
        return new(m_From_,
            m_To_,
            m_Blend_);
    }

    public override string ToString() => $"CustomBlend\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_From: \"{m_From}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_To: \"{m_To}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Blend: {{ \n{m_Blend.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIMeinMenuTexts (31 fields) */
public record class UIMeinMenuTexts (
    LocalizedString Continue,
    LocalizedString NewGame,
    LocalizedString LoadGame,
    LocalizedString Settings,
    LocalizedString Credits,
    LocalizedString License,
    LocalizedString Feedback,
    LocalizedString Exit,
    LocalizedString Addons,
    LocalizedString MotivationStartPart,
    LocalizedString MotivationStartPartFormat,
    LocalizedString MotivationLinkPartFormat,
    LocalizedString MotivationEndPart,
    LocalizedString Inventory,
    LocalizedString CharacterInfo,
    LocalizedString Journal,
    LocalizedString Encyclopedia,
    LocalizedString ColonyManagement,
    LocalizedString CargoManagement,
    LocalizedString LocalMap,
    LocalizedString ShipCustomization,
    LocalizedString Inspect,
    LocalizedString LevelUp,
    LocalizedString VoidshipLevelUp,
    LocalizedString CrashDumpFoundDialogue,
    LocalizedString CrashDumpFoundDialogueMods,
    LocalizedString CrashDumpFoundDialogueRam,
    LocalizedString CrashDumpFoundDialogueCorrupted,
    LocalizedString CrashDumpFoundDialogueFreeSpace,
    LocalizedString ExceptionDialogueCorrupted,
    LocalizedString ExceptionDialogueFreeSpace) : IUnityStructure
{
    public static UIMeinMenuTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Continue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Continue */
        LocalizedString NewGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewGame */
        LocalizedString LoadGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadGame */
        LocalizedString Settings_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Settings */
        LocalizedString Credits_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Credits */
        LocalizedString License_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* License */
        LocalizedString Feedback_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Feedback */
        LocalizedString Exit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Exit */
        LocalizedString Addons_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Addons */
        LocalizedString MotivationStartPart_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationStartPart */
        LocalizedString MotivationStartPartFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationStartPartFormat */
        LocalizedString MotivationLinkPartFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationLinkPartFormat */
        LocalizedString MotivationEndPart_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MotivationEndPart */
        LocalizedString Inventory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inventory */
        LocalizedString CharacterInfo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterInfo */
        LocalizedString Journal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Journal */
        LocalizedString Encyclopedia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Encyclopedia */
        LocalizedString ColonyManagement_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagement */
        LocalizedString CargoManagement_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoManagement */
        LocalizedString LocalMap_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LocalMap */
        LocalizedString ShipCustomization_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipCustomization */
        LocalizedString Inspect_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inspect */
        LocalizedString LevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelUp */
        LocalizedString VoidshipLevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VoidshipLevelUp */
        LocalizedString CrashDumpFoundDialogue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogue */
        LocalizedString CrashDumpFoundDialogueMods_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueMods */
        LocalizedString CrashDumpFoundDialogueRam_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueRam */
        LocalizedString CrashDumpFoundDialogueCorrupted_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueCorrupted */
        LocalizedString CrashDumpFoundDialogueFreeSpace_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CrashDumpFoundDialogueFreeSpace */
        LocalizedString ExceptionDialogueCorrupted_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExceptionDialogueCorrupted */
        LocalizedString ExceptionDialogueFreeSpace_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExceptionDialogueFreeSpace */
        
        return new(Continue_,
            NewGame_,
            LoadGame_,
            Settings_,
            Credits_,
            License_,
            Feedback_,
            Exit_,
            Addons_,
            MotivationStartPart_,
            MotivationStartPartFormat_,
            MotivationLinkPartFormat_,
            MotivationEndPart_,
            Inventory_,
            CharacterInfo_,
            Journal_,
            Encyclopedia_,
            ColonyManagement_,
            CargoManagement_,
            LocalMap_,
            ShipCustomization_,
            Inspect_,
            LevelUp_,
            VoidshipLevelUp_,
            CrashDumpFoundDialogue_,
            CrashDumpFoundDialogueMods_,
            CrashDumpFoundDialogueRam_,
            CrashDumpFoundDialogueCorrupted_,
            CrashDumpFoundDialogueFreeSpace_,
            ExceptionDialogueCorrupted_,
            ExceptionDialogueFreeSpace_);
    }

    public override string ToString() => $"UIMeinMenuTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Continue: {{ \n{Continue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewGame: {{ \n{NewGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LoadGame: {{ \n{LoadGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Settings: {{ \n{Settings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Credits: {{ \n{Credits.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}License: {{ \n{License.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Feedback: {{ \n{Feedback.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Exit: {{ \n{Exit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Addons: {{ \n{Addons.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MotivationStartPart: {{ \n{MotivationStartPart.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MotivationStartPartFormat: {{ \n{MotivationStartPartFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MotivationLinkPartFormat: {{ \n{MotivationLinkPartFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MotivationEndPart: {{ \n{MotivationEndPart.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Inventory: {{ \n{Inventory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CharacterInfo: {{ \n{CharacterInfo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Journal: {{ \n{Journal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Encyclopedia: {{ \n{Encyclopedia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyManagement: {{ \n{ColonyManagement.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoManagement: {{ \n{CargoManagement.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LocalMap: {{ \n{LocalMap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipCustomization: {{ \n{ShipCustomization.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Inspect: {{ \n{Inspect.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LevelUp: {{ \n{LevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VoidshipLevelUp: {{ \n{VoidshipLevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CrashDumpFoundDialogue: {{ \n{CrashDumpFoundDialogue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CrashDumpFoundDialogueMods: {{ \n{CrashDumpFoundDialogueMods.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CrashDumpFoundDialogueRam: {{ \n{CrashDumpFoundDialogueRam.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CrashDumpFoundDialogueCorrupted: {{ \n{CrashDumpFoundDialogueCorrupted.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CrashDumpFoundDialogueFreeSpace: {{ \n{CrashDumpFoundDialogueFreeSpace.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExceptionDialogueCorrupted: {{ \n{ExceptionDialogueCorrupted.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExceptionDialogueFreeSpace: {{ \n{ExceptionDialogueFreeSpace.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextCharSheet (198 fields) */
public record class UITextCharSheet (
    LocalizedString WeaponSkillShort,
    LocalizedString BallisticSkillShort,
    LocalizedString StrengthShort,
    LocalizedString ToughnessShort,
    LocalizedString AgilityShort,
    LocalizedString InteligenceShort,
    LocalizedString PerceptionShort,
    LocalizedString WillpowerShort,
    LocalizedString FellowshipShort,
    LocalizedString LEVEL,
    LocalizedString LvlShort,
    LocalizedString Attack,
    LocalizedString Abilities,
    LocalizedString Summary,
    LocalizedString Features,
    LocalizedString PsykerPowers,
    LocalizedString LevelProgression,
    LocalizedString Biography,
    LocalizedString FactionsReputation,
    LocalizedString Skills,
    LocalizedString Stats,
    LocalizedString BuffsAndConditions,
    LocalizedString Career,
    LocalizedString StatusEffects,
    LocalizedString Weapons,
    LocalizedString PsyRatingShort,
    LocalizedString Vendors,
    LocalizedString BackgroundAbilities,
    LocalizedString CareerAbilities,
    LocalizedString PostsAbilities,
    LocalizedString ItemsAbilities,
    LocalizedString SoulMarkAbilities,
    LocalizedString Speed,
    LocalizedString TemporaryHP,
    LocalizedString NoBuffText,
    LocalizedString Permanent,
    LocalizedString DeactivatedFeature,
    LocalizedString Male,
    LocalizedString Female,
    LocalizedString Equipment,
    LocalizedString ArmorAbsorption,
    LocalizedString ArmorDeflection,
    LocalizedString Dodge,
    LocalizedString DodgeReduction,
    LocalizedString Resolve,
    LocalizedString History,
    LocalizedString Drusians,
    LocalizedString DrusiansDescription,
    LocalizedString Explorators,
    LocalizedString ExploratorsDescription,
    LocalizedString Kasballica,
    LocalizedString KasballicaDescription,
    LocalizedString Pirates,
    LocalizedString PiratesDescription,
    LocalizedString ShipVendor,
    LocalizedString ShipVendorDescription,
    LocalizedString MaxReputationLevel,
    LocalizedString EmptyBiographyDesc,
    LocalizedString CareerPathHeader,
    LocalizedString ShipCareerPathHeader,
    LocalizedString CareerPathHasNewRanksHeader,
    LocalizedString CareerPathDescription,
    LocalizedString CareerUpgradeHeader,
    LocalizedString ShipCareerUpgradeHeader,
    LocalizedString CareerUpgradeDescription,
    LocalizedString ShipCareerUpgradeDescription,
    LocalizedString CareerUpgradedDescription,
    LocalizedString CareersTier1,
    LocalizedString CareersTier2,
    LocalizedString CareersTier3,
    LocalizedString SelectCareerPath,
    LocalizedString UpgradeCareerPath,
    LocalizedString DialogCloseProgression,
    LocalizedString LevelupDialogCloseProgression,
    LocalizedString FeaturePrerequisites,
    LocalizedString CurrentLevelLabel,
    LocalizedString RanksCounterLabel,
    LocalizedString ApplyCareerSelections,
    LocalizedString ResetCareerSelections,
    LocalizedString DialogResetSelections,
    LocalizedString HeaderCareerDescriptionTab,
    LocalizedString HeaderFeatureDescriptionTab,
    LocalizedString HeaderImprovement,
    LocalizedString HeaderSummaryTab,
    LocalizedString ToSummaryTab,
    LocalizedString KeystoneAbilitiesHeader,
    LocalizedString KeystoneFeaturesHeader,
    LocalizedString UltimateAbilitiesHeader,
    LocalizedString LevelUpOnOtherUnitButtonHint,
    LocalizedString NoRanksForUpgradeButtonHint,
    LocalizedString UnitIsInCombatButtonHint,
    LocalizedString SelectFeatureButtonHint,
    LocalizedString SelectedCareerInProgress,
    LocalizedString SelectedCareerFinished,
    LocalizedString SelectedCareerHasUpgrades,
    LocalizedString CareerPathUpgradesLabel,
    LocalizedString CareerPathExpLabel,
    LocalizedString RecommendedCareerPath,
    LocalizedString RecommendedByCareerPath,
    LocalizedString BackToCareersList,
    LocalizedString RankLabel,
    LocalizedString ClickToDoctrine,
    LocalizedString ClickToDoctrineConsole,
    LocalizedString ToggleFavorites,
    LocalizedString NoFeaturesInFilter,
    LocalizedString AlreadyInLevelUp,
    LocalizedString ShowUnitPanel,
    LocalizedString ShowTooltip,
    LocalizedString ShowUnavailableFeatures,
    LocalizedString HideUnavailableFeatures,
    LocalizedString AttributeFeatureGroupLabel,
    LocalizedString SkillFeatureGroupLabel,
    LocalizedString TalentFeatureGroupLabel,
    LocalizedString UltimateAbilityFeatureGroupLabel,
    LocalizedString ActiveAbilityFeatureGroupLabel,
    LocalizedString AttributeFeatureGroupHint,
    LocalizedString SkillFeatureGroupHint,
    LocalizedString TalentFeatureGroupHint,
    LocalizedString AscensionFirstCareerAbilityFeatureGroupLabel,
    LocalizedString AscensionSecondCareerAbilityFeatureGroupLabel,
    LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupLabel,
    LocalizedString BackgroundAbilityFeatureGroupLabel,
    LocalizedString AscensionTalentFeatureGroupLabel,
    LocalizedString AscensionFirstCareerTalentFeatureGroupLabel,
    LocalizedString AscensionSecondCareerTalentFeatureGroupLabel,
    LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupLabel,
    LocalizedString CommonTalentFeatureGroupLabel,
    LocalizedString AscensionFirstCareerAbilityFeatureGroupHint,
    LocalizedString AscensionSecondCareerAbilityFeatureGroupHint,
    LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupHint,
    LocalizedString BackgroundAbilityFeatureGroupHint,
    LocalizedString AscensionTalentFeatureGroupHint,
    LocalizedString AscensionFirstCareerTalentFeatureGroupHint,
    LocalizedString AscensionSecondCareerTalentFeatureGroupHint,
    LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupHint,
    LocalizedString CommonTalentFeatureGroupHint,
    LocalizedString UltimateAbilityFeatureGroupHint,
    LocalizedString ActiveAbilityFeatureGroupHint,
    LocalizedString ChooseAttributeFeatureGroupHint,
    LocalizedString ActiveShipUpgradeGroupHint,
    LocalizedString ChooseShipUpgradeGroupHint,
    LocalizedString ChooseSkillFeatureGroupHint,
    LocalizedString ChooseAdvancedAbilityGroupHint,
    LocalizedString ActiveAdvancedAbilityGroupHint,
    LocalizedString ChooseShipActiveAbilityGroupHint,
    LocalizedString ActiveShipActiveAbilityGroupHint,
    LocalizedString ChooseShipUltimateAbilityGroupHint,
    LocalizedString ActiveShipUltimateAbilityGroupHint,
    LocalizedString ChooseTalentFeatureGroupHint,
    LocalizedString ChooseUltimateAbilityFeatureGroupHint,
    LocalizedString ChooseActiveAbilityFeatureGroupHint,
    LocalizedString ChooseAscensionFirstCareerAbilityFeatureGroupHint,
    LocalizedString ChooseAscensionSecondCareerAbilityFeatureGroupHint,
    LocalizedString ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint,
    LocalizedString ChooseBackgroundAbilityFeatureGroupHint,
    LocalizedString ChooseAscensionTalentFeatureGroupHint,
    LocalizedString ChooseAscensionFirstCareerTalentFeatureGroupHint,
    LocalizedString ChooseAscensionSecondCareerTalentFeatureGroupHint,
    LocalizedString ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint,
    LocalizedString ChooseCommonTalentFeatureGroupHint,
    LocalizedString KeystoneFeaturesChargenDescription,
    LocalizedString UltimateAbilitiesChargenDescription,
    LocalizedString PredefinedAbilitiesChargenDescription,
    LocalizedString ActiveAbilitiesLabel,
    LocalizedString PassiveAbilitiesLabel,
    LocalizedString NoAbilitiesLabel,
    LocalizedString ActionPanelLabel,
    LocalizedString Chaos,
    LocalizedString Human,
    LocalizedString Xenos,
    LocalizedString AscensionFirstCareerAbilityFeatureGroupDescription,
    LocalizedString AscensionSecondCareerAbilityFeatureGroupDescription,
    LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupDescription,
    LocalizedString AscensionFirstCareerTalentFeatureGroupDescription,
    LocalizedString AscensionSecondCareerTalentFeatureGroupDescription,
    LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupDescription,
    LocalizedString AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription,
    LocalizedString AscensionMissingOnlySecondCareerTalentFeatureGroupDescription,
    LocalizedString VisualSettingsTitle,
    LocalizedString VisualSettingsShowHelmet,
    LocalizedString VisualSettingsShowHelmetAboveAll,
    LocalizedString VisualSettingsShowBackpack,
    LocalizedString VisualSettingsShowCloth,
    LocalizedString VisualSettingsEnableClothes,
    LocalizedString VisualSettingsDisabledForCharacter,
    LocalizedString AvailableRanksHint,
    LocalizedString NoneHint,
    LocalizedString RecommendedFilterHint,
    LocalizedString FavoritesFilterHint,
    LocalizedString OffenseFilterHint,
    LocalizedString DefenseFilterHint,
    LocalizedString SupportFilterHint,
    LocalizedString UniversalFilterHint,
    LocalizedString ArchetypeFilterHint,
    LocalizedString OriginFilterHint,
    LocalizedString WarpFilterHint,
    LocalizedString ShowUnavailableFeaturesHint,
    LocalizedString HideUnavailableFeaturesHint) : IUnityStructure
{
    public static UITextCharSheet Read(EndianBinaryReader reader)
    {
        LocalizedString WeaponSkillShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSkillShort */
        LocalizedString BallisticSkillShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BallisticSkillShort */
        LocalizedString StrengthShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StrengthShort */
        LocalizedString ToughnessShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToughnessShort */
        LocalizedString AgilityShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AgilityShort */
        LocalizedString InteligenceShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InteligenceShort */
        LocalizedString PerceptionShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PerceptionShort */
        LocalizedString WillpowerShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WillpowerShort */
        LocalizedString FellowshipShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FellowshipShort */
        LocalizedString LEVEL_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LEVEL */
        LocalizedString LvlShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LvlShort */
        LocalizedString Attack_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Attack */
        LocalizedString Abilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Abilities */
        LocalizedString Summary_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Summary */
        LocalizedString Features_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Features */
        LocalizedString PsykerPowers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsykerPowers */
        LocalizedString LevelProgression_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelProgression */
        LocalizedString Biography_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Biography */
        LocalizedString FactionsReputation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionsReputation */
        LocalizedString Skills_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Skills */
        LocalizedString Stats_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Stats */
        LocalizedString BuffsAndConditions_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuffsAndConditions */
        LocalizedString Career_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Career */
        LocalizedString StatusEffects_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatusEffects */
        LocalizedString Weapons_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Weapons */
        LocalizedString PsyRatingShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsyRatingShort */
        LocalizedString Vendors_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Vendors */
        LocalizedString BackgroundAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundAbilities */
        LocalizedString CareerAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerAbilities */
        LocalizedString PostsAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostsAbilities */
        LocalizedString ItemsAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsAbilities */
        LocalizedString SoulMarkAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkAbilities */
        LocalizedString Speed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Speed */
        LocalizedString TemporaryHP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TemporaryHP */
        LocalizedString NoBuffText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoBuffText */
        LocalizedString Permanent_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Permanent */
        LocalizedString DeactivatedFeature_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeactivatedFeature */
        LocalizedString Male_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Male */
        LocalizedString Female_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Female */
        LocalizedString Equipment_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Equipment */
        LocalizedString ArmorAbsorption_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorAbsorption */
        LocalizedString ArmorDeflection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorDeflection */
        LocalizedString Dodge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString DodgeReduction_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DodgeReduction */
        LocalizedString Resolve_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Resolve */
        LocalizedString History_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* History */
        LocalizedString Drusians_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Drusians */
        LocalizedString DrusiansDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DrusiansDescription */
        LocalizedString Explorators_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Explorators */
        LocalizedString ExploratorsDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploratorsDescription */
        LocalizedString Kasballica_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Kasballica */
        LocalizedString KasballicaDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KasballicaDescription */
        LocalizedString Pirates_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pirates */
        LocalizedString PiratesDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PiratesDescription */
        LocalizedString ShipVendor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipVendor */
        LocalizedString ShipVendorDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipVendorDescription */
        LocalizedString MaxReputationLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxReputationLevel */
        LocalizedString EmptyBiographyDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmptyBiographyDesc */
        LocalizedString CareerPathHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathHeader */
        LocalizedString ShipCareerPathHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipCareerPathHeader */
        LocalizedString CareerPathHasNewRanksHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathHasNewRanksHeader */
        LocalizedString CareerPathDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathDescription */
        LocalizedString CareerUpgradeHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerUpgradeHeader */
        LocalizedString ShipCareerUpgradeHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipCareerUpgradeHeader */
        LocalizedString CareerUpgradeDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerUpgradeDescription */
        LocalizedString ShipCareerUpgradeDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipCareerUpgradeDescription */
        LocalizedString CareerUpgradedDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerUpgradedDescription */
        LocalizedString CareersTier1_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareersTier1 */
        LocalizedString CareersTier2_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareersTier2 */
        LocalizedString CareersTier3_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareersTier3 */
        LocalizedString SelectCareerPath_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectCareerPath */
        LocalizedString UpgradeCareerPath_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeCareerPath */
        LocalizedString DialogCloseProgression_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogCloseProgression */
        LocalizedString LevelupDialogCloseProgression_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelupDialogCloseProgression */
        LocalizedString FeaturePrerequisites_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturePrerequisites */
        LocalizedString CurrentLevelLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentLevelLabel */
        LocalizedString RanksCounterLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RanksCounterLabel */
        LocalizedString ApplyCareerSelections_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ApplyCareerSelections */
        LocalizedString ResetCareerSelections_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetCareerSelections */
        LocalizedString DialogResetSelections_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogResetSelections */
        LocalizedString HeaderCareerDescriptionTab_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderCareerDescriptionTab */
        LocalizedString HeaderFeatureDescriptionTab_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderFeatureDescriptionTab */
        LocalizedString HeaderImprovement_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderImprovement */
        LocalizedString HeaderSummaryTab_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderSummaryTab */
        LocalizedString ToSummaryTab_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToSummaryTab */
        LocalizedString KeystoneAbilitiesHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KeystoneAbilitiesHeader */
        LocalizedString KeystoneFeaturesHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KeystoneFeaturesHeader */
        LocalizedString UltimateAbilitiesHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilitiesHeader */
        LocalizedString LevelUpOnOtherUnitButtonHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LevelUpOnOtherUnitButtonHint */
        LocalizedString NoRanksForUpgradeButtonHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoRanksForUpgradeButtonHint */
        LocalizedString UnitIsInCombatButtonHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnitIsInCombatButtonHint */
        LocalizedString SelectFeatureButtonHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectFeatureButtonHint */
        LocalizedString SelectedCareerInProgress_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedCareerInProgress */
        LocalizedString SelectedCareerFinished_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedCareerFinished */
        LocalizedString SelectedCareerHasUpgrades_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedCareerHasUpgrades */
        LocalizedString CareerPathUpgradesLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathUpgradesLabel */
        LocalizedString CareerPathExpLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CareerPathExpLabel */
        LocalizedString RecommendedCareerPath_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RecommendedCareerPath */
        LocalizedString RecommendedByCareerPath_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RecommendedByCareerPath */
        LocalizedString BackToCareersList_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackToCareersList */
        LocalizedString RankLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RankLabel */
        LocalizedString ClickToDoctrine_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClickToDoctrine */
        LocalizedString ClickToDoctrineConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClickToDoctrineConsole */
        LocalizedString ToggleFavorites_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToggleFavorites */
        LocalizedString NoFeaturesInFilter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFeaturesInFilter */
        LocalizedString AlreadyInLevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AlreadyInLevelUp */
        LocalizedString ShowUnitPanel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowUnitPanel */
        LocalizedString ShowTooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowTooltip */
        LocalizedString ShowUnavailableFeatures_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowUnavailableFeatures */
        LocalizedString HideUnavailableFeatures_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideUnavailableFeatures */
        LocalizedString AttributeFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttributeFeatureGroupLabel */
        LocalizedString SkillFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillFeatureGroupLabel */
        LocalizedString TalentFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TalentFeatureGroupLabel */
        LocalizedString UltimateAbilityFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilityFeatureGroupLabel */
        LocalizedString ActiveAbilityFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilityFeatureGroupLabel */
        LocalizedString AttributeFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttributeFeatureGroupHint */
        LocalizedString SkillFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillFeatureGroupHint */
        LocalizedString TalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TalentFeatureGroupHint */
        LocalizedString AscensionFirstCareerAbilityFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerAbilityFeatureGroupLabel */
        LocalizedString AscensionSecondCareerAbilityFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerAbilityFeatureGroupLabel */
        LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerAbilityFeatureGroupLabel */
        LocalizedString BackgroundAbilityFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundAbilityFeatureGroupLabel */
        LocalizedString AscensionTalentFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionTalentFeatureGroupLabel */
        LocalizedString AscensionFirstCareerTalentFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerTalentFeatureGroupLabel */
        LocalizedString AscensionSecondCareerTalentFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerTalentFeatureGroupLabel */
        LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerTalentFeatureGroupLabel */
        LocalizedString CommonTalentFeatureGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CommonTalentFeatureGroupLabel */
        LocalizedString AscensionFirstCareerAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerAbilityFeatureGroupHint */
        LocalizedString AscensionSecondCareerAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerAbilityFeatureGroupHint */
        LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerAbilityFeatureGroupHint */
        LocalizedString BackgroundAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundAbilityFeatureGroupHint */
        LocalizedString AscensionTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionTalentFeatureGroupHint */
        LocalizedString AscensionFirstCareerTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerTalentFeatureGroupHint */
        LocalizedString AscensionSecondCareerTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerTalentFeatureGroupHint */
        LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerTalentFeatureGroupHint */
        LocalizedString CommonTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CommonTalentFeatureGroupHint */
        LocalizedString UltimateAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilityFeatureGroupHint */
        LocalizedString ActiveAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilityFeatureGroupHint */
        LocalizedString ChooseAttributeFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAttributeFeatureGroupHint */
        LocalizedString ActiveShipUpgradeGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveShipUpgradeGroupHint */
        LocalizedString ChooseShipUpgradeGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseShipUpgradeGroupHint */
        LocalizedString ChooseSkillFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseSkillFeatureGroupHint */
        LocalizedString ChooseAdvancedAbilityGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAdvancedAbilityGroupHint */
        LocalizedString ActiveAdvancedAbilityGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAdvancedAbilityGroupHint */
        LocalizedString ChooseShipActiveAbilityGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseShipActiveAbilityGroupHint */
        LocalizedString ActiveShipActiveAbilityGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveShipActiveAbilityGroupHint */
        LocalizedString ChooseShipUltimateAbilityGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseShipUltimateAbilityGroupHint */
        LocalizedString ActiveShipUltimateAbilityGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveShipUltimateAbilityGroupHint */
        LocalizedString ChooseTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseTalentFeatureGroupHint */
        LocalizedString ChooseUltimateAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseUltimateAbilityFeatureGroupHint */
        LocalizedString ChooseActiveAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseActiveAbilityFeatureGroupHint */
        LocalizedString ChooseAscensionFirstCareerAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstCareerAbilityFeatureGroupHint */
        LocalizedString ChooseAscensionSecondCareerAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionSecondCareerAbilityFeatureGroupHint */
        LocalizedString ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint */
        LocalizedString ChooseBackgroundAbilityFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseBackgroundAbilityFeatureGroupHint */
        LocalizedString ChooseAscensionTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionTalentFeatureGroupHint */
        LocalizedString ChooseAscensionFirstCareerTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstCareerTalentFeatureGroupHint */
        LocalizedString ChooseAscensionSecondCareerTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionSecondCareerTalentFeatureGroupHint */
        LocalizedString ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint */
        LocalizedString ChooseCommonTalentFeatureGroupHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseCommonTalentFeatureGroupHint */
        LocalizedString KeystoneFeaturesChargenDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KeystoneFeaturesChargenDescription */
        LocalizedString UltimateAbilitiesChargenDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilitiesChargenDescription */
        LocalizedString PredefinedAbilitiesChargenDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PredefinedAbilitiesChargenDescription */
        LocalizedString ActiveAbilitiesLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilitiesLabel */
        LocalizedString PassiveAbilitiesLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PassiveAbilitiesLabel */
        LocalizedString NoAbilitiesLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAbilitiesLabel */
        LocalizedString ActionPanelLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActionPanelLabel */
        LocalizedString Chaos_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Chaos */
        LocalizedString Human_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Human */
        LocalizedString Xenos_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Xenos */
        LocalizedString AscensionFirstCareerAbilityFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerAbilityFeatureGroupDescription */
        LocalizedString AscensionSecondCareerAbilityFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerAbilityFeatureGroupDescription */
        LocalizedString AscensionFirstOrSecondCareerAbilityFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerAbilityFeatureGroupDescription */
        LocalizedString AscensionFirstCareerTalentFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstCareerTalentFeatureGroupDescription */
        LocalizedString AscensionSecondCareerTalentFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionSecondCareerTalentFeatureGroupDescription */
        LocalizedString AscensionFirstOrSecondCareerTalentFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionFirstOrSecondCareerTalentFeatureGroupDescription */
        LocalizedString AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription */
        LocalizedString AscensionMissingOnlySecondCareerTalentFeatureGroupDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AscensionMissingOnlySecondCareerTalentFeatureGroupDescription */
        LocalizedString VisualSettingsTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsTitle */
        LocalizedString VisualSettingsShowHelmet_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowHelmet */
        LocalizedString VisualSettingsShowHelmetAboveAll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowHelmetAboveAll */
        LocalizedString VisualSettingsShowBackpack_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowBackpack */
        LocalizedString VisualSettingsShowCloth_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsShowCloth */
        LocalizedString VisualSettingsEnableClothes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsEnableClothes */
        LocalizedString VisualSettingsDisabledForCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisualSettingsDisabledForCharacter */
        LocalizedString AvailableRanksHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableRanksHint */
        LocalizedString NoneHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoneHint */
        LocalizedString RecommendedFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RecommendedFilterHint */
        LocalizedString FavoritesFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FavoritesFilterHint */
        LocalizedString OffenseFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OffenseFilterHint */
        LocalizedString DefenseFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DefenseFilterHint */
        LocalizedString SupportFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SupportFilterHint */
        LocalizedString UniversalFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UniversalFilterHint */
        LocalizedString ArchetypeFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArchetypeFilterHint */
        LocalizedString OriginFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OriginFilterHint */
        LocalizedString WarpFilterHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarpFilterHint */
        LocalizedString ShowUnavailableFeaturesHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowUnavailableFeaturesHint */
        LocalizedString HideUnavailableFeaturesHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideUnavailableFeaturesHint */
        
        return new(WeaponSkillShort_,
            BallisticSkillShort_,
            StrengthShort_,
            ToughnessShort_,
            AgilityShort_,
            InteligenceShort_,
            PerceptionShort_,
            WillpowerShort_,
            FellowshipShort_,
            LEVEL_,
            LvlShort_,
            Attack_,
            Abilities_,
            Summary_,
            Features_,
            PsykerPowers_,
            LevelProgression_,
            Biography_,
            FactionsReputation_,
            Skills_,
            Stats_,
            BuffsAndConditions_,
            Career_,
            StatusEffects_,
            Weapons_,
            PsyRatingShort_,
            Vendors_,
            BackgroundAbilities_,
            CareerAbilities_,
            PostsAbilities_,
            ItemsAbilities_,
            SoulMarkAbilities_,
            Speed_,
            TemporaryHP_,
            NoBuffText_,
            Permanent_,
            DeactivatedFeature_,
            Male_,
            Female_,
            Equipment_,
            ArmorAbsorption_,
            ArmorDeflection_,
            Dodge_,
            DodgeReduction_,
            Resolve_,
            History_,
            Drusians_,
            DrusiansDescription_,
            Explorators_,
            ExploratorsDescription_,
            Kasballica_,
            KasballicaDescription_,
            Pirates_,
            PiratesDescription_,
            ShipVendor_,
            ShipVendorDescription_,
            MaxReputationLevel_,
            EmptyBiographyDesc_,
            CareerPathHeader_,
            ShipCareerPathHeader_,
            CareerPathHasNewRanksHeader_,
            CareerPathDescription_,
            CareerUpgradeHeader_,
            ShipCareerUpgradeHeader_,
            CareerUpgradeDescription_,
            ShipCareerUpgradeDescription_,
            CareerUpgradedDescription_,
            CareersTier1_,
            CareersTier2_,
            CareersTier3_,
            SelectCareerPath_,
            UpgradeCareerPath_,
            DialogCloseProgression_,
            LevelupDialogCloseProgression_,
            FeaturePrerequisites_,
            CurrentLevelLabel_,
            RanksCounterLabel_,
            ApplyCareerSelections_,
            ResetCareerSelections_,
            DialogResetSelections_,
            HeaderCareerDescriptionTab_,
            HeaderFeatureDescriptionTab_,
            HeaderImprovement_,
            HeaderSummaryTab_,
            ToSummaryTab_,
            KeystoneAbilitiesHeader_,
            KeystoneFeaturesHeader_,
            UltimateAbilitiesHeader_,
            LevelUpOnOtherUnitButtonHint_,
            NoRanksForUpgradeButtonHint_,
            UnitIsInCombatButtonHint_,
            SelectFeatureButtonHint_,
            SelectedCareerInProgress_,
            SelectedCareerFinished_,
            SelectedCareerHasUpgrades_,
            CareerPathUpgradesLabel_,
            CareerPathExpLabel_,
            RecommendedCareerPath_,
            RecommendedByCareerPath_,
            BackToCareersList_,
            RankLabel_,
            ClickToDoctrine_,
            ClickToDoctrineConsole_,
            ToggleFavorites_,
            NoFeaturesInFilter_,
            AlreadyInLevelUp_,
            ShowUnitPanel_,
            ShowTooltip_,
            ShowUnavailableFeatures_,
            HideUnavailableFeatures_,
            AttributeFeatureGroupLabel_,
            SkillFeatureGroupLabel_,
            TalentFeatureGroupLabel_,
            UltimateAbilityFeatureGroupLabel_,
            ActiveAbilityFeatureGroupLabel_,
            AttributeFeatureGroupHint_,
            SkillFeatureGroupHint_,
            TalentFeatureGroupHint_,
            AscensionFirstCareerAbilityFeatureGroupLabel_,
            AscensionSecondCareerAbilityFeatureGroupLabel_,
            AscensionFirstOrSecondCareerAbilityFeatureGroupLabel_,
            BackgroundAbilityFeatureGroupLabel_,
            AscensionTalentFeatureGroupLabel_,
            AscensionFirstCareerTalentFeatureGroupLabel_,
            AscensionSecondCareerTalentFeatureGroupLabel_,
            AscensionFirstOrSecondCareerTalentFeatureGroupLabel_,
            CommonTalentFeatureGroupLabel_,
            AscensionFirstCareerAbilityFeatureGroupHint_,
            AscensionSecondCareerAbilityFeatureGroupHint_,
            AscensionFirstOrSecondCareerAbilityFeatureGroupHint_,
            BackgroundAbilityFeatureGroupHint_,
            AscensionTalentFeatureGroupHint_,
            AscensionFirstCareerTalentFeatureGroupHint_,
            AscensionSecondCareerTalentFeatureGroupHint_,
            AscensionFirstOrSecondCareerTalentFeatureGroupHint_,
            CommonTalentFeatureGroupHint_,
            UltimateAbilityFeatureGroupHint_,
            ActiveAbilityFeatureGroupHint_,
            ChooseAttributeFeatureGroupHint_,
            ActiveShipUpgradeGroupHint_,
            ChooseShipUpgradeGroupHint_,
            ChooseSkillFeatureGroupHint_,
            ChooseAdvancedAbilityGroupHint_,
            ActiveAdvancedAbilityGroupHint_,
            ChooseShipActiveAbilityGroupHint_,
            ActiveShipActiveAbilityGroupHint_,
            ChooseShipUltimateAbilityGroupHint_,
            ActiveShipUltimateAbilityGroupHint_,
            ChooseTalentFeatureGroupHint_,
            ChooseUltimateAbilityFeatureGroupHint_,
            ChooseActiveAbilityFeatureGroupHint_,
            ChooseAscensionFirstCareerAbilityFeatureGroupHint_,
            ChooseAscensionSecondCareerAbilityFeatureGroupHint_,
            ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint_,
            ChooseBackgroundAbilityFeatureGroupHint_,
            ChooseAscensionTalentFeatureGroupHint_,
            ChooseAscensionFirstCareerTalentFeatureGroupHint_,
            ChooseAscensionSecondCareerTalentFeatureGroupHint_,
            ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint_,
            ChooseCommonTalentFeatureGroupHint_,
            KeystoneFeaturesChargenDescription_,
            UltimateAbilitiesChargenDescription_,
            PredefinedAbilitiesChargenDescription_,
            ActiveAbilitiesLabel_,
            PassiveAbilitiesLabel_,
            NoAbilitiesLabel_,
            ActionPanelLabel_,
            Chaos_,
            Human_,
            Xenos_,
            AscensionFirstCareerAbilityFeatureGroupDescription_,
            AscensionSecondCareerAbilityFeatureGroupDescription_,
            AscensionFirstOrSecondCareerAbilityFeatureGroupDescription_,
            AscensionFirstCareerTalentFeatureGroupDescription_,
            AscensionSecondCareerTalentFeatureGroupDescription_,
            AscensionFirstOrSecondCareerTalentFeatureGroupDescription_,
            AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription_,
            AscensionMissingOnlySecondCareerTalentFeatureGroupDescription_,
            VisualSettingsTitle_,
            VisualSettingsShowHelmet_,
            VisualSettingsShowHelmetAboveAll_,
            VisualSettingsShowBackpack_,
            VisualSettingsShowCloth_,
            VisualSettingsEnableClothes_,
            VisualSettingsDisabledForCharacter_,
            AvailableRanksHint_,
            NoneHint_,
            RecommendedFilterHint_,
            FavoritesFilterHint_,
            OffenseFilterHint_,
            DefenseFilterHint_,
            SupportFilterHint_,
            UniversalFilterHint_,
            ArchetypeFilterHint_,
            OriginFilterHint_,
            WarpFilterHint_,
            ShowUnavailableFeaturesHint_,
            HideUnavailableFeaturesHint_);
    }

    public override string ToString() => $"UITextCharSheet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);
        ToString_Field60(sb, indent, indent_);
        ToString_Field61(sb, indent, indent_);
        ToString_Field62(sb, indent, indent_);
        ToString_Field63(sb, indent, indent_);
        ToString_Field64(sb, indent, indent_);
        ToString_Field65(sb, indent, indent_);
        ToString_Field66(sb, indent, indent_);
        ToString_Field67(sb, indent, indent_);
        ToString_Field68(sb, indent, indent_);
        ToString_Field69(sb, indent, indent_);
        ToString_Field70(sb, indent, indent_);
        ToString_Field71(sb, indent, indent_);
        ToString_Field72(sb, indent, indent_);
        ToString_Field73(sb, indent, indent_);
        ToString_Field74(sb, indent, indent_);
        ToString_Field75(sb, indent, indent_);
        ToString_Field76(sb, indent, indent_);
        ToString_Field77(sb, indent, indent_);
        ToString_Field78(sb, indent, indent_);
        ToString_Field79(sb, indent, indent_);
        ToString_Field80(sb, indent, indent_);
        ToString_Field81(sb, indent, indent_);
        ToString_Field82(sb, indent, indent_);
        ToString_Field83(sb, indent, indent_);
        ToString_Field84(sb, indent, indent_);
        ToString_Field85(sb, indent, indent_);
        ToString_Field86(sb, indent, indent_);
        ToString_Field87(sb, indent, indent_);
        ToString_Field88(sb, indent, indent_);
        ToString_Field89(sb, indent, indent_);
        ToString_Field90(sb, indent, indent_);
        ToString_Field91(sb, indent, indent_);
        ToString_Field92(sb, indent, indent_);
        ToString_Field93(sb, indent, indent_);
        ToString_Field94(sb, indent, indent_);
        ToString_Field95(sb, indent, indent_);
        ToString_Field96(sb, indent, indent_);
        ToString_Field97(sb, indent, indent_);
        ToString_Field98(sb, indent, indent_);
        ToString_Field99(sb, indent, indent_);
        ToString_Field100(sb, indent, indent_);
        ToString_Field101(sb, indent, indent_);
        ToString_Field102(sb, indent, indent_);
        ToString_Field103(sb, indent, indent_);
        ToString_Field104(sb, indent, indent_);
        ToString_Field105(sb, indent, indent_);
        ToString_Field106(sb, indent, indent_);
        ToString_Field107(sb, indent, indent_);
        ToString_Field108(sb, indent, indent_);
        ToString_Field109(sb, indent, indent_);
        ToString_Field110(sb, indent, indent_);
        ToString_Field111(sb, indent, indent_);
        ToString_Field112(sb, indent, indent_);
        ToString_Field113(sb, indent, indent_);
        ToString_Field114(sb, indent, indent_);
        ToString_Field115(sb, indent, indent_);
        ToString_Field116(sb, indent, indent_);
        ToString_Field117(sb, indent, indent_);
        ToString_Field118(sb, indent, indent_);
        ToString_Field119(sb, indent, indent_);
        ToString_Field120(sb, indent, indent_);
        ToString_Field121(sb, indent, indent_);
        ToString_Field122(sb, indent, indent_);
        ToString_Field123(sb, indent, indent_);
        ToString_Field124(sb, indent, indent_);
        ToString_Field125(sb, indent, indent_);
        ToString_Field126(sb, indent, indent_);
        ToString_Field127(sb, indent, indent_);
        ToString_Field128(sb, indent, indent_);
        ToString_Field129(sb, indent, indent_);
        ToString_Field130(sb, indent, indent_);
        ToString_Field131(sb, indent, indent_);
        ToString_Field132(sb, indent, indent_);
        ToString_Field133(sb, indent, indent_);
        ToString_Field134(sb, indent, indent_);
        ToString_Field135(sb, indent, indent_);
        ToString_Field136(sb, indent, indent_);
        ToString_Field137(sb, indent, indent_);
        ToString_Field138(sb, indent, indent_);
        ToString_Field139(sb, indent, indent_);
        ToString_Field140(sb, indent, indent_);
        ToString_Field141(sb, indent, indent_);
        ToString_Field142(sb, indent, indent_);
        ToString_Field143(sb, indent, indent_);
        ToString_Field144(sb, indent, indent_);
        ToString_Field145(sb, indent, indent_);
        ToString_Field146(sb, indent, indent_);
        ToString_Field147(sb, indent, indent_);
        ToString_Field148(sb, indent, indent_);
        ToString_Field149(sb, indent, indent_);
        ToString_Field150(sb, indent, indent_);
        ToString_Field151(sb, indent, indent_);
        ToString_Field152(sb, indent, indent_);
        ToString_Field153(sb, indent, indent_);
        ToString_Field154(sb, indent, indent_);
        ToString_Field155(sb, indent, indent_);
        ToString_Field156(sb, indent, indent_);
        ToString_Field157(sb, indent, indent_);
        ToString_Field158(sb, indent, indent_);
        ToString_Field159(sb, indent, indent_);
        ToString_Field160(sb, indent, indent_);
        ToString_Field161(sb, indent, indent_);
        ToString_Field162(sb, indent, indent_);
        ToString_Field163(sb, indent, indent_);
        ToString_Field164(sb, indent, indent_);
        ToString_Field165(sb, indent, indent_);
        ToString_Field166(sb, indent, indent_);
        ToString_Field167(sb, indent, indent_);
        ToString_Field168(sb, indent, indent_);
        ToString_Field169(sb, indent, indent_);
        ToString_Field170(sb, indent, indent_);
        ToString_Field171(sb, indent, indent_);
        ToString_Field172(sb, indent, indent_);
        ToString_Field173(sb, indent, indent_);
        ToString_Field174(sb, indent, indent_);
        ToString_Field175(sb, indent, indent_);
        ToString_Field176(sb, indent, indent_);
        ToString_Field177(sb, indent, indent_);
        ToString_Field178(sb, indent, indent_);
        ToString_Field179(sb, indent, indent_);
        ToString_Field180(sb, indent, indent_);
        ToString_Field181(sb, indent, indent_);
        ToString_Field182(sb, indent, indent_);
        ToString_Field183(sb, indent, indent_);
        ToString_Field184(sb, indent, indent_);
        ToString_Field185(sb, indent, indent_);
        ToString_Field186(sb, indent, indent_);
        ToString_Field187(sb, indent, indent_);
        ToString_Field188(sb, indent, indent_);
        ToString_Field189(sb, indent, indent_);
        ToString_Field190(sb, indent, indent_);
        ToString_Field191(sb, indent, indent_);
        ToString_Field192(sb, indent, indent_);
        ToString_Field193(sb, indent, indent_);
        ToString_Field194(sb, indent, indent_);
        ToString_Field195(sb, indent, indent_);
        ToString_Field196(sb, indent, indent_);
        ToString_Field197(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSkillShort: {{ \n{WeaponSkillShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BallisticSkillShort: {{ \n{BallisticSkillShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StrengthShort: {{ \n{StrengthShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToughnessShort: {{ \n{ToughnessShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AgilityShort: {{ \n{AgilityShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteligenceShort: {{ \n{InteligenceShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PerceptionShort: {{ \n{PerceptionShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WillpowerShort: {{ \n{WillpowerShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FellowshipShort: {{ \n{FellowshipShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LEVEL: {{ \n{LEVEL.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LvlShort: {{ \n{LvlShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Attack: {{ \n{Attack.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Abilities: {{ \n{Abilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Summary: {{ \n{Summary.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Features: {{ \n{Features.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PsykerPowers: {{ \n{PsykerPowers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LevelProgression: {{ \n{LevelProgression.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Biography: {{ \n{Biography.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FactionsReputation: {{ \n{FactionsReputation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Skills: {{ \n{Skills.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Stats: {{ \n{Stats.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BuffsAndConditions: {{ \n{BuffsAndConditions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Career: {{ \n{Career.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatusEffects: {{ \n{StatusEffects.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Weapons: {{ \n{Weapons.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PsyRatingShort: {{ \n{PsyRatingShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Vendors: {{ \n{Vendors.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundAbilities: {{ \n{BackgroundAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerAbilities: {{ \n{CareerAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostsAbilities: {{ \n{PostsAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ItemsAbilities: {{ \n{ItemsAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkAbilities: {{ \n{SoulMarkAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Speed: {{ \n{Speed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TemporaryHP: {{ \n{TemporaryHP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoBuffText: {{ \n{NoBuffText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Permanent: {{ \n{Permanent.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeactivatedFeature: {{ \n{DeactivatedFeature.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Male: {{ \n{Male.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Female: {{ \n{Female.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Equipment: {{ \n{Equipment.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmorAbsorption: {{ \n{ArmorAbsorption.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmorDeflection: {{ \n{ArmorDeflection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dodge: {{ \n{Dodge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DodgeReduction: {{ \n{DodgeReduction.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Resolve: {{ \n{Resolve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}History: {{ \n{History.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Drusians: {{ \n{Drusians.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DrusiansDescription: {{ \n{DrusiansDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Explorators: {{ \n{Explorators.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploratorsDescription: {{ \n{ExploratorsDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Kasballica: {{ \n{Kasballica.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KasballicaDescription: {{ \n{KasballicaDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pirates: {{ \n{Pirates.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PiratesDescription: {{ \n{PiratesDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipVendor: {{ \n{ShipVendor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipVendorDescription: {{ \n{ShipVendorDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaxReputationLevel: {{ \n{MaxReputationLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EmptyBiographyDesc: {{ \n{EmptyBiographyDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerPathHeader: {{ \n{CareerPathHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipCareerPathHeader: {{ \n{ShipCareerPathHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field60(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerPathHasNewRanksHeader: {{ \n{CareerPathHasNewRanksHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field61(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerPathDescription: {{ \n{CareerPathDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field62(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerUpgradeHeader: {{ \n{CareerUpgradeHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field63(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipCareerUpgradeHeader: {{ \n{ShipCareerUpgradeHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field64(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerUpgradeDescription: {{ \n{CareerUpgradeDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field65(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipCareerUpgradeDescription: {{ \n{ShipCareerUpgradeDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field66(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerUpgradedDescription: {{ \n{CareerUpgradedDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field67(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareersTier1: {{ \n{CareersTier1.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field68(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareersTier2: {{ \n{CareersTier2.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field69(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareersTier3: {{ \n{CareersTier3.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field70(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectCareerPath: {{ \n{SelectCareerPath.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field71(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeCareerPath: {{ \n{UpgradeCareerPath.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field72(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogCloseProgression: {{ \n{DialogCloseProgression.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field73(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LevelupDialogCloseProgression: {{ \n{LevelupDialogCloseProgression.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field74(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FeaturePrerequisites: {{ \n{FeaturePrerequisites.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field75(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentLevelLabel: {{ \n{CurrentLevelLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field76(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RanksCounterLabel: {{ \n{RanksCounterLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field77(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ApplyCareerSelections: {{ \n{ApplyCareerSelections.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field78(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResetCareerSelections: {{ \n{ResetCareerSelections.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field79(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogResetSelections: {{ \n{DialogResetSelections.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field80(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HeaderCareerDescriptionTab: {{ \n{HeaderCareerDescriptionTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field81(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HeaderFeatureDescriptionTab: {{ \n{HeaderFeatureDescriptionTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field82(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HeaderImprovement: {{ \n{HeaderImprovement.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field83(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HeaderSummaryTab: {{ \n{HeaderSummaryTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field84(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToSummaryTab: {{ \n{ToSummaryTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field85(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KeystoneAbilitiesHeader: {{ \n{KeystoneAbilitiesHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field86(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KeystoneFeaturesHeader: {{ \n{KeystoneFeaturesHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field87(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UltimateAbilitiesHeader: {{ \n{UltimateAbilitiesHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field88(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LevelUpOnOtherUnitButtonHint: {{ \n{LevelUpOnOtherUnitButtonHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field89(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoRanksForUpgradeButtonHint: {{ \n{NoRanksForUpgradeButtonHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field90(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnitIsInCombatButtonHint: {{ \n{UnitIsInCombatButtonHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field91(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectFeatureButtonHint: {{ \n{SelectFeatureButtonHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field92(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectedCareerInProgress: {{ \n{SelectedCareerInProgress.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field93(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectedCareerFinished: {{ \n{SelectedCareerFinished.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field94(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectedCareerHasUpgrades: {{ \n{SelectedCareerHasUpgrades.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field95(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerPathUpgradesLabel: {{ \n{CareerPathUpgradesLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field96(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CareerPathExpLabel: {{ \n{CareerPathExpLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field97(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RecommendedCareerPath: {{ \n{RecommendedCareerPath.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field98(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RecommendedByCareerPath: {{ \n{RecommendedByCareerPath.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field99(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackToCareersList: {{ \n{BackToCareersList.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field100(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RankLabel: {{ \n{RankLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field101(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClickToDoctrine: {{ \n{ClickToDoctrine.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field102(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClickToDoctrineConsole: {{ \n{ClickToDoctrineConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field103(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToggleFavorites: {{ \n{ToggleFavorites.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field104(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoFeaturesInFilter: {{ \n{NoFeaturesInFilter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field105(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlreadyInLevelUp: {{ \n{AlreadyInLevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field106(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowUnitPanel: {{ \n{ShowUnitPanel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field107(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowTooltip: {{ \n{ShowTooltip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field108(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowUnavailableFeatures: {{ \n{ShowUnavailableFeatures.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field109(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideUnavailableFeatures: {{ \n{HideUnavailableFeatures.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field110(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttributeFeatureGroupLabel: {{ \n{AttributeFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field111(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillFeatureGroupLabel: {{ \n{SkillFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field112(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TalentFeatureGroupLabel: {{ \n{TalentFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field113(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UltimateAbilityFeatureGroupLabel: {{ \n{UltimateAbilityFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field114(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveAbilityFeatureGroupLabel: {{ \n{ActiveAbilityFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field115(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttributeFeatureGroupHint: {{ \n{AttributeFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field116(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillFeatureGroupHint: {{ \n{SkillFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field117(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TalentFeatureGroupHint: {{ \n{TalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field118(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstCareerAbilityFeatureGroupLabel: {{ \n{AscensionFirstCareerAbilityFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field119(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionSecondCareerAbilityFeatureGroupLabel: {{ \n{AscensionSecondCareerAbilityFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field120(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstOrSecondCareerAbilityFeatureGroupLabel: {{ \n{AscensionFirstOrSecondCareerAbilityFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field121(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundAbilityFeatureGroupLabel: {{ \n{BackgroundAbilityFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field122(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionTalentFeatureGroupLabel: {{ \n{AscensionTalentFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field123(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstCareerTalentFeatureGroupLabel: {{ \n{AscensionFirstCareerTalentFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field124(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionSecondCareerTalentFeatureGroupLabel: {{ \n{AscensionSecondCareerTalentFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field125(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstOrSecondCareerTalentFeatureGroupLabel: {{ \n{AscensionFirstOrSecondCareerTalentFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field126(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CommonTalentFeatureGroupLabel: {{ \n{CommonTalentFeatureGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field127(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstCareerAbilityFeatureGroupHint: {{ \n{AscensionFirstCareerAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field128(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionSecondCareerAbilityFeatureGroupHint: {{ \n{AscensionSecondCareerAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field129(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstOrSecondCareerAbilityFeatureGroupHint: {{ \n{AscensionFirstOrSecondCareerAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field130(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundAbilityFeatureGroupHint: {{ \n{BackgroundAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field131(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionTalentFeatureGroupHint: {{ \n{AscensionTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field132(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstCareerTalentFeatureGroupHint: {{ \n{AscensionFirstCareerTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field133(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionSecondCareerTalentFeatureGroupHint: {{ \n{AscensionSecondCareerTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field134(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstOrSecondCareerTalentFeatureGroupHint: {{ \n{AscensionFirstOrSecondCareerTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field135(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CommonTalentFeatureGroupHint: {{ \n{CommonTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field136(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UltimateAbilityFeatureGroupHint: {{ \n{UltimateAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field137(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveAbilityFeatureGroupHint: {{ \n{ActiveAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field138(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAttributeFeatureGroupHint: {{ \n{ChooseAttributeFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field139(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveShipUpgradeGroupHint: {{ \n{ActiveShipUpgradeGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field140(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseShipUpgradeGroupHint: {{ \n{ChooseShipUpgradeGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field141(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseSkillFeatureGroupHint: {{ \n{ChooseSkillFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field142(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAdvancedAbilityGroupHint: {{ \n{ChooseAdvancedAbilityGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field143(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveAdvancedAbilityGroupHint: {{ \n{ActiveAdvancedAbilityGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field144(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseShipActiveAbilityGroupHint: {{ \n{ChooseShipActiveAbilityGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field145(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveShipActiveAbilityGroupHint: {{ \n{ActiveShipActiveAbilityGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field146(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseShipUltimateAbilityGroupHint: {{ \n{ChooseShipUltimateAbilityGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field147(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveShipUltimateAbilityGroupHint: {{ \n{ActiveShipUltimateAbilityGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field148(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseTalentFeatureGroupHint: {{ \n{ChooseTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field149(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseUltimateAbilityFeatureGroupHint: {{ \n{ChooseUltimateAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field150(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseActiveAbilityFeatureGroupHint: {{ \n{ChooseActiveAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field151(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionFirstCareerAbilityFeatureGroupHint: {{ \n{ChooseAscensionFirstCareerAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field152(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionSecondCareerAbilityFeatureGroupHint: {{ \n{ChooseAscensionSecondCareerAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field153(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint: {{ \n{ChooseAscensionFirstOrSecondCareerAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field154(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseBackgroundAbilityFeatureGroupHint: {{ \n{ChooseBackgroundAbilityFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field155(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionTalentFeatureGroupHint: {{ \n{ChooseAscensionTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field156(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionFirstCareerTalentFeatureGroupHint: {{ \n{ChooseAscensionFirstCareerTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field157(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionSecondCareerTalentFeatureGroupHint: {{ \n{ChooseAscensionSecondCareerTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field158(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint: {{ \n{ChooseAscensionFirstOrSecondCareerTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field159(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseCommonTalentFeatureGroupHint: {{ \n{ChooseCommonTalentFeatureGroupHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field160(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KeystoneFeaturesChargenDescription: {{ \n{KeystoneFeaturesChargenDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field161(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UltimateAbilitiesChargenDescription: {{ \n{UltimateAbilitiesChargenDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field162(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PredefinedAbilitiesChargenDescription: {{ \n{PredefinedAbilitiesChargenDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field163(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveAbilitiesLabel: {{ \n{ActiveAbilitiesLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field164(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PassiveAbilitiesLabel: {{ \n{PassiveAbilitiesLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field165(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoAbilitiesLabel: {{ \n{NoAbilitiesLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field166(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionPanelLabel: {{ \n{ActionPanelLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field167(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Chaos: {{ \n{Chaos.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field168(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Human: {{ \n{Human.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field169(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Xenos: {{ \n{Xenos.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field170(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstCareerAbilityFeatureGroupDescription: {{ \n{AscensionFirstCareerAbilityFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field171(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionSecondCareerAbilityFeatureGroupDescription: {{ \n{AscensionSecondCareerAbilityFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field172(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstOrSecondCareerAbilityFeatureGroupDescription: {{ \n{AscensionFirstOrSecondCareerAbilityFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field173(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstCareerTalentFeatureGroupDescription: {{ \n{AscensionFirstCareerTalentFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field174(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionSecondCareerTalentFeatureGroupDescription: {{ \n{AscensionSecondCareerTalentFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field175(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionFirstOrSecondCareerTalentFeatureGroupDescription: {{ \n{AscensionFirstOrSecondCareerTalentFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field176(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription: {{ \n{AscensionMissingOnlySecondCareerAbilityFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field177(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AscensionMissingOnlySecondCareerTalentFeatureGroupDescription: {{ \n{AscensionMissingOnlySecondCareerTalentFeatureGroupDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field178(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsTitle: {{ \n{VisualSettingsTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field179(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsShowHelmet: {{ \n{VisualSettingsShowHelmet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field180(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsShowHelmetAboveAll: {{ \n{VisualSettingsShowHelmetAboveAll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field181(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsShowBackpack: {{ \n{VisualSettingsShowBackpack.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field182(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsShowCloth: {{ \n{VisualSettingsShowCloth.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field183(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsEnableClothes: {{ \n{VisualSettingsEnableClothes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field184(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisualSettingsDisabledForCharacter: {{ \n{VisualSettingsDisabledForCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field185(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AvailableRanksHint: {{ \n{AvailableRanksHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field186(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoneHint: {{ \n{NoneHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field187(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RecommendedFilterHint: {{ \n{RecommendedFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field188(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FavoritesFilterHint: {{ \n{FavoritesFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field189(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffenseFilterHint: {{ \n{OffenseFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field190(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DefenseFilterHint: {{ \n{DefenseFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field191(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SupportFilterHint: {{ \n{SupportFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field192(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UniversalFilterHint: {{ \n{UniversalFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field193(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArchetypeFilterHint: {{ \n{ArchetypeFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field194(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OriginFilterHint: {{ \n{OriginFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field195(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WarpFilterHint: {{ \n{WarpFilterHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field196(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowUnavailableFeaturesHint: {{ \n{ShowUnavailableFeaturesHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field197(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideUnavailableFeaturesHint: {{ \n{HideUnavailableFeaturesHint.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextInventory (16 fields) */
public record class UITextInventory (
    LocalizedString FilterTextAll,
    LocalizedString FilterTextWeapon,
    LocalizedString FilterTextArmor,
    LocalizedString FilterTextAcessories,
    LocalizedString FilterTextUsable,
    LocalizedString FilterTextNotable,
    LocalizedString FilterTextShipItem,
    LocalizedString FilterTextOther,
    LocalizedString OneHandWeapon,
    LocalizedString TwoHandWeapon,
    LocalizedString RangedWeapon,
    LocalizedString MeleeWeapon,
    LocalizedString ShowUnavailableItems,
    LocalizedString ChooseItem,
    LocalizedString ToggleStats,
    LocalizedString ChangeWeaponSet) : IUnityStructure
{
    public static UITextInventory Read(EndianBinaryReader reader)
    {
        LocalizedString FilterTextAll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextAll */
        LocalizedString FilterTextWeapon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextWeapon */
        LocalizedString FilterTextArmor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextArmor */
        LocalizedString FilterTextAcessories_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextAcessories */
        LocalizedString FilterTextUsable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextUsable */
        LocalizedString FilterTextNotable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextNotable */
        LocalizedString FilterTextShipItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextShipItem */
        LocalizedString FilterTextOther_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FilterTextOther */
        LocalizedString OneHandWeapon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneHandWeapon */
        LocalizedString TwoHandWeapon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoHandWeapon */
        LocalizedString RangedWeapon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RangedWeapon */
        LocalizedString MeleeWeapon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MeleeWeapon */
        LocalizedString ShowUnavailableItems_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowUnavailableItems */
        LocalizedString ChooseItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseItem */
        LocalizedString ToggleStats_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToggleStats */
        LocalizedString ChangeWeaponSet_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeWeaponSet */
        
        return new(FilterTextAll_,
            FilterTextWeapon_,
            FilterTextArmor_,
            FilterTextAcessories_,
            FilterTextUsable_,
            FilterTextNotable_,
            FilterTextShipItem_,
            FilterTextOther_,
            OneHandWeapon_,
            TwoHandWeapon_,
            RangedWeapon_,
            MeleeWeapon_,
            ShowUnavailableItems_,
            ChooseItem_,
            ToggleStats_,
            ChangeWeaponSet_);
    }

    public override string ToString() => $"UITextInventory\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextAll: {{ \n{FilterTextAll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextWeapon: {{ \n{FilterTextWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextArmor: {{ \n{FilterTextArmor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextAcessories: {{ \n{FilterTextAcessories.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextUsable: {{ \n{FilterTextUsable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextNotable: {{ \n{FilterTextNotable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextShipItem: {{ \n{FilterTextShipItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FilterTextOther: {{ \n{FilterTextOther.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OneHandWeapon: {{ \n{OneHandWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TwoHandWeapon: {{ \n{TwoHandWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RangedWeapon: {{ \n{RangedWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeWeapon: {{ \n{MeleeWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowUnavailableItems: {{ \n{ShowUnavailableItems.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseItem: {{ \n{ChooseItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToggleStats: {{ \n{ToggleStats.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeWeaponSet: {{ \n{ChangeWeaponSet.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextGlobalMap (28 fields) */
public record class UITextGlobalMap (
    LocalizedString Planets,
    LocalizedString SystemColonized,
    LocalizedString HasEnemiesInSystem,
    LocalizedString AsteroidsFieldDetected,
    LocalizedString VisitSystemHint,
    LocalizedString UnknownSystem,
    LocalizedString ScanForRoutes,
    LocalizedString SetCameraOnVoidship,
    LocalizedString SetCameraOnVoidshipWithShipName,
    LocalizedString AllSystems,
    LocalizedString SystemInfo,
    LocalizedString ShowResources,
    LocalizedString CloseResources,
    LocalizedString ChangeWindow,
    LocalizedString KnownStarSystems,
    LocalizedString WithinRumourRange,
    LocalizedString CreateWay,
    LocalizedString NoResource,
    LocalizedString Route,
    LocalizedString Travel,
    LocalizedString TravelToWithRoute,
    LocalizedString TravelToFakeSystem,
    LocalizedString UpgradeWayCost,
    LocalizedString UpgradeWayToSafeCost,
    LocalizedString DifficultyPassageHint,
    LocalizedString TapToUpgrade,
    LocalizedString Scan,
    LocalizedString UpgradeRoute) : IUnityStructure
{
    public static UITextGlobalMap Read(EndianBinaryReader reader)
    {
        LocalizedString Planets_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Planets */
        LocalizedString SystemColonized_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SystemColonized */
        LocalizedString HasEnemiesInSystem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasEnemiesInSystem */
        LocalizedString AsteroidsFieldDetected_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AsteroidsFieldDetected */
        LocalizedString VisitSystemHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VisitSystemHint */
        LocalizedString UnknownSystem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnknownSystem */
        LocalizedString ScanForRoutes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScanForRoutes */
        LocalizedString SetCameraOnVoidship_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetCameraOnVoidship */
        LocalizedString SetCameraOnVoidshipWithShipName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetCameraOnVoidshipWithShipName */
        LocalizedString AllSystems_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllSystems */
        LocalizedString SystemInfo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SystemInfo */
        LocalizedString ShowResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowResources */
        LocalizedString CloseResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseResources */
        LocalizedString ChangeWindow_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeWindow */
        LocalizedString KnownStarSystems_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KnownStarSystems */
        LocalizedString WithinRumourRange_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WithinRumourRange */
        LocalizedString CreateWay_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateWay */
        LocalizedString NoResource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoResource */
        LocalizedString Route_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Route */
        LocalizedString Travel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Travel */
        LocalizedString TravelToWithRoute_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TravelToWithRoute */
        LocalizedString TravelToFakeSystem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TravelToFakeSystem */
        LocalizedString UpgradeWayCost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeWayCost */
        LocalizedString UpgradeWayToSafeCost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeWayToSafeCost */
        LocalizedString DifficultyPassageHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyPassageHint */
        LocalizedString TapToUpgrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TapToUpgrade */
        LocalizedString Scan_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Scan */
        LocalizedString UpgradeRoute_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeRoute */
        
        return new(Planets_,
            SystemColonized_,
            HasEnemiesInSystem_,
            AsteroidsFieldDetected_,
            VisitSystemHint_,
            UnknownSystem_,
            ScanForRoutes_,
            SetCameraOnVoidship_,
            SetCameraOnVoidshipWithShipName_,
            AllSystems_,
            SystemInfo_,
            ShowResources_,
            CloseResources_,
            ChangeWindow_,
            KnownStarSystems_,
            WithinRumourRange_,
            CreateWay_,
            NoResource_,
            Route_,
            Travel_,
            TravelToWithRoute_,
            TravelToFakeSystem_,
            UpgradeWayCost_,
            UpgradeWayToSafeCost_,
            DifficultyPassageHint_,
            TapToUpgrade_,
            Scan_,
            UpgradeRoute_);
    }

    public override string ToString() => $"UITextGlobalMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Planets: {{ \n{Planets.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SystemColonized: {{ \n{SystemColonized.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HasEnemiesInSystem: {{ \n{HasEnemiesInSystem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AsteroidsFieldDetected: {{ \n{AsteroidsFieldDetected.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VisitSystemHint: {{ \n{VisitSystemHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnknownSystem: {{ \n{UnknownSystem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScanForRoutes: {{ \n{ScanForRoutes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SetCameraOnVoidship: {{ \n{SetCameraOnVoidship.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SetCameraOnVoidshipWithShipName: {{ \n{SetCameraOnVoidshipWithShipName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AllSystems: {{ \n{AllSystems.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SystemInfo: {{ \n{SystemInfo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowResources: {{ \n{ShowResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CloseResources: {{ \n{CloseResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeWindow: {{ \n{ChangeWindow.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KnownStarSystems: {{ \n{KnownStarSystems.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WithinRumourRange: {{ \n{WithinRumourRange.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateWay: {{ \n{CreateWay.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoResource: {{ \n{NoResource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Route: {{ \n{Route.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Travel: {{ \n{Travel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TravelToWithRoute: {{ \n{TravelToWithRoute.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TravelToFakeSystem: {{ \n{TravelToFakeSystem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeWayCost: {{ \n{UpgradeWayCost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeWayToSafeCost: {{ \n{UpgradeWayToSafeCost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DifficultyPassageHint: {{ \n{DifficultyPassageHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TapToUpgrade: {{ \n{TapToUpgrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Scan: {{ \n{Scan.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeRoute: {{ \n{UpgradeRoute.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextSystemMap (11 fields) */
public record class UITextSystemMap (
    LocalizedString ScanRequired,
    LocalizedString PlanetColonized,
    LocalizedString PlanetNotColonized,
    LocalizedString PoIsDetected,
    LocalizedString RepairHull,
    LocalizedString RepairHullSimple,
    LocalizedString RepairHullDescription,
    LocalizedString ShipHpIsFull,
    LocalizedString YouNeedMoreScrap,
    LocalizedString ShipIsRepaired,
    LocalizedString PercentExplored) : IUnityStructure
{
    public static UITextSystemMap Read(EndianBinaryReader reader)
    {
        LocalizedString ScanRequired_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScanRequired */
        LocalizedString PlanetColonized_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlanetColonized */
        LocalizedString PlanetNotColonized_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlanetNotColonized */
        LocalizedString PoIsDetected_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PoIsDetected */
        LocalizedString RepairHull_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairHull */
        LocalizedString RepairHullSimple_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairHullSimple */
        LocalizedString RepairHullDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairHullDescription */
        LocalizedString ShipHpIsFull_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipHpIsFull */
        LocalizedString YouNeedMoreScrap_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouNeedMoreScrap */
        LocalizedString ShipIsRepaired_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipIsRepaired */
        LocalizedString PercentExplored_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PercentExplored */
        
        return new(ScanRequired_,
            PlanetColonized_,
            PlanetNotColonized_,
            PoIsDetected_,
            RepairHull_,
            RepairHullSimple_,
            RepairHullDescription_,
            ShipHpIsFull_,
            YouNeedMoreScrap_,
            ShipIsRepaired_,
            PercentExplored_);
    }

    public override string ToString() => $"UITextSystemMap\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScanRequired: {{ \n{ScanRequired.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlanetColonized: {{ \n{PlanetColonized.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlanetNotColonized: {{ \n{PlanetNotColonized.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PoIsDetected: {{ \n{PoIsDetected.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RepairHull: {{ \n{RepairHull.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RepairHullSimple: {{ \n{RepairHullSimple.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RepairHullDescription: {{ \n{RepairHullDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipHpIsFull: {{ \n{ShipHpIsFull.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouNeedMoreScrap: {{ \n{YouNeedMoreScrap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipIsRepaired: {{ \n{ShipIsRepaired.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PercentExplored: {{ \n{PercentExplored.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextGlobalMapPassages (4 fields) */
public record class UITextGlobalMapPassages (
    LocalizedString Safe,
    LocalizedString Unsafe,
    LocalizedString Dangerous,
    LocalizedString Deadly) : IUnityStructure
{
    public static UITextGlobalMapPassages Read(EndianBinaryReader reader)
    {
        LocalizedString Safe_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Safe */
        LocalizedString Unsafe_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Unsafe */
        LocalizedString Dangerous_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dangerous */
        LocalizedString Deadly_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Deadly */
        
        return new(Safe_,
            Unsafe_,
            Dangerous_,
            Deadly_);
    }

    public override string ToString() => $"UITextGlobalMapPassages\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Safe: {{ \n{Safe.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unsafe: {{ \n{Unsafe.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dangerous: {{ \n{Dangerous.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Deadly: {{ \n{Deadly.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextBookEvent (7 fields) */
public record class UITextBookEvent (
    LocalizedString BookEventAllreadyVisited,
    LocalizedString BookEventArchive,
    LocalizedString BookEventOpenHistory,
    LocalizedString BookEventCloseHistory,
    LocalizedString BookEventHistoryBack,
    LocalizedString BookEventHistoryForward,
    LocalizedString BookEventHistoryRecord) : IUnityStructure
{
    public static UITextBookEvent Read(EndianBinaryReader reader)
    {
        LocalizedString BookEventAllreadyVisited_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventAllreadyVisited */
        LocalizedString BookEventArchive_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventArchive */
        LocalizedString BookEventOpenHistory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventOpenHistory */
        LocalizedString BookEventCloseHistory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventCloseHistory */
        LocalizedString BookEventHistoryBack_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventHistoryBack */
        LocalizedString BookEventHistoryForward_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventHistoryForward */
        LocalizedString BookEventHistoryRecord_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventHistoryRecord */
        
        return new(BookEventAllreadyVisited_,
            BookEventArchive_,
            BookEventOpenHistory_,
            BookEventCloseHistory_,
            BookEventHistoryBack_,
            BookEventHistoryForward_,
            BookEventHistoryRecord_);
    }

    public override string ToString() => $"UITextBookEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventAllreadyVisited: {{ \n{BookEventAllreadyVisited.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventArchive: {{ \n{BookEventArchive.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventOpenHistory: {{ \n{BookEventOpenHistory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventCloseHistory: {{ \n{BookEventCloseHistory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventHistoryBack: {{ \n{BookEventHistoryBack.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventHistoryForward: {{ \n{BookEventHistoryForward.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventHistoryRecord: {{ \n{BookEventHistoryRecord.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextAlignment (16 fields) */
public record class UITextAlignment (
    LocalizedString Imperialis,
    LocalizedString Benevolentia,
    LocalizedString Hereticus,
    LocalizedString Reason,
    LocalizedString SoulMarkRankTierNone,
    LocalizedString SoulMarkRankTier1,
    LocalizedString SoulMarkRankTier2,
    LocalizedString SoulMarkRankTier3,
    LocalizedString SoulMarkRankTier4,
    LocalizedString SoulMarkRankTier5,
    LocalizedString RadicalTitle,
    LocalizedString RadicalDescription,
    LocalizedString PuritanTitle,
    LocalizedString PuritanDescription,
    LocalizedString CurrentConvictionTitle,
    LocalizedString CurrentConvictionDescription) : IUnityStructure
{
    public static UITextAlignment Read(EndianBinaryReader reader)
    {
        LocalizedString Imperialis_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Imperialis */
        LocalizedString Benevolentia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Benevolentia */
        LocalizedString Hereticus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Hereticus */
        LocalizedString Reason_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Reason */
        LocalizedString SoulMarkRankTierNone_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTierNone */
        LocalizedString SoulMarkRankTier1_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier1 */
        LocalizedString SoulMarkRankTier2_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier2 */
        LocalizedString SoulMarkRankTier3_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier3 */
        LocalizedString SoulMarkRankTier4_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier4 */
        LocalizedString SoulMarkRankTier5_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankTier5 */
        LocalizedString RadicalTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RadicalTitle */
        LocalizedString RadicalDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RadicalDescription */
        LocalizedString PuritanTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PuritanTitle */
        LocalizedString PuritanDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PuritanDescription */
        LocalizedString CurrentConvictionTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentConvictionTitle */
        LocalizedString CurrentConvictionDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentConvictionDescription */
        
        return new(Imperialis_,
            Benevolentia_,
            Hereticus_,
            Reason_,
            SoulMarkRankTierNone_,
            SoulMarkRankTier1_,
            SoulMarkRankTier2_,
            SoulMarkRankTier3_,
            SoulMarkRankTier4_,
            SoulMarkRankTier5_,
            RadicalTitle_,
            RadicalDescription_,
            PuritanTitle_,
            PuritanDescription_,
            CurrentConvictionTitle_,
            CurrentConvictionDescription_);
    }

    public override string ToString() => $"UITextAlignment\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Imperialis: {{ \n{Imperialis.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Benevolentia: {{ \n{Benevolentia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Hereticus: {{ \n{Hereticus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Reason: {{ \n{Reason.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankTierNone: {{ \n{SoulMarkRankTierNone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankTier1: {{ \n{SoulMarkRankTier1.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankTier2: {{ \n{SoulMarkRankTier2.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankTier3: {{ \n{SoulMarkRankTier3.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankTier4: {{ \n{SoulMarkRankTier4.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankTier5: {{ \n{SoulMarkRankTier5.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RadicalTitle: {{ \n{RadicalTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RadicalDescription: {{ \n{RadicalDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PuritanTitle: {{ \n{PuritanTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PuritanDescription: {{ \n{PuritanDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentConvictionTitle: {{ \n{CurrentConvictionTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentConvictionDescription: {{ \n{CurrentConvictionDescription.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextActionBar (13 fields) */
public record class UITextActionBar (
    LocalizedString ActionBarConvertWeapons,
    LocalizedString ActionPoints,
    LocalizedString MovementPoints,
    LocalizedString VailHeader,
    LocalizedString VailFooter,
    LocalizedString BrokenVeil,
    LocalizedString VailCurrentState,
    LocalizedString StatesOfVail,
    LocalizedString VailStates,
    LocalizedString MomentumHeader,
    LocalizedString MomentumDescription,
    LocalizedString AnotherPlayerTurn,
    LocalizedString AnotherPlayerTurnWithNickname) : IUnityStructure
{
    public static UITextActionBar Read(EndianBinaryReader reader)
    {
        LocalizedString ActionBarConvertWeapons_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActionBarConvertWeapons */
        LocalizedString ActionPoints_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActionPoints */
        LocalizedString MovementPoints_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MovementPoints */
        LocalizedString VailHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailHeader */
        LocalizedString VailFooter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailFooter */
        LocalizedString BrokenVeil_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BrokenVeil */
        LocalizedString VailCurrentState_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailCurrentState */
        LocalizedString StatesOfVail_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatesOfVail */
        LocalizedString VailStates_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VailStates */
        LocalizedString MomentumHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumHeader */
        LocalizedString MomentumDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumDescription */
        LocalizedString AnotherPlayerTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnotherPlayerTurn */
        LocalizedString AnotherPlayerTurnWithNickname_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnotherPlayerTurnWithNickname */
        
        return new(ActionBarConvertWeapons_,
            ActionPoints_,
            MovementPoints_,
            VailHeader_,
            VailFooter_,
            BrokenVeil_,
            VailCurrentState_,
            StatesOfVail_,
            VailStates_,
            MomentumHeader_,
            MomentumDescription_,
            AnotherPlayerTurn_,
            AnotherPlayerTurnWithNickname_);
    }

    public override string ToString() => $"UITextActionBar\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionBarConvertWeapons: {{ \n{ActionBarConvertWeapons.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActionPoints: {{ \n{ActionPoints.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MovementPoints: {{ \n{MovementPoints.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VailHeader: {{ \n{VailHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VailFooter: {{ \n{VailFooter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BrokenVeil: {{ \n{BrokenVeil.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VailCurrentState: {{ \n{VailCurrentState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatesOfVail: {{ \n{StatesOfVail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VailStates: {{ \n{VailStates.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumHeader: {{ \n{MomentumHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumDescription: {{ \n{MomentumDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnotherPlayerTurn: {{ \n{AnotherPlayerTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnotherPlayerTurnWithNickname: {{ \n{AnotherPlayerTurnWithNickname.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UICommonTexts (38 fields) */
public record class UICommonTexts (
    LocalizedString PunctuationTest,
    LocalizedString AllSymbolsTest,
    LocalizedString PermanentBuffTimer,
    LocalizedString BuffStacks,
    LocalizedString WarningBugReportWasSend,
    LocalizedString ReportButton,
    LocalizedString GameStatisticEnabledDialogue,
    LocalizedString QuitToDesctopLabel,
    LocalizedString QuitToMainMenuLabel,
    LocalizedString ProgressWillBeLost,
    LocalizedString DropItemFromGlobalMap,
    LocalizedString Ft,
    LocalizedString Accept,
    LocalizedString Cancel,
    LocalizedString Select,
    LocalizedString Pause,
    LocalizedString Unpause,
    LocalizedString Back,
    LocalizedString Information,
    LocalizedString Warning,
    LocalizedString CloseWindow,
    LocalizedString Collapse,
    LocalizedString Expand,
    LocalizedString Skip,
    LocalizedString SkipHold,
    LocalizedString PressAnyKey,
    LocalizedString PressAnyKeyConsole,
    LocalizedString WaitingOtherPlayer,
    LocalizedString Menu,
    LocalizedString Search,
    LocalizedString Cursor,
    LocalizedString Increase,
    LocalizedString Decrease,
    LocalizedString HoldGamepadButton,
    LocalizedString ThisActionCantBeCanceled,
    LocalizedString AreYouSure,
    LocalizedString UIVisibility,
    LocalizedString DontAskAgain) : IUnityStructure
{
    public static UICommonTexts Read(EndianBinaryReader reader)
    {
        LocalizedString PunctuationTest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PunctuationTest */
        LocalizedString AllSymbolsTest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllSymbolsTest */
        LocalizedString PermanentBuffTimer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PermanentBuffTimer */
        LocalizedString BuffStacks_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuffStacks */
        LocalizedString WarningBugReportWasSend_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarningBugReportWasSend */
        LocalizedString ReportButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReportButton */
        LocalizedString GameStatisticEnabledDialogue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GameStatisticEnabledDialogue */
        LocalizedString QuitToDesctopLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuitToDesctopLabel */
        LocalizedString QuitToMainMenuLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuitToMainMenuLabel */
        LocalizedString ProgressWillBeLost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProgressWillBeLost */
        LocalizedString DropItemFromGlobalMap_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DropItemFromGlobalMap */
        LocalizedString Ft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ft */
        LocalizedString Accept_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Accept */
        LocalizedString Cancel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cancel */
        LocalizedString Select_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Select */
        LocalizedString Pause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pause */
        LocalizedString Unpause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Unpause */
        LocalizedString Back_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Back */
        LocalizedString Information_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Information */
        LocalizedString Warning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Warning */
        LocalizedString CloseWindow_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseWindow */
        LocalizedString Collapse_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Collapse */
        LocalizedString Expand_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Expand */
        LocalizedString Skip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Skip */
        LocalizedString SkipHold_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkipHold */
        LocalizedString PressAnyKey_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PressAnyKey */
        LocalizedString PressAnyKeyConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PressAnyKeyConsole */
        LocalizedString WaitingOtherPlayer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WaitingOtherPlayer */
        LocalizedString Menu_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Menu */
        LocalizedString Search_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Search */
        LocalizedString Cursor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cursor */
        LocalizedString Increase_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Increase */
        LocalizedString Decrease_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Decrease */
        LocalizedString HoldGamepadButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HoldGamepadButton */
        LocalizedString ThisActionCantBeCanceled_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThisActionCantBeCanceled */
        LocalizedString AreYouSure_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSure */
        LocalizedString UIVisibility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UIVisibility */
        LocalizedString DontAskAgain_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DontAskAgain */
        
        return new(PunctuationTest_,
            AllSymbolsTest_,
            PermanentBuffTimer_,
            BuffStacks_,
            WarningBugReportWasSend_,
            ReportButton_,
            GameStatisticEnabledDialogue_,
            QuitToDesctopLabel_,
            QuitToMainMenuLabel_,
            ProgressWillBeLost_,
            DropItemFromGlobalMap_,
            Ft_,
            Accept_,
            Cancel_,
            Select_,
            Pause_,
            Unpause_,
            Back_,
            Information_,
            Warning_,
            CloseWindow_,
            Collapse_,
            Expand_,
            Skip_,
            SkipHold_,
            PressAnyKey_,
            PressAnyKeyConsole_,
            WaitingOtherPlayer_,
            Menu_,
            Search_,
            Cursor_,
            Increase_,
            Decrease_,
            HoldGamepadButton_,
            ThisActionCantBeCanceled_,
            AreYouSure_,
            UIVisibility_,
            DontAskAgain_);
    }

    public override string ToString() => $"UICommonTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PunctuationTest: {{ \n{PunctuationTest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AllSymbolsTest: {{ \n{AllSymbolsTest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PermanentBuffTimer: {{ \n{PermanentBuffTimer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BuffStacks: {{ \n{BuffStacks.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WarningBugReportWasSend: {{ \n{WarningBugReportWasSend.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ReportButton: {{ \n{ReportButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GameStatisticEnabledDialogue: {{ \n{GameStatisticEnabledDialogue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuitToDesctopLabel: {{ \n{QuitToDesctopLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuitToMainMenuLabel: {{ \n{QuitToMainMenuLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProgressWillBeLost: {{ \n{ProgressWillBeLost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DropItemFromGlobalMap: {{ \n{DropItemFromGlobalMap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ft: {{ \n{Ft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Accept: {{ \n{Accept.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cancel: {{ \n{Cancel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Select: {{ \n{Select.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pause: {{ \n{Pause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unpause: {{ \n{Unpause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Back: {{ \n{Back.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Information: {{ \n{Information.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Warning: {{ \n{Warning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CloseWindow: {{ \n{CloseWindow.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Collapse: {{ \n{Collapse.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Expand: {{ \n{Expand.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Skip: {{ \n{Skip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkipHold: {{ \n{SkipHold.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PressAnyKey: {{ \n{PressAnyKey.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PressAnyKeyConsole: {{ \n{PressAnyKeyConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WaitingOtherPlayer: {{ \n{WaitingOtherPlayer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Menu: {{ \n{Menu.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Search: {{ \n{Search.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cursor: {{ \n{Cursor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Increase: {{ \n{Increase.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Decrease: {{ \n{Decrease.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HoldGamepadButton: {{ \n{HoldGamepadButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ThisActionCantBeCanceled: {{ \n{ThisActionCantBeCanceled.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSure: {{ \n{AreYouSure.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UIVisibility: {{ \n{UIVisibility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DontAskAgain: {{ \n{DontAskAgain.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIPartySelectorTexts (4 fields) */
public record class UIPartySelectorTexts (
    LocalizedString Link,
    LocalizedString Unlink,
    LocalizedString LinkAll,
    LocalizedString UnlinkAll) : IUnityStructure
{
    public static UIPartySelectorTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Link_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Link */
        LocalizedString Unlink_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Unlink */
        LocalizedString LinkAll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LinkAll */
        LocalizedString UnlinkAll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnlinkAll */
        
        return new(Link_,
            Unlink_,
            LinkAll_,
            UnlinkAll_);
    }

    public override string ToString() => $"UIPartySelectorTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Link: {{ \n{Link.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Unlink: {{ \n{Unlink.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinkAll: {{ \n{LinkAll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnlinkAll: {{ \n{UnlinkAll.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UINetLobbyTexts (68 fields) */
public record class UINetLobbyTexts (
    LocalizedString NetHeader,
    LocalizedString ConnectingLabel,
    LocalizedString CreateLobby,
    LocalizedString JoinLobby,
    LocalizedString JoinLobbyCodePlaceholder,
    LocalizedString RegionHeader,
    LocalizedString DisconnectLobby,
    LocalizedString CopyLobbyId,
    LocalizedString CopyLobbyIdHint,
    LocalizedString PasteLobbyId,
    LocalizedString Launch,
    LocalizedString Reconnect,
    LocalizedString ChooseSaveHeader,
    LocalizedString ChooseSaveHint,
    LocalizedString WillShowNotAllSavesBecauseOfDlc,
    LocalizedString LaunchInGameHint,
    LocalizedString DesyncWasDetected,
    LocalizedString LeaveLobbyMessageBox,
    LocalizedString InviteLobbyMessageBox,
    LocalizedString LastPlayerLeftLobbyMessageBox,
    LocalizedString NewPlayerJoinToActiveLobby,
    LocalizedString NewPlayerJoinToLobby,
    LocalizedString PlayerLeftRoomWarning,
    LocalizedString KickMessage,
    LocalizedString KickPlayerMessage,
    LocalizedString WarningPlayerIsNotControlMainCharacter,
    LocalizedString HowToPingCoopLabelPc,
    LocalizedString HowToPingCoopLabelConsole,
    LocalizedString CoopVer,
    LocalizedString CoopVerTooltip,
    LocalizedString CoopRegionTooltip,
    LocalizedString CoopLobbyCodeTooltip,
    LocalizedString ShowLobbyCode,
    LocalizedString HideLobbyCode,
    LocalizedString InvitePlayer,
    LocalizedString InviteEpicGamesPlayer,
    LocalizedString KickPlayer,
    LocalizedString SelectPlayers,
    LocalizedString UnselectPlayers,
    LocalizedString SelectRegion,
    LocalizedString HowToPlay,
    LocalizedString NeedSameRegionAndCoopVer,
    LocalizedString IsNotEnoughPlayersForGame,
    LocalizedString ImpossibleToStartCoopGameInThisMoment,
    LocalizedString NotAvailableInCoopMode,
    LocalizedString ResetCurrentSave,
    LocalizedString SignInToEpicGamesStore,
    LocalizedString CanBeAProblemsWithMods,
    LocalizedString NeedSaveForStartGame,
    LocalizedString StoreOverlayIsNotAvailable,
    LocalizedString PlayerHasNoDlcs,
    LocalizedString YouAreTheHostNow,
    LocalizedString BlockedPlayerInLobby,
    LocalizedString CantJoinLobbyDuePrivacySettings,
    LocalizedString ShowPlayerInformation,
    LocalizedString ShowGamerCard,
    LocalizedString DlcList,
    LocalizedString HostsDlcList,
    LocalizedString HostHasNoDlc,
    LocalizedString CantChooseAnySavesBecauseOfDlc,
    LocalizedString DlcSharedByHost,
    LocalizedString JoinableUserTypesLabel,
    LocalizedString InvitableUserTypesLabel,
    LocalizedString UserTypeDropdownNoOne,
    LocalizedString UserTypeDropdownAnyone,
    LocalizedString UserTypeDropdownFriends,
    LocalizedString UserTypeDropdownFriendsOfFriends,
    LocalizedString UserTypeDropdownLeader) : IUnityStructure
{
    public static UINetLobbyTexts Read(EndianBinaryReader reader)
    {
        LocalizedString NetHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NetHeader */
        LocalizedString ConnectingLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConnectingLabel */
        LocalizedString CreateLobby_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateLobby */
        LocalizedString JoinLobby_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinLobby */
        LocalizedString JoinLobbyCodePlaceholder_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinLobbyCodePlaceholder */
        LocalizedString RegionHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RegionHeader */
        LocalizedString DisconnectLobby_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisconnectLobby */
        LocalizedString CopyLobbyId_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CopyLobbyId */
        LocalizedString CopyLobbyIdHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CopyLobbyIdHint */
        LocalizedString PasteLobbyId_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PasteLobbyId */
        LocalizedString Launch_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Launch */
        LocalizedString Reconnect_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Reconnect */
        LocalizedString ChooseSaveHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseSaveHeader */
        LocalizedString ChooseSaveHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseSaveHint */
        LocalizedString WillShowNotAllSavesBecauseOfDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WillShowNotAllSavesBecauseOfDlc */
        LocalizedString LaunchInGameHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LaunchInGameHint */
        LocalizedString DesyncWasDetected_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DesyncWasDetected */
        LocalizedString LeaveLobbyMessageBox_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LeaveLobbyMessageBox */
        LocalizedString InviteLobbyMessageBox_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InviteLobbyMessageBox */
        LocalizedString LastPlayerLeftLobbyMessageBox_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LastPlayerLeftLobbyMessageBox */
        LocalizedString NewPlayerJoinToActiveLobby_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewPlayerJoinToActiveLobby */
        LocalizedString NewPlayerJoinToLobby_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewPlayerJoinToLobby */
        LocalizedString PlayerLeftRoomWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayerLeftRoomWarning */
        LocalizedString KickMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KickMessage */
        LocalizedString KickPlayerMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KickPlayerMessage */
        LocalizedString WarningPlayerIsNotControlMainCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarningPlayerIsNotControlMainCharacter */
        LocalizedString HowToPingCoopLabelPc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HowToPingCoopLabelPc */
        LocalizedString HowToPingCoopLabelConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HowToPingCoopLabelConsole */
        LocalizedString CoopVer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopVer */
        LocalizedString CoopVerTooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopVerTooltip */
        LocalizedString CoopRegionTooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopRegionTooltip */
        LocalizedString CoopLobbyCodeTooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopLobbyCodeTooltip */
        LocalizedString ShowLobbyCode_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowLobbyCode */
        LocalizedString HideLobbyCode_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideLobbyCode */
        LocalizedString InvitePlayer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InvitePlayer */
        LocalizedString InviteEpicGamesPlayer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InviteEpicGamesPlayer */
        LocalizedString KickPlayer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KickPlayer */
        LocalizedString SelectPlayers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectPlayers */
        LocalizedString UnselectPlayers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnselectPlayers */
        LocalizedString SelectRegion_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectRegion */
        LocalizedString HowToPlay_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HowToPlay */
        LocalizedString NeedSameRegionAndCoopVer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedSameRegionAndCoopVer */
        LocalizedString IsNotEnoughPlayersForGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IsNotEnoughPlayersForGame */
        LocalizedString ImpossibleToStartCoopGameInThisMoment_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ImpossibleToStartCoopGameInThisMoment */
        LocalizedString NotAvailableInCoopMode_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotAvailableInCoopMode */
        LocalizedString ResetCurrentSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetCurrentSave */
        LocalizedString SignInToEpicGamesStore_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SignInToEpicGamesStore */
        LocalizedString CanBeAProblemsWithMods_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanBeAProblemsWithMods */
        LocalizedString NeedSaveForStartGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedSaveForStartGame */
        LocalizedString StoreOverlayIsNotAvailable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StoreOverlayIsNotAvailable */
        LocalizedString PlayerHasNoDlcs_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayerHasNoDlcs */
        LocalizedString YouAreTheHostNow_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouAreTheHostNow */
        LocalizedString BlockedPlayerInLobby_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BlockedPlayerInLobby */
        LocalizedString CantJoinLobbyDuePrivacySettings_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantJoinLobbyDuePrivacySettings */
        LocalizedString ShowPlayerInformation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowPlayerInformation */
        LocalizedString ShowGamerCard_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowGamerCard */
        LocalizedString DlcList_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcList */
        LocalizedString HostsDlcList_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HostsDlcList */
        LocalizedString HostHasNoDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HostHasNoDlc */
        LocalizedString CantChooseAnySavesBecauseOfDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantChooseAnySavesBecauseOfDlc */
        LocalizedString DlcSharedByHost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcSharedByHost */
        LocalizedString JoinableUserTypesLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinableUserTypesLabel */
        LocalizedString InvitableUserTypesLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InvitableUserTypesLabel */
        LocalizedString UserTypeDropdownNoOne_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UserTypeDropdownNoOne */
        LocalizedString UserTypeDropdownAnyone_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UserTypeDropdownAnyone */
        LocalizedString UserTypeDropdownFriends_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UserTypeDropdownFriends */
        LocalizedString UserTypeDropdownFriendsOfFriends_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UserTypeDropdownFriendsOfFriends */
        LocalizedString UserTypeDropdownLeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UserTypeDropdownLeader */
        
        return new(NetHeader_,
            ConnectingLabel_,
            CreateLobby_,
            JoinLobby_,
            JoinLobbyCodePlaceholder_,
            RegionHeader_,
            DisconnectLobby_,
            CopyLobbyId_,
            CopyLobbyIdHint_,
            PasteLobbyId_,
            Launch_,
            Reconnect_,
            ChooseSaveHeader_,
            ChooseSaveHint_,
            WillShowNotAllSavesBecauseOfDlc_,
            LaunchInGameHint_,
            DesyncWasDetected_,
            LeaveLobbyMessageBox_,
            InviteLobbyMessageBox_,
            LastPlayerLeftLobbyMessageBox_,
            NewPlayerJoinToActiveLobby_,
            NewPlayerJoinToLobby_,
            PlayerLeftRoomWarning_,
            KickMessage_,
            KickPlayerMessage_,
            WarningPlayerIsNotControlMainCharacter_,
            HowToPingCoopLabelPc_,
            HowToPingCoopLabelConsole_,
            CoopVer_,
            CoopVerTooltip_,
            CoopRegionTooltip_,
            CoopLobbyCodeTooltip_,
            ShowLobbyCode_,
            HideLobbyCode_,
            InvitePlayer_,
            InviteEpicGamesPlayer_,
            KickPlayer_,
            SelectPlayers_,
            UnselectPlayers_,
            SelectRegion_,
            HowToPlay_,
            NeedSameRegionAndCoopVer_,
            IsNotEnoughPlayersForGame_,
            ImpossibleToStartCoopGameInThisMoment_,
            NotAvailableInCoopMode_,
            ResetCurrentSave_,
            SignInToEpicGamesStore_,
            CanBeAProblemsWithMods_,
            NeedSaveForStartGame_,
            StoreOverlayIsNotAvailable_,
            PlayerHasNoDlcs_,
            YouAreTheHostNow_,
            BlockedPlayerInLobby_,
            CantJoinLobbyDuePrivacySettings_,
            ShowPlayerInformation_,
            ShowGamerCard_,
            DlcList_,
            HostsDlcList_,
            HostHasNoDlc_,
            CantChooseAnySavesBecauseOfDlc_,
            DlcSharedByHost_,
            JoinableUserTypesLabel_,
            InvitableUserTypesLabel_,
            UserTypeDropdownNoOne_,
            UserTypeDropdownAnyone_,
            UserTypeDropdownFriends_,
            UserTypeDropdownFriendsOfFriends_,
            UserTypeDropdownLeader_);
    }

    public override string ToString() => $"UINetLobbyTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);
        ToString_Field60(sb, indent, indent_);
        ToString_Field61(sb, indent, indent_);
        ToString_Field62(sb, indent, indent_);
        ToString_Field63(sb, indent, indent_);
        ToString_Field64(sb, indent, indent_);
        ToString_Field65(sb, indent, indent_);
        ToString_Field66(sb, indent, indent_);
        ToString_Field67(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NetHeader: {{ \n{NetHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConnectingLabel: {{ \n{ConnectingLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateLobby: {{ \n{CreateLobby.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}JoinLobby: {{ \n{JoinLobby.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}JoinLobbyCodePlaceholder: {{ \n{JoinLobbyCodePlaceholder.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RegionHeader: {{ \n{RegionHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DisconnectLobby: {{ \n{DisconnectLobby.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CopyLobbyId: {{ \n{CopyLobbyId.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CopyLobbyIdHint: {{ \n{CopyLobbyIdHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PasteLobbyId: {{ \n{PasteLobbyId.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Launch: {{ \n{Launch.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Reconnect: {{ \n{Reconnect.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseSaveHeader: {{ \n{ChooseSaveHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseSaveHint: {{ \n{ChooseSaveHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WillShowNotAllSavesBecauseOfDlc: {{ \n{WillShowNotAllSavesBecauseOfDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LaunchInGameHint: {{ \n{LaunchInGameHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DesyncWasDetected: {{ \n{DesyncWasDetected.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LeaveLobbyMessageBox: {{ \n{LeaveLobbyMessageBox.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InviteLobbyMessageBox: {{ \n{InviteLobbyMessageBox.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LastPlayerLeftLobbyMessageBox: {{ \n{LastPlayerLeftLobbyMessageBox.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewPlayerJoinToActiveLobby: {{ \n{NewPlayerJoinToActiveLobby.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewPlayerJoinToLobby: {{ \n{NewPlayerJoinToLobby.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlayerLeftRoomWarning: {{ \n{PlayerLeftRoomWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KickMessage: {{ \n{KickMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KickPlayerMessage: {{ \n{KickPlayerMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WarningPlayerIsNotControlMainCharacter: {{ \n{WarningPlayerIsNotControlMainCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HowToPingCoopLabelPc: {{ \n{HowToPingCoopLabelPc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HowToPingCoopLabelConsole: {{ \n{HowToPingCoopLabelConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoopVer: {{ \n{CoopVer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoopVerTooltip: {{ \n{CoopVerTooltip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoopRegionTooltip: {{ \n{CoopRegionTooltip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoopLobbyCodeTooltip: {{ \n{CoopLobbyCodeTooltip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowLobbyCode: {{ \n{ShowLobbyCode.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideLobbyCode: {{ \n{HideLobbyCode.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InvitePlayer: {{ \n{InvitePlayer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InviteEpicGamesPlayer: {{ \n{InviteEpicGamesPlayer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KickPlayer: {{ \n{KickPlayer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectPlayers: {{ \n{SelectPlayers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnselectPlayers: {{ \n{UnselectPlayers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectRegion: {{ \n{SelectRegion.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HowToPlay: {{ \n{HowToPlay.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedSameRegionAndCoopVer: {{ \n{NeedSameRegionAndCoopVer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IsNotEnoughPlayersForGame: {{ \n{IsNotEnoughPlayersForGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ImpossibleToStartCoopGameInThisMoment: {{ \n{ImpossibleToStartCoopGameInThisMoment.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NotAvailableInCoopMode: {{ \n{NotAvailableInCoopMode.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResetCurrentSave: {{ \n{ResetCurrentSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SignInToEpicGamesStore: {{ \n{SignInToEpicGamesStore.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CanBeAProblemsWithMods: {{ \n{CanBeAProblemsWithMods.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedSaveForStartGame: {{ \n{NeedSaveForStartGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StoreOverlayIsNotAvailable: {{ \n{StoreOverlayIsNotAvailable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlayerHasNoDlcs: {{ \n{PlayerHasNoDlcs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouAreTheHostNow: {{ \n{YouAreTheHostNow.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BlockedPlayerInLobby: {{ \n{BlockedPlayerInLobby.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantJoinLobbyDuePrivacySettings: {{ \n{CantJoinLobbyDuePrivacySettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowPlayerInformation: {{ \n{ShowPlayerInformation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowGamerCard: {{ \n{ShowGamerCard.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcList: {{ \n{DlcList.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HostsDlcList: {{ \n{HostsDlcList.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HostHasNoDlc: {{ \n{HostHasNoDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantChooseAnySavesBecauseOfDlc: {{ \n{CantChooseAnySavesBecauseOfDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field60(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcSharedByHost: {{ \n{DlcSharedByHost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field61(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}JoinableUserTypesLabel: {{ \n{JoinableUserTypesLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field62(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InvitableUserTypesLabel: {{ \n{InvitableUserTypesLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field63(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UserTypeDropdownNoOne: {{ \n{UserTypeDropdownNoOne.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field64(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UserTypeDropdownAnyone: {{ \n{UserTypeDropdownAnyone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field65(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UserTypeDropdownFriends: {{ \n{UserTypeDropdownFriends.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field66(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UserTypeDropdownFriendsOfFriends: {{ \n{UserTypeDropdownFriendsOfFriends.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field67(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UserTypeDropdownLeader: {{ \n{UserTypeDropdownLeader.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UINetRolesTexts (2 fields) */
public record class UINetRolesTexts (
    LocalizedString RolesHeader,
    LocalizedString YouHaveNoRole) : IUnityStructure
{
    public static UINetRolesTexts Read(EndianBinaryReader reader)
    {
        LocalizedString RolesHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RolesHeader */
        LocalizedString YouHaveNoRole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouHaveNoRole */
        
        return new(RolesHeader_,
            YouHaveNoRole_);
    }

    public override string ToString() => $"UINetRolesTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RolesHeader: {{ \n{RolesHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouHaveNoRole: {{ \n{YouHaveNoRole.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UINetLobbyErrorsTexts (17 fields) */
public record class UINetLobbyErrorsTexts (
    LocalizedString StoreNotInitializedErrorMessage,
    LocalizedString GetAuthDataTimeoutMessage,
    LocalizedString GetAuthDataErrorMessage,
    LocalizedString ChangeRegionErrorMessage,
    LocalizedString LobbyNotFoundErrorMessage,
    LocalizedString LobbyFullErrorMessage,
    LocalizedString JoinLobbyErrorMessage,
    LocalizedString CreatingLobbyErrorMessage,
    LocalizedString PhotonDisconnectedErrorMessage,
    LocalizedString PhotonCustomAuthenticationFailedErrorMessage,
    LocalizedString SaveSourceDisconnectedErrorMessage,
    LocalizedString SaveReceiveErrorMessage,
    LocalizedString SaveNotFoundErrorMessage,
    LocalizedString SendMessageFailErrorMessage,
    LocalizedString NoPlaystationPlusErrorMessage,
    LocalizedString UnknownExceptionMessage,
    LocalizedString PlaystationNetworkIsNotInitializedMessage) : IUnityStructure
{
    public static UINetLobbyErrorsTexts Read(EndianBinaryReader reader)
    {
        LocalizedString StoreNotInitializedErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StoreNotInitializedErrorMessage */
        LocalizedString GetAuthDataTimeoutMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GetAuthDataTimeoutMessage */
        LocalizedString GetAuthDataErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GetAuthDataErrorMessage */
        LocalizedString ChangeRegionErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeRegionErrorMessage */
        LocalizedString LobbyNotFoundErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LobbyNotFoundErrorMessage */
        LocalizedString LobbyFullErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LobbyFullErrorMessage */
        LocalizedString JoinLobbyErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* JoinLobbyErrorMessage */
        LocalizedString CreatingLobbyErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreatingLobbyErrorMessage */
        LocalizedString PhotonDisconnectedErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhotonDisconnectedErrorMessage */
        LocalizedString PhotonCustomAuthenticationFailedErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhotonCustomAuthenticationFailedErrorMessage */
        LocalizedString SaveSourceDisconnectedErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveSourceDisconnectedErrorMessage */
        LocalizedString SaveReceiveErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveReceiveErrorMessage */
        LocalizedString SaveNotFoundErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveNotFoundErrorMessage */
        LocalizedString SendMessageFailErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendMessageFailErrorMessage */
        LocalizedString NoPlaystationPlusErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoPlaystationPlusErrorMessage */
        LocalizedString UnknownExceptionMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnknownExceptionMessage */
        LocalizedString PlaystationNetworkIsNotInitializedMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlaystationNetworkIsNotInitializedMessage */
        
        return new(StoreNotInitializedErrorMessage_,
            GetAuthDataTimeoutMessage_,
            GetAuthDataErrorMessage_,
            ChangeRegionErrorMessage_,
            LobbyNotFoundErrorMessage_,
            LobbyFullErrorMessage_,
            JoinLobbyErrorMessage_,
            CreatingLobbyErrorMessage_,
            PhotonDisconnectedErrorMessage_,
            PhotonCustomAuthenticationFailedErrorMessage_,
            SaveSourceDisconnectedErrorMessage_,
            SaveReceiveErrorMessage_,
            SaveNotFoundErrorMessage_,
            SendMessageFailErrorMessage_,
            NoPlaystationPlusErrorMessage_,
            UnknownExceptionMessage_,
            PlaystationNetworkIsNotInitializedMessage_);
    }

    public override string ToString() => $"UINetLobbyErrorsTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StoreNotInitializedErrorMessage: {{ \n{StoreNotInitializedErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GetAuthDataTimeoutMessage: {{ \n{GetAuthDataTimeoutMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GetAuthDataErrorMessage: {{ \n{GetAuthDataErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeRegionErrorMessage: {{ \n{ChangeRegionErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LobbyNotFoundErrorMessage: {{ \n{LobbyNotFoundErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LobbyFullErrorMessage: {{ \n{LobbyFullErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}JoinLobbyErrorMessage: {{ \n{JoinLobbyErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreatingLobbyErrorMessage: {{ \n{CreatingLobbyErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PhotonDisconnectedErrorMessage: {{ \n{PhotonDisconnectedErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PhotonCustomAuthenticationFailedErrorMessage: {{ \n{PhotonCustomAuthenticationFailedErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveSourceDisconnectedErrorMessage: {{ \n{SaveSourceDisconnectedErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveReceiveErrorMessage: {{ \n{SaveReceiveErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveNotFoundErrorMessage: {{ \n{SaveNotFoundErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendMessageFailErrorMessage: {{ \n{SendMessageFailErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoPlaystationPlusErrorMessage: {{ \n{NoPlaystationPlusErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnknownExceptionMessage: {{ \n{UnknownExceptionMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlaystationNetworkIsNotInitializedMessage: {{ \n{PlaystationNetworkIsNotInitializedMessage.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIActionText (10 fields) */
public record class UIActionText (
    LocalizedString Move,
    LocalizedString Stop,
    LocalizedString Interact,
    LocalizedString SplitItem,
    LocalizedString DropItem,
    LocalizedString MoveItem,
    LocalizedString ExitArea,
    LocalizedString Inspect,
    LocalizedString Talk,
    LocalizedString Rotate) : IUnityStructure
{
    public static UIActionText Read(EndianBinaryReader reader)
    {
        LocalizedString Move_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Move */
        LocalizedString Stop_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Stop */
        LocalizedString Interact_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Interact */
        LocalizedString SplitItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SplitItem */
        LocalizedString DropItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DropItem */
        LocalizedString MoveItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoveItem */
        LocalizedString ExitArea_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExitArea */
        LocalizedString Inspect_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inspect */
        LocalizedString Talk_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Talk */
        LocalizedString Rotate_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rotate */
        
        return new(Move_,
            Stop_,
            Interact_,
            SplitItem_,
            DropItem_,
            MoveItem_,
            ExitArea_,
            Inspect_,
            Talk_,
            Rotate_);
    }

    public override string ToString() => $"UIActionText\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Move: {{ \n{Move.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Stop: {{ \n{Stop.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Interact: {{ \n{Interact.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SplitItem: {{ \n{SplitItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DropItem: {{ \n{DropItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MoveItem: {{ \n{MoveItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExitArea: {{ \n{ExitArea.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Inspect: {{ \n{Inspect.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Talk: {{ \n{Talk.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rotate: {{ \n{Rotate.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITooltips (129 fields) */
public record class UITooltips (
    LocalizedString BaseDamage,
    LocalizedString CannotbeEquip,
    LocalizedString CanBeEquip,
    LocalizedString CanBeUsed,
    LocalizedString CannotbeUsed,
    LocalizedString IsNotRemovable,
    LocalizedString Loot,
    LocalizedString Door,
    LocalizedString DoorOpen,
    LocalizedString DoorClose,
    LocalizedString Trap,
    LocalizedString TrapNeutralize,
    LocalizedString Ladder,
    LocalizedString TitlePreviewSkillcheckSkillDC,
    LocalizedString TipPreviewSkillcheckBestCharacter,
    LocalizedString NoFeature,
    LocalizedString CharacterLevel,
    LocalizedString Level,
    LocalizedString NoClass,
    LocalizedString OneFrom,
    LocalizedString FeaturesFrom,
    LocalizedString NoProficiencies,
    LocalizedString HasProficiencies,
    LocalizedString MoreThan,
    LocalizedString and,
    LocalizedString or,
    LocalizedString lbs,
    LocalizedString PartyEncumbrance,
    LocalizedString PersonalEncumbrance,
    LocalizedString[] EncumbranceStatus,
    LocalizedString CurrentValue,
    LocalizedString Ranks,
    LocalizedString BaseValue,
    LocalizedString TotalValue,
    LocalizedString TotalSkillValue,
    LocalizedString TotalAttributeValue,
    LocalizedString BonusValue,
    LocalizedString UnitIsNotInspected,
    LocalizedString CurrentLevelExperience,
    LocalizedString NextLevelExperience,
    LocalizedString TillNextLevelExperience,
    LocalizedString TwoHanded,
    LocalizedString OneHanded,
    LocalizedString NoItemsAvailableToSelect,
    LocalizedString NonStackHeaderLabel,
    LocalizedString ShowInfo,
    LocalizedString Source,
    LocalizedString RateOfFire,
    LocalizedString Recoil,
    LocalizedString MaximumRange,
    LocalizedString CostAP,
    LocalizedString AP,
    LocalizedString MP,
    LocalizedString PsychicPowerCostAP,
    LocalizedString ReloadAP,
    LocalizedString PsykerPower,
    LocalizedString EndsTurn,
    LocalizedString SpendAllMovementPoints,
    LocalizedString AttackAbilityGroupCooldown,
    LocalizedString IncreaseVeilDegradation,
    LocalizedString MinorVeilDegradation,
    LocalizedString MajorVeilDegradation,
    LocalizedString MeleeStrikesCount,
    LocalizedString ShotsCount,
    LocalizedString MomentumAvailable,
    LocalizedString MomentumNotAvailable,
    LocalizedString EndTurn,
    LocalizedString HeroicActAbility,
    LocalizedString DesperateMeasureAbility,
    LocalizedString HitChances,
    LocalizedString HitChancesEffectiveDistance,
    LocalizedString HitChancesMaxDistance,
    LocalizedString ItemFooterLabel,
    LocalizedString SpendAllMovementPointsShort,
    LocalizedString AttackAbilityGroupCooldownShort,
    LocalizedString IncreaseVeilDegradationShort,
    LocalizedString ArmourDamageReduceDescription,
    LocalizedString ArmourDodgeChanceDescription,
    LocalizedString ReplenishingItem,
    LocalizedString ScatterMainLineClose,
    LocalizedString ScatterClose,
    LocalizedString ScatterMainLine,
    LocalizedString ScatterNear,
    LocalizedString ScatterFar,
    LocalizedString BonusesSum,
    LocalizedString BaseChance,
    LocalizedString DifficultyReduceDescription,
    LocalizedString HPLeft,
    LocalizedString HPMax,
    LocalizedString HPTemporary,
    LocalizedString HPTotalLeft,
    LocalizedString HPTotalMax,
    LocalizedString PossibleToKill,
    LocalizedString Damage,
    LocalizedString InitialDamage,
    LocalizedString BurstCount,
    LocalizedString PossibleToPush,
    LocalizedString EveryRound,
    LocalizedString TotalHitChance,
    LocalizedString InitialHitChance,
    LocalizedString DodgeAvoidance,
    LocalizedString ParryAvoidance,
    LocalizedString CoverAvoidance,
    LocalizedString YouWillGainTitle,
    LocalizedString YouWillLoseTitle,
    LocalizedString ReputationPointsAbbreviation,
    LocalizedString CommonFeatureDesc,
    LocalizedString FlipZoneStrategist,
    LocalizedString FlipZoneStrategistConsole,
    LocalizedString ShowTooltipHint,
    LocalizedString HideTooltipHint,
    LocalizedString ShowComparativeHint,
    LocalizedString HideComparativeHint,
    LocalizedString SoulMarkRankHeader,
    LocalizedString SoulMarkRankDescription,
    LocalizedString SoulMarkIsLocked,
    LocalizedString SoulMarkMayBeLocked,
    LocalizedString SoulMarkCompanion,
    LocalizedString Prerequisites,
    LocalizedString PrerequisiteAbilities,
    LocalizedString PrerequisiteCareers,
    LocalizedString PrerequisiteFeatures,
    LocalizedString PrerequisiteRank,
    LocalizedString PrerequisiteLevel,
    LocalizedString PrerequisitesFooter,
    LocalizedString ToCurrentPrerequisiteFeature,
    LocalizedString DoctrinesHeader,
    LocalizedString DoctrinesShortDesc,
    LocalizedString DoctrinesDescription) : IUnityStructure
{
    public static UITooltips Read(EndianBinaryReader reader)
    {
        LocalizedString BaseDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseDamage */
        LocalizedString CannotbeEquip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotbeEquip */
        LocalizedString CanBeEquip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanBeEquip */
        LocalizedString CanBeUsed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanBeUsed */
        LocalizedString CannotbeUsed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotbeUsed */
        LocalizedString IsNotRemovable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IsNotRemovable */
        LocalizedString Loot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Loot */
        LocalizedString Door_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Door */
        LocalizedString DoorOpen_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoorOpen */
        LocalizedString DoorClose_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoorClose */
        LocalizedString Trap_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Trap */
        LocalizedString TrapNeutralize_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrapNeutralize */
        LocalizedString Ladder_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ladder */
        LocalizedString TitlePreviewSkillcheckSkillDC_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TitlePreviewSkillcheckSkillDC */
        LocalizedString TipPreviewSkillcheckBestCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TipPreviewSkillcheckBestCharacter */
        LocalizedString NoFeature_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFeature */
        LocalizedString CharacterLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterLevel */
        LocalizedString Level_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Level */
        LocalizedString NoClass_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoClass */
        LocalizedString OneFrom_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneFrom */
        LocalizedString FeaturesFrom_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturesFrom */
        LocalizedString NoProficiencies_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoProficiencies */
        LocalizedString HasProficiencies_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasProficiencies */
        LocalizedString MoreThan_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoreThan */
        LocalizedString and_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* and */
        LocalizedString or_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* or */
        LocalizedString lbs_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* lbs */
        LocalizedString PartyEncumbrance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PartyEncumbrance */
        LocalizedString PersonalEncumbrance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PersonalEncumbrance */
        LocalizedString[] EncumbranceStatus_ = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* EncumbranceStatus */
        LocalizedString CurrentValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentValue */
        LocalizedString Ranks_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ranks */
        LocalizedString BaseValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseValue */
        LocalizedString TotalValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalValue */
        LocalizedString TotalSkillValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalSkillValue */
        LocalizedString TotalAttributeValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalAttributeValue */
        LocalizedString BonusValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusValue */
        LocalizedString UnitIsNotInspected_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnitIsNotInspected */
        LocalizedString CurrentLevelExperience_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentLevelExperience */
        LocalizedString NextLevelExperience_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextLevelExperience */
        LocalizedString TillNextLevelExperience_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TillNextLevelExperience */
        LocalizedString TwoHanded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoHanded */
        LocalizedString OneHanded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneHanded */
        LocalizedString NoItemsAvailableToSelect_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoItemsAvailableToSelect */
        LocalizedString NonStackHeaderLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NonStackHeaderLabel */
        LocalizedString ShowInfo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowInfo */
        LocalizedString Source_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Source */
        LocalizedString RateOfFire_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RateOfFire */
        LocalizedString Recoil_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Recoil */
        LocalizedString MaximumRange_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaximumRange */
        LocalizedString CostAP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CostAP */
        LocalizedString AP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AP */
        LocalizedString MP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MP */
        LocalizedString PsychicPowerCostAP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsychicPowerCostAP */
        LocalizedString ReloadAP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReloadAP */
        LocalizedString PsykerPower_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PsykerPower */
        LocalizedString EndsTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EndsTurn */
        LocalizedString SpendAllMovementPoints_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpendAllMovementPoints */
        LocalizedString AttackAbilityGroupCooldown_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackAbilityGroupCooldown */
        LocalizedString IncreaseVeilDegradation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IncreaseVeilDegradation */
        LocalizedString MinorVeilDegradation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinorVeilDegradation */
        LocalizedString MajorVeilDegradation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MajorVeilDegradation */
        LocalizedString MeleeStrikesCount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MeleeStrikesCount */
        LocalizedString ShotsCount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShotsCount */
        LocalizedString MomentumAvailable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumAvailable */
        LocalizedString MomentumNotAvailable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumNotAvailable */
        LocalizedString EndTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EndTurn */
        LocalizedString HeroicActAbility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeroicActAbility */
        LocalizedString DesperateMeasureAbility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DesperateMeasureAbility */
        LocalizedString HitChances_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChances */
        LocalizedString HitChancesEffectiveDistance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChancesEffectiveDistance */
        LocalizedString HitChancesMaxDistance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChancesMaxDistance */
        LocalizedString ItemFooterLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemFooterLabel */
        LocalizedString SpendAllMovementPointsShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpendAllMovementPointsShort */
        LocalizedString AttackAbilityGroupCooldownShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackAbilityGroupCooldownShort */
        LocalizedString IncreaseVeilDegradationShort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IncreaseVeilDegradationShort */
        LocalizedString ArmourDamageReduceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourDamageReduceDescription */
        LocalizedString ArmourDodgeChanceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourDodgeChanceDescription */
        LocalizedString ReplenishingItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReplenishingItem */
        LocalizedString ScatterMainLineClose_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterMainLineClose */
        LocalizedString ScatterClose_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterClose */
        LocalizedString ScatterMainLine_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterMainLine */
        LocalizedString ScatterNear_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterNear */
        LocalizedString ScatterFar_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterFar */
        LocalizedString BonusesSum_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusesSum */
        LocalizedString BaseChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseChance */
        LocalizedString DifficultyReduceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyReduceDescription */
        LocalizedString HPLeft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPLeft */
        LocalizedString HPMax_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPMax */
        LocalizedString HPTemporary_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPTemporary */
        LocalizedString HPTotalLeft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPTotalLeft */
        LocalizedString HPTotalMax_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPTotalMax */
        LocalizedString PossibleToKill_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PossibleToKill */
        LocalizedString Damage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Damage */
        LocalizedString InitialDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialDamage */
        LocalizedString BurstCount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BurstCount */
        LocalizedString PossibleToPush_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PossibleToPush */
        LocalizedString EveryRound_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EveryRound */
        LocalizedString TotalHitChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalHitChance */
        LocalizedString InitialHitChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialHitChance */
        LocalizedString DodgeAvoidance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DodgeAvoidance */
        LocalizedString ParryAvoidance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ParryAvoidance */
        LocalizedString CoverAvoidance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoverAvoidance */
        LocalizedString YouWillGainTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouWillGainTitle */
        LocalizedString YouWillLoseTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouWillLoseTitle */
        LocalizedString ReputationPointsAbbreviation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ReputationPointsAbbreviation */
        LocalizedString CommonFeatureDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CommonFeatureDesc */
        LocalizedString FlipZoneStrategist_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FlipZoneStrategist */
        LocalizedString FlipZoneStrategistConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FlipZoneStrategistConsole */
        LocalizedString ShowTooltipHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowTooltipHint */
        LocalizedString HideTooltipHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideTooltipHint */
        LocalizedString ShowComparativeHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowComparativeHint */
        LocalizedString HideComparativeHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideComparativeHint */
        LocalizedString SoulMarkRankHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankHeader */
        LocalizedString SoulMarkRankDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRankDescription */
        LocalizedString SoulMarkIsLocked_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkIsLocked */
        LocalizedString SoulMarkMayBeLocked_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkMayBeLocked */
        LocalizedString SoulMarkCompanion_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkCompanion */
        LocalizedString Prerequisites_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Prerequisites */
        LocalizedString PrerequisiteAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteAbilities */
        LocalizedString PrerequisiteCareers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteCareers */
        LocalizedString PrerequisiteFeatures_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteFeatures */
        LocalizedString PrerequisiteRank_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteRank */
        LocalizedString PrerequisiteLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisiteLevel */
        LocalizedString PrerequisitesFooter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrerequisitesFooter */
        LocalizedString ToCurrentPrerequisiteFeature_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToCurrentPrerequisiteFeature */
        LocalizedString DoctrinesHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoctrinesHeader */
        LocalizedString DoctrinesShortDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoctrinesShortDesc */
        LocalizedString DoctrinesDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DoctrinesDescription */
        
        return new(BaseDamage_,
            CannotbeEquip_,
            CanBeEquip_,
            CanBeUsed_,
            CannotbeUsed_,
            IsNotRemovable_,
            Loot_,
            Door_,
            DoorOpen_,
            DoorClose_,
            Trap_,
            TrapNeutralize_,
            Ladder_,
            TitlePreviewSkillcheckSkillDC_,
            TipPreviewSkillcheckBestCharacter_,
            NoFeature_,
            CharacterLevel_,
            Level_,
            NoClass_,
            OneFrom_,
            FeaturesFrom_,
            NoProficiencies_,
            HasProficiencies_,
            MoreThan_,
            and_,
            or_,
            lbs_,
            PartyEncumbrance_,
            PersonalEncumbrance_,
            EncumbranceStatus_,
            CurrentValue_,
            Ranks_,
            BaseValue_,
            TotalValue_,
            TotalSkillValue_,
            TotalAttributeValue_,
            BonusValue_,
            UnitIsNotInspected_,
            CurrentLevelExperience_,
            NextLevelExperience_,
            TillNextLevelExperience_,
            TwoHanded_,
            OneHanded_,
            NoItemsAvailableToSelect_,
            NonStackHeaderLabel_,
            ShowInfo_,
            Source_,
            RateOfFire_,
            Recoil_,
            MaximumRange_,
            CostAP_,
            AP_,
            MP_,
            PsychicPowerCostAP_,
            ReloadAP_,
            PsykerPower_,
            EndsTurn_,
            SpendAllMovementPoints_,
            AttackAbilityGroupCooldown_,
            IncreaseVeilDegradation_,
            MinorVeilDegradation_,
            MajorVeilDegradation_,
            MeleeStrikesCount_,
            ShotsCount_,
            MomentumAvailable_,
            MomentumNotAvailable_,
            EndTurn_,
            HeroicActAbility_,
            DesperateMeasureAbility_,
            HitChances_,
            HitChancesEffectiveDistance_,
            HitChancesMaxDistance_,
            ItemFooterLabel_,
            SpendAllMovementPointsShort_,
            AttackAbilityGroupCooldownShort_,
            IncreaseVeilDegradationShort_,
            ArmourDamageReduceDescription_,
            ArmourDodgeChanceDescription_,
            ReplenishingItem_,
            ScatterMainLineClose_,
            ScatterClose_,
            ScatterMainLine_,
            ScatterNear_,
            ScatterFar_,
            BonusesSum_,
            BaseChance_,
            DifficultyReduceDescription_,
            HPLeft_,
            HPMax_,
            HPTemporary_,
            HPTotalLeft_,
            HPTotalMax_,
            PossibleToKill_,
            Damage_,
            InitialDamage_,
            BurstCount_,
            PossibleToPush_,
            EveryRound_,
            TotalHitChance_,
            InitialHitChance_,
            DodgeAvoidance_,
            ParryAvoidance_,
            CoverAvoidance_,
            YouWillGainTitle_,
            YouWillLoseTitle_,
            ReputationPointsAbbreviation_,
            CommonFeatureDesc_,
            FlipZoneStrategist_,
            FlipZoneStrategistConsole_,
            ShowTooltipHint_,
            HideTooltipHint_,
            ShowComparativeHint_,
            HideComparativeHint_,
            SoulMarkRankHeader_,
            SoulMarkRankDescription_,
            SoulMarkIsLocked_,
            SoulMarkMayBeLocked_,
            SoulMarkCompanion_,
            Prerequisites_,
            PrerequisiteAbilities_,
            PrerequisiteCareers_,
            PrerequisiteFeatures_,
            PrerequisiteRank_,
            PrerequisiteLevel_,
            PrerequisitesFooter_,
            ToCurrentPrerequisiteFeature_,
            DoctrinesHeader_,
            DoctrinesShortDesc_,
            DoctrinesDescription_);
    }

    public override string ToString() => $"UITooltips\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);
        ToString_Field60(sb, indent, indent_);
        ToString_Field61(sb, indent, indent_);
        ToString_Field62(sb, indent, indent_);
        ToString_Field63(sb, indent, indent_);
        ToString_Field64(sb, indent, indent_);
        ToString_Field65(sb, indent, indent_);
        ToString_Field66(sb, indent, indent_);
        ToString_Field67(sb, indent, indent_);
        ToString_Field68(sb, indent, indent_);
        ToString_Field69(sb, indent, indent_);
        ToString_Field70(sb, indent, indent_);
        ToString_Field71(sb, indent, indent_);
        ToString_Field72(sb, indent, indent_);
        ToString_Field73(sb, indent, indent_);
        ToString_Field74(sb, indent, indent_);
        ToString_Field75(sb, indent, indent_);
        ToString_Field76(sb, indent, indent_);
        ToString_Field77(sb, indent, indent_);
        ToString_Field78(sb, indent, indent_);
        ToString_Field79(sb, indent, indent_);
        ToString_Field80(sb, indent, indent_);
        ToString_Field81(sb, indent, indent_);
        ToString_Field82(sb, indent, indent_);
        ToString_Field83(sb, indent, indent_);
        ToString_Field84(sb, indent, indent_);
        ToString_Field85(sb, indent, indent_);
        ToString_Field86(sb, indent, indent_);
        ToString_Field87(sb, indent, indent_);
        ToString_Field88(sb, indent, indent_);
        ToString_Field89(sb, indent, indent_);
        ToString_Field90(sb, indent, indent_);
        ToString_Field91(sb, indent, indent_);
        ToString_Field92(sb, indent, indent_);
        ToString_Field93(sb, indent, indent_);
        ToString_Field94(sb, indent, indent_);
        ToString_Field95(sb, indent, indent_);
        ToString_Field96(sb, indent, indent_);
        ToString_Field97(sb, indent, indent_);
        ToString_Field98(sb, indent, indent_);
        ToString_Field99(sb, indent, indent_);
        ToString_Field100(sb, indent, indent_);
        ToString_Field101(sb, indent, indent_);
        ToString_Field102(sb, indent, indent_);
        ToString_Field103(sb, indent, indent_);
        ToString_Field104(sb, indent, indent_);
        ToString_Field105(sb, indent, indent_);
        ToString_Field106(sb, indent, indent_);
        ToString_Field107(sb, indent, indent_);
        ToString_Field108(sb, indent, indent_);
        ToString_Field109(sb, indent, indent_);
        ToString_Field110(sb, indent, indent_);
        ToString_Field111(sb, indent, indent_);
        ToString_Field112(sb, indent, indent_);
        ToString_Field113(sb, indent, indent_);
        ToString_Field114(sb, indent, indent_);
        ToString_Field115(sb, indent, indent_);
        ToString_Field116(sb, indent, indent_);
        ToString_Field117(sb, indent, indent_);
        ToString_Field118(sb, indent, indent_);
        ToString_Field119(sb, indent, indent_);
        ToString_Field120(sb, indent, indent_);
        ToString_Field121(sb, indent, indent_);
        ToString_Field122(sb, indent, indent_);
        ToString_Field123(sb, indent, indent_);
        ToString_Field124(sb, indent, indent_);
        ToString_Field125(sb, indent, indent_);
        ToString_Field126(sb, indent, indent_);
        ToString_Field127(sb, indent, indent_);
        ToString_Field128(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BaseDamage: {{ \n{BaseDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotbeEquip: {{ \n{CannotbeEquip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CanBeEquip: {{ \n{CanBeEquip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CanBeUsed: {{ \n{CanBeUsed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotbeUsed: {{ \n{CannotbeUsed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IsNotRemovable: {{ \n{IsNotRemovable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Loot: {{ \n{Loot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Door: {{ \n{Door.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DoorOpen: {{ \n{DoorOpen.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DoorClose: {{ \n{DoorClose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Trap: {{ \n{Trap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TrapNeutralize: {{ \n{TrapNeutralize.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ladder: {{ \n{Ladder.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TitlePreviewSkillcheckSkillDC: {{ \n{TitlePreviewSkillcheckSkillDC.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TipPreviewSkillcheckBestCharacter: {{ \n{TipPreviewSkillcheckBestCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoFeature: {{ \n{NoFeature.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CharacterLevel: {{ \n{CharacterLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Level: {{ \n{Level.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoClass: {{ \n{NoClass.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OneFrom: {{ \n{OneFrom.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FeaturesFrom: {{ \n{FeaturesFrom.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoProficiencies: {{ \n{NoProficiencies.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HasProficiencies: {{ \n{HasProficiencies.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MoreThan: {{ \n{MoreThan.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}and: {{ \n{and.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}or: {{ \n{or.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}lbs: {{ \n{lbs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PartyEncumbrance: {{ \n{PartyEncumbrance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PersonalEncumbrance: {{ \n{PersonalEncumbrance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncumbranceStatus[{EncumbranceStatus.Length}] = {{");
        if (EncumbranceStatus.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LocalizedString _4 in EncumbranceStatus)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (EncumbranceStatus.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentValue: {{ \n{CurrentValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ranks: {{ \n{Ranks.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BaseValue: {{ \n{BaseValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TotalValue: {{ \n{TotalValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TotalSkillValue: {{ \n{TotalSkillValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TotalAttributeValue: {{ \n{TotalAttributeValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BonusValue: {{ \n{BonusValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnitIsNotInspected: {{ \n{UnitIsNotInspected.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentLevelExperience: {{ \n{CurrentLevelExperience.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextLevelExperience: {{ \n{NextLevelExperience.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TillNextLevelExperience: {{ \n{TillNextLevelExperience.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TwoHanded: {{ \n{TwoHanded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OneHanded: {{ \n{OneHanded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoItemsAvailableToSelect: {{ \n{NoItemsAvailableToSelect.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NonStackHeaderLabel: {{ \n{NonStackHeaderLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowInfo: {{ \n{ShowInfo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Source: {{ \n{Source.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RateOfFire: {{ \n{RateOfFire.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Recoil: {{ \n{Recoil.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaximumRange: {{ \n{MaximumRange.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CostAP: {{ \n{CostAP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AP: {{ \n{AP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MP: {{ \n{MP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PsychicPowerCostAP: {{ \n{PsychicPowerCostAP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ReloadAP: {{ \n{ReloadAP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PsykerPower: {{ \n{PsykerPower.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EndsTurn: {{ \n{EndsTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpendAllMovementPoints: {{ \n{SpendAllMovementPoints.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackAbilityGroupCooldown: {{ \n{AttackAbilityGroupCooldown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IncreaseVeilDegradation: {{ \n{IncreaseVeilDegradation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field60(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinorVeilDegradation: {{ \n{MinorVeilDegradation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field61(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MajorVeilDegradation: {{ \n{MajorVeilDegradation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field62(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeStrikesCount: {{ \n{MeleeStrikesCount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field63(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShotsCount: {{ \n{ShotsCount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field64(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumAvailable: {{ \n{MomentumAvailable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field65(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumNotAvailable: {{ \n{MomentumNotAvailable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field66(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EndTurn: {{ \n{EndTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field67(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HeroicActAbility: {{ \n{HeroicActAbility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field68(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DesperateMeasureAbility: {{ \n{DesperateMeasureAbility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field69(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChances: {{ \n{HitChances.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field70(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChancesEffectiveDistance: {{ \n{HitChancesEffectiveDistance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field71(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChancesMaxDistance: {{ \n{HitChancesMaxDistance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field72(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ItemFooterLabel: {{ \n{ItemFooterLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field73(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpendAllMovementPointsShort: {{ \n{SpendAllMovementPointsShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field74(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackAbilityGroupCooldownShort: {{ \n{AttackAbilityGroupCooldownShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field75(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IncreaseVeilDegradationShort: {{ \n{IncreaseVeilDegradationShort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field76(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmourDamageReduceDescription: {{ \n{ArmourDamageReduceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field77(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmourDodgeChanceDescription: {{ \n{ArmourDodgeChanceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field78(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ReplenishingItem: {{ \n{ReplenishingItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field79(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterMainLineClose: {{ \n{ScatterMainLineClose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field80(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterClose: {{ \n{ScatterClose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field81(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterMainLine: {{ \n{ScatterMainLine.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field82(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterNear: {{ \n{ScatterNear.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field83(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterFar: {{ \n{ScatterFar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field84(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BonusesSum: {{ \n{BonusesSum.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field85(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BaseChance: {{ \n{BaseChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field86(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DifficultyReduceDescription: {{ \n{DifficultyReduceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field87(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPLeft: {{ \n{HPLeft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field88(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPMax: {{ \n{HPMax.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field89(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPTemporary: {{ \n{HPTemporary.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field90(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPTotalLeft: {{ \n{HPTotalLeft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field91(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPTotalMax: {{ \n{HPTotalMax.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field92(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PossibleToKill: {{ \n{PossibleToKill.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field93(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Damage: {{ \n{Damage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field94(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InitialDamage: {{ \n{InitialDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field95(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BurstCount: {{ \n{BurstCount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field96(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PossibleToPush: {{ \n{PossibleToPush.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field97(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EveryRound: {{ \n{EveryRound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field98(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TotalHitChance: {{ \n{TotalHitChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field99(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InitialHitChance: {{ \n{InitialHitChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field100(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DodgeAvoidance: {{ \n{DodgeAvoidance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field101(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ParryAvoidance: {{ \n{ParryAvoidance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field102(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoverAvoidance: {{ \n{CoverAvoidance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field103(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouWillGainTitle: {{ \n{YouWillGainTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field104(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouWillLoseTitle: {{ \n{YouWillLoseTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field105(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ReputationPointsAbbreviation: {{ \n{ReputationPointsAbbreviation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field106(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CommonFeatureDesc: {{ \n{CommonFeatureDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field107(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FlipZoneStrategist: {{ \n{FlipZoneStrategist.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field108(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FlipZoneStrategistConsole: {{ \n{FlipZoneStrategistConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field109(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowTooltipHint: {{ \n{ShowTooltipHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field110(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideTooltipHint: {{ \n{HideTooltipHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field111(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowComparativeHint: {{ \n{ShowComparativeHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field112(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideComparativeHint: {{ \n{HideComparativeHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field113(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankHeader: {{ \n{SoulMarkRankHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field114(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRankDescription: {{ \n{SoulMarkRankDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field115(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkIsLocked: {{ \n{SoulMarkIsLocked.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field116(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkMayBeLocked: {{ \n{SoulMarkMayBeLocked.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field117(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkCompanion: {{ \n{SoulMarkCompanion.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field118(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prerequisites: {{ \n{Prerequisites.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field119(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrerequisiteAbilities: {{ \n{PrerequisiteAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field120(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrerequisiteCareers: {{ \n{PrerequisiteCareers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field121(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrerequisiteFeatures: {{ \n{PrerequisiteFeatures.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field122(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrerequisiteRank: {{ \n{PrerequisiteRank.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field123(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrerequisiteLevel: {{ \n{PrerequisiteLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field124(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrerequisitesFooter: {{ \n{PrerequisitesFooter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field125(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToCurrentPrerequisiteFeature: {{ \n{ToCurrentPrerequisiteFeature.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field126(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DoctrinesHeader: {{ \n{DoctrinesHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field127(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DoctrinesShortDesc: {{ \n{DoctrinesShortDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field128(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DoctrinesDescription: {{ \n{DoctrinesDescription.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITooltipElementLabels (1 fields) */
public record class UITooltipElementLabels (
    UITooltipElementEntry[] Entries) : IUnityStructure
{
    public static UITooltipElementLabels Read(EndianBinaryReader reader)
    {
        UITooltipElementEntry[] Entries_ = BuiltInArray<UITooltipElementEntry>.Read(reader);
        reader.AlignTo(4); /* Entries */
        
        return new(Entries_);
    }

    public override string ToString() => $"UITooltipElementLabels\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Entries[{Entries.Length}] = {{");
        if (Entries.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (UITooltipElementEntry _4 in Entries)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Entries.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UITooltipElementEntry (2 fields) */
public record class UITooltipElementEntry (
    int Type,
    LocalizedString Text) : IUnityStructure
{
    public static UITooltipElementEntry Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Type_,
            Text_);
    }

    public override string ToString() => $"UITooltipElementEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UISkillcheckTooltip (11 fields) */
public record class UISkillcheckTooltip (
    LocalizedString RollResult,
    LocalizedString RollD100,
    LocalizedString SkillCheck,
    LocalizedString SkillValue,
    LocalizedString DifficultyClass,
    LocalizedString DifficultyModRoll,
    LocalizedString Against,
    LocalizedString DC,
    LocalizedString Result,
    LocalizedString ChooseCharacter,
    LocalizedString SkillCheckChance) : IUnityStructure
{
    public static UISkillcheckTooltip Read(EndianBinaryReader reader)
    {
        LocalizedString RollResult_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RollResult */
        LocalizedString RollD100_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RollD100 */
        LocalizedString SkillCheck_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheck */
        LocalizedString SkillValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillValue */
        LocalizedString DifficultyClass_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyClass */
        LocalizedString DifficultyModRoll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyModRoll */
        LocalizedString Against_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Against */
        LocalizedString DC_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DC */
        LocalizedString Result_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Result */
        LocalizedString ChooseCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseCharacter */
        LocalizedString SkillCheckChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckChance */
        
        return new(RollResult_,
            RollD100_,
            SkillCheck_,
            SkillValue_,
            DifficultyClass_,
            DifficultyModRoll_,
            Against_,
            DC_,
            Result_,
            ChooseCharacter_,
            SkillCheckChance_);
    }

    public override string ToString() => $"UISkillcheckTooltip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RollResult: {{ \n{RollResult.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RollD100: {{ \n{RollD100.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheck: {{ \n{SkillCheck.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillValue: {{ \n{SkillValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DifficultyClass: {{ \n{DifficultyClass.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DifficultyModRoll: {{ \n{DifficultyModRoll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Against: {{ \n{Against.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DC: {{ \n{DC.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Result: {{ \n{Result.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseCharacter: {{ \n{ChooseCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckChance: {{ \n{SkillCheckChance.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITutorial (8 fields) */
public record class UITutorial (
    LocalizedString DontShowTutorialTag,
    LocalizedString DontShowThisTutorial,
    TutorialTagNames TagNames,
    LocalizedString GotIt,
    LocalizedString Previous,
    LocalizedString Next,
    LocalizedString Complete,
    LocalizedString Encyclopedia) : IUnityStructure
{
    public static UITutorial Read(EndianBinaryReader reader)
    {
        LocalizedString DontShowTutorialTag_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DontShowTutorialTag */
        LocalizedString DontShowThisTutorial_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DontShowThisTutorial */
        TutorialTagNames TagNames_ = TutorialTagNames.Read(reader);
        reader.AlignTo(4); /* TagNames */
        LocalizedString GotIt_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GotIt */
        LocalizedString Previous_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Previous */
        LocalizedString Next_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Next */
        LocalizedString Complete_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Complete */
        LocalizedString Encyclopedia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Encyclopedia */
        
        return new(DontShowTutorialTag_,
            DontShowThisTutorial_,
            TagNames_,
            GotIt_,
            Previous_,
            Next_,
            Complete_,
            Encyclopedia_);
    }

    public override string ToString() => $"UITutorial\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DontShowTutorialTag: {{ \n{DontShowTutorialTag.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DontShowThisTutorial: {{ \n{DontShowThisTutorial.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TagNames: {{ \n{TagNames.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GotIt: {{ \n{GotIt.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Previous: {{ \n{Previous.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Next: {{ \n{Next.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Complete: {{ \n{Complete.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Encyclopedia: {{ \n{Encyclopedia.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TutorialTagNames (1 fields) */
public record class TutorialTagNames (
    TutorialTagPair[] Names) : IUnityStructure
{
    public static TutorialTagNames Read(EndianBinaryReader reader)
    {
        TutorialTagPair[] Names_ = BuiltInArray<TutorialTagPair>.Read(reader);
        reader.AlignTo(4); /* Names */
        
        return new(Names_);
    }

    public override string ToString() => $"TutorialTagNames\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Names[{Names.Length}] = {{");
        if (Names.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (TutorialTagPair _4 in Names)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Names.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $TutorialTagPair (2 fields) */
public record class TutorialTagPair (
    int Tag,
    LocalizedString Name) : IUnityStructure
{
    public static TutorialTagPair Read(EndianBinaryReader reader)
    {
        int Tag_ = reader.ReadS32();
        LocalizedString Name_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Name */
        
        return new(Tag_,
            Name_);
    }

    public override string ToString() => $"TutorialTagPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Tag: {Tag}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Name: {{ \n{Name.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITextSettingsUI (60 fields) */
public record class UITextSettingsUI (
    LocalizedString SectionNameGame,
    LocalizedString SectionNameSound,
    LocalizedString SectionNameGraphics,
    LocalizedString SectionNameDisplay,
    LocalizedString SectionNameAccessiability,
    LocalizedString SectionNameLanguage,
    LocalizedString SectionNameSafeZone,
    LocalizedString SectionNameControls,
    LocalizedString SectionNameDifficulty,
    LocalizedString RestoreAllDefaultsMessage,
    LocalizedString CancelChangesMessage,
    LocalizedString SaveChangesMessage,
    LocalizedString HotkeyInUseErrorMessage,
    LocalizedString RestartConfirmation,
    LocalizedString Apply,
    LocalizedString Default,
    LocalizedString Cancel,
    LocalizedString DialogYes,
    LocalizedString DialogNo,
    LocalizedString DialogCancel,
    LocalizedString DialogOk,
    LocalizedString DialogApply,
    LocalizedString DialogRevert,
    LocalizedString DialogSave,
    LocalizedString MenuConfirm,
    LocalizedString Navigation,
    LocalizedString Value,
    LocalizedString DisplayImageShadows,
    LocalizedString DisplayImageMidtones,
    LocalizedString DisplayImageBrights,
    LocalizedString AccessiabilityExampleFontSize,
    LocalizedString ResetToDefaultHold,
    LocalizedString FinishSetupHold,
    LocalizedString ConsoleControlLeftStickButtonHint,
    LocalizedString ConsoleControlDPadRightHint,
    LocalizedString ConsoleControlDPadDownHint,
    LocalizedString ConsoleControlDPadLeftHint,
    LocalizedString ConsoleControlDPadUpHint,
    LocalizedString ConsoleControlLeftUpHint,
    LocalizedString ConsoleControlLeftBottomHint,
    LocalizedString ConsoleControlFuncAdditionalHint,
    LocalizedString ConsoleControlRightBottomHint,
    LocalizedString ConsoleControlRightUpHint,
    LocalizedString ConsoleControlOptionsHint,
    LocalizedString ConsoleControlFunc02Hint,
    LocalizedString ConsoleControlDeclineHint,
    LocalizedString ConsoleControlConfirmHint,
    LocalizedString ConsoleControlFunc01Hint,
    LocalizedString ConsoleControlRightStickButtonHint,
    LocalizedString ConsoleControlPingCoopHint,
    LocalizedString ConsoleControlPingCoopHintNormal,
    LocalizedString ConsoleControlPingCoopHintConfirm,
    LocalizedString SettingsToggleOn,
    LocalizedString SettingsToggleOff,
    LocalizedString ShowStatistics,
    LocalizedString DeleteStatisticsData,
    LocalizedString DeleteStatisticsDataDialogue,
    LocalizedString AreYouSureSwitchOnGrimDarkness,
    LocalizedString GrimDaknessSettingsWarning,
    LocalizedString AreYouSureSwitchOffGrimDarkness) : IUnityStructure
{
    public static UITextSettingsUI Read(EndianBinaryReader reader)
    {
        LocalizedString SectionNameGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameGame */
        LocalizedString SectionNameSound_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameSound */
        LocalizedString SectionNameGraphics_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameGraphics */
        LocalizedString SectionNameDisplay_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameDisplay */
        LocalizedString SectionNameAccessiability_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameAccessiability */
        LocalizedString SectionNameLanguage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameLanguage */
        LocalizedString SectionNameSafeZone_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameSafeZone */
        LocalizedString SectionNameControls_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameControls */
        LocalizedString SectionNameDifficulty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SectionNameDifficulty */
        LocalizedString RestoreAllDefaultsMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestoreAllDefaultsMessage */
        LocalizedString CancelChangesMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CancelChangesMessage */
        LocalizedString SaveChangesMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveChangesMessage */
        LocalizedString HotkeyInUseErrorMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HotkeyInUseErrorMessage */
        LocalizedString RestartConfirmation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestartConfirmation */
        LocalizedString Apply_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Apply */
        LocalizedString Default_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Default */
        LocalizedString Cancel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cancel */
        LocalizedString DialogYes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogYes */
        LocalizedString DialogNo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogNo */
        LocalizedString DialogCancel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogCancel */
        LocalizedString DialogOk_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogOk */
        LocalizedString DialogApply_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogApply */
        LocalizedString DialogRevert_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogRevert */
        LocalizedString DialogSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DialogSave */
        LocalizedString MenuConfirm_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuConfirm */
        LocalizedString Navigation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Navigation */
        LocalizedString Value_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Value */
        LocalizedString DisplayImageShadows_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisplayImageShadows */
        LocalizedString DisplayImageMidtones_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisplayImageMidtones */
        LocalizedString DisplayImageBrights_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DisplayImageBrights */
        LocalizedString AccessiabilityExampleFontSize_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AccessiabilityExampleFontSize */
        LocalizedString ResetToDefaultHold_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetToDefaultHold */
        LocalizedString FinishSetupHold_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FinishSetupHold */
        LocalizedString ConsoleControlLeftStickButtonHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlLeftStickButtonHint */
        LocalizedString ConsoleControlDPadRightHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadRightHint */
        LocalizedString ConsoleControlDPadDownHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadDownHint */
        LocalizedString ConsoleControlDPadLeftHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadLeftHint */
        LocalizedString ConsoleControlDPadUpHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDPadUpHint */
        LocalizedString ConsoleControlLeftUpHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlLeftUpHint */
        LocalizedString ConsoleControlLeftBottomHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlLeftBottomHint */
        LocalizedString ConsoleControlFuncAdditionalHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlFuncAdditionalHint */
        LocalizedString ConsoleControlRightBottomHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlRightBottomHint */
        LocalizedString ConsoleControlRightUpHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlRightUpHint */
        LocalizedString ConsoleControlOptionsHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlOptionsHint */
        LocalizedString ConsoleControlFunc02Hint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlFunc02Hint */
        LocalizedString ConsoleControlDeclineHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlDeclineHint */
        LocalizedString ConsoleControlConfirmHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlConfirmHint */
        LocalizedString ConsoleControlFunc01Hint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlFunc01Hint */
        LocalizedString ConsoleControlRightStickButtonHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlRightStickButtonHint */
        LocalizedString ConsoleControlPingCoopHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlPingCoopHint */
        LocalizedString ConsoleControlPingCoopHintNormal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlPingCoopHintNormal */
        LocalizedString ConsoleControlPingCoopHintConfirm_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConsoleControlPingCoopHintConfirm */
        LocalizedString SettingsToggleOn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SettingsToggleOn */
        LocalizedString SettingsToggleOff_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SettingsToggleOff */
        LocalizedString ShowStatistics_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowStatistics */
        LocalizedString DeleteStatisticsData_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteStatisticsData */
        LocalizedString DeleteStatisticsDataDialogue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteStatisticsDataDialogue */
        LocalizedString AreYouSureSwitchOnGrimDarkness_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureSwitchOnGrimDarkness */
        LocalizedString GrimDaknessSettingsWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GrimDaknessSettingsWarning */
        LocalizedString AreYouSureSwitchOffGrimDarkness_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureSwitchOffGrimDarkness */
        
        return new(SectionNameGame_,
            SectionNameSound_,
            SectionNameGraphics_,
            SectionNameDisplay_,
            SectionNameAccessiability_,
            SectionNameLanguage_,
            SectionNameSafeZone_,
            SectionNameControls_,
            SectionNameDifficulty_,
            RestoreAllDefaultsMessage_,
            CancelChangesMessage_,
            SaveChangesMessage_,
            HotkeyInUseErrorMessage_,
            RestartConfirmation_,
            Apply_,
            Default_,
            Cancel_,
            DialogYes_,
            DialogNo_,
            DialogCancel_,
            DialogOk_,
            DialogApply_,
            DialogRevert_,
            DialogSave_,
            MenuConfirm_,
            Navigation_,
            Value_,
            DisplayImageShadows_,
            DisplayImageMidtones_,
            DisplayImageBrights_,
            AccessiabilityExampleFontSize_,
            ResetToDefaultHold_,
            FinishSetupHold_,
            ConsoleControlLeftStickButtonHint_,
            ConsoleControlDPadRightHint_,
            ConsoleControlDPadDownHint_,
            ConsoleControlDPadLeftHint_,
            ConsoleControlDPadUpHint_,
            ConsoleControlLeftUpHint_,
            ConsoleControlLeftBottomHint_,
            ConsoleControlFuncAdditionalHint_,
            ConsoleControlRightBottomHint_,
            ConsoleControlRightUpHint_,
            ConsoleControlOptionsHint_,
            ConsoleControlFunc02Hint_,
            ConsoleControlDeclineHint_,
            ConsoleControlConfirmHint_,
            ConsoleControlFunc01Hint_,
            ConsoleControlRightStickButtonHint_,
            ConsoleControlPingCoopHint_,
            ConsoleControlPingCoopHintNormal_,
            ConsoleControlPingCoopHintConfirm_,
            SettingsToggleOn_,
            SettingsToggleOff_,
            ShowStatistics_,
            DeleteStatisticsData_,
            DeleteStatisticsDataDialogue_,
            AreYouSureSwitchOnGrimDarkness_,
            GrimDaknessSettingsWarning_,
            AreYouSureSwitchOffGrimDarkness_);
    }

    public override string ToString() => $"UITextSettingsUI\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameGame: {{ \n{SectionNameGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameSound: {{ \n{SectionNameSound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameGraphics: {{ \n{SectionNameGraphics.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameDisplay: {{ \n{SectionNameDisplay.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameAccessiability: {{ \n{SectionNameAccessiability.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameLanguage: {{ \n{SectionNameLanguage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameSafeZone: {{ \n{SectionNameSafeZone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameControls: {{ \n{SectionNameControls.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SectionNameDifficulty: {{ \n{SectionNameDifficulty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RestoreAllDefaultsMessage: {{ \n{RestoreAllDefaultsMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CancelChangesMessage: {{ \n{CancelChangesMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveChangesMessage: {{ \n{SaveChangesMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HotkeyInUseErrorMessage: {{ \n{HotkeyInUseErrorMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RestartConfirmation: {{ \n{RestartConfirmation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Apply: {{ \n{Apply.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Default: {{ \n{Default.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cancel: {{ \n{Cancel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogYes: {{ \n{DialogYes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogNo: {{ \n{DialogNo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogCancel: {{ \n{DialogCancel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogOk: {{ \n{DialogOk.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogApply: {{ \n{DialogApply.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogRevert: {{ \n{DialogRevert.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DialogSave: {{ \n{DialogSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MenuConfirm: {{ \n{MenuConfirm.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Navigation: {{ \n{Navigation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Value: {{ \n{Value.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DisplayImageShadows: {{ \n{DisplayImageShadows.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DisplayImageMidtones: {{ \n{DisplayImageMidtones.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DisplayImageBrights: {{ \n{DisplayImageBrights.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AccessiabilityExampleFontSize: {{ \n{AccessiabilityExampleFontSize.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResetToDefaultHold: {{ \n{ResetToDefaultHold.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FinishSetupHold: {{ \n{FinishSetupHold.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlLeftStickButtonHint: {{ \n{ConsoleControlLeftStickButtonHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlDPadRightHint: {{ \n{ConsoleControlDPadRightHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlDPadDownHint: {{ \n{ConsoleControlDPadDownHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlDPadLeftHint: {{ \n{ConsoleControlDPadLeftHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlDPadUpHint: {{ \n{ConsoleControlDPadUpHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlLeftUpHint: {{ \n{ConsoleControlLeftUpHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlLeftBottomHint: {{ \n{ConsoleControlLeftBottomHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlFuncAdditionalHint: {{ \n{ConsoleControlFuncAdditionalHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlRightBottomHint: {{ \n{ConsoleControlRightBottomHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlRightUpHint: {{ \n{ConsoleControlRightUpHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlOptionsHint: {{ \n{ConsoleControlOptionsHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlFunc02Hint: {{ \n{ConsoleControlFunc02Hint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlDeclineHint: {{ \n{ConsoleControlDeclineHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlConfirmHint: {{ \n{ConsoleControlConfirmHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlFunc01Hint: {{ \n{ConsoleControlFunc01Hint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlRightStickButtonHint: {{ \n{ConsoleControlRightStickButtonHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlPingCoopHint: {{ \n{ConsoleControlPingCoopHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlPingCoopHintNormal: {{ \n{ConsoleControlPingCoopHintNormal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConsoleControlPingCoopHintConfirm: {{ \n{ConsoleControlPingCoopHintConfirm.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SettingsToggleOn: {{ \n{SettingsToggleOn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SettingsToggleOff: {{ \n{SettingsToggleOff.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowStatistics: {{ \n{ShowStatistics.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeleteStatisticsData: {{ \n{DeleteStatisticsData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeleteStatisticsDataDialogue: {{ \n{DeleteStatisticsDataDialogue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureSwitchOnGrimDarkness: {{ \n{AreYouSureSwitchOnGrimDarkness.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GrimDaknessSettingsWarning: {{ \n{GrimDaknessSettingsWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureSwitchOffGrimDarkness: {{ \n{AreYouSureSwitchOffGrimDarkness.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UICombatTexts (19 fields) */
public record class UICombatTexts (
    LocalizedString CombatLogShowHide,
    LocalizedString CombatLogEventsFilter,
    LocalizedString CombatLogDialogueFilter,
    LocalizedString CombatLogCombatFilter,
    LocalizedString AttackOfOpportunity,
    LocalizedString ThrowSave,
    LocalizedString Avoid,
    LocalizedString Morale,
    LocalizedString Miss,
    LocalizedString Parried,
    LocalizedString Dodge,
    LocalizedString Cover,
    LocalizedString HPUninjured,
    LocalizedString HPBarelyInjured,
    LocalizedString HPInjured,
    LocalizedString HPBadlyInjured,
    LocalizedString HPNearDeath,
    LocalizedString HPDead,
    LocalizedString CultAmbush) : IUnityStructure
{
    public static UICombatTexts Read(EndianBinaryReader reader)
    {
        LocalizedString CombatLogShowHide_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogShowHide */
        LocalizedString CombatLogEventsFilter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogEventsFilter */
        LocalizedString CombatLogDialogueFilter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogDialogueFilter */
        LocalizedString CombatLogCombatFilter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatLogCombatFilter */
        LocalizedString AttackOfOpportunity_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackOfOpportunity */
        LocalizedString ThrowSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThrowSave */
        LocalizedString Avoid_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Avoid */
        LocalizedString Morale_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Morale */
        LocalizedString Miss_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Miss */
        LocalizedString Parried_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Parried */
        LocalizedString Dodge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString Cover_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cover */
        LocalizedString HPUninjured_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPUninjured */
        LocalizedString HPBarelyInjured_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPBarelyInjured */
        LocalizedString HPInjured_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPInjured */
        LocalizedString HPBadlyInjured_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPBadlyInjured */
        LocalizedString HPNearDeath_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPNearDeath */
        LocalizedString HPDead_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HPDead */
        LocalizedString CultAmbush_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CultAmbush */
        
        return new(CombatLogShowHide_,
            CombatLogEventsFilter_,
            CombatLogDialogueFilter_,
            CombatLogCombatFilter_,
            AttackOfOpportunity_,
            ThrowSave_,
            Avoid_,
            Morale_,
            Miss_,
            Parried_,
            Dodge_,
            Cover_,
            HPUninjured_,
            HPBarelyInjured_,
            HPInjured_,
            HPBadlyInjured_,
            HPNearDeath_,
            HPDead_,
            CultAmbush_);
    }

    public override string ToString() => $"UICombatTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CombatLogShowHide: {{ \n{CombatLogShowHide.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CombatLogEventsFilter: {{ \n{CombatLogEventsFilter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CombatLogDialogueFilter: {{ \n{CombatLogDialogueFilter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CombatLogCombatFilter: {{ \n{CombatLogCombatFilter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackOfOpportunity: {{ \n{AttackOfOpportunity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ThrowSave: {{ \n{ThrowSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Avoid: {{ \n{Avoid.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Morale: {{ \n{Morale.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Miss: {{ \n{Miss.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Parried: {{ \n{Parried.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dodge: {{ \n{Dodge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cover: {{ \n{Cover.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPUninjured: {{ \n{HPUninjured.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPBarelyInjured: {{ \n{HPBarelyInjured.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPInjured: {{ \n{HPInjured.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPBadlyInjured: {{ \n{HPBadlyInjured.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPNearDeath: {{ \n{HPNearDeath.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HPDead: {{ \n{HPDead.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CultAmbush: {{ \n{CultAmbush.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITurnBasedTexts (14 fields) */
public record class UITurnBasedTexts (
    LocalizedString Round,
    LocalizedString Rounds,
    LocalizedString CanUseOneTimeInCombat,
    LocalizedString NotEnoughActionsMessage,
    LocalizedString StartBattle,
    LocalizedString DeploymentPhaseBattle,
    LocalizedString CannotDeploy,
    LocalizedString CannotStartbattle,
    LocalizedString YouTurn,
    LocalizedString CurrentUnit,
    LocalizedString UnitOrder,
    LocalizedString NextRound,
    LocalizedString Deploy,
    LocalizedString AutoEndTurn) : IUnityStructure
{
    public static UITurnBasedTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Round_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Round */
        LocalizedString Rounds_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rounds */
        LocalizedString CanUseOneTimeInCombat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanUseOneTimeInCombat */
        LocalizedString NotEnoughActionsMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughActionsMessage */
        LocalizedString StartBattle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StartBattle */
        LocalizedString DeploymentPhaseBattle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeploymentPhaseBattle */
        LocalizedString CannotDeploy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotDeploy */
        LocalizedString CannotStartbattle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotStartbattle */
        LocalizedString YouTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouTurn */
        LocalizedString CurrentUnit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentUnit */
        LocalizedString UnitOrder_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnitOrder */
        LocalizedString NextRound_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextRound */
        LocalizedString Deploy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Deploy */
        LocalizedString AutoEndTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoEndTurn */
        
        return new(Round_,
            Rounds_,
            CanUseOneTimeInCombat_,
            NotEnoughActionsMessage_,
            StartBattle_,
            DeploymentPhaseBattle_,
            CannotDeploy_,
            CannotStartbattle_,
            YouTurn_,
            CurrentUnit_,
            UnitOrder_,
            NextRound_,
            Deploy_,
            AutoEndTurn_);
    }

    public override string ToString() => $"UITurnBasedTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Round: {{ \n{Round.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rounds: {{ \n{Rounds.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CanUseOneTimeInCombat: {{ \n{CanUseOneTimeInCombat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NotEnoughActionsMessage: {{ \n{NotEnoughActionsMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StartBattle: {{ \n{StartBattle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeploymentPhaseBattle: {{ \n{DeploymentPhaseBattle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotDeploy: {{ \n{CannotDeploy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotStartbattle: {{ \n{CannotStartbattle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouTurn: {{ \n{YouTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentUnit: {{ \n{CurrentUnit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnitOrder: {{ \n{UnitOrder.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextRound: {{ \n{NextRound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Deploy: {{ \n{Deploy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoEndTurn: {{ \n{AutoEndTurn.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UISpaceCombatTexts (20 fields) */
public record class UISpaceCombatTexts (
    LocalizedString BackToShipBridge,
    LocalizedString ExitBattle,
    LocalizedString ArmorHint,
    LocalizedString ShieldsHint,
    LocalizedString Crew,
    LocalizedString Morale,
    LocalizedString MilitaryRating,
    LocalizedString CombatMovementActionHint,
    LocalizedString TimeSurvivalHint,
    LocalizedString TimeSurvivalActionHint,
    LocalizedString ShipMovementWarning,
    LocalizedString PortAbilitiesGroupLabel,
    LocalizedString ProwAbilitiesGroupLabel,
    LocalizedString DorsalAbilitiesGroupLabel,
    LocalizedString StarboardAbilitiesGroupLabel,
    LocalizedString NavigatorResource,
    LocalizedString NavigatorResourceDescription,
    LocalizedString TorpedoSelfDestruct,
    SpacePostStrings[] PostStrings,
    LocalizedString KoronusExpanse) : IUnityStructure
{
    public static UISpaceCombatTexts Read(EndianBinaryReader reader)
    {
        LocalizedString BackToShipBridge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackToShipBridge */
        LocalizedString ExitBattle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExitBattle */
        LocalizedString ArmorHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorHint */
        LocalizedString ShieldsHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldsHint */
        LocalizedString Crew_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Crew */
        LocalizedString Morale_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Morale */
        LocalizedString MilitaryRating_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MilitaryRating */
        LocalizedString CombatMovementActionHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CombatMovementActionHint */
        LocalizedString TimeSurvivalHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TimeSurvivalHint */
        LocalizedString TimeSurvivalActionHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TimeSurvivalActionHint */
        LocalizedString ShipMovementWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipMovementWarning */
        LocalizedString PortAbilitiesGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortAbilitiesGroupLabel */
        LocalizedString ProwAbilitiesGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProwAbilitiesGroupLabel */
        LocalizedString DorsalAbilitiesGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DorsalAbilitiesGroupLabel */
        LocalizedString StarboardAbilitiesGroupLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StarboardAbilitiesGroupLabel */
        LocalizedString NavigatorResource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResource */
        LocalizedString NavigatorResourceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResourceDescription */
        LocalizedString TorpedoSelfDestruct_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TorpedoSelfDestruct */
        SpacePostStrings[] PostStrings_ = BuiltInArray<SpacePostStrings>.Read(reader);
        reader.AlignTo(4); /* PostStrings */
        LocalizedString KoronusExpanse_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* KoronusExpanse */
        
        return new(BackToShipBridge_,
            ExitBattle_,
            ArmorHint_,
            ShieldsHint_,
            Crew_,
            Morale_,
            MilitaryRating_,
            CombatMovementActionHint_,
            TimeSurvivalHint_,
            TimeSurvivalActionHint_,
            ShipMovementWarning_,
            PortAbilitiesGroupLabel_,
            ProwAbilitiesGroupLabel_,
            DorsalAbilitiesGroupLabel_,
            StarboardAbilitiesGroupLabel_,
            NavigatorResource_,
            NavigatorResourceDescription_,
            TorpedoSelfDestruct_,
            PostStrings_,
            KoronusExpanse_);
    }

    public override string ToString() => $"UISpaceCombatTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackToShipBridge: {{ \n{BackToShipBridge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExitBattle: {{ \n{ExitBattle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmorHint: {{ \n{ArmorHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShieldsHint: {{ \n{ShieldsHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Crew: {{ \n{Crew.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Morale: {{ \n{Morale.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MilitaryRating: {{ \n{MilitaryRating.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CombatMovementActionHint: {{ \n{CombatMovementActionHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TimeSurvivalHint: {{ \n{TimeSurvivalHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TimeSurvivalActionHint: {{ \n{TimeSurvivalActionHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipMovementWarning: {{ \n{ShipMovementWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PortAbilitiesGroupLabel: {{ \n{PortAbilitiesGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProwAbilitiesGroupLabel: {{ \n{ProwAbilitiesGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DorsalAbilitiesGroupLabel: {{ \n{DorsalAbilitiesGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StarboardAbilitiesGroupLabel: {{ \n{StarboardAbilitiesGroupLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NavigatorResource: {{ \n{NavigatorResource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NavigatorResourceDescription: {{ \n{NavigatorResourceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TorpedoSelfDestruct: {{ \n{TorpedoSelfDestruct.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostStrings[{PostStrings.Length}] = {{");
        if (PostStrings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SpacePostStrings _4 in PostStrings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (PostStrings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KoronusExpanse: {{ \n{KoronusExpanse.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SpacePostStrings (2 fields) */
public record class SpacePostStrings (
    LocalizedString Title,
    LocalizedString Description) : IUnityStructure
{
    public static SpacePostStrings Read(EndianBinaryReader reader)
    {
        LocalizedString Title_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Title */
        LocalizedString Description_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        
        return new(Title_,
            Description_);
    }

    public override string ToString() => $"SpacePostStrings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Title: {{ \n{Title.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Description: {{ \n{Description.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIExplorationTexts (44 fields) */
public record class UIExplorationTexts (
    LocalizedString ExploObjectResources,
    LocalizedString ExploObjectResourcesEmpty,
    LocalizedString ExploPointsOfInterest,
    LocalizedString ExploBeginScan,
    LocalizedString ExploCancelScan,
    LocalizedString ExploAlreadyExplored,
    LocalizedString ExploNotExplored,
    LocalizedString ExploNotInteractable,
    LocalizedString AnomalyVisitUnknown,
    LocalizedString AnomalyVisitExplored,
    LocalizedString StatCheckLootCheckStatButton,
    LocalizedString StatCheckLootConfirmSelectedUnitButton,
    LocalizedString StatCheckLootSwitchUnitSubHeader,
    LocalizedString ExpeditionHeader,
    LocalizedString ExpeditionRewardsDescription,
    LocalizedString ExpeditionSendButtonLabel,
    LocalizedString ExpeditionSentDialogMessage,
    LocalizedString ResourceMiner,
    LocalizedString ResourceMinerDesc,
    LocalizedString NotEnoughResourceMiners,
    LocalizedString UseResourceMinerDialogMessage,
    LocalizedString RemoveResourceMinerDialogMessage,
    LocalizedString StartMiningNotificationText,
    LocalizedString StopMiningNotificationText,
    LocalizedString YourScannersFoundResources,
    LocalizedString DefaultAnomalyTypeName,
    LocalizedString ShipSignatureAnomalyTypeName,
    LocalizedString EnemyAnomalyTypeName,
    LocalizedString GasAnomalyTypeName,
    LocalizedString WarpHtonAnomalyTypeName,
    LocalizedString LootAnomalyTypeName,
    LocalizedString NoAnomalyInSystem,
    LocalizedString TitheGrade,
    LocalizedString TitheGradeUndetermined,
    LocalizedString DiscoveredResources,
    LocalizedString ResourceMining,
    LocalizedString BookEventPoi,
    LocalizedString CargoPoi,
    LocalizedString ColonyTraitPoi,
    LocalizedString ExpeditionPoi,
    LocalizedString GroundOperationPoi,
    LocalizedString LootPoi,
    LocalizedString ResourcesPoi,
    LocalizedString StatCheckLootPoi) : IUnityStructure
{
    public static UIExplorationTexts Read(EndianBinaryReader reader)
    {
        LocalizedString ExploObjectResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploObjectResources */
        LocalizedString ExploObjectResourcesEmpty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploObjectResourcesEmpty */
        LocalizedString ExploPointsOfInterest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploPointsOfInterest */
        LocalizedString ExploBeginScan_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploBeginScan */
        LocalizedString ExploCancelScan_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploCancelScan */
        LocalizedString ExploAlreadyExplored_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploAlreadyExplored */
        LocalizedString ExploNotExplored_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploNotExplored */
        LocalizedString ExploNotInteractable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExploNotInteractable */
        LocalizedString AnomalyVisitUnknown_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnomalyVisitUnknown */
        LocalizedString AnomalyVisitExplored_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnomalyVisitExplored */
        LocalizedString StatCheckLootCheckStatButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootCheckStatButton */
        LocalizedString StatCheckLootConfirmSelectedUnitButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootConfirmSelectedUnitButton */
        LocalizedString StatCheckLootSwitchUnitSubHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootSwitchUnitSubHeader */
        LocalizedString ExpeditionHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionHeader */
        LocalizedString ExpeditionRewardsDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionRewardsDescription */
        LocalizedString ExpeditionSendButtonLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionSendButtonLabel */
        LocalizedString ExpeditionSentDialogMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionSentDialogMessage */
        LocalizedString ResourceMiner_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourceMiner */
        LocalizedString ResourceMinerDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourceMinerDesc */
        LocalizedString NotEnoughResourceMiners_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughResourceMiners */
        LocalizedString UseResourceMinerDialogMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UseResourceMinerDialogMessage */
        LocalizedString RemoveResourceMinerDialogMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RemoveResourceMinerDialogMessage */
        LocalizedString StartMiningNotificationText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StartMiningNotificationText */
        LocalizedString StopMiningNotificationText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StopMiningNotificationText */
        LocalizedString YourScannersFoundResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YourScannersFoundResources */
        LocalizedString DefaultAnomalyTypeName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DefaultAnomalyTypeName */
        LocalizedString ShipSignatureAnomalyTypeName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipSignatureAnomalyTypeName */
        LocalizedString EnemyAnomalyTypeName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnemyAnomalyTypeName */
        LocalizedString GasAnomalyTypeName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GasAnomalyTypeName */
        LocalizedString WarpHtonAnomalyTypeName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WarpHtonAnomalyTypeName */
        LocalizedString LootAnomalyTypeName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootAnomalyTypeName */
        LocalizedString NoAnomalyInSystem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAnomalyInSystem */
        LocalizedString TitheGrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TitheGrade */
        LocalizedString TitheGradeUndetermined_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TitheGradeUndetermined */
        LocalizedString DiscoveredResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DiscoveredResources */
        LocalizedString ResourceMining_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourceMining */
        LocalizedString BookEventPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BookEventPoi */
        LocalizedString CargoPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoPoi */
        LocalizedString ColonyTraitPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyTraitPoi */
        LocalizedString ExpeditionPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExpeditionPoi */
        LocalizedString GroundOperationPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GroundOperationPoi */
        LocalizedString LootPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootPoi */
        LocalizedString ResourcesPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResourcesPoi */
        LocalizedString StatCheckLootPoi_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatCheckLootPoi */
        
        return new(ExploObjectResources_,
            ExploObjectResourcesEmpty_,
            ExploPointsOfInterest_,
            ExploBeginScan_,
            ExploCancelScan_,
            ExploAlreadyExplored_,
            ExploNotExplored_,
            ExploNotInteractable_,
            AnomalyVisitUnknown_,
            AnomalyVisitExplored_,
            StatCheckLootCheckStatButton_,
            StatCheckLootConfirmSelectedUnitButton_,
            StatCheckLootSwitchUnitSubHeader_,
            ExpeditionHeader_,
            ExpeditionRewardsDescription_,
            ExpeditionSendButtonLabel_,
            ExpeditionSentDialogMessage_,
            ResourceMiner_,
            ResourceMinerDesc_,
            NotEnoughResourceMiners_,
            UseResourceMinerDialogMessage_,
            RemoveResourceMinerDialogMessage_,
            StartMiningNotificationText_,
            StopMiningNotificationText_,
            YourScannersFoundResources_,
            DefaultAnomalyTypeName_,
            ShipSignatureAnomalyTypeName_,
            EnemyAnomalyTypeName_,
            GasAnomalyTypeName_,
            WarpHtonAnomalyTypeName_,
            LootAnomalyTypeName_,
            NoAnomalyInSystem_,
            TitheGrade_,
            TitheGradeUndetermined_,
            DiscoveredResources_,
            ResourceMining_,
            BookEventPoi_,
            CargoPoi_,
            ColonyTraitPoi_,
            ExpeditionPoi_,
            GroundOperationPoi_,
            LootPoi_,
            ResourcesPoi_,
            StatCheckLootPoi_);
    }

    public override string ToString() => $"UIExplorationTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploObjectResources: {{ \n{ExploObjectResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploObjectResourcesEmpty: {{ \n{ExploObjectResourcesEmpty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploPointsOfInterest: {{ \n{ExploPointsOfInterest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploBeginScan: {{ \n{ExploBeginScan.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploCancelScan: {{ \n{ExploCancelScan.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploAlreadyExplored: {{ \n{ExploAlreadyExplored.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploNotExplored: {{ \n{ExploNotExplored.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExploNotInteractable: {{ \n{ExploNotInteractable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnomalyVisitUnknown: {{ \n{AnomalyVisitUnknown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnomalyVisitExplored: {{ \n{AnomalyVisitExplored.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatCheckLootCheckStatButton: {{ \n{StatCheckLootCheckStatButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatCheckLootConfirmSelectedUnitButton: {{ \n{StatCheckLootConfirmSelectedUnitButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatCheckLootSwitchUnitSubHeader: {{ \n{StatCheckLootSwitchUnitSubHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExpeditionHeader: {{ \n{ExpeditionHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExpeditionRewardsDescription: {{ \n{ExpeditionRewardsDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExpeditionSendButtonLabel: {{ \n{ExpeditionSendButtonLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExpeditionSentDialogMessage: {{ \n{ExpeditionSentDialogMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourceMiner: {{ \n{ResourceMiner.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourceMinerDesc: {{ \n{ResourceMinerDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NotEnoughResourceMiners: {{ \n{NotEnoughResourceMiners.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UseResourceMinerDialogMessage: {{ \n{UseResourceMinerDialogMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RemoveResourceMinerDialogMessage: {{ \n{RemoveResourceMinerDialogMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StartMiningNotificationText: {{ \n{StartMiningNotificationText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StopMiningNotificationText: {{ \n{StopMiningNotificationText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YourScannersFoundResources: {{ \n{YourScannersFoundResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DefaultAnomalyTypeName: {{ \n{DefaultAnomalyTypeName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipSignatureAnomalyTypeName: {{ \n{ShipSignatureAnomalyTypeName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EnemyAnomalyTypeName: {{ \n{EnemyAnomalyTypeName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GasAnomalyTypeName: {{ \n{GasAnomalyTypeName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WarpHtonAnomalyTypeName: {{ \n{WarpHtonAnomalyTypeName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootAnomalyTypeName: {{ \n{LootAnomalyTypeName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoAnomalyInSystem: {{ \n{NoAnomalyInSystem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TitheGrade: {{ \n{TitheGrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TitheGradeUndetermined: {{ \n{TitheGradeUndetermined.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DiscoveredResources: {{ \n{DiscoveredResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourceMining: {{ \n{ResourceMining.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BookEventPoi: {{ \n{BookEventPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoPoi: {{ \n{CargoPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyTraitPoi: {{ \n{ColonyTraitPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExpeditionPoi: {{ \n{ExpeditionPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GroundOperationPoi: {{ \n{GroundOperationPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootPoi: {{ \n{LootPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourcesPoi: {{ \n{ResourcesPoi.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatCheckLootPoi: {{ \n{StatCheckLootPoi.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonizationTexts (6 fields) */
public record class UIColonizationTexts (
    ColonyResourceStrings[] ResourceStrings,
    ColonyStatsStrings[] StatStrings,
    LocalizedString ColonyStatsTitle,
    LocalizedString ColonyStatModifierOriginOther,
    LocalizedString ColonyManagementNoColonies,
    LocalizedString ColonyManagementVisitColonyButton) : IUnityStructure
{
    public static UIColonizationTexts Read(EndianBinaryReader reader)
    {
        ColonyResourceStrings[] ResourceStrings_ = BuiltInArray<ColonyResourceStrings>.Read(reader);
        reader.AlignTo(4); /* ResourceStrings */
        ColonyStatsStrings[] StatStrings_ = BuiltInArray<ColonyStatsStrings>.Read(reader);
        reader.AlignTo(4); /* StatStrings */
        LocalizedString ColonyStatsTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyStatsTitle */
        LocalizedString ColonyStatModifierOriginOther_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyStatModifierOriginOther */
        LocalizedString ColonyManagementNoColonies_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagementNoColonies */
        LocalizedString ColonyManagementVisitColonyButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagementVisitColonyButton */
        
        return new(ResourceStrings_,
            StatStrings_,
            ColonyStatsTitle_,
            ColonyStatModifierOriginOther_,
            ColonyManagementNoColonies_,
            ColonyManagementVisitColonyButton_);
    }

    public override string ToString() => $"UIColonizationTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResourceStrings[{ResourceStrings.Length}] = {{");
        if (ResourceStrings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ColonyResourceStrings _4 in ResourceStrings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (ResourceStrings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatStrings[{StatStrings.Length}] = {{");
        if (StatStrings.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ColonyStatsStrings _4 in StatStrings)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (StatStrings.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyStatsTitle: {{ \n{ColonyStatsTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyStatModifierOriginOther: {{ \n{ColonyStatModifierOriginOther.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyManagementNoColonies: {{ \n{ColonyManagementNoColonies.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyManagementVisitColonyButton: {{ \n{ColonyManagementVisitColonyButton.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ColonyResourceStrings (2 fields) */
public record class ColonyResourceStrings (
    LocalizedString Name,
    LocalizedString Description) : IUnityStructure
{
    public static ColonyResourceStrings Read(EndianBinaryReader reader)
    {
        LocalizedString Name_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Name */
        LocalizedString Description_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        
        return new(Name_,
            Description_);
    }

    public override string ToString() => $"ColonyResourceStrings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Name: {{ \n{Name.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Description: {{ \n{Description.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ColonyStatsStrings (2 fields) */
public record class ColonyStatsStrings (
    LocalizedString Name,
    LocalizedString Description) : IUnityStructure
{
    public static ColonyStatsStrings Read(EndianBinaryReader reader)
    {
        LocalizedString Name_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Name */
        LocalizedString Description_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        
        return new(Name_,
            Description_);
    }

    public override string ToString() => $"ColonyStatsStrings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Name: {{ \n{Name.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Description: {{ \n{Description.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonyProjectsTexts (16 fields) */
public record class UIColonyProjectsTexts (
    LocalizedString HeaderDefault,
    LocalizedString OpenProjectsButton,
    LocalizedString StartProjectButton,
    LocalizedString ShowBlockedProjectsButton,
    LocalizedString ShowFinishedProjectsButton,
    LocalizedString ProjectRewards,
    LocalizedString ProjectRequirements,
    LocalizedString ProjectIsBuilding,
    LocalizedString ProjectIsFinished,
    LocalizedString ProjectRequirementsNotMet,
    LocalizedString OtherProjectIsBuilding,
    LocalizedString ProjectName,
    LocalizedString EventWaitingToStart,
    LocalizedString NewChronicle,
    LocalizedString BuildingInProgress,
    LocalizedString Rank) : IUnityStructure
{
    public static UIColonyProjectsTexts Read(EndianBinaryReader reader)
    {
        LocalizedString HeaderDefault_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HeaderDefault */
        LocalizedString OpenProjectsButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenProjectsButton */
        LocalizedString StartProjectButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StartProjectButton */
        LocalizedString ShowBlockedProjectsButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowBlockedProjectsButton */
        LocalizedString ShowFinishedProjectsButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowFinishedProjectsButton */
        LocalizedString ProjectRewards_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectRewards */
        LocalizedString ProjectRequirements_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectRequirements */
        LocalizedString ProjectIsBuilding_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectIsBuilding */
        LocalizedString ProjectIsFinished_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectIsFinished */
        LocalizedString ProjectRequirementsNotMet_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectRequirementsNotMet */
        LocalizedString OtherProjectIsBuilding_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OtherProjectIsBuilding */
        LocalizedString ProjectName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProjectName */
        LocalizedString EventWaitingToStart_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EventWaitingToStart */
        LocalizedString NewChronicle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewChronicle */
        LocalizedString BuildingInProgress_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuildingInProgress */
        LocalizedString Rank_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rank */
        
        return new(HeaderDefault_,
            OpenProjectsButton_,
            StartProjectButton_,
            ShowBlockedProjectsButton_,
            ShowFinishedProjectsButton_,
            ProjectRewards_,
            ProjectRequirements_,
            ProjectIsBuilding_,
            ProjectIsFinished_,
            ProjectRequirementsNotMet_,
            OtherProjectIsBuilding_,
            ProjectName_,
            EventWaitingToStart_,
            NewChronicle_,
            BuildingInProgress_,
            Rank_);
    }

    public override string ToString() => $"UIColonyProjectsTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HeaderDefault: {{ \n{HeaderDefault.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenProjectsButton: {{ \n{OpenProjectsButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StartProjectButton: {{ \n{StartProjectButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowBlockedProjectsButton: {{ \n{ShowBlockedProjectsButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowFinishedProjectsButton: {{ \n{ShowFinishedProjectsButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProjectRewards: {{ \n{ProjectRewards.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProjectRequirements: {{ \n{ProjectRequirements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProjectIsBuilding: {{ \n{ProjectIsBuilding.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProjectIsFinished: {{ \n{ProjectIsFinished.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProjectRequirementsNotMet: {{ \n{ProjectRequirementsNotMet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OtherProjectIsBuilding: {{ \n{OtherProjectIsBuilding.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProjectName: {{ \n{ProjectName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EventWaitingToStart: {{ \n{EventWaitingToStart.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewChronicle: {{ \n{NewChronicle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BuildingInProgress: {{ \n{BuildingInProgress.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rank: {{ \n{Rank.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonyProjectsRewards (23 fields) */
public record class UIColonyProjectsRewards (
    LocalizedString RewardAddFeature,
    LocalizedString RewardAddFeatureParty,
    LocalizedString RewardAddFeatureShip,
    LocalizedString RewardAllRoutesNotDeadly,
    LocalizedString RewardChangeNewPassageCost,
    LocalizedString RewardChangeStatContentment,
    LocalizedString RewardChangeStatEfficiency,
    LocalizedString RewardChangeStatSecurity,
    LocalizedString RewardProfitFactor,
    LocalizedString RewardStartContract,
    LocalizedString RewardActivateSpawners,
    LocalizedString RewardActivateSpawnersDesc,
    LocalizedString RewardActivateSpawnersPirate,
    LocalizedString RewardActivateSpawnersPirateDesc,
    LocalizedString RewardUnhideUnitsOnSceneRE,
    LocalizedString RewardUnhideUnitsOnSceneREDesc,
    LocalizedString ClaimDescription,
    LocalizedString ColonyRewardsHeader,
    LocalizedString StatRewardsHeader,
    LocalizedString LootRewardsHeader,
    LocalizedString ForAllColonies,
    LocalizedString AllColonies,
    LocalizedString Rechargeable) : IUnityStructure
{
    public static UIColonyProjectsRewards Read(EndianBinaryReader reader)
    {
        LocalizedString RewardAddFeature_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAddFeature */
        LocalizedString RewardAddFeatureParty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAddFeatureParty */
        LocalizedString RewardAddFeatureShip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAddFeatureShip */
        LocalizedString RewardAllRoutesNotDeadly_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAllRoutesNotDeadly */
        LocalizedString RewardChangeNewPassageCost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeNewPassageCost */
        LocalizedString RewardChangeStatContentment_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeStatContentment */
        LocalizedString RewardChangeStatEfficiency_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeStatEfficiency */
        LocalizedString RewardChangeStatSecurity_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardChangeStatSecurity */
        LocalizedString RewardProfitFactor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardProfitFactor */
        LocalizedString RewardStartContract_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardStartContract */
        LocalizedString RewardActivateSpawners_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardActivateSpawners */
        LocalizedString RewardActivateSpawnersDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardActivateSpawnersDesc */
        LocalizedString RewardActivateSpawnersPirate_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardActivateSpawnersPirate */
        LocalizedString RewardActivateSpawnersPirateDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardActivateSpawnersPirateDesc */
        LocalizedString RewardUnhideUnitsOnSceneRE_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardUnhideUnitsOnSceneRE */
        LocalizedString RewardUnhideUnitsOnSceneREDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardUnhideUnitsOnSceneREDesc */
        LocalizedString ClaimDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClaimDescription */
        LocalizedString ColonyRewardsHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyRewardsHeader */
        LocalizedString StatRewardsHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatRewardsHeader */
        LocalizedString LootRewardsHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootRewardsHeader */
        LocalizedString ForAllColonies_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ForAllColonies */
        LocalizedString AllColonies_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllColonies */
        LocalizedString Rechargeable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rechargeable */
        
        return new(RewardAddFeature_,
            RewardAddFeatureParty_,
            RewardAddFeatureShip_,
            RewardAllRoutesNotDeadly_,
            RewardChangeNewPassageCost_,
            RewardChangeStatContentment_,
            RewardChangeStatEfficiency_,
            RewardChangeStatSecurity_,
            RewardProfitFactor_,
            RewardStartContract_,
            RewardActivateSpawners_,
            RewardActivateSpawnersDesc_,
            RewardActivateSpawnersPirate_,
            RewardActivateSpawnersPirateDesc_,
            RewardUnhideUnitsOnSceneRE_,
            RewardUnhideUnitsOnSceneREDesc_,
            ClaimDescription_,
            ColonyRewardsHeader_,
            StatRewardsHeader_,
            LootRewardsHeader_,
            ForAllColonies_,
            AllColonies_,
            Rechargeable_);
    }

    public override string ToString() => $"UIColonyProjectsRewards\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardAddFeature: {{ \n{RewardAddFeature.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardAddFeatureParty: {{ \n{RewardAddFeatureParty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardAddFeatureShip: {{ \n{RewardAddFeatureShip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardAllRoutesNotDeadly: {{ \n{RewardAllRoutesNotDeadly.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardChangeNewPassageCost: {{ \n{RewardChangeNewPassageCost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardChangeStatContentment: {{ \n{RewardChangeStatContentment.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardChangeStatEfficiency: {{ \n{RewardChangeStatEfficiency.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardChangeStatSecurity: {{ \n{RewardChangeStatSecurity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardProfitFactor: {{ \n{RewardProfitFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardStartContract: {{ \n{RewardStartContract.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardActivateSpawners: {{ \n{RewardActivateSpawners.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardActivateSpawnersDesc: {{ \n{RewardActivateSpawnersDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardActivateSpawnersPirate: {{ \n{RewardActivateSpawnersPirate.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardActivateSpawnersPirateDesc: {{ \n{RewardActivateSpawnersPirateDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardUnhideUnitsOnSceneRE: {{ \n{RewardUnhideUnitsOnSceneRE.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardUnhideUnitsOnSceneREDesc: {{ \n{RewardUnhideUnitsOnSceneREDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClaimDescription: {{ \n{ClaimDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyRewardsHeader: {{ \n{ColonyRewardsHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatRewardsHeader: {{ \n{StatRewardsHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootRewardsHeader: {{ \n{LootRewardsHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ForAllColonies: {{ \n{ForAllColonies.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AllColonies: {{ \n{AllColonies.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rechargeable: {{ \n{Rechargeable.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonyProjectsRequirements (10 fields) */
public record class UIColonyProjectsRequirements (
    LocalizedString RequirementBuiltProjectOneOf,
    LocalizedString RequirementBuiltProjectGlobal,
    LocalizedString RequirementBuiltProjectInColony,
    LocalizedString RequirementNotBuiltProjectInColony,
    LocalizedString RequirementProfitFactorCost,
    LocalizedString RequirementReputation,
    LocalizedString RequirementStatContentment,
    LocalizedString RequireStatEfficiency,
    LocalizedString RequireStatSecurity,
    LocalizedString ProfitFactorInsteadResource) : IUnityStructure
{
    public static UIColonyProjectsRequirements Read(EndianBinaryReader reader)
    {
        LocalizedString RequirementBuiltProjectOneOf_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementBuiltProjectOneOf */
        LocalizedString RequirementBuiltProjectGlobal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementBuiltProjectGlobal */
        LocalizedString RequirementBuiltProjectInColony_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementBuiltProjectInColony */
        LocalizedString RequirementNotBuiltProjectInColony_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementNotBuiltProjectInColony */
        LocalizedString RequirementProfitFactorCost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementProfitFactorCost */
        LocalizedString RequirementReputation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementReputation */
        LocalizedString RequirementStatContentment_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequirementStatContentment */
        LocalizedString RequireStatEfficiency_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequireStatEfficiency */
        LocalizedString RequireStatSecurity_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequireStatSecurity */
        LocalizedString ProfitFactorInsteadResource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProfitFactorInsteadResource */
        
        return new(RequirementBuiltProjectOneOf_,
            RequirementBuiltProjectGlobal_,
            RequirementBuiltProjectInColony_,
            RequirementNotBuiltProjectInColony_,
            RequirementProfitFactorCost_,
            RequirementReputation_,
            RequirementStatContentment_,
            RequireStatEfficiency_,
            RequireStatSecurity_,
            ProfitFactorInsteadResource_);
    }

    public override string ToString() => $"UIColonyProjectsRequirements\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementBuiltProjectOneOf: {{ \n{RequirementBuiltProjectOneOf.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementBuiltProjectGlobal: {{ \n{RequirementBuiltProjectGlobal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementBuiltProjectInColony: {{ \n{RequirementBuiltProjectInColony.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementNotBuiltProjectInColony: {{ \n{RequirementNotBuiltProjectInColony.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementProfitFactorCost: {{ \n{RequirementProfitFactorCost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementReputation: {{ \n{RequirementReputation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequirementStatContentment: {{ \n{RequirementStatContentment.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequireStatEfficiency: {{ \n{RequireStatEfficiency.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequireStatSecurity: {{ \n{RequireStatSecurity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProfitFactorInsteadResource: {{ \n{ProfitFactorInsteadResource.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonyNotificationTexts (5 fields) */
public record class UIColonyNotificationTexts (
    LocalizedString NewChronicleStatus,
    LocalizedString NewEventStatus,
    LocalizedString ChronicleMessage,
    LocalizedString EventMessage,
    LocalizedString ColonyManagementButtonText) : IUnityStructure
{
    public static UIColonyNotificationTexts Read(EndianBinaryReader reader)
    {
        LocalizedString NewChronicleStatus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewChronicleStatus */
        LocalizedString NewEventStatus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewEventStatus */
        LocalizedString ChronicleMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChronicleMessage */
        LocalizedString EventMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EventMessage */
        LocalizedString ColonyManagementButtonText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ColonyManagementButtonText */
        
        return new(NewChronicleStatus_,
            NewEventStatus_,
            ChronicleMessage_,
            EventMessage_,
            ColonyManagementButtonText_);
    }

    public override string ToString() => $"UIColonyNotificationTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewChronicleStatus: {{ \n{NewChronicleStatus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewEventStatus: {{ \n{NewEventStatus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChronicleMessage: {{ \n{ChronicleMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EventMessage: {{ \n{EventMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColonyManagementButtonText: {{ \n{ColonyManagementButtonText.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonyEventsTexts (5 fields) */
public record class UIColonyEventsTexts (
    LocalizedString EventsHeader,
    LocalizedString RewardAvailableStatus,
    LocalizedString NeedsVisitMechanicString,
    LocalizedString NeedsResolveMechanicString,
    LocalizedString NeedsVisitWarningMessage) : IUnityStructure
{
    public static UIColonyEventsTexts Read(EndianBinaryReader reader)
    {
        LocalizedString EventsHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EventsHeader */
        LocalizedString RewardAvailableStatus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardAvailableStatus */
        LocalizedString NeedsVisitMechanicString_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedsVisitMechanicString */
        LocalizedString NeedsResolveMechanicString_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedsResolveMechanicString */
        LocalizedString NeedsVisitWarningMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedsVisitWarningMessage */
        
        return new(EventsHeader_,
            RewardAvailableStatus_,
            NeedsVisitMechanicString_,
            NeedsResolveMechanicString_,
            NeedsVisitWarningMessage_);
    }

    public override string ToString() => $"UIColonyEventsTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EventsHeader: {{ \n{EventsHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardAvailableStatus: {{ \n{RewardAvailableStatus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedsVisitMechanicString: {{ \n{NeedsVisitMechanicString.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedsResolveMechanicString: {{ \n{NeedsResolveMechanicString.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedsVisitWarningMessage: {{ \n{NeedsVisitWarningMessage.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIColonyTraitsTexts (1 fields) */
public record class UIColonyTraitsTexts (
    LocalizedString TraitsHeader) : IUnityStructure
{
    public static UIColonyTraitsTexts Read(EndianBinaryReader reader)
    {
        LocalizedString TraitsHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TraitsHeader */
        
        return new(TraitsHeader_);
    }

    public override string ToString() => $"UIColonyTraitsTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TraitsHeader: {{ \n{TraitsHeader.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITermsOfUseTexts (10 fields) */
public record class UITermsOfUseTexts (
    LocalizedString Header,
    LocalizedString Licence,
    LocalizedString LicenceConsole,
    LocalizedString LicenceConsoleSIEA,
    LocalizedString LicenceConsoleSIEE,
    LocalizedString SubLicence,
    LocalizedString AcceptBtn,
    LocalizedString DeclineBtn,
    LocalizedString OkBtn,
    LocalizedString AreYouReallyWantToDeclineAgreement) : IUnityStructure
{
    public static UITermsOfUseTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Header_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Header */
        LocalizedString Licence_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Licence */
        LocalizedString LicenceConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LicenceConsole */
        LocalizedString LicenceConsoleSIEA_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LicenceConsoleSIEA */
        LocalizedString LicenceConsoleSIEE_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LicenceConsoleSIEE */
        LocalizedString SubLicence_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SubLicence */
        LocalizedString AcceptBtn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AcceptBtn */
        LocalizedString DeclineBtn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeclineBtn */
        LocalizedString OkBtn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OkBtn */
        LocalizedString AreYouReallyWantToDeclineAgreement_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouReallyWantToDeclineAgreement */
        
        return new(Header_,
            Licence_,
            LicenceConsole_,
            LicenceConsoleSIEA_,
            LicenceConsoleSIEE_,
            SubLicence_,
            AcceptBtn_,
            DeclineBtn_,
            OkBtn_,
            AreYouReallyWantToDeclineAgreement_);
    }

    public override string ToString() => $"UITermsOfUseTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Header: {{ \n{Header.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Licence: {{ \n{Licence.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LicenceConsole: {{ \n{LicenceConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LicenceConsoleSIEA: {{ \n{LicenceConsoleSIEA.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LicenceConsoleSIEE: {{ \n{LicenceConsoleSIEE.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SubLicence: {{ \n{SubLicence.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AcceptBtn: {{ \n{AcceptBtn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeclineBtn: {{ \n{DeclineBtn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OkBtn: {{ \n{OkBtn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouReallyWantToDeclineAgreement: {{ \n{AreYouReallyWantToDeclineAgreement.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIDialog (24 fields) */
public record class UIDialog (
    LocalizedString SucccedeedCheckFormat,
    LocalizedString FailedCheckFormat,
    LocalizedString SoulMarkShiftFormat,
    LocalizedString Succeeded,
    LocalizedString Failed,
    LocalizedString AligmentShiftedFormat,
    LocalizedString AlignmentRequirementLabel,
    LocalizedString AnswerDialogueFormat,
    LocalizedString AnswerDialogueBeFormat,
    LocalizedString AnswerStringWithCheckFormat,
    LocalizedString AnswerStringWithCheckBeFormat,
    LocalizedString AnswerShowCheckFormat,
    LocalizedString AnswerYouNeedFullCargo,
    LocalizedString AnswerYouNeedItem,
    LocalizedString OpenGlossary,
    LocalizedString CloseGlossary,
    LocalizedString InterchapterSkip,
    LocalizedString InterchapterSkipConsole,
    LocalizedString ScrollToNew,
    LocalizedString CargoRequiredText,
    LocalizedString OperationOrConditionDesc,
    LocalizedString OperationAndConditionDesc,
    LocalizedString ShowVotes,
    LocalizedString HideVotes) : IUnityStructure
{
    public static UIDialog Read(EndianBinaryReader reader)
    {
        LocalizedString SucccedeedCheckFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SucccedeedCheckFormat */
        LocalizedString FailedCheckFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FailedCheckFormat */
        LocalizedString SoulMarkShiftFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkShiftFormat */
        LocalizedString Succeeded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Succeeded */
        LocalizedString Failed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Failed */
        LocalizedString AligmentShiftedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AligmentShiftedFormat */
        LocalizedString AlignmentRequirementLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AlignmentRequirementLabel */
        LocalizedString AnswerDialogueFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerDialogueFormat */
        LocalizedString AnswerDialogueBeFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerDialogueBeFormat */
        LocalizedString AnswerStringWithCheckFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerStringWithCheckFormat */
        LocalizedString AnswerStringWithCheckBeFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerStringWithCheckBeFormat */
        LocalizedString AnswerShowCheckFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerShowCheckFormat */
        LocalizedString AnswerYouNeedFullCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerYouNeedFullCargo */
        LocalizedString AnswerYouNeedItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AnswerYouNeedItem */
        LocalizedString OpenGlossary_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenGlossary */
        LocalizedString CloseGlossary_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseGlossary */
        LocalizedString InterchapterSkip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InterchapterSkip */
        LocalizedString InterchapterSkipConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InterchapterSkipConsole */
        LocalizedString ScrollToNew_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScrollToNew */
        LocalizedString CargoRequiredText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoRequiredText */
        LocalizedString OperationOrConditionDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OperationOrConditionDesc */
        LocalizedString OperationAndConditionDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OperationAndConditionDesc */
        LocalizedString ShowVotes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowVotes */
        LocalizedString HideVotes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideVotes */
        
        return new(SucccedeedCheckFormat_,
            FailedCheckFormat_,
            SoulMarkShiftFormat_,
            Succeeded_,
            Failed_,
            AligmentShiftedFormat_,
            AlignmentRequirementLabel_,
            AnswerDialogueFormat_,
            AnswerDialogueBeFormat_,
            AnswerStringWithCheckFormat_,
            AnswerStringWithCheckBeFormat_,
            AnswerShowCheckFormat_,
            AnswerYouNeedFullCargo_,
            AnswerYouNeedItem_,
            OpenGlossary_,
            CloseGlossary_,
            InterchapterSkip_,
            InterchapterSkipConsole_,
            ScrollToNew_,
            CargoRequiredText_,
            OperationOrConditionDesc_,
            OperationAndConditionDesc_,
            ShowVotes_,
            HideVotes_);
    }

    public override string ToString() => $"UIDialog\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SucccedeedCheckFormat: {{ \n{SucccedeedCheckFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FailedCheckFormat: {{ \n{FailedCheckFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkShiftFormat: {{ \n{SoulMarkShiftFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Succeeded: {{ \n{Succeeded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Failed: {{ \n{Failed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AligmentShiftedFormat: {{ \n{AligmentShiftedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlignmentRequirementLabel: {{ \n{AlignmentRequirementLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerDialogueFormat: {{ \n{AnswerDialogueFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerDialogueBeFormat: {{ \n{AnswerDialogueBeFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerStringWithCheckFormat: {{ \n{AnswerStringWithCheckFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerStringWithCheckBeFormat: {{ \n{AnswerStringWithCheckBeFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerShowCheckFormat: {{ \n{AnswerShowCheckFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerYouNeedFullCargo: {{ \n{AnswerYouNeedFullCargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AnswerYouNeedItem: {{ \n{AnswerYouNeedItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenGlossary: {{ \n{OpenGlossary.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CloseGlossary: {{ \n{CloseGlossary.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InterchapterSkip: {{ \n{InterchapterSkip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InterchapterSkipConsole: {{ \n{InterchapterSkipConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScrollToNew: {{ \n{ScrollToNew.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoRequiredText: {{ \n{CargoRequiredText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OperationOrConditionDesc: {{ \n{OperationOrConditionDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OperationAndConditionDesc: {{ \n{OperationAndConditionDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowVotes: {{ \n{ShowVotes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideVotes: {{ \n{HideVotes.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UISaveLoadTexts (28 fields) */
public record class UISaveLoadTexts (
    LocalizedString LoadSaveWarning,
    LocalizedString SaveLabel,
    LocalizedString LoadLabel,
    LocalizedString DeleteLabel,
    LocalizedString OverwriteWarning,
    LocalizedString DeleteWarning,
    LocalizedString SaveDefaultName,
    LocalizedString SavePrefixAuto,
    LocalizedString SavePrefixIronman,
    LocalizedString SavePrefixQuick,
    LocalizedString SaveClickToEdit,
    LocalizedString InGameFormat,
    LocalizedString DlcRequired,
    LocalizedString DlcListIsNotLoading,
    LocalizedString ClickToEdit,
    LocalizedString ShowScreenshot,
    LocalizedString AreYouSureDeleteAllSaves,
    LocalizedString RenameSave,
    LocalizedString EmptySaveListHint,
    LocalizedString DeleteCharacter,
    LocalizedString AreYouSureDeleteCharacter,
    LocalizedString ConfirmQuickLoad,
    LocalizedString SaveIsNotPossibleInIronMan,
    LocalizedString SaveHasIronManMode,
    LocalizedString YouLoadIronManSave,
    LocalizedString YouLoadNotIronManSave,
    LocalizedString CannotLoadCurrentIronManSave,
    LocalizedString CannotLoadIronManSaveInCoop) : IUnityStructure
{
    public static UISaveLoadTexts Read(EndianBinaryReader reader)
    {
        LocalizedString LoadSaveWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadSaveWarning */
        LocalizedString SaveLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveLabel */
        LocalizedString LoadLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadLabel */
        LocalizedString DeleteLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteLabel */
        LocalizedString OverwriteWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OverwriteWarning */
        LocalizedString DeleteWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteWarning */
        LocalizedString SaveDefaultName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveDefaultName */
        LocalizedString SavePrefixAuto_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SavePrefixAuto */
        LocalizedString SavePrefixIronman_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SavePrefixIronman */
        LocalizedString SavePrefixQuick_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SavePrefixQuick */
        LocalizedString SaveClickToEdit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveClickToEdit */
        LocalizedString InGameFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InGameFormat */
        LocalizedString DlcRequired_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcRequired */
        LocalizedString DlcListIsNotLoading_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcListIsNotLoading */
        LocalizedString ClickToEdit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClickToEdit */
        LocalizedString ShowScreenshot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowScreenshot */
        LocalizedString AreYouSureDeleteAllSaves_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureDeleteAllSaves */
        LocalizedString RenameSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RenameSave */
        LocalizedString EmptySaveListHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmptySaveListHint */
        LocalizedString DeleteCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteCharacter */
        LocalizedString AreYouSureDeleteCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureDeleteCharacter */
        LocalizedString ConfirmQuickLoad_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConfirmQuickLoad */
        LocalizedString SaveIsNotPossibleInIronMan_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveIsNotPossibleInIronMan */
        LocalizedString SaveHasIronManMode_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveHasIronManMode */
        LocalizedString YouLoadIronManSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouLoadIronManSave */
        LocalizedString YouLoadNotIronManSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouLoadNotIronManSave */
        LocalizedString CannotLoadCurrentIronManSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotLoadCurrentIronManSave */
        LocalizedString CannotLoadIronManSaveInCoop_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotLoadIronManSaveInCoop */
        
        return new(LoadSaveWarning_,
            SaveLabel_,
            LoadLabel_,
            DeleteLabel_,
            OverwriteWarning_,
            DeleteWarning_,
            SaveDefaultName_,
            SavePrefixAuto_,
            SavePrefixIronman_,
            SavePrefixQuick_,
            SaveClickToEdit_,
            InGameFormat_,
            DlcRequired_,
            DlcListIsNotLoading_,
            ClickToEdit_,
            ShowScreenshot_,
            AreYouSureDeleteAllSaves_,
            RenameSave_,
            EmptySaveListHint_,
            DeleteCharacter_,
            AreYouSureDeleteCharacter_,
            ConfirmQuickLoad_,
            SaveIsNotPossibleInIronMan_,
            SaveHasIronManMode_,
            YouLoadIronManSave_,
            YouLoadNotIronManSave_,
            CannotLoadCurrentIronManSave_,
            CannotLoadIronManSaveInCoop_);
    }

    public override string ToString() => $"UISaveLoadTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LoadSaveWarning: {{ \n{LoadSaveWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveLabel: {{ \n{SaveLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LoadLabel: {{ \n{LoadLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeleteLabel: {{ \n{DeleteLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OverwriteWarning: {{ \n{OverwriteWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeleteWarning: {{ \n{DeleteWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveDefaultName: {{ \n{SaveDefaultName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SavePrefixAuto: {{ \n{SavePrefixAuto.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SavePrefixIronman: {{ \n{SavePrefixIronman.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SavePrefixQuick: {{ \n{SavePrefixQuick.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveClickToEdit: {{ \n{SaveClickToEdit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InGameFormat: {{ \n{InGameFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcRequired: {{ \n{DlcRequired.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcListIsNotLoading: {{ \n{DlcListIsNotLoading.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClickToEdit: {{ \n{ClickToEdit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowScreenshot: {{ \n{ShowScreenshot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureDeleteAllSaves: {{ \n{AreYouSureDeleteAllSaves.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RenameSave: {{ \n{RenameSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EmptySaveListHint: {{ \n{EmptySaveListHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeleteCharacter: {{ \n{DeleteCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureDeleteCharacter: {{ \n{AreYouSureDeleteCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConfirmQuickLoad: {{ \n{ConfirmQuickLoad.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveIsNotPossibleInIronMan: {{ \n{SaveIsNotPossibleInIronMan.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveHasIronManMode: {{ \n{SaveHasIronManMode.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouLoadIronManSave: {{ \n{YouLoadIronManSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouLoadNotIronManSave: {{ \n{YouLoadNotIronManSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotLoadCurrentIronManSave: {{ \n{CannotLoadCurrentIronManSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotLoadIronManSaveInCoop: {{ \n{CannotLoadIronManSaveInCoop.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIVendor (22 fields) */
public record class UIVendor (
    LocalizedString BeforeClose,
    LocalizedString Trade,
    LocalizedString CargoCompartment,
    LocalizedString UnsupportedItem,
    LocalizedString RelationshipLevel,
    LocalizedString PointsToNextLevel,
    LocalizedString ProceedTransaction,
    LocalizedString DemandCargo,
    LocalizedString CantBuyItem,
    LocalizedString NotEnoughReputation,
    LocalizedString NotEnoughProfitFactor,
    LocalizedString ChooseVendorForTrade,
    LocalizedString Exchange,
    LocalizedString HideUnrelevant,
    LocalizedString SelectAllRelevant,
    LocalizedString UnselectAllRelevant,
    LocalizedString CargoSelectingMenu,
    LocalizedString NoValidCargos,
    LocalizedString Discount,
    LocalizedString CantSelectCargoForSell,
    LocalizedString VendorDontTakeThisCargo,
    LocalizedString CargoIsNotFull) : IUnityStructure
{
    public static UIVendor Read(EndianBinaryReader reader)
    {
        LocalizedString BeforeClose_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BeforeClose */
        LocalizedString Trade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Trade */
        LocalizedString CargoCompartment_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoCompartment */
        LocalizedString UnsupportedItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnsupportedItem */
        LocalizedString RelationshipLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RelationshipLevel */
        LocalizedString PointsToNextLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PointsToNextLevel */
        LocalizedString ProceedTransaction_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProceedTransaction */
        LocalizedString DemandCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DemandCargo */
        LocalizedString CantBuyItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantBuyItem */
        LocalizedString NotEnoughReputation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughReputation */
        LocalizedString NotEnoughProfitFactor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughProfitFactor */
        LocalizedString ChooseVendorForTrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseVendorForTrade */
        LocalizedString Exchange_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Exchange */
        LocalizedString HideUnrelevant_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideUnrelevant */
        LocalizedString SelectAllRelevant_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectAllRelevant */
        LocalizedString UnselectAllRelevant_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnselectAllRelevant */
        LocalizedString CargoSelectingMenu_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoSelectingMenu */
        LocalizedString NoValidCargos_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoValidCargos */
        LocalizedString Discount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Discount */
        LocalizedString CantSelectCargoForSell_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantSelectCargoForSell */
        LocalizedString VendorDontTakeThisCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VendorDontTakeThisCargo */
        LocalizedString CargoIsNotFull_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoIsNotFull */
        
        return new(BeforeClose_,
            Trade_,
            CargoCompartment_,
            UnsupportedItem_,
            RelationshipLevel_,
            PointsToNextLevel_,
            ProceedTransaction_,
            DemandCargo_,
            CantBuyItem_,
            NotEnoughReputation_,
            NotEnoughProfitFactor_,
            ChooseVendorForTrade_,
            Exchange_,
            HideUnrelevant_,
            SelectAllRelevant_,
            UnselectAllRelevant_,
            CargoSelectingMenu_,
            NoValidCargos_,
            Discount_,
            CantSelectCargoForSell_,
            VendorDontTakeThisCargo_,
            CargoIsNotFull_);
    }

    public override string ToString() => $"UIVendor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BeforeClose: {{ \n{BeforeClose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Trade: {{ \n{Trade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoCompartment: {{ \n{CargoCompartment.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnsupportedItem: {{ \n{UnsupportedItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RelationshipLevel: {{ \n{RelationshipLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PointsToNextLevel: {{ \n{PointsToNextLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProceedTransaction: {{ \n{ProceedTransaction.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DemandCargo: {{ \n{DemandCargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantBuyItem: {{ \n{CantBuyItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NotEnoughReputation: {{ \n{NotEnoughReputation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NotEnoughProfitFactor: {{ \n{NotEnoughProfitFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseVendorForTrade: {{ \n{ChooseVendorForTrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Exchange: {{ \n{Exchange.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideUnrelevant: {{ \n{HideUnrelevant.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectAllRelevant: {{ \n{SelectAllRelevant.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnselectAllRelevant: {{ \n{UnselectAllRelevant.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoSelectingMenu: {{ \n{CargoSelectingMenu.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoValidCargos: {{ \n{NoValidCargos.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Discount: {{ \n{Discount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantSelectCargoForSell: {{ \n{CantSelectCargoForSell.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VendorDontTakeThisCargo: {{ \n{VendorDontTakeThisCargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoIsNotFull: {{ \n{CargoIsNotFull.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIShipCustomization (75 fields) */
public record class UIShipCustomization (
    LocalizedString PlasmaDrives,
    LocalizedString VoidShieldGenerator,
    LocalizedString ArmorPlating,
    LocalizedString ArmorPlatingDescription,
    LocalizedString AugerArray,
    LocalizedString ShipWeapon,
    LocalizedString Inertia,
    LocalizedString XP,
    LocalizedString Scrap,
    LocalizedString ScrapDescription,
    LocalizedString CurrentShipUpgradeScrapValue,
    LocalizedString CanUpgrade,
    LocalizedString CantUpgrade,
    LocalizedString CantDowngrade,
    LocalizedString CurrentUnitOnPost,
    LocalizedString SelectedUnit,
    LocalizedString AppointOnPost,
    LocalizedString RemoveFromPost,
    LocalizedString NotEnoughScrap,
    LocalizedString MinLevel,
    LocalizedString AlreadyMaximum,
    LocalizedString Upgraded,
    LocalizedString Downgraded,
    LocalizedString UpgradeInternalStructure,
    LocalizedString UpgradeProwRam,
    LocalizedString UpgradeInternalStructureDescription,
    LocalizedString UpgradeProwRamDescription,
    LocalizedString Engine,
    LocalizedString Shields,
    LocalizedString Auspex,
    LocalizedString Armor,
    LocalizedString Dorsal,
    LocalizedString Prow,
    LocalizedString Port,
    LocalizedString Starboard,
    LocalizedString Arsenal,
    LocalizedString Ram,
    LocalizedString Repair,
    LocalizedString RamDamageReduction,
    LocalizedString RamDamageBonus,
    LocalizedString CantInsertInThisWeaponSlot,
    LocalizedString NothingToInsertInThisSlot,
    LocalizedString PlaceEngineSlot,
    LocalizedString Post,
    LocalizedString Officer,
    LocalizedString NoOfficer,
    LocalizedString SkillRequired,
    LocalizedString NoSpecialAbilities,
    LocalizedString AvailableAttune,
    LocalizedString UseOnseCurrentAbility,
    LocalizedString ShipHasFullHP,
    LocalizedString Attune,
    LocalizedString HasPenalty,
    LocalizedString NoCharacterOnPost,
    LocalizedString AttunedAbility,
    LocalizedString AttuneSuccess,
    LocalizedString AttuneFailedNotFullHP,
    LocalizedString AllreadyAttuned,
    LocalizedString RoundCooldownTime,
    LocalizedString RoundsToUltimateAbility,
    LocalizedString UnableUltimateAbility,
    LocalizedString RamDamageReductionDescription,
    LocalizedString RamDamageBonusDescription,
    LocalizedString ShipExperienceDescription,
    LocalizedString PostAbilityDuration,
    LocalizedString PostAbilityDurationHint,
    LocalizedString PostAbilityStartingCooldown,
    LocalizedString PostAbilityStartingCooldownHint,
    LocalizedString AttunePrerequisitesNotCompleted,
    LocalizedString CurrentUpgradeLevel,
    LocalizedString ToDefaultPosition,
    LocalizedString RepairDescription,
    LocalizedString MenuItemUpgrade,
    LocalizedString MenuItemSkills,
    LocalizedString MenuItemComponents) : IUnityStructure
{
    public static UIShipCustomization Read(EndianBinaryReader reader)
    {
        LocalizedString PlasmaDrives_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlasmaDrives */
        LocalizedString VoidShieldGenerator_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VoidShieldGenerator */
        LocalizedString ArmorPlating_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorPlating */
        LocalizedString ArmorPlatingDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmorPlatingDescription */
        LocalizedString AugerArray_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AugerArray */
        LocalizedString ShipWeapon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipWeapon */
        LocalizedString Inertia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Inertia */
        LocalizedString XP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* XP */
        LocalizedString Scrap_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Scrap */
        LocalizedString ScrapDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScrapDescription */
        LocalizedString CurrentShipUpgradeScrapValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentShipUpgradeScrapValue */
        LocalizedString CanUpgrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CanUpgrade */
        LocalizedString CantUpgrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantUpgrade */
        LocalizedString CantDowngrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantDowngrade */
        LocalizedString CurrentUnitOnPost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentUnitOnPost */
        LocalizedString SelectedUnit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectedUnit */
        LocalizedString AppointOnPost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AppointOnPost */
        LocalizedString RemoveFromPost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RemoveFromPost */
        LocalizedString NotEnoughScrap_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NotEnoughScrap */
        LocalizedString MinLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinLevel */
        LocalizedString AlreadyMaximum_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AlreadyMaximum */
        LocalizedString Upgraded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Upgraded */
        LocalizedString Downgraded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Downgraded */
        LocalizedString UpgradeInternalStructure_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeInternalStructure */
        LocalizedString UpgradeProwRam_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeProwRam */
        LocalizedString UpgradeInternalStructureDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeInternalStructureDescription */
        LocalizedString UpgradeProwRamDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeProwRamDescription */
        LocalizedString Engine_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Engine */
        LocalizedString Shields_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Shields */
        LocalizedString Auspex_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Auspex */
        LocalizedString Armor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armor */
        LocalizedString Dorsal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dorsal */
        LocalizedString Prow_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Prow */
        LocalizedString Port_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Port */
        LocalizedString Starboard_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Starboard */
        LocalizedString Arsenal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Arsenal */
        LocalizedString Ram_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ram */
        LocalizedString Repair_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Repair */
        LocalizedString RamDamageReduction_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageReduction */
        LocalizedString RamDamageBonus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageBonus */
        LocalizedString CantInsertInThisWeaponSlot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantInsertInThisWeaponSlot */
        LocalizedString NothingToInsertInThisSlot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NothingToInsertInThisSlot */
        LocalizedString PlaceEngineSlot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlaceEngineSlot */
        LocalizedString Post_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Post */
        LocalizedString Officer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Officer */
        LocalizedString NoOfficer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoOfficer */
        LocalizedString SkillRequired_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillRequired */
        LocalizedString NoSpecialAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoSpecialAbilities */
        LocalizedString AvailableAttune_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableAttune */
        LocalizedString UseOnseCurrentAbility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UseOnseCurrentAbility */
        LocalizedString ShipHasFullHP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipHasFullHP */
        LocalizedString Attune_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Attune */
        LocalizedString HasPenalty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasPenalty */
        LocalizedString NoCharacterOnPost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoCharacterOnPost */
        LocalizedString AttunedAbility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttunedAbility */
        LocalizedString AttuneSuccess_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttuneSuccess */
        LocalizedString AttuneFailedNotFullHP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttuneFailedNotFullHP */
        LocalizedString AllreadyAttuned_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllreadyAttuned */
        LocalizedString RoundCooldownTime_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RoundCooldownTime */
        LocalizedString RoundsToUltimateAbility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RoundsToUltimateAbility */
        LocalizedString UnableUltimateAbility_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnableUltimateAbility */
        LocalizedString RamDamageReductionDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageReductionDescription */
        LocalizedString RamDamageBonusDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RamDamageBonusDescription */
        LocalizedString ShipExperienceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipExperienceDescription */
        LocalizedString PostAbilityDuration_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityDuration */
        LocalizedString PostAbilityDurationHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityDurationHint */
        LocalizedString PostAbilityStartingCooldown_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityStartingCooldown */
        LocalizedString PostAbilityStartingCooldownHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostAbilityStartingCooldownHint */
        LocalizedString AttunePrerequisitesNotCompleted_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttunePrerequisitesNotCompleted */
        LocalizedString CurrentUpgradeLevel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CurrentUpgradeLevel */
        LocalizedString ToDefaultPosition_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToDefaultPosition */
        LocalizedString RepairDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RepairDescription */
        LocalizedString MenuItemUpgrade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuItemUpgrade */
        LocalizedString MenuItemSkills_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuItemSkills */
        LocalizedString MenuItemComponents_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuItemComponents */
        
        return new(PlasmaDrives_,
            VoidShieldGenerator_,
            ArmorPlating_,
            ArmorPlatingDescription_,
            AugerArray_,
            ShipWeapon_,
            Inertia_,
            XP_,
            Scrap_,
            ScrapDescription_,
            CurrentShipUpgradeScrapValue_,
            CanUpgrade_,
            CantUpgrade_,
            CantDowngrade_,
            CurrentUnitOnPost_,
            SelectedUnit_,
            AppointOnPost_,
            RemoveFromPost_,
            NotEnoughScrap_,
            MinLevel_,
            AlreadyMaximum_,
            Upgraded_,
            Downgraded_,
            UpgradeInternalStructure_,
            UpgradeProwRam_,
            UpgradeInternalStructureDescription_,
            UpgradeProwRamDescription_,
            Engine_,
            Shields_,
            Auspex_,
            Armor_,
            Dorsal_,
            Prow_,
            Port_,
            Starboard_,
            Arsenal_,
            Ram_,
            Repair_,
            RamDamageReduction_,
            RamDamageBonus_,
            CantInsertInThisWeaponSlot_,
            NothingToInsertInThisSlot_,
            PlaceEngineSlot_,
            Post_,
            Officer_,
            NoOfficer_,
            SkillRequired_,
            NoSpecialAbilities_,
            AvailableAttune_,
            UseOnseCurrentAbility_,
            ShipHasFullHP_,
            Attune_,
            HasPenalty_,
            NoCharacterOnPost_,
            AttunedAbility_,
            AttuneSuccess_,
            AttuneFailedNotFullHP_,
            AllreadyAttuned_,
            RoundCooldownTime_,
            RoundsToUltimateAbility_,
            UnableUltimateAbility_,
            RamDamageReductionDescription_,
            RamDamageBonusDescription_,
            ShipExperienceDescription_,
            PostAbilityDuration_,
            PostAbilityDurationHint_,
            PostAbilityStartingCooldown_,
            PostAbilityStartingCooldownHint_,
            AttunePrerequisitesNotCompleted_,
            CurrentUpgradeLevel_,
            ToDefaultPosition_,
            RepairDescription_,
            MenuItemUpgrade_,
            MenuItemSkills_,
            MenuItemComponents_);
    }

    public override string ToString() => $"UIShipCustomization\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);
        ToString_Field60(sb, indent, indent_);
        ToString_Field61(sb, indent, indent_);
        ToString_Field62(sb, indent, indent_);
        ToString_Field63(sb, indent, indent_);
        ToString_Field64(sb, indent, indent_);
        ToString_Field65(sb, indent, indent_);
        ToString_Field66(sb, indent, indent_);
        ToString_Field67(sb, indent, indent_);
        ToString_Field68(sb, indent, indent_);
        ToString_Field69(sb, indent, indent_);
        ToString_Field70(sb, indent, indent_);
        ToString_Field71(sb, indent, indent_);
        ToString_Field72(sb, indent, indent_);
        ToString_Field73(sb, indent, indent_);
        ToString_Field74(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlasmaDrives: {{ \n{PlasmaDrives.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VoidShieldGenerator: {{ \n{VoidShieldGenerator.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmorPlating: {{ \n{ArmorPlating.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmorPlatingDescription: {{ \n{ArmorPlatingDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AugerArray: {{ \n{AugerArray.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipWeapon: {{ \n{ShipWeapon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Inertia: {{ \n{Inertia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}XP: {{ \n{XP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Scrap: {{ \n{Scrap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScrapDescription: {{ \n{ScrapDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentShipUpgradeScrapValue: {{ \n{CurrentShipUpgradeScrapValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CanUpgrade: {{ \n{CanUpgrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantUpgrade: {{ \n{CantUpgrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantDowngrade: {{ \n{CantDowngrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentUnitOnPost: {{ \n{CurrentUnitOnPost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectedUnit: {{ \n{SelectedUnit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AppointOnPost: {{ \n{AppointOnPost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RemoveFromPost: {{ \n{RemoveFromPost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NotEnoughScrap: {{ \n{NotEnoughScrap.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinLevel: {{ \n{MinLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AlreadyMaximum: {{ \n{AlreadyMaximum.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Upgraded: {{ \n{Upgraded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Downgraded: {{ \n{Downgraded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeInternalStructure: {{ \n{UpgradeInternalStructure.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeProwRam: {{ \n{UpgradeProwRam.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeInternalStructureDescription: {{ \n{UpgradeInternalStructureDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeProwRamDescription: {{ \n{UpgradeProwRamDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Engine: {{ \n{Engine.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Shields: {{ \n{Shields.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Auspex: {{ \n{Auspex.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Armor: {{ \n{Armor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dorsal: {{ \n{Dorsal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Prow: {{ \n{Prow.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Port: {{ \n{Port.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Starboard: {{ \n{Starboard.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Arsenal: {{ \n{Arsenal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ram: {{ \n{Ram.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Repair: {{ \n{Repair.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RamDamageReduction: {{ \n{RamDamageReduction.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RamDamageBonus: {{ \n{RamDamageBonus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantInsertInThisWeaponSlot: {{ \n{CantInsertInThisWeaponSlot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NothingToInsertInThisSlot: {{ \n{NothingToInsertInThisSlot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlaceEngineSlot: {{ \n{PlaceEngineSlot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Post: {{ \n{Post.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Officer: {{ \n{Officer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoOfficer: {{ \n{NoOfficer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillRequired: {{ \n{SkillRequired.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoSpecialAbilities: {{ \n{NoSpecialAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AvailableAttune: {{ \n{AvailableAttune.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UseOnseCurrentAbility: {{ \n{UseOnseCurrentAbility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipHasFullHP: {{ \n{ShipHasFullHP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Attune: {{ \n{Attune.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HasPenalty: {{ \n{HasPenalty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoCharacterOnPost: {{ \n{NoCharacterOnPost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttunedAbility: {{ \n{AttunedAbility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttuneSuccess: {{ \n{AttuneSuccess.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttuneFailedNotFullHP: {{ \n{AttuneFailedNotFullHP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AllreadyAttuned: {{ \n{AllreadyAttuned.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RoundCooldownTime: {{ \n{RoundCooldownTime.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RoundsToUltimateAbility: {{ \n{RoundsToUltimateAbility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field60(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnableUltimateAbility: {{ \n{UnableUltimateAbility.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field61(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RamDamageReductionDescription: {{ \n{RamDamageReductionDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field62(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RamDamageBonusDescription: {{ \n{RamDamageBonusDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field63(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipExperienceDescription: {{ \n{ShipExperienceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field64(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostAbilityDuration: {{ \n{PostAbilityDuration.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field65(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostAbilityDurationHint: {{ \n{PostAbilityDurationHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field66(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostAbilityStartingCooldown: {{ \n{PostAbilityStartingCooldown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field67(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostAbilityStartingCooldownHint: {{ \n{PostAbilityStartingCooldownHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field68(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttunePrerequisitesNotCompleted: {{ \n{AttunePrerequisitesNotCompleted.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field69(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CurrentUpgradeLevel: {{ \n{CurrentUpgradeLevel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field70(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToDefaultPosition: {{ \n{ToDefaultPosition.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field71(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RepairDescription: {{ \n{RepairDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field72(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MenuItemUpgrade: {{ \n{MenuItemUpgrade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field73(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MenuItemSkills: {{ \n{MenuItemSkills.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field74(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MenuItemComponents: {{ \n{MenuItemComponents.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UICharGen (100 fields) */
public record class UICharGen (
    LocalizedString Skills,
    LocalizedString ChooseName,
    LocalizedString Complete,
    LocalizedString Next,
    LocalizedString Back,
    LocalizedString Voice,
    LocalizedString BodyType,
    LocalizedString BodyConstitution,
    LocalizedString Face,
    LocalizedString SkinTone,
    LocalizedString HairStyle,
    LocalizedString HairColor,
    LocalizedString TattooColor,
    LocalizedString PrimaryClothColor,
    LocalizedString SecondaryClothColor,
    LocalizedString HitPoints,
    LocalizedString Beard,
    LocalizedString BeardColor,
    LocalizedString Appearance,
    LocalizedString Eyebrows,
    LocalizedString EyebrowsColor,
    LocalizedString Scars,
    LocalizedString FacePaint,
    LocalizedString Implant,
    LocalizedString SoulMark,
    LocalizedString Homeworld,
    LocalizedString ImperialHomeworldChildSelection,
    LocalizedString ForgeHomeworldChildSelection,
    LocalizedString SanctionedPsykerSelection,
    LocalizedString Occupation,
    LocalizedString Navigator,
    LocalizedString DarkestHour,
    LocalizedString MomentOfTriumph,
    LocalizedString Careers,
    LocalizedString Attributes,
    LocalizedString Hair,
    LocalizedString Tattoo,
    LocalizedString Implants,
    LocalizedString Servoskull,
    LocalizedString NavigatorMutations,
    LocalizedString Ship,
    LocalizedString Summary,
    LocalizedString SureWantClose,
    LocalizedString CloseCoopChargenNotRt,
    LocalizedString EnterSearchTextHere,
    LocalizedString Pregen,
    LocalizedString CustomCharacterPregen,
    LocalizedString CreateCustomCharacter,
    LocalizedString AvailableStatsPointLeft,
    LocalizedString NoAvailableStatsPointLeft,
    LocalizedString CannotAdvanceStatHint,
    LocalizedString ShowVisualSettings,
    LocalizedString HideVisualSettings,
    LocalizedString Background,
    LocalizedString BackgroundFeatures,
    LocalizedString BackgroundStatsBonuses,
    LocalizedString BackgroundSkillsBonuses,
    LocalizedString BackgroundUnlockedFeaturesForLevelUp,
    LocalizedString BackgroundStatsForLevelUp,
    LocalizedString BackgroundSkillsForLevelUp,
    LocalizedString BackgroundTalentsForLevelUp,
    LocalizedString EditName,
    LocalizedString SetRandomName,
    LocalizedString EditNameButton,
    LocalizedString SetRandomNameButton,
    LocalizedString PhaseNotCompleted,
    LocalizedString InspectCareer,
    LocalizedString RespecWindowHeader,
    LocalizedString RespecSelectCharacter,
    LocalizedString RespecWindowWarning,
    LocalizedString RespecCostPF,
    LocalizedString SwitchPageSet,
    LocalizedString PlayVoicePreview,
    LocalizedString SwitchPortraitsCategoryTab,
    LocalizedString ShouldSetAllAttributesPointsWarning,
    LocalizedString CharacterSkillPoints,
    LocalizedString SwitchToPantograph,
    LocalizedString SwitchToAppearance,
    LocalizedString NothingToChoose,
    LocalizedString Portrait,
    LocalizedString UploadPortraitManual,
    LocalizedString PortraitCategoryDefault,
    LocalizedString PortraitCategoryWarhammer,
    LocalizedString PortraitCategoryCustom,
    LocalizedString PortraitCategoryNavigator,
    LocalizedString ChangePortrait,
    LocalizedString ChangePortraitDescription,
    LocalizedString ChangePortraitDescriptionConsole,
    LocalizedString CustomPortraitHeader,
    LocalizedString OpenPortraitFolder,
    LocalizedString RefreshPortrait,
    LocalizedString AddPortrait,
    LocalizedString WaitForDownloadingPortraits,
    LocalizedString SelectDoctrineHint,
    LocalizedString SpreadOutPointsHint,
    LocalizedString SkillPointsContainerHint,
    LocalizedString CreateNewCompanion,
    LocalizedString CreateNewCompanionDescription,
    LocalizedString CreateNewNavigator,
    LocalizedString CreateNewNavigatorDescription) : IUnityStructure
{
    public static UICharGen Read(EndianBinaryReader reader)
    {
        LocalizedString Skills_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Skills */
        LocalizedString ChooseName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChooseName */
        LocalizedString Complete_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Complete */
        LocalizedString Next_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Next */
        LocalizedString Back_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Back */
        LocalizedString Voice_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Voice */
        LocalizedString BodyType_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BodyType */
        LocalizedString BodyConstitution_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BodyConstitution */
        LocalizedString Face_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Face */
        LocalizedString SkinTone_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkinTone */
        LocalizedString HairStyle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HairStyle */
        LocalizedString HairColor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HairColor */
        LocalizedString TattooColor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TattooColor */
        LocalizedString PrimaryClothColor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrimaryClothColor */
        LocalizedString SecondaryClothColor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SecondaryClothColor */
        LocalizedString HitPoints_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitPoints */
        LocalizedString Beard_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Beard */
        LocalizedString BeardColor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BeardColor */
        LocalizedString Appearance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Appearance */
        LocalizedString Eyebrows_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Eyebrows */
        LocalizedString EyebrowsColor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EyebrowsColor */
        LocalizedString Scars_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Scars */
        LocalizedString FacePaint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FacePaint */
        LocalizedString Implant_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Implant */
        LocalizedString SoulMark_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMark */
        LocalizedString Homeworld_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Homeworld */
        LocalizedString ImperialHomeworldChildSelection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ImperialHomeworldChildSelection */
        LocalizedString ForgeHomeworldChildSelection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ForgeHomeworldChildSelection */
        LocalizedString SanctionedPsykerSelection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SanctionedPsykerSelection */
        LocalizedString Occupation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Occupation */
        LocalizedString Navigator_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Navigator */
        LocalizedString DarkestHour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DarkestHour */
        LocalizedString MomentOfTriumph_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentOfTriumph */
        LocalizedString Careers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Careers */
        LocalizedString Attributes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Attributes */
        LocalizedString Hair_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Hair */
        LocalizedString Tattoo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tattoo */
        LocalizedString Implants_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Implants */
        LocalizedString Servoskull_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Servoskull */
        LocalizedString NavigatorMutations_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorMutations */
        LocalizedString Ship_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Ship */
        LocalizedString Summary_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Summary */
        LocalizedString SureWantClose_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SureWantClose */
        LocalizedString CloseCoopChargenNotRt_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CloseCoopChargenNotRt */
        LocalizedString EnterSearchTextHere_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnterSearchTextHere */
        LocalizedString Pregen_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pregen */
        LocalizedString CustomCharacterPregen_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CustomCharacterPregen */
        LocalizedString CreateCustomCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateCustomCharacter */
        LocalizedString AvailableStatsPointLeft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableStatsPointLeft */
        LocalizedString NoAvailableStatsPointLeft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAvailableStatsPointLeft */
        LocalizedString CannotAdvanceStatHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotAdvanceStatHint */
        LocalizedString ShowVisualSettings_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowVisualSettings */
        LocalizedString HideVisualSettings_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideVisualSettings */
        LocalizedString Background_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Background */
        LocalizedString BackgroundFeatures_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundFeatures */
        LocalizedString BackgroundStatsBonuses_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundStatsBonuses */
        LocalizedString BackgroundSkillsBonuses_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundSkillsBonuses */
        LocalizedString BackgroundUnlockedFeaturesForLevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundUnlockedFeaturesForLevelUp */
        LocalizedString BackgroundStatsForLevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundStatsForLevelUp */
        LocalizedString BackgroundSkillsForLevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundSkillsForLevelUp */
        LocalizedString BackgroundTalentsForLevelUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BackgroundTalentsForLevelUp */
        LocalizedString EditName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EditName */
        LocalizedString SetRandomName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetRandomName */
        LocalizedString EditNameButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EditNameButton */
        LocalizedString SetRandomNameButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SetRandomNameButton */
        LocalizedString PhaseNotCompleted_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PhaseNotCompleted */
        LocalizedString InspectCareer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InspectCareer */
        LocalizedString RespecWindowHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecWindowHeader */
        LocalizedString RespecSelectCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecSelectCharacter */
        LocalizedString RespecWindowWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecWindowWarning */
        LocalizedString RespecCostPF_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RespecCostPF */
        LocalizedString SwitchPageSet_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchPageSet */
        LocalizedString PlayVoicePreview_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayVoicePreview */
        LocalizedString SwitchPortraitsCategoryTab_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchPortraitsCategoryTab */
        LocalizedString ShouldSetAllAttributesPointsWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShouldSetAllAttributesPointsWarning */
        LocalizedString CharacterSkillPoints_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterSkillPoints */
        LocalizedString SwitchToPantograph_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchToPantograph */
        LocalizedString SwitchToAppearance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchToAppearance */
        LocalizedString NothingToChoose_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NothingToChoose */
        LocalizedString Portrait_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Portrait */
        LocalizedString UploadPortraitManual_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UploadPortraitManual */
        LocalizedString PortraitCategoryDefault_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryDefault */
        LocalizedString PortraitCategoryWarhammer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryWarhammer */
        LocalizedString PortraitCategoryCustom_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryCustom */
        LocalizedString PortraitCategoryNavigator_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PortraitCategoryNavigator */
        LocalizedString ChangePortrait_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangePortrait */
        LocalizedString ChangePortraitDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangePortraitDescription */
        LocalizedString ChangePortraitDescriptionConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangePortraitDescriptionConsole */
        LocalizedString CustomPortraitHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CustomPortraitHeader */
        LocalizedString OpenPortraitFolder_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenPortraitFolder */
        LocalizedString RefreshPortrait_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RefreshPortrait */
        LocalizedString AddPortrait_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AddPortrait */
        LocalizedString WaitForDownloadingPortraits_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WaitForDownloadingPortraits */
        LocalizedString SelectDoctrineHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectDoctrineHint */
        LocalizedString SpreadOutPointsHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpreadOutPointsHint */
        LocalizedString SkillPointsContainerHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillPointsContainerHint */
        LocalizedString CreateNewCompanion_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewCompanion */
        LocalizedString CreateNewCompanionDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewCompanionDescription */
        LocalizedString CreateNewNavigator_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewNavigator */
        LocalizedString CreateNewNavigatorDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewNavigatorDescription */
        
        return new(Skills_,
            ChooseName_,
            Complete_,
            Next_,
            Back_,
            Voice_,
            BodyType_,
            BodyConstitution_,
            Face_,
            SkinTone_,
            HairStyle_,
            HairColor_,
            TattooColor_,
            PrimaryClothColor_,
            SecondaryClothColor_,
            HitPoints_,
            Beard_,
            BeardColor_,
            Appearance_,
            Eyebrows_,
            EyebrowsColor_,
            Scars_,
            FacePaint_,
            Implant_,
            SoulMark_,
            Homeworld_,
            ImperialHomeworldChildSelection_,
            ForgeHomeworldChildSelection_,
            SanctionedPsykerSelection_,
            Occupation_,
            Navigator_,
            DarkestHour_,
            MomentOfTriumph_,
            Careers_,
            Attributes_,
            Hair_,
            Tattoo_,
            Implants_,
            Servoskull_,
            NavigatorMutations_,
            Ship_,
            Summary_,
            SureWantClose_,
            CloseCoopChargenNotRt_,
            EnterSearchTextHere_,
            Pregen_,
            CustomCharacterPregen_,
            CreateCustomCharacter_,
            AvailableStatsPointLeft_,
            NoAvailableStatsPointLeft_,
            CannotAdvanceStatHint_,
            ShowVisualSettings_,
            HideVisualSettings_,
            Background_,
            BackgroundFeatures_,
            BackgroundStatsBonuses_,
            BackgroundSkillsBonuses_,
            BackgroundUnlockedFeaturesForLevelUp_,
            BackgroundStatsForLevelUp_,
            BackgroundSkillsForLevelUp_,
            BackgroundTalentsForLevelUp_,
            EditName_,
            SetRandomName_,
            EditNameButton_,
            SetRandomNameButton_,
            PhaseNotCompleted_,
            InspectCareer_,
            RespecWindowHeader_,
            RespecSelectCharacter_,
            RespecWindowWarning_,
            RespecCostPF_,
            SwitchPageSet_,
            PlayVoicePreview_,
            SwitchPortraitsCategoryTab_,
            ShouldSetAllAttributesPointsWarning_,
            CharacterSkillPoints_,
            SwitchToPantograph_,
            SwitchToAppearance_,
            NothingToChoose_,
            Portrait_,
            UploadPortraitManual_,
            PortraitCategoryDefault_,
            PortraitCategoryWarhammer_,
            PortraitCategoryCustom_,
            PortraitCategoryNavigator_,
            ChangePortrait_,
            ChangePortraitDescription_,
            ChangePortraitDescriptionConsole_,
            CustomPortraitHeader_,
            OpenPortraitFolder_,
            RefreshPortrait_,
            AddPortrait_,
            WaitForDownloadingPortraits_,
            SelectDoctrineHint_,
            SpreadOutPointsHint_,
            SkillPointsContainerHint_,
            CreateNewCompanion_,
            CreateNewCompanionDescription_,
            CreateNewNavigator_,
            CreateNewNavigatorDescription_);
    }

    public override string ToString() => $"UICharGen\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);
        ToString_Field60(sb, indent, indent_);
        ToString_Field61(sb, indent, indent_);
        ToString_Field62(sb, indent, indent_);
        ToString_Field63(sb, indent, indent_);
        ToString_Field64(sb, indent, indent_);
        ToString_Field65(sb, indent, indent_);
        ToString_Field66(sb, indent, indent_);
        ToString_Field67(sb, indent, indent_);
        ToString_Field68(sb, indent, indent_);
        ToString_Field69(sb, indent, indent_);
        ToString_Field70(sb, indent, indent_);
        ToString_Field71(sb, indent, indent_);
        ToString_Field72(sb, indent, indent_);
        ToString_Field73(sb, indent, indent_);
        ToString_Field74(sb, indent, indent_);
        ToString_Field75(sb, indent, indent_);
        ToString_Field76(sb, indent, indent_);
        ToString_Field77(sb, indent, indent_);
        ToString_Field78(sb, indent, indent_);
        ToString_Field79(sb, indent, indent_);
        ToString_Field80(sb, indent, indent_);
        ToString_Field81(sb, indent, indent_);
        ToString_Field82(sb, indent, indent_);
        ToString_Field83(sb, indent, indent_);
        ToString_Field84(sb, indent, indent_);
        ToString_Field85(sb, indent, indent_);
        ToString_Field86(sb, indent, indent_);
        ToString_Field87(sb, indent, indent_);
        ToString_Field88(sb, indent, indent_);
        ToString_Field89(sb, indent, indent_);
        ToString_Field90(sb, indent, indent_);
        ToString_Field91(sb, indent, indent_);
        ToString_Field92(sb, indent, indent_);
        ToString_Field93(sb, indent, indent_);
        ToString_Field94(sb, indent, indent_);
        ToString_Field95(sb, indent, indent_);
        ToString_Field96(sb, indent, indent_);
        ToString_Field97(sb, indent, indent_);
        ToString_Field98(sb, indent, indent_);
        ToString_Field99(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Skills: {{ \n{Skills.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChooseName: {{ \n{ChooseName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Complete: {{ \n{Complete.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Next: {{ \n{Next.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Back: {{ \n{Back.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Voice: {{ \n{Voice.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BodyType: {{ \n{BodyType.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BodyConstitution: {{ \n{BodyConstitution.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Face: {{ \n{Face.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkinTone: {{ \n{SkinTone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HairStyle: {{ \n{HairStyle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HairColor: {{ \n{HairColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TattooColor: {{ \n{TattooColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrimaryClothColor: {{ \n{PrimaryClothColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SecondaryClothColor: {{ \n{SecondaryClothColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitPoints: {{ \n{HitPoints.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Beard: {{ \n{Beard.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BeardColor: {{ \n{BeardColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Appearance: {{ \n{Appearance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Eyebrows: {{ \n{Eyebrows.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EyebrowsColor: {{ \n{EyebrowsColor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Scars: {{ \n{Scars.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FacePaint: {{ \n{FacePaint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Implant: {{ \n{Implant.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMark: {{ \n{SoulMark.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Homeworld: {{ \n{Homeworld.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ImperialHomeworldChildSelection: {{ \n{ImperialHomeworldChildSelection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ForgeHomeworldChildSelection: {{ \n{ForgeHomeworldChildSelection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SanctionedPsykerSelection: {{ \n{SanctionedPsykerSelection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Occupation: {{ \n{Occupation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Navigator: {{ \n{Navigator.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DarkestHour: {{ \n{DarkestHour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentOfTriumph: {{ \n{MomentOfTriumph.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Careers: {{ \n{Careers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Attributes: {{ \n{Attributes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Hair: {{ \n{Hair.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tattoo: {{ \n{Tattoo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Implants: {{ \n{Implants.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Servoskull: {{ \n{Servoskull.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NavigatorMutations: {{ \n{NavigatorMutations.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Ship: {{ \n{Ship.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Summary: {{ \n{Summary.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SureWantClose: {{ \n{SureWantClose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CloseCoopChargenNotRt: {{ \n{CloseCoopChargenNotRt.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EnterSearchTextHere: {{ \n{EnterSearchTextHere.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pregen: {{ \n{Pregen.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CustomCharacterPregen: {{ \n{CustomCharacterPregen.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateCustomCharacter: {{ \n{CreateCustomCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AvailableStatsPointLeft: {{ \n{AvailableStatsPointLeft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoAvailableStatsPointLeft: {{ \n{NoAvailableStatsPointLeft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotAdvanceStatHint: {{ \n{CannotAdvanceStatHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowVisualSettings: {{ \n{ShowVisualSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideVisualSettings: {{ \n{HideVisualSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Background: {{ \n{Background.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundFeatures: {{ \n{BackgroundFeatures.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundStatsBonuses: {{ \n{BackgroundStatsBonuses.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundSkillsBonuses: {{ \n{BackgroundSkillsBonuses.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundUnlockedFeaturesForLevelUp: {{ \n{BackgroundUnlockedFeaturesForLevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundStatsForLevelUp: {{ \n{BackgroundStatsForLevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundSkillsForLevelUp: {{ \n{BackgroundSkillsForLevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field60(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BackgroundTalentsForLevelUp: {{ \n{BackgroundTalentsForLevelUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field61(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EditName: {{ \n{EditName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field62(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SetRandomName: {{ \n{SetRandomName.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field63(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EditNameButton: {{ \n{EditNameButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field64(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SetRandomNameButton: {{ \n{SetRandomNameButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field65(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PhaseNotCompleted: {{ \n{PhaseNotCompleted.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field66(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InspectCareer: {{ \n{InspectCareer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field67(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RespecWindowHeader: {{ \n{RespecWindowHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field68(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RespecSelectCharacter: {{ \n{RespecSelectCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field69(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RespecWindowWarning: {{ \n{RespecWindowWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field70(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RespecCostPF: {{ \n{RespecCostPF.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field71(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchPageSet: {{ \n{SwitchPageSet.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field72(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlayVoicePreview: {{ \n{PlayVoicePreview.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field73(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchPortraitsCategoryTab: {{ \n{SwitchPortraitsCategoryTab.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field74(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShouldSetAllAttributesPointsWarning: {{ \n{ShouldSetAllAttributesPointsWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field75(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CharacterSkillPoints: {{ \n{CharacterSkillPoints.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field76(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchToPantograph: {{ \n{SwitchToPantograph.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field77(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchToAppearance: {{ \n{SwitchToAppearance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field78(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NothingToChoose: {{ \n{NothingToChoose.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field79(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Portrait: {{ \n{Portrait.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field80(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UploadPortraitManual: {{ \n{UploadPortraitManual.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field81(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PortraitCategoryDefault: {{ \n{PortraitCategoryDefault.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field82(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PortraitCategoryWarhammer: {{ \n{PortraitCategoryWarhammer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field83(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PortraitCategoryCustom: {{ \n{PortraitCategoryCustom.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field84(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PortraitCategoryNavigator: {{ \n{PortraitCategoryNavigator.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field85(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangePortrait: {{ \n{ChangePortrait.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field86(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangePortraitDescription: {{ \n{ChangePortraitDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field87(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangePortraitDescriptionConsole: {{ \n{ChangePortraitDescriptionConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field88(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CustomPortraitHeader: {{ \n{CustomPortraitHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field89(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenPortraitFolder: {{ \n{OpenPortraitFolder.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field90(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RefreshPortrait: {{ \n{RefreshPortrait.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field91(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AddPortrait: {{ \n{AddPortrait.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field92(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WaitForDownloadingPortraits: {{ \n{WaitForDownloadingPortraits.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field93(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectDoctrineHint: {{ \n{SelectDoctrineHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field94(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpreadOutPointsHint: {{ \n{SpreadOutPointsHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field95(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillPointsContainerHint: {{ \n{SkillPointsContainerHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field96(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateNewCompanion: {{ \n{CreateNewCompanion.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field97(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateNewCompanionDescription: {{ \n{CreateNewCompanionDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field98(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateNewNavigator: {{ \n{CreateNewNavigator.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field99(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateNewNavigatorDescription: {{ \n{CreateNewNavigatorDescription.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UINewGame (12 fields) */
public record class UINewGame (
    LocalizedString MenuTitleNewGame,
    LocalizedString ScenarioMenuLabel,
    LocalizedString DifficultyMenuLabel,
    LocalizedString SelectorStory,
    LocalizedString DlcDisable,
    LocalizedString ChoosePregen,
    LocalizedString CreateNewCharacter,
    LocalizedString CreateNewCharacterDescription,
    LocalizedString MainStoryLabel,
    LocalizedString MainStoryDescription,
    LocalizedString OtherModsAreComingSoon,
    LocalizedString AreYouSureChooseVeryHardDifficulty) : IUnityStructure
{
    public static UINewGame Read(EndianBinaryReader reader)
    {
        LocalizedString MenuTitleNewGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MenuTitleNewGame */
        LocalizedString ScenarioMenuLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScenarioMenuLabel */
        LocalizedString DifficultyMenuLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DifficultyMenuLabel */
        LocalizedString SelectorStory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SelectorStory */
        LocalizedString DlcDisable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcDisable */
        LocalizedString ChoosePregen_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChoosePregen */
        LocalizedString CreateNewCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewCharacter */
        LocalizedString CreateNewCharacterDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CreateNewCharacterDescription */
        LocalizedString MainStoryLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MainStoryLabel */
        LocalizedString MainStoryDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MainStoryDescription */
        LocalizedString OtherModsAreComingSoon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OtherModsAreComingSoon */
        LocalizedString AreYouSureChooseVeryHardDifficulty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureChooseVeryHardDifficulty */
        
        return new(MenuTitleNewGame_,
            ScenarioMenuLabel_,
            DifficultyMenuLabel_,
            SelectorStory_,
            DlcDisable_,
            ChoosePregen_,
            CreateNewCharacter_,
            CreateNewCharacterDescription_,
            MainStoryLabel_,
            MainStoryDescription_,
            OtherModsAreComingSoon_,
            AreYouSureChooseVeryHardDifficulty_);
    }

    public override string ToString() => $"UINewGame\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MenuTitleNewGame: {{ \n{MenuTitleNewGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScenarioMenuLabel: {{ \n{ScenarioMenuLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DifficultyMenuLabel: {{ \n{DifficultyMenuLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SelectorStory: {{ \n{SelectorStory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcDisable: {{ \n{DlcDisable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChoosePregen: {{ \n{ChoosePregen.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateNewCharacter: {{ \n{CreateNewCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CreateNewCharacterDescription: {{ \n{CreateNewCharacterDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MainStoryLabel: {{ \n{MainStoryLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MainStoryDescription: {{ \n{MainStoryDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OtherModsAreComingSoon: {{ \n{OtherModsAreComingSoon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureChooseVeryHardDifficulty: {{ \n{AreYouSureChooseVeryHardDifficulty.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIGameOverScreen (10 fields) */
public record class UIGameOverScreen (
    LocalizedString MaleDeadLabel,
    LocalizedString FemaleDeadLabel,
    LocalizedString PartyIsDefeatedLabel,
    LocalizedString QuestIsFailedLabel,
    LocalizedString GameOverIronManDescription,
    LocalizedString QuickLoadLabel,
    LocalizedString LoadLabel,
    LocalizedString MainMenuLabel,
    LocalizedString IronManDeleteSaveLabel,
    LocalizedString IronManContinueGameLabel) : IUnityStructure
{
    public static UIGameOverScreen Read(EndianBinaryReader reader)
    {
        LocalizedString MaleDeadLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaleDeadLabel */
        LocalizedString FemaleDeadLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FemaleDeadLabel */
        LocalizedString PartyIsDefeatedLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PartyIsDefeatedLabel */
        LocalizedString QuestIsFailedLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestIsFailedLabel */
        LocalizedString GameOverIronManDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GameOverIronManDescription */
        LocalizedString QuickLoadLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuickLoadLabel */
        LocalizedString LoadLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadLabel */
        LocalizedString MainMenuLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MainMenuLabel */
        LocalizedString IronManDeleteSaveLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IronManDeleteSaveLabel */
        LocalizedString IronManContinueGameLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IronManContinueGameLabel */
        
        return new(MaleDeadLabel_,
            FemaleDeadLabel_,
            PartyIsDefeatedLabel_,
            QuestIsFailedLabel_,
            GameOverIronManDescription_,
            QuickLoadLabel_,
            LoadLabel_,
            MainMenuLabel_,
            IronManDeleteSaveLabel_,
            IronManContinueGameLabel_);
    }

    public override string ToString() => $"UIGameOverScreen\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaleDeadLabel: {{ \n{MaleDeadLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FemaleDeadLabel: {{ \n{FemaleDeadLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PartyIsDefeatedLabel: {{ \n{PartyIsDefeatedLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestIsFailedLabel: {{ \n{QuestIsFailedLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GameOverIronManDescription: {{ \n{GameOverIronManDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuickLoadLabel: {{ \n{QuickLoadLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LoadLabel: {{ \n{LoadLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MainMenuLabel: {{ \n{MainMenuLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IronManDeleteSaveLabel: {{ \n{IronManDeleteSaveLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IronManContinueGameLabel: {{ \n{IronManContinueGameLabel.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UINotificationTexts (18 fields) */
public record class UINotificationTexts (
    LocalizedString ItemsLostFormat,
    LocalizedString ItemsRecievedFormat,
    LocalizedString XPGainedFormat,
    LocalizedString CargoAddedFormat,
    LocalizedString CargoLostFormat,
    LocalizedString VoidshipDamagedFormat,
    LocalizedString DamageDealtFormat,
    LocalizedString NavigatorResourceAddedFormat,
    LocalizedString NavigatorResourceLostFormat,
    LocalizedString SoulMarksShiftFormat,
    LocalizedString GainedProfitFactor,
    LocalizedString LostProfitFactor,
    LocalizedString FactionReputationLostFormat,
    LocalizedString FactionReputationReceivedFormat,
    LocalizedString FactionVendorDiscountLostFormat,
    LocalizedString FactionVendorDiscountReceivedFormat,
    LocalizedString AbilityAddedFormat,
    LocalizedString BuffAddedFormat) : IUnityStructure
{
    public static UINotificationTexts Read(EndianBinaryReader reader)
    {
        LocalizedString ItemsLostFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsLostFormat */
        LocalizedString ItemsRecievedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsRecievedFormat */
        LocalizedString XPGainedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* XPGainedFormat */
        LocalizedString CargoAddedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoAddedFormat */
        LocalizedString CargoLostFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoLostFormat */
        LocalizedString VoidshipDamagedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* VoidshipDamagedFormat */
        LocalizedString DamageDealtFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDealtFormat */
        LocalizedString NavigatorResourceAddedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResourceAddedFormat */
        LocalizedString NavigatorResourceLostFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NavigatorResourceLostFormat */
        LocalizedString SoulMarksShiftFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarksShiftFormat */
        LocalizedString GainedProfitFactor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GainedProfitFactor */
        LocalizedString LostProfitFactor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LostProfitFactor */
        LocalizedString FactionReputationLostFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionReputationLostFormat */
        LocalizedString FactionReputationReceivedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionReputationReceivedFormat */
        LocalizedString FactionVendorDiscountLostFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionVendorDiscountLostFormat */
        LocalizedString FactionVendorDiscountReceivedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FactionVendorDiscountReceivedFormat */
        LocalizedString AbilityAddedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AbilityAddedFormat */
        LocalizedString BuffAddedFormat_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BuffAddedFormat */
        
        return new(ItemsLostFormat_,
            ItemsRecievedFormat_,
            XPGainedFormat_,
            CargoAddedFormat_,
            CargoLostFormat_,
            VoidshipDamagedFormat_,
            DamageDealtFormat_,
            NavigatorResourceAddedFormat_,
            NavigatorResourceLostFormat_,
            SoulMarksShiftFormat_,
            GainedProfitFactor_,
            LostProfitFactor_,
            FactionReputationLostFormat_,
            FactionReputationReceivedFormat_,
            FactionVendorDiscountLostFormat_,
            FactionVendorDiscountReceivedFormat_,
            AbilityAddedFormat_,
            BuffAddedFormat_);
    }

    public override string ToString() => $"UINotificationTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ItemsLostFormat: {{ \n{ItemsLostFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ItemsRecievedFormat: {{ \n{ItemsRecievedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}XPGainedFormat: {{ \n{XPGainedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoAddedFormat: {{ \n{CargoAddedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoLostFormat: {{ \n{CargoLostFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}VoidshipDamagedFormat: {{ \n{VoidshipDamagedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageDealtFormat: {{ \n{DamageDealtFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NavigatorResourceAddedFormat: {{ \n{NavigatorResourceAddedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NavigatorResourceLostFormat: {{ \n{NavigatorResourceLostFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarksShiftFormat: {{ \n{SoulMarksShiftFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GainedProfitFactor: {{ \n{GainedProfitFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LostProfitFactor: {{ \n{LostProfitFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FactionReputationLostFormat: {{ \n{FactionReputationLostFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FactionReputationReceivedFormat: {{ \n{FactionReputationReceivedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FactionVendorDiscountLostFormat: {{ \n{FactionVendorDiscountLostFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FactionVendorDiscountReceivedFormat: {{ \n{FactionVendorDiscountReceivedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AbilityAddedFormat: {{ \n{AbilityAddedFormat.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BuffAddedFormat: {{ \n{BuffAddedFormat.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIQuestNotificationTexts (15 fields) */
public record class UIQuestNotificationTexts (
    LocalizedString QuestComplite,
    LocalizedString QuestFailed,
    LocalizedString QuestNew,
    LocalizedString QuestUpdate,
    LocalizedString QuestStarted,
    LocalizedString QuestPostponed,
    LocalizedString ToJournal,
    LocalizedString Quest,
    LocalizedString Rumour,
    LocalizedString Order,
    LocalizedString Failed,
    LocalizedString Completed,
    LocalizedString New,
    LocalizedString Updated,
    LocalizedString Postponed) : IUnityStructure
{
    public static UIQuestNotificationTexts Read(EndianBinaryReader reader)
    {
        LocalizedString QuestComplite_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestComplite */
        LocalizedString QuestFailed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestFailed */
        LocalizedString QuestNew_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestNew */
        LocalizedString QuestUpdate_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestUpdate */
        LocalizedString QuestStarted_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestStarted */
        LocalizedString QuestPostponed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestPostponed */
        LocalizedString ToJournal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToJournal */
        LocalizedString Quest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Quest */
        LocalizedString Rumour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rumour */
        LocalizedString Order_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Order */
        LocalizedString Failed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Failed */
        LocalizedString Completed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Completed */
        LocalizedString New_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* New */
        LocalizedString Updated_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Updated */
        LocalizedString Postponed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Postponed */
        
        return new(QuestComplite_,
            QuestFailed_,
            QuestNew_,
            QuestUpdate_,
            QuestStarted_,
            QuestPostponed_,
            ToJournal_,
            Quest_,
            Rumour_,
            Order_,
            Failed_,
            Completed_,
            New_,
            Updated_,
            Postponed_);
    }

    public override string ToString() => $"UIQuestNotificationTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestComplite: {{ \n{QuestComplite.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestFailed: {{ \n{QuestFailed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestNew: {{ \n{QuestNew.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestUpdate: {{ \n{QuestUpdate.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestStarted: {{ \n{QuestStarted.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestPostponed: {{ \n{QuestPostponed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToJournal: {{ \n{ToJournal.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Quest: {{ \n{Quest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rumour: {{ \n{Rumour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Order: {{ \n{Order.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Failed: {{ \n{Failed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Completed: {{ \n{Completed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}New: {{ \n{New.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Updated: {{ \n{Updated.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Postponed: {{ \n{Postponed.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIKeyboardTexts (1 fields) */
public record class UIKeyboardTexts (
    KeyCodeName[] KeyCodeNames) : IUnityStructure
{
    public static UIKeyboardTexts Read(EndianBinaryReader reader)
    {
        KeyCodeName[] KeyCodeNames_ = BuiltInArray<KeyCodeName>.Read(reader);
        reader.AlignTo(4); /* KeyCodeNames */
        
        return new(KeyCodeNames_);
    }

    public override string ToString() => $"UIKeyboardTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}KeyCodeNames[{KeyCodeNames.Length}] = {{");
        if (KeyCodeNames.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (KeyCodeName _4 in KeyCodeNames)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (KeyCodeNames.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $KeyCodeName (2 fields) */
public record class KeyCodeName (
    int Code,
    AsciiString CodeString) : IUnityStructure
{
    public static KeyCodeName Read(EndianBinaryReader reader)
    {
        int Code_ = reader.ReadS32();
        AsciiString CodeString_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* CodeString */
        
        return new(Code_,
            CodeString_);
    }

    public override string ToString() => $"KeyCodeName\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Code: {Code}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CodeString: \"{CodeString}\"");
    }
}

/* $UILoot (25 fields) */
public record class UILoot (
    LocalizedString Loot,
    LocalizedString LootPlayerChest,
    LocalizedString SendToPlayerChest,
    LocalizedString LootOnArea,
    LocalizedString CollectAll,
    LocalizedString LeaveZone,
    LocalizedString CollectAllAndLeaveZone,
    LocalizedString LootManager,
    LocalizedString SendToCargo,
    LocalizedString SendToInventory,
    LocalizedString SendAllToCargo,
    LocalizedString SendAllToInventory,
    LocalizedString ItemsLootObject,
    LocalizedString ItemsLootObjectDescr,
    LocalizedString TrashLootObject,
    LocalizedString TrashLootObjectDescr,
    LocalizedString CollectAllBeforeLeave,
    LocalizedString SkillCheckTitle,
    LocalizedString SkillCheckResult,
    LocalizedString SkillCheckValueAgainst,
    LocalizedString SkillCheckSkillValue,
    LocalizedString DropZoneUnsupportedItem,
    LocalizedString CargoCollectedFromLoot,
    LocalizedString LootLockedState,
    LocalizedString ExitDescription) : IUnityStructure
{
    public static UILoot Read(EndianBinaryReader reader)
    {
        LocalizedString Loot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Loot */
        LocalizedString LootPlayerChest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootPlayerChest */
        LocalizedString SendToPlayerChest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendToPlayerChest */
        LocalizedString LootOnArea_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootOnArea */
        LocalizedString CollectAll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CollectAll */
        LocalizedString LeaveZone_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LeaveZone */
        LocalizedString CollectAllAndLeaveZone_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CollectAllAndLeaveZone */
        LocalizedString LootManager_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootManager */
        LocalizedString SendToCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendToCargo */
        LocalizedString SendToInventory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendToInventory */
        LocalizedString SendAllToCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendAllToCargo */
        LocalizedString SendAllToInventory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendAllToInventory */
        LocalizedString ItemsLootObject_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsLootObject */
        LocalizedString ItemsLootObjectDescr_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ItemsLootObjectDescr */
        LocalizedString TrashLootObject_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrashLootObject */
        LocalizedString TrashLootObjectDescr_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrashLootObjectDescr */
        LocalizedString CollectAllBeforeLeave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CollectAllBeforeLeave */
        LocalizedString SkillCheckTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckTitle */
        LocalizedString SkillCheckResult_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckResult */
        LocalizedString SkillCheckValueAgainst_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckValueAgainst */
        LocalizedString SkillCheckSkillValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SkillCheckSkillValue */
        LocalizedString DropZoneUnsupportedItem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DropZoneUnsupportedItem */
        LocalizedString CargoCollectedFromLoot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoCollectedFromLoot */
        LocalizedString LootLockedState_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LootLockedState */
        LocalizedString ExitDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExitDescription */
        
        return new(Loot_,
            LootPlayerChest_,
            SendToPlayerChest_,
            LootOnArea_,
            CollectAll_,
            LeaveZone_,
            CollectAllAndLeaveZone_,
            LootManager_,
            SendToCargo_,
            SendToInventory_,
            SendAllToCargo_,
            SendAllToInventory_,
            ItemsLootObject_,
            ItemsLootObjectDescr_,
            TrashLootObject_,
            TrashLootObjectDescr_,
            CollectAllBeforeLeave_,
            SkillCheckTitle_,
            SkillCheckResult_,
            SkillCheckValueAgainst_,
            SkillCheckSkillValue_,
            DropZoneUnsupportedItem_,
            CargoCollectedFromLoot_,
            LootLockedState_,
            ExitDescription_);
    }

    public override string ToString() => $"UILoot\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Loot: {{ \n{Loot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootPlayerChest: {{ \n{LootPlayerChest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendToPlayerChest: {{ \n{SendToPlayerChest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootOnArea: {{ \n{LootOnArea.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CollectAll: {{ \n{CollectAll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LeaveZone: {{ \n{LeaveZone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CollectAllAndLeaveZone: {{ \n{CollectAllAndLeaveZone.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootManager: {{ \n{LootManager.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendToCargo: {{ \n{SendToCargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendToInventory: {{ \n{SendToInventory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendAllToCargo: {{ \n{SendAllToCargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendAllToInventory: {{ \n{SendAllToInventory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ItemsLootObject: {{ \n{ItemsLootObject.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ItemsLootObjectDescr: {{ \n{ItemsLootObjectDescr.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TrashLootObject: {{ \n{TrashLootObject.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TrashLootObjectDescr: {{ \n{TrashLootObjectDescr.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CollectAllBeforeLeave: {{ \n{CollectAllBeforeLeave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckTitle: {{ \n{SkillCheckTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckResult: {{ \n{SkillCheckResult.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckValueAgainst: {{ \n{SkillCheckValueAgainst.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SkillCheckSkillValue: {{ \n{SkillCheckSkillValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DropZoneUnsupportedItem: {{ \n{DropZoneUnsupportedItem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoCollectedFromLoot: {{ \n{CargoCollectedFromLoot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LootLockedState: {{ \n{LootLockedState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExitDescription: {{ \n{ExitDescription.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIQuesJournalTexts (19 fields) */
public record class UIQuesJournalTexts (
    LocalizedString QuestComplite,
    LocalizedString QuestFailed,
    LocalizedString QuestTimeToFail,
    LocalizedString QuestTimeToRealFail,
    LocalizedString RumourPlaceMarker,
    LocalizedString YouAreWithinRange,
    LocalizedString AllRumoursTitle,
    LocalizedString RumoursAboutUsTitle,
    LocalizedString OrderResourcesYourResources,
    LocalizedString NoData,
    LocalizedString RequiredResources,
    LocalizedString RewardsResources,
    LocalizedString CompleteOrder,
    LocalizedString ShowCompletedQuests,
    LocalizedString HideCompletedQuests,
    LocalizedString Quests,
    LocalizedString Rumours,
    LocalizedString Orders,
    LocalizedString NoNameOfTheListObjectsAvailable) : IUnityStructure
{
    public static UIQuesJournalTexts Read(EndianBinaryReader reader)
    {
        LocalizedString QuestComplite_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestComplite */
        LocalizedString QuestFailed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestFailed */
        LocalizedString QuestTimeToFail_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestTimeToFail */
        LocalizedString QuestTimeToRealFail_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* QuestTimeToRealFail */
        LocalizedString RumourPlaceMarker_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RumourPlaceMarker */
        LocalizedString YouAreWithinRange_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouAreWithinRange */
        LocalizedString AllRumoursTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AllRumoursTitle */
        LocalizedString RumoursAboutUsTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RumoursAboutUsTitle */
        LocalizedString OrderResourcesYourResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OrderResourcesYourResources */
        LocalizedString NoData_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoData */
        LocalizedString RequiredResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequiredResources */
        LocalizedString RewardsResources_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RewardsResources */
        LocalizedString CompleteOrder_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompleteOrder */
        LocalizedString ShowCompletedQuests_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowCompletedQuests */
        LocalizedString HideCompletedQuests_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideCompletedQuests */
        LocalizedString Quests_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Quests */
        LocalizedString Rumours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Rumours */
        LocalizedString Orders_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Orders */
        LocalizedString NoNameOfTheListObjectsAvailable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoNameOfTheListObjectsAvailable */
        
        return new(QuestComplite_,
            QuestFailed_,
            QuestTimeToFail_,
            QuestTimeToRealFail_,
            RumourPlaceMarker_,
            YouAreWithinRange_,
            AllRumoursTitle_,
            RumoursAboutUsTitle_,
            OrderResourcesYourResources_,
            NoData_,
            RequiredResources_,
            RewardsResources_,
            CompleteOrder_,
            ShowCompletedQuests_,
            HideCompletedQuests_,
            Quests_,
            Rumours_,
            Orders_,
            NoNameOfTheListObjectsAvailable_);
    }

    public override string ToString() => $"UIQuesJournalTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestComplite: {{ \n{QuestComplite.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestFailed: {{ \n{QuestFailed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestTimeToFail: {{ \n{QuestTimeToFail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}QuestTimeToRealFail: {{ \n{QuestTimeToRealFail.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RumourPlaceMarker: {{ \n{RumourPlaceMarker.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouAreWithinRange: {{ \n{YouAreWithinRange.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AllRumoursTitle: {{ \n{AllRumoursTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RumoursAboutUsTitle: {{ \n{RumoursAboutUsTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OrderResourcesYourResources: {{ \n{OrderResourcesYourResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoData: {{ \n{NoData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequiredResources: {{ \n{RequiredResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RewardsResources: {{ \n{RewardsResources.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CompleteOrder: {{ \n{CompleteOrder.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowCompletedQuests: {{ \n{ShowCompletedQuests.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideCompletedQuests: {{ \n{HideCompletedQuests.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Quests: {{ \n{Quests.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rumours: {{ \n{Rumours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Orders: {{ \n{Orders.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoNameOfTheListObjectsAvailable: {{ \n{NoNameOfTheListObjectsAvailable.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UITransitionTexts (2 fields) */
public record class UITransitionTexts (
    LocalizedString AvailableObjectives,
    LocalizedString TransitionIsUnavailable) : IUnityStructure
{
    public static UITransitionTexts Read(EndianBinaryReader reader)
    {
        LocalizedString AvailableObjectives_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableObjectives */
        LocalizedString TransitionIsUnavailable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TransitionIsUnavailable */
        
        return new(AvailableObjectives_,
            TransitionIsUnavailable_);
    }

    public override string ToString() => $"UITransitionTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AvailableObjectives: {{ \n{AvailableObjectives.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TransitionIsUnavailable: {{ \n{TransitionIsUnavailable.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $GroupChangerTexts (3 fields) */
public record class GroupChangerTexts (
    LocalizedString MustBeInPartyHint,
    LocalizedString MaxGroupCountWarning,
    LocalizedString MaxNavigatorsCountWarning) : IUnityStructure
{
    public static GroupChangerTexts Read(EndianBinaryReader reader)
    {
        LocalizedString MustBeInPartyHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MustBeInPartyHint */
        LocalizedString MaxGroupCountWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxGroupCountWarning */
        LocalizedString MaxNavigatorsCountWarning_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxNavigatorsCountWarning */
        
        return new(MustBeInPartyHint_,
            MaxGroupCountWarning_,
            MaxNavigatorsCountWarning_);
    }

    public override string ToString() => $"GroupChangerTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MustBeInPartyHint: {{ \n{MustBeInPartyHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaxGroupCountWarning: {{ \n{MaxGroupCountWarning.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaxNavigatorsCountWarning: {{ \n{MaxNavigatorsCountWarning.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIContextMenu (15 fields) */
public record class UIContextMenu (
    LocalizedString ContextMenu,
    LocalizedString Back,
    LocalizedString Buy,
    LocalizedString Drop,
    LocalizedString Equip,
    LocalizedString Information,
    LocalizedString Sell,
    LocalizedString Split,
    LocalizedString TakeOff,
    LocalizedString Use,
    LocalizedString UpgradeInternalStructure,
    LocalizedString DowngradeInternalStructure,
    LocalizedString UpgradeProwRaw,
    LocalizedString DowngradeProwRaw,
    LocalizedString AutoAddToCargo) : IUnityStructure
{
    public static UIContextMenu Read(EndianBinaryReader reader)
    {
        LocalizedString ContextMenu_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ContextMenu */
        LocalizedString Back_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Back */
        LocalizedString Buy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Buy */
        LocalizedString Drop_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Drop */
        LocalizedString Equip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Equip */
        LocalizedString Information_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Information */
        LocalizedString Sell_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Sell */
        LocalizedString Split_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Split */
        LocalizedString TakeOff_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TakeOff */
        LocalizedString Use_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Use */
        LocalizedString UpgradeInternalStructure_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeInternalStructure */
        LocalizedString DowngradeInternalStructure_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DowngradeInternalStructure */
        LocalizedString UpgradeProwRaw_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UpgradeProwRaw */
        LocalizedString DowngradeProwRaw_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DowngradeProwRaw */
        LocalizedString AutoAddToCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoAddToCargo */
        
        return new(ContextMenu_,
            Back_,
            Buy_,
            Drop_,
            Equip_,
            Information_,
            Sell_,
            Split_,
            TakeOff_,
            Use_,
            UpgradeInternalStructure_,
            DowngradeInternalStructure_,
            UpgradeProwRaw_,
            DowngradeProwRaw_,
            AutoAddToCargo_);
    }

    public override string ToString() => $"UIContextMenu\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ContextMenu: {{ \n{ContextMenu.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Back: {{ \n{Back.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Buy: {{ \n{Buy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Drop: {{ \n{Drop.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Equip: {{ \n{Equip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Information: {{ \n{Information.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Sell: {{ \n{Sell.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Split: {{ \n{Split.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TakeOff: {{ \n{TakeOff.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Use: {{ \n{Use.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeInternalStructure: {{ \n{UpgradeInternalStructure.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DowngradeInternalStructure: {{ \n{DowngradeInternalStructure.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UpgradeProwRaw: {{ \n{UpgradeProwRaw.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DowngradeProwRaw: {{ \n{DowngradeProwRaw.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoAddToCargo: {{ \n{AutoAddToCargo.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $EncyclopediaTexts (17 fields) */
public record class EncyclopediaTexts (
    LocalizedString EncyclopediaGlossaryButton,
    LocalizedString TooltipOpenEncyclopedia,
    LocalizedString AddedToEncyclopedia,
    LocalizedString SeeInEncyclopedia,
    LocalizedString ToEncyclopedia,
    LocalizedString EncyclopediaIsReportedToAdministratum,
    LocalizedString EncyclopediaIsNotReportedToAdministratum,
    LocalizedString EncyclopediaPlanetPageSystem,
    LocalizedString EncyclopediaPlanetPageIsColonized,
    LocalizedString EncyclopediaPlanetPageHaveQuest,
    LocalizedString EncyclopediaPlanetPageHaveRumour,
    LocalizedString EncyclopediaPlanetPageSecurity,
    LocalizedString EncyclopediaNeedReportToAdministratumHint,
    LocalizedString AstropathBriefLocation,
    LocalizedString AstropathBriefDate,
    LocalizedString AstropathBriefSender,
    LocalizedString AstropathBriefIsRead) : IUnityStructure
{
    public static EncyclopediaTexts Read(EndianBinaryReader reader)
    {
        LocalizedString EncyclopediaGlossaryButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaGlossaryButton */
        LocalizedString TooltipOpenEncyclopedia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipOpenEncyclopedia */
        LocalizedString AddedToEncyclopedia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AddedToEncyclopedia */
        LocalizedString SeeInEncyclopedia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SeeInEncyclopedia */
        LocalizedString ToEncyclopedia_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToEncyclopedia */
        LocalizedString EncyclopediaIsReportedToAdministratum_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaIsReportedToAdministratum */
        LocalizedString EncyclopediaIsNotReportedToAdministratum_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaIsNotReportedToAdministratum */
        LocalizedString EncyclopediaPlanetPageSystem_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageSystem */
        LocalizedString EncyclopediaPlanetPageIsColonized_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageIsColonized */
        LocalizedString EncyclopediaPlanetPageHaveQuest_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageHaveQuest */
        LocalizedString EncyclopediaPlanetPageHaveRumour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageHaveRumour */
        LocalizedString EncyclopediaPlanetPageSecurity_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaPlanetPageSecurity */
        LocalizedString EncyclopediaNeedReportToAdministratumHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EncyclopediaNeedReportToAdministratumHint */
        LocalizedString AstropathBriefLocation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefLocation */
        LocalizedString AstropathBriefDate_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefDate */
        LocalizedString AstropathBriefSender_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefSender */
        LocalizedString AstropathBriefIsRead_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AstropathBriefIsRead */
        
        return new(EncyclopediaGlossaryButton_,
            TooltipOpenEncyclopedia_,
            AddedToEncyclopedia_,
            SeeInEncyclopedia_,
            ToEncyclopedia_,
            EncyclopediaIsReportedToAdministratum_,
            EncyclopediaIsNotReportedToAdministratum_,
            EncyclopediaPlanetPageSystem_,
            EncyclopediaPlanetPageIsColonized_,
            EncyclopediaPlanetPageHaveQuest_,
            EncyclopediaPlanetPageHaveRumour_,
            EncyclopediaPlanetPageSecurity_,
            EncyclopediaNeedReportToAdministratumHint_,
            AstropathBriefLocation_,
            AstropathBriefDate_,
            AstropathBriefSender_,
            AstropathBriefIsRead_);
    }

    public override string ToString() => $"EncyclopediaTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaGlossaryButton: {{ \n{EncyclopediaGlossaryButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipOpenEncyclopedia: {{ \n{TooltipOpenEncyclopedia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AddedToEncyclopedia: {{ \n{AddedToEncyclopedia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SeeInEncyclopedia: {{ \n{SeeInEncyclopedia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToEncyclopedia: {{ \n{ToEncyclopedia.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaIsReportedToAdministratum: {{ \n{EncyclopediaIsReportedToAdministratum.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaIsNotReportedToAdministratum: {{ \n{EncyclopediaIsNotReportedToAdministratum.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaPlanetPageSystem: {{ \n{EncyclopediaPlanetPageSystem.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaPlanetPageIsColonized: {{ \n{EncyclopediaPlanetPageIsColonized.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaPlanetPageHaveQuest: {{ \n{EncyclopediaPlanetPageHaveQuest.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaPlanetPageHaveRumour: {{ \n{EncyclopediaPlanetPageHaveRumour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaPlanetPageSecurity: {{ \n{EncyclopediaPlanetPageSecurity.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EncyclopediaNeedReportToAdministratumHint: {{ \n{EncyclopediaNeedReportToAdministratumHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AstropathBriefLocation: {{ \n{AstropathBriefLocation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AstropathBriefDate: {{ \n{AstropathBriefDate.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AstropathBriefSender: {{ \n{AstropathBriefSender.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AstropathBriefIsRead: {{ \n{AstropathBriefIsRead.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIControllerModeTexts (8 fields) */
public record class UIControllerModeTexts (
    LocalizedString GamepadConnectedHeaderText,
    LocalizedString GamepadDisconnectedHeaderText,
    LocalizedString GamepadConnectedText,
    LocalizedString GamepadDisconnectedText,
    LocalizedString ConfirmSwitchText,
    LocalizedString CantChangeInput,
    LocalizedString ChangeInputProcess,
    LocalizedString PressAnyKeyText) : IUnityStructure
{
    public static UIControllerModeTexts Read(EndianBinaryReader reader)
    {
        LocalizedString GamepadConnectedHeaderText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadConnectedHeaderText */
        LocalizedString GamepadDisconnectedHeaderText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadDisconnectedHeaderText */
        LocalizedString GamepadConnectedText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadConnectedText */
        LocalizedString GamepadDisconnectedText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GamepadDisconnectedText */
        LocalizedString ConfirmSwitchText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ConfirmSwitchText */
        LocalizedString CantChangeInput_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CantChangeInput */
        LocalizedString ChangeInputProcess_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeInputProcess */
        LocalizedString PressAnyKeyText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PressAnyKeyText */
        
        return new(GamepadConnectedHeaderText_,
            GamepadDisconnectedHeaderText_,
            GamepadConnectedText_,
            GamepadDisconnectedText_,
            ConfirmSwitchText_,
            CantChangeInput_,
            ChangeInputProcess_,
            PressAnyKeyText_);
    }

    public override string ToString() => $"UIControllerModeTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GamepadConnectedHeaderText: {{ \n{GamepadConnectedHeaderText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GamepadDisconnectedHeaderText: {{ \n{GamepadDisconnectedHeaderText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GamepadConnectedText: {{ \n{GamepadConnectedText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GamepadDisconnectedText: {{ \n{GamepadDisconnectedText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConfirmSwitchText: {{ \n{ConfirmSwitchText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CantChangeInput: {{ \n{CantChangeInput.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeInputProcess: {{ \n{ChangeInputProcess.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PressAnyKeyText: {{ \n{PressAnyKeyText.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIProfitFactorTexts (11 fields) */
public record class UIProfitFactorTexts (
    LocalizedString Title,
    LocalizedString Description,
    LocalizedString Initial,
    LocalizedString TotalValue,
    LocalizedString Income,
    LocalizedString Loss,
    LocalizedString AvailableToUseValue,
    LocalizedString NoSourcesDesc,
    LocalizedString ProfitFatorGainedNotification,
    LocalizedString ProfitFatorLostNotification,
    ProfitFactorSourcePair[] Sources) : IUnityStructure
{
    public static UIProfitFactorTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Title_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Title */
        LocalizedString Description_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Description */
        LocalizedString Initial_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Initial */
        LocalizedString TotalValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TotalValue */
        LocalizedString Income_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Income */
        LocalizedString Loss_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Loss */
        LocalizedString AvailableToUseValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableToUseValue */
        LocalizedString NoSourcesDesc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoSourcesDesc */
        LocalizedString ProfitFatorGainedNotification_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProfitFatorGainedNotification */
        LocalizedString ProfitFatorLostNotification_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ProfitFatorLostNotification */
        ProfitFactorSourcePair[] Sources_ = BuiltInArray<ProfitFactorSourcePair>.Read(reader);
        reader.AlignTo(4); /* Sources */
        
        return new(Title_,
            Description_,
            Initial_,
            TotalValue_,
            Income_,
            Loss_,
            AvailableToUseValue_,
            NoSourcesDesc_,
            ProfitFatorGainedNotification_,
            ProfitFatorLostNotification_,
            Sources_);
    }

    public override string ToString() => $"UIProfitFactorTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Title: {{ \n{Title.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Description: {{ \n{Description.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Initial: {{ \n{Initial.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TotalValue: {{ \n{TotalValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Income: {{ \n{Income.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Loss: {{ \n{Loss.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AvailableToUseValue: {{ \n{AvailableToUseValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoSourcesDesc: {{ \n{NoSourcesDesc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProfitFatorGainedNotification: {{ \n{ProfitFatorGainedNotification.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ProfitFatorLostNotification: {{ \n{ProfitFatorLostNotification.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Sources[{Sources.Length}] = {{");
        if (Sources.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ProfitFactorSourcePair _4 in Sources)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Sources.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ProfitFactorSourcePair (2 fields) */
public record class ProfitFactorSourcePair (
    int SourceType,
    LocalizedString SourceName) : IUnityStructure
{
    public static ProfitFactorSourcePair Read(EndianBinaryReader reader)
    {
        int SourceType_ = reader.ReadS32();
        LocalizedString SourceName_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SourceName */
        
        return new(SourceType_,
            SourceName_);
    }

    public override string ToString() => $"ProfitFactorSourcePair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SourceType: {SourceType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SourceName: {{ \n{SourceName.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIBugReport (29 fields) */
public record class UIBugReport (
    LocalizedString DesctiptionHeader,
    LocalizedString Header,
    LocalizedString AspectHeader,
    LocalizedString ContextHeader,
    LocalizedString SendButton,
    LocalizedString HintText,
    LocalizedString SuggestionTogle,
    LocalizedString NormalTogle,
    LocalizedString CriticalTogle,
    LocalizedString EmailHeader,
    LocalizedString ButtomDescription,
    LocalizedString PrivacyCheckBoxDescription,
    LocalizedString EmailUpdatesCheckBoxDescription,
    LocalizedString DiscordHeader,
    LocalizedString OpenBugReportText,
    LocalizedString EditScreenShotTitleText,
    LocalizedString DuplicateBugsShortTitleText,
    LocalizedString DuplicateBugsTitleText,
    LocalizedString LoadingProcessDuplicatesListText,
    LocalizedString DuplicatesListIsEmptyText,
    LocalizedString ClearButtonText,
    LocalizedString SaveButtonText,
    LocalizedString SendindIsNotAvailable,
    LocalizedString BugReportStartingMessagePC,
    LocalizedString BugReportStartingMessageConsole,
    LocalizedString BugReportContinue,
    LocalizedString AdditionalPlaceholderText,
    LocalizedString OpenJiraTask,
    LocalizedString OpenMet) : IUnityStructure
{
    public static UIBugReport Read(EndianBinaryReader reader)
    {
        LocalizedString DesctiptionHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DesctiptionHeader */
        LocalizedString Header_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Header */
        LocalizedString AspectHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AspectHeader */
        LocalizedString ContextHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ContextHeader */
        LocalizedString SendButton_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendButton */
        LocalizedString HintText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HintText */
        LocalizedString SuggestionTogle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SuggestionTogle */
        LocalizedString NormalTogle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NormalTogle */
        LocalizedString CriticalTogle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalTogle */
        LocalizedString EmailHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmailHeader */
        LocalizedString ButtomDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ButtomDescription */
        LocalizedString PrivacyCheckBoxDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PrivacyCheckBoxDescription */
        LocalizedString EmailUpdatesCheckBoxDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmailUpdatesCheckBoxDescription */
        LocalizedString DiscordHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DiscordHeader */
        LocalizedString OpenBugReportText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenBugReportText */
        LocalizedString EditScreenShotTitleText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EditScreenShotTitleText */
        LocalizedString DuplicateBugsShortTitleText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DuplicateBugsShortTitleText */
        LocalizedString DuplicateBugsTitleText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DuplicateBugsTitleText */
        LocalizedString LoadingProcessDuplicatesListText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LoadingProcessDuplicatesListText */
        LocalizedString DuplicatesListIsEmptyText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DuplicatesListIsEmptyText */
        LocalizedString ClearButtonText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ClearButtonText */
        LocalizedString SaveButtonText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SaveButtonText */
        LocalizedString SendindIsNotAvailable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SendindIsNotAvailable */
        LocalizedString BugReportStartingMessagePC_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BugReportStartingMessagePC */
        LocalizedString BugReportStartingMessageConsole_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BugReportStartingMessageConsole */
        LocalizedString BugReportContinue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BugReportContinue */
        LocalizedString AdditionalPlaceholderText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AdditionalPlaceholderText */
        LocalizedString OpenJiraTask_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenJiraTask */
        LocalizedString OpenMet_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OpenMet */
        
        return new(DesctiptionHeader_,
            Header_,
            AspectHeader_,
            ContextHeader_,
            SendButton_,
            HintText_,
            SuggestionTogle_,
            NormalTogle_,
            CriticalTogle_,
            EmailHeader_,
            ButtomDescription_,
            PrivacyCheckBoxDescription_,
            EmailUpdatesCheckBoxDescription_,
            DiscordHeader_,
            OpenBugReportText_,
            EditScreenShotTitleText_,
            DuplicateBugsShortTitleText_,
            DuplicateBugsTitleText_,
            LoadingProcessDuplicatesListText_,
            DuplicatesListIsEmptyText_,
            ClearButtonText_,
            SaveButtonText_,
            SendindIsNotAvailable_,
            BugReportStartingMessagePC_,
            BugReportStartingMessageConsole_,
            BugReportContinue_,
            AdditionalPlaceholderText_,
            OpenJiraTask_,
            OpenMet_);
    }

    public override string ToString() => $"UIBugReport\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DesctiptionHeader: {{ \n{DesctiptionHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Header: {{ \n{Header.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AspectHeader: {{ \n{AspectHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ContextHeader: {{ \n{ContextHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendButton: {{ \n{SendButton.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HintText: {{ \n{HintText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SuggestionTogle: {{ \n{SuggestionTogle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalTogle: {{ \n{NormalTogle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CriticalTogle: {{ \n{CriticalTogle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EmailHeader: {{ \n{EmailHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ButtomDescription: {{ \n{ButtomDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PrivacyCheckBoxDescription: {{ \n{PrivacyCheckBoxDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EmailUpdatesCheckBoxDescription: {{ \n{EmailUpdatesCheckBoxDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DiscordHeader: {{ \n{DiscordHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenBugReportText: {{ \n{OpenBugReportText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EditScreenShotTitleText: {{ \n{EditScreenShotTitleText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DuplicateBugsShortTitleText: {{ \n{DuplicateBugsShortTitleText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DuplicateBugsTitleText: {{ \n{DuplicateBugsTitleText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LoadingProcessDuplicatesListText: {{ \n{LoadingProcessDuplicatesListText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DuplicatesListIsEmptyText: {{ \n{DuplicatesListIsEmptyText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClearButtonText: {{ \n{ClearButtonText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SaveButtonText: {{ \n{SaveButtonText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SendindIsNotAvailable: {{ \n{SendindIsNotAvailable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BugReportStartingMessagePC: {{ \n{BugReportStartingMessagePC.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BugReportStartingMessageConsole: {{ \n{BugReportStartingMessageConsole.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BugReportContinue: {{ \n{BugReportContinue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AdditionalPlaceholderText: {{ \n{AdditionalPlaceholderText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenJiraTask: {{ \n{OpenJiraTask.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OpenMet: {{ \n{OpenMet.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIFeedbackPopupTexts (5 fields) */
public record class UIFeedbackPopupTexts (
    LocalizedString Survey,
    LocalizedString Discord,
    LocalizedString Twitter,
    LocalizedString Facebook,
    LocalizedString Website) : IUnityStructure
{
    public static UIFeedbackPopupTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Survey_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Survey */
        LocalizedString Discord_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Discord */
        LocalizedString Twitter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Twitter */
        LocalizedString Facebook_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Facebook */
        LocalizedString Website_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Website */
        
        return new(Survey_,
            Discord_,
            Twitter_,
            Facebook_,
            Website_);
    }

    public override string ToString() => $"UIFeedbackPopupTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Survey: {{ \n{Survey.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Discord: {{ \n{Discord.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Twitter: {{ \n{Twitter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Facebook: {{ \n{Facebook.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Website: {{ \n{Website.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIAbilityTexts (4 fields) */
public record class UIAbilityTexts (
    LocalizedString SingleShot,
    LocalizedString Burst,
    LocalizedString Pattern,
    LocalizedString Melee) : IUnityStructure
{
    public static UIAbilityTexts Read(EndianBinaryReader reader)
    {
        LocalizedString SingleShot_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SingleShot */
        LocalizedString Burst_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Burst */
        LocalizedString Pattern_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pattern */
        LocalizedString Melee_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Melee */
        
        return new(SingleShot_,
            Burst_,
            Pattern_,
            Melee_);
    }

    public override string ToString() => $"UIAbilityTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SingleShot: {{ \n{SingleShot.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Burst: {{ \n{Burst.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pattern: {{ \n{Pattern.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Melee: {{ \n{Melee.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UICargoTexts (33 fields) */
public record class UICargoTexts (
    LocalizedString Xeno,
    LocalizedString Chaos,
    LocalizedString ShipComponents,
    LocalizedString RangedWeaponry,
    LocalizedString MeleeWeaponry,
    LocalizedString Tech,
    LocalizedString Textile,
    LocalizedString Armours,
    LocalizedString Provision,
    LocalizedString Fuel,
    LocalizedString Holy,
    LocalizedString EnergyBattery,
    LocalizedString Transuranium,
    LocalizedString Jewelry,
    LocalizedString Miscellaneous,
    LocalizedString People,
    LocalizedString Torpedoes,
    LocalizedString SpacePirates,
    LocalizedString SpaceChaos,
    LocalizedString SpaceAeldari,
    LocalizedString SpaceDrukhari,
    LocalizedString SpaceNecrons,
    LocalizedString CargoUnusableFillValue,
    LocalizedString CargoUnusableFill,
    LocalizedString CargoTotalFill,
    LocalizedString TooltipShowDetails,
    LocalizedString CargoReceived,
    LocalizedString CargoCreated,
    LocalizedString Cargo,
    LocalizedString CargoRewardsHeader,
    LocalizedString CargoList,
    LocalizedString EmptyCargo,
    LocalizedString TrashItemCargo) : IUnityStructure
{
    public static UICargoTexts Read(EndianBinaryReader reader)
    {
        LocalizedString Xeno_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Xeno */
        LocalizedString Chaos_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Chaos */
        LocalizedString ShipComponents_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipComponents */
        LocalizedString RangedWeaponry_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RangedWeaponry */
        LocalizedString MeleeWeaponry_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MeleeWeaponry */
        LocalizedString Tech_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tech */
        LocalizedString Textile_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Textile */
        LocalizedString Armours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armours */
        LocalizedString Provision_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Provision */
        LocalizedString Fuel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Fuel */
        LocalizedString Holy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Holy */
        LocalizedString EnergyBattery_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnergyBattery */
        LocalizedString Transuranium_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Transuranium */
        LocalizedString Jewelry_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Jewelry */
        LocalizedString Miscellaneous_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Miscellaneous */
        LocalizedString People_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* People */
        LocalizedString Torpedoes_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Torpedoes */
        LocalizedString SpacePirates_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpacePirates */
        LocalizedString SpaceChaos_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceChaos */
        LocalizedString SpaceAeldari_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceAeldari */
        LocalizedString SpaceDrukhari_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceDrukhari */
        LocalizedString SpaceNecrons_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceNecrons */
        LocalizedString CargoUnusableFillValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoUnusableFillValue */
        LocalizedString CargoUnusableFill_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoUnusableFill */
        LocalizedString CargoTotalFill_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoTotalFill */
        LocalizedString TooltipShowDetails_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipShowDetails */
        LocalizedString CargoReceived_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoReceived */
        LocalizedString CargoCreated_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoCreated */
        LocalizedString Cargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Cargo */
        LocalizedString CargoRewardsHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoRewardsHeader */
        LocalizedString CargoList_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CargoList */
        LocalizedString EmptyCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EmptyCargo */
        LocalizedString TrashItemCargo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TrashItemCargo */
        
        return new(Xeno_,
            Chaos_,
            ShipComponents_,
            RangedWeaponry_,
            MeleeWeaponry_,
            Tech_,
            Textile_,
            Armours_,
            Provision_,
            Fuel_,
            Holy_,
            EnergyBattery_,
            Transuranium_,
            Jewelry_,
            Miscellaneous_,
            People_,
            Torpedoes_,
            SpacePirates_,
            SpaceChaos_,
            SpaceAeldari_,
            SpaceDrukhari_,
            SpaceNecrons_,
            CargoUnusableFillValue_,
            CargoUnusableFill_,
            CargoTotalFill_,
            TooltipShowDetails_,
            CargoReceived_,
            CargoCreated_,
            Cargo_,
            CargoRewardsHeader_,
            CargoList_,
            EmptyCargo_,
            TrashItemCargo_);
    }

    public override string ToString() => $"UICargoTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Xeno: {{ \n{Xeno.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Chaos: {{ \n{Chaos.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipComponents: {{ \n{ShipComponents.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RangedWeaponry: {{ \n{RangedWeaponry.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MeleeWeaponry: {{ \n{MeleeWeaponry.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tech: {{ \n{Tech.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Textile: {{ \n{Textile.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Armours: {{ \n{Armours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Provision: {{ \n{Provision.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Fuel: {{ \n{Fuel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Holy: {{ \n{Holy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EnergyBattery: {{ \n{EnergyBattery.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Transuranium: {{ \n{Transuranium.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Jewelry: {{ \n{Jewelry.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Miscellaneous: {{ \n{Miscellaneous.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}People: {{ \n{People.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Torpedoes: {{ \n{Torpedoes.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpacePirates: {{ \n{SpacePirates.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpaceChaos: {{ \n{SpaceChaos.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpaceAeldari: {{ \n{SpaceAeldari.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpaceDrukhari: {{ \n{SpaceDrukhari.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpaceNecrons: {{ \n{SpaceNecrons.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoUnusableFillValue: {{ \n{CargoUnusableFillValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoUnusableFill: {{ \n{CargoUnusableFill.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoTotalFill: {{ \n{CargoTotalFill.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipShowDetails: {{ \n{TooltipShowDetails.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoReceived: {{ \n{CargoReceived.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoCreated: {{ \n{CargoCreated.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Cargo: {{ \n{Cargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoRewardsHeader: {{ \n{CargoRewardsHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CargoList: {{ \n{CargoList.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EmptyCargo: {{ \n{EmptyCargo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TrashItemCargo: {{ \n{TrashItemCargo.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIPropertyNames (1 fields) */
public record class UIPropertyNames (
    UIPropertyNameEntry[] Entries) : IUnityStructure
{
    public static UIPropertyNames Read(EndianBinaryReader reader)
    {
        UIPropertyNameEntry[] Entries_ = BuiltInArray<UIPropertyNameEntry>.Read(reader);
        reader.AlignTo(4); /* Entries */
        
        return new(Entries_);
    }

    public override string ToString() => $"UIPropertyNames\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Entries[{Entries.Length}] = {{");
        if (Entries.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (UIPropertyNameEntry _4 in Entries)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Entries.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $UIPropertyNameEntry (2 fields) */
public record class UIPropertyNameEntry (
    int Type,
    LocalizedString Text) : IUnityStructure
{
    public static UIPropertyNameEntry Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(Type_,
            Text_);
    }

    public override string ToString() => $"UIPropertyNameEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $HUDTexts (13 fields) */
public record class HUDTexts (
    LocalizedString ShowActionBar,
    LocalizedString HideActionBar,
    LocalizedString EndTurn,
    LocalizedString Pointer,
    LocalizedString Pause,
    LocalizedString SwitchCameraMode,
    LocalizedString FocusOnCurrentUnit,
    LocalizedString FocusOnCurrentShip,
    LocalizedString HighlightObjects,
    LocalizedString PostsBar,
    LocalizedString WeaponsBar,
    LocalizedString EnterCombatLog,
    LocalizedString ChangeWeaponSet) : IUnityStructure
{
    public static HUDTexts Read(EndianBinaryReader reader)
    {
        LocalizedString ShowActionBar_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowActionBar */
        LocalizedString HideActionBar_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideActionBar */
        LocalizedString EndTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EndTurn */
        LocalizedString Pointer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pointer */
        LocalizedString Pause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Pause */
        LocalizedString SwitchCameraMode_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SwitchCameraMode */
        LocalizedString FocusOnCurrentUnit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FocusOnCurrentUnit */
        LocalizedString FocusOnCurrentShip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FocusOnCurrentShip */
        LocalizedString HighlightObjects_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HighlightObjects */
        LocalizedString PostsBar_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PostsBar */
        LocalizedString WeaponsBar_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponsBar */
        LocalizedString EnterCombatLog_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnterCombatLog */
        LocalizedString ChangeWeaponSet_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeWeaponSet */
        
        return new(ShowActionBar_,
            HideActionBar_,
            EndTurn_,
            Pointer_,
            Pause_,
            SwitchCameraMode_,
            FocusOnCurrentUnit_,
            FocusOnCurrentShip_,
            HighlightObjects_,
            PostsBar_,
            WeaponsBar_,
            EnterCombatLog_,
            ChangeWeaponSet_);
    }

    public override string ToString() => $"HUDTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowActionBar: {{ \n{ShowActionBar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideActionBar: {{ \n{HideActionBar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EndTurn: {{ \n{EndTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pointer: {{ \n{Pointer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Pause: {{ \n{Pause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SwitchCameraMode: {{ \n{SwitchCameraMode.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FocusOnCurrentUnit: {{ \n{FocusOnCurrentUnit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FocusOnCurrentShip: {{ \n{FocusOnCurrentShip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HighlightObjects: {{ \n{HighlightObjects.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PostsBar: {{ \n{PostsBar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponsBar: {{ \n{WeaponsBar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EnterCombatLog: {{ \n{EnterCombatLog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeWeaponSet: {{ \n{ChangeWeaponSet.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIxBoxTexts (1 fields) */
public record class UIxBoxTexts (
    LocalizedString NoFreeSpace) : IUnityStructure
{
    public static UIxBoxTexts Read(EndianBinaryReader reader)
    {
        LocalizedString NoFreeSpace_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFreeSpace */
        
        return new(NoFreeSpace_);
    }

    public override string ToString() => $"UIxBoxTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoFreeSpace: {{ \n{NoFreeSpace.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UICombatLogTexts (28 fields) */
public record class UICombatLogTexts (
    LocalizedString MomentumChanged,
    LocalizedString MomentumChangeReason,
    LocalizedString MomentumTypeCustom,
    LocalizedString MomentumTypeFallDeadOrUnconscious,
    LocalizedString MomentumTypeKillEnemy,
    LocalizedString MomentumTypeStartTurn,
    LocalizedString MomentumTypeAbilityCost,
    LocalizedString MomentumTypeWound,
    LocalizedString MomentumTypeTrauma,
    LocalizedString MomentumFlatBonus,
    LocalizedString MomentumResolveLostBase,
    LocalizedString MomentumSourceResolve,
    LocalizedString MomentumTargetResolveGained,
    LocalizedString MomentumFactor,
    LocalizedString ScatterShotHits,
    LocalizedString ScatterShotCoverHits,
    LocalizedString ScatterShotMiss,
    LocalizedString ShotDirectionDeviation,
    LocalizedString CentralShotDirection,
    LocalizedString SlightDeviationShotDirection,
    LocalizedString StrongDeviationShotDirection,
    LocalizedString DeviationDescription,
    LocalizedString DeviationHeader,
    LocalizedString ChangeSize,
    LocalizedString ShowModePin,
    LocalizedString ShowModeUnpin,
    LocalizedString ShowUnit,
    LocalizedString LanceResultTitle) : IUnityStructure
{
    public static UICombatLogTexts Read(EndianBinaryReader reader)
    {
        LocalizedString MomentumChanged_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumChanged */
        LocalizedString MomentumChangeReason_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumChangeReason */
        LocalizedString MomentumTypeCustom_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeCustom */
        LocalizedString MomentumTypeFallDeadOrUnconscious_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeFallDeadOrUnconscious */
        LocalizedString MomentumTypeKillEnemy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeKillEnemy */
        LocalizedString MomentumTypeStartTurn_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeStartTurn */
        LocalizedString MomentumTypeAbilityCost_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeAbilityCost */
        LocalizedString MomentumTypeWound_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeWound */
        LocalizedString MomentumTypeTrauma_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTypeTrauma */
        LocalizedString MomentumFlatBonus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumFlatBonus */
        LocalizedString MomentumResolveLostBase_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumResolveLostBase */
        LocalizedString MomentumSourceResolve_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumSourceResolve */
        LocalizedString MomentumTargetResolveGained_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumTargetResolveGained */
        LocalizedString MomentumFactor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MomentumFactor */
        LocalizedString ScatterShotHits_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterShotHits */
        LocalizedString ScatterShotCoverHits_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterShotCoverHits */
        LocalizedString ScatterShotMiss_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterShotMiss */
        LocalizedString ShotDirectionDeviation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShotDirectionDeviation */
        LocalizedString CentralShotDirection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CentralShotDirection */
        LocalizedString SlightDeviationShotDirection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SlightDeviationShotDirection */
        LocalizedString StrongDeviationShotDirection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StrongDeviationShotDirection */
        LocalizedString DeviationDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeviationDescription */
        LocalizedString DeviationHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeviationHeader */
        LocalizedString ChangeSize_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeSize */
        LocalizedString ShowModePin_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowModePin */
        LocalizedString ShowModeUnpin_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowModeUnpin */
        LocalizedString ShowUnit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowUnit */
        LocalizedString LanceResultTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LanceResultTitle */
        
        return new(MomentumChanged_,
            MomentumChangeReason_,
            MomentumTypeCustom_,
            MomentumTypeFallDeadOrUnconscious_,
            MomentumTypeKillEnemy_,
            MomentumTypeStartTurn_,
            MomentumTypeAbilityCost_,
            MomentumTypeWound_,
            MomentumTypeTrauma_,
            MomentumFlatBonus_,
            MomentumResolveLostBase_,
            MomentumSourceResolve_,
            MomentumTargetResolveGained_,
            MomentumFactor_,
            ScatterShotHits_,
            ScatterShotCoverHits_,
            ScatterShotMiss_,
            ShotDirectionDeviation_,
            CentralShotDirection_,
            SlightDeviationShotDirection_,
            StrongDeviationShotDirection_,
            DeviationDescription_,
            DeviationHeader_,
            ChangeSize_,
            ShowModePin_,
            ShowModeUnpin_,
            ShowUnit_,
            LanceResultTitle_);
    }

    public override string ToString() => $"UICombatLogTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumChanged: {{ \n{MomentumChanged.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumChangeReason: {{ \n{MomentumChangeReason.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeCustom: {{ \n{MomentumTypeCustom.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeFallDeadOrUnconscious: {{ \n{MomentumTypeFallDeadOrUnconscious.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeKillEnemy: {{ \n{MomentumTypeKillEnemy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeStartTurn: {{ \n{MomentumTypeStartTurn.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeAbilityCost: {{ \n{MomentumTypeAbilityCost.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeWound: {{ \n{MomentumTypeWound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTypeTrauma: {{ \n{MomentumTypeTrauma.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumFlatBonus: {{ \n{MomentumFlatBonus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumResolveLostBase: {{ \n{MomentumResolveLostBase.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumSourceResolve: {{ \n{MomentumSourceResolve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumTargetResolveGained: {{ \n{MomentumTargetResolveGained.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MomentumFactor: {{ \n{MomentumFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterShotHits: {{ \n{ScatterShotHits.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterShotCoverHits: {{ \n{ScatterShotCoverHits.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterShotMiss: {{ \n{ScatterShotMiss.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShotDirectionDeviation: {{ \n{ShotDirectionDeviation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CentralShotDirection: {{ \n{CentralShotDirection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SlightDeviationShotDirection: {{ \n{SlightDeviationShotDirection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StrongDeviationShotDirection: {{ \n{StrongDeviationShotDirection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeviationDescription: {{ \n{DeviationDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeviationHeader: {{ \n{DeviationHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeSize: {{ \n{ChangeSize.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowModePin: {{ \n{ShowModePin.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowModeUnpin: {{ \n{ShowModeUnpin.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowUnit: {{ \n{ShowUnit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LanceResultTitle: {{ \n{LanceResultTitle.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIInspect (41 fields) */
public record class UIInspect (
    LocalizedString Wounds,
    LocalizedString DamageDeflection,
    LocalizedString Armor,
    LocalizedString Dodge,
    LocalizedString MovePoints,
    LocalizedString CharacterStatsTitle,
    LocalizedString StatusEffectsTitle,
    LocalizedString NoStatusEffects,
    LocalizedString EffectsAlly,
    LocalizedString EffectsEnemy,
    LocalizedString EffectsDOT,
    LocalizedString WeaponsTitle,
    LocalizedString AbilitiesTitle,
    LocalizedString ActiveAbilitiesTitle,
    LocalizedString PassiveAbilitiesTitle,
    LocalizedString NoAbilities,
    LocalizedString FeaturesTitle,
    LocalizedString NoFeatures,
    LocalizedString UltimateAbilitiesTitle,
    LocalizedString ToggleSquad,
    LocalizedString UnconditionalModifiers,
    LocalizedString ShipHP,
    LocalizedString Number,
    LocalizedString Evasion,
    LocalizedString HitChance,
    LocalizedString HitChanceDescription,
    LocalizedString CriticalChance,
    LocalizedString CriticalChanceDescription,
    LocalizedString Armours,
    LocalizedString ArmourFore,
    LocalizedString ArmourAft,
    LocalizedString ArmourPort,
    LocalizedString ArmourStarboard,
    LocalizedString Shields,
    LocalizedString ShieldFore,
    LocalizedString ShieldAft,
    LocalizedString ShieldPort,
    LocalizedString ShieldStarboard,
    LocalizedString WeaponSlotPort,
    LocalizedString WeaponSlotStarboard,
    LocalizedString WeaponSlotKeel) : IUnityStructure
{
    public static UIInspect Read(EndianBinaryReader reader)
    {
        LocalizedString Wounds_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Wounds */
        LocalizedString DamageDeflection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDeflection */
        LocalizedString Armor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armor */
        LocalizedString Dodge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString MovePoints_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MovePoints */
        LocalizedString CharacterStatsTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CharacterStatsTitle */
        LocalizedString StatusEffectsTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StatusEffectsTitle */
        LocalizedString NoStatusEffects_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoStatusEffects */
        LocalizedString EffectsAlly_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectsAlly */
        LocalizedString EffectsEnemy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectsEnemy */
        LocalizedString EffectsDOT_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectsDOT */
        LocalizedString WeaponsTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponsTitle */
        LocalizedString AbilitiesTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AbilitiesTitle */
        LocalizedString ActiveAbilitiesTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ActiveAbilitiesTitle */
        LocalizedString PassiveAbilitiesTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PassiveAbilitiesTitle */
        LocalizedString NoAbilities_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoAbilities */
        LocalizedString FeaturesTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturesTitle */
        LocalizedString NoFeatures_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NoFeatures */
        LocalizedString UltimateAbilitiesTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UltimateAbilitiesTitle */
        LocalizedString ToggleSquad_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ToggleSquad */
        LocalizedString UnconditionalModifiers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UnconditionalModifiers */
        LocalizedString ShipHP_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShipHP */
        LocalizedString Number_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Number */
        LocalizedString Evasion_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Evasion */
        LocalizedString HitChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChance */
        LocalizedString HitChanceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChanceDescription */
        LocalizedString CriticalChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalChance */
        LocalizedString CriticalChanceDescription_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalChanceDescription */
        LocalizedString Armours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armours */
        LocalizedString ArmourFore_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourFore */
        LocalizedString ArmourAft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourAft */
        LocalizedString ArmourPort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourPort */
        LocalizedString ArmourStarboard_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ArmourStarboard */
        LocalizedString Shields_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Shields */
        LocalizedString ShieldFore_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldFore */
        LocalizedString ShieldAft_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldAft */
        LocalizedString ShieldPort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldPort */
        LocalizedString ShieldStarboard_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShieldStarboard */
        LocalizedString WeaponSlotPort_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSlotPort */
        LocalizedString WeaponSlotStarboard_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSlotStarboard */
        LocalizedString WeaponSlotKeel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSlotKeel */
        
        return new(Wounds_,
            DamageDeflection_,
            Armor_,
            Dodge_,
            MovePoints_,
            CharacterStatsTitle_,
            StatusEffectsTitle_,
            NoStatusEffects_,
            EffectsAlly_,
            EffectsEnemy_,
            EffectsDOT_,
            WeaponsTitle_,
            AbilitiesTitle_,
            ActiveAbilitiesTitle_,
            PassiveAbilitiesTitle_,
            NoAbilities_,
            FeaturesTitle_,
            NoFeatures_,
            UltimateAbilitiesTitle_,
            ToggleSquad_,
            UnconditionalModifiers_,
            ShipHP_,
            Number_,
            Evasion_,
            HitChance_,
            HitChanceDescription_,
            CriticalChance_,
            CriticalChanceDescription_,
            Armours_,
            ArmourFore_,
            ArmourAft_,
            ArmourPort_,
            ArmourStarboard_,
            Shields_,
            ShieldFore_,
            ShieldAft_,
            ShieldPort_,
            ShieldStarboard_,
            WeaponSlotPort_,
            WeaponSlotStarboard_,
            WeaponSlotKeel_);
    }

    public override string ToString() => $"UIInspect\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Wounds: {{ \n{Wounds.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageDeflection: {{ \n{DamageDeflection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Armor: {{ \n{Armor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dodge: {{ \n{Dodge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MovePoints: {{ \n{MovePoints.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CharacterStatsTitle: {{ \n{CharacterStatsTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StatusEffectsTitle: {{ \n{StatusEffectsTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoStatusEffects: {{ \n{NoStatusEffects.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectsAlly: {{ \n{EffectsAlly.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectsEnemy: {{ \n{EffectsEnemy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectsDOT: {{ \n{EffectsDOT.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponsTitle: {{ \n{WeaponsTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AbilitiesTitle: {{ \n{AbilitiesTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ActiveAbilitiesTitle: {{ \n{ActiveAbilitiesTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PassiveAbilitiesTitle: {{ \n{PassiveAbilitiesTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoAbilities: {{ \n{NoAbilities.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FeaturesTitle: {{ \n{FeaturesTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NoFeatures: {{ \n{NoFeatures.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UltimateAbilitiesTitle: {{ \n{UltimateAbilitiesTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ToggleSquad: {{ \n{ToggleSquad.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UnconditionalModifiers: {{ \n{UnconditionalModifiers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShipHP: {{ \n{ShipHP.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Number: {{ \n{Number.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Evasion: {{ \n{Evasion.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChance: {{ \n{HitChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChanceDescription: {{ \n{HitChanceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CriticalChance: {{ \n{CriticalChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CriticalChanceDescription: {{ \n{CriticalChanceDescription.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Armours: {{ \n{Armours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmourFore: {{ \n{ArmourFore.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmourAft: {{ \n{ArmourAft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmourPort: {{ \n{ArmourPort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ArmourStarboard: {{ \n{ArmourStarboard.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Shields: {{ \n{Shields.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShieldFore: {{ \n{ShieldFore.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShieldAft: {{ \n{ShieldAft.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShieldPort: {{ \n{ShieldPort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShieldStarboard: {{ \n{ShieldStarboard.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSlotPort: {{ \n{WeaponSlotPort.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSlotStarboard: {{ \n{WeaponSlotStarboard.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSlotKeel: {{ \n{WeaponSlotKeel.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIInteractableSettingsReasons (7 fields) */
public record class UIInteractableSettingsReasons (
    LocalizedString CannotChangeLanguageBecause,
    LocalizedString CannotChangeOnlyOneSaveBecause,
    LocalizedString CannotSwitchOnOnlyOneSave,
    LocalizedString CannotChangeFrameRateLimitEnabledBecause,
    LocalizedString CannotChangeFrameRateLimitBecause,
    LocalizedString CannotChangeFsrSharpnessBecause,
    LocalizedString CannotChangeAntialiasingQualityBecause) : IUnityStructure
{
    public static UIInteractableSettingsReasons Read(EndianBinaryReader reader)
    {
        LocalizedString CannotChangeLanguageBecause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeLanguageBecause */
        LocalizedString CannotChangeOnlyOneSaveBecause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeOnlyOneSaveBecause */
        LocalizedString CannotSwitchOnOnlyOneSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotSwitchOnOnlyOneSave */
        LocalizedString CannotChangeFrameRateLimitEnabledBecause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeFrameRateLimitEnabledBecause */
        LocalizedString CannotChangeFrameRateLimitBecause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeFrameRateLimitBecause */
        LocalizedString CannotChangeFsrSharpnessBecause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeFsrSharpnessBecause */
        LocalizedString CannotChangeAntialiasingQualityBecause_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeAntialiasingQualityBecause */
        
        return new(CannotChangeLanguageBecause_,
            CannotChangeOnlyOneSaveBecause_,
            CannotSwitchOnOnlyOneSave_,
            CannotChangeFrameRateLimitEnabledBecause_,
            CannotChangeFrameRateLimitBecause_,
            CannotChangeFsrSharpnessBecause_,
            CannotChangeAntialiasingQualityBecause_);
    }

    public override string ToString() => $"UIInteractableSettingsReasons\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeLanguageBecause: {{ \n{CannotChangeLanguageBecause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeOnlyOneSaveBecause: {{ \n{CannotChangeOnlyOneSaveBecause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotSwitchOnOnlyOneSave: {{ \n{CannotSwitchOnOnlyOneSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeFrameRateLimitEnabledBecause: {{ \n{CannotChangeFrameRateLimitEnabledBecause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeFrameRateLimitBecause: {{ \n{CannotChangeFrameRateLimitBecause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeFsrSharpnessBecause: {{ \n{CannotChangeFsrSharpnessBecause.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeAntialiasingQualityBecause: {{ \n{CannotChangeAntialiasingQualityBecause.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIOvertips (3 fields) */
public record class UIOvertips (
    LocalizedString RequiredResourceCount,
    LocalizedString HasResourceCount,
    LocalizedString NeedUnknownKey) : IUnityStructure
{
    public static UIOvertips Read(EndianBinaryReader reader)
    {
        LocalizedString RequiredResourceCount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RequiredResourceCount */
        LocalizedString HasResourceCount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HasResourceCount */
        LocalizedString NeedUnknownKey_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedUnknownKey */
        
        return new(RequiredResourceCount_,
            HasResourceCount_,
            NeedUnknownKey_);
    }

    public override string ToString() => $"UIOvertips\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequiredResourceCount: {{ \n{RequiredResourceCount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HasResourceCount: {{ \n{HasResourceCount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedUnknownKey: {{ \n{NeedUnknownKey.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIFormationTexts (8 fields) */
public record class UIFormationTexts (
    LocalizedString RestoreToDefault,
    LocalizedString MoveCharacter,
    LocalizedString ChangeCharacter,
    LocalizedString MoveCharacterFree,
    LocalizedString FormationLabel,
    LocalizedString FormationPcHint,
    LocalizedString UneditableFormation,
    LocalizedString OptimizedFormation) : IUnityStructure
{
    public static UIFormationTexts Read(EndianBinaryReader reader)
    {
        LocalizedString RestoreToDefault_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestoreToDefault */
        LocalizedString MoveCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoveCharacter */
        LocalizedString ChangeCharacter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChangeCharacter */
        LocalizedString MoveCharacterFree_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MoveCharacterFree */
        LocalizedString FormationLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FormationLabel */
        LocalizedString FormationPcHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FormationPcHint */
        LocalizedString UneditableFormation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* UneditableFormation */
        LocalizedString OptimizedFormation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OptimizedFormation */
        
        return new(RestoreToDefault_,
            MoveCharacter_,
            ChangeCharacter_,
            MoveCharacterFree_,
            FormationLabel_,
            FormationPcHint_,
            UneditableFormation_,
            OptimizedFormation_);
    }

    public override string ToString() => $"UIFormationTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RestoreToDefault: {{ \n{RestoreToDefault.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MoveCharacter: {{ \n{MoveCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChangeCharacter: {{ \n{ChangeCharacter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MoveCharacterFree: {{ \n{MoveCharacterFree.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FormationLabel: {{ \n{FormationLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FormationPcHint: {{ \n{FormationPcHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}UneditableFormation: {{ \n{UneditableFormation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OptimizedFormation: {{ \n{OptimizedFormation.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UILocalMapTexts (5 fields) */
public record class UILocalMapTexts (
    LocalizedString ShowLegend,
    LocalizedString HideLegend,
    LocalizedString CenterOnRogueTrader,
    LocalizedString ZoomMapPlus,
    LocalizedString ZoomMapMinus) : IUnityStructure
{
    public static UILocalMapTexts Read(EndianBinaryReader reader)
    {
        LocalizedString ShowLegend_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ShowLegend */
        LocalizedString HideLegend_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HideLegend */
        LocalizedString CenterOnRogueTrader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CenterOnRogueTrader */
        LocalizedString ZoomMapPlus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ZoomMapPlus */
        LocalizedString ZoomMapMinus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ZoomMapMinus */
        
        return new(ShowLegend_,
            HideLegend_,
            CenterOnRogueTrader_,
            ZoomMapPlus_,
            ZoomMapMinus_);
    }

    public override string ToString() => $"UILocalMapTexts\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShowLegend: {{ \n{ShowLegend.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HideLegend: {{ \n{HideLegend.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CenterOnRogueTrader: {{ \n{CenterOnRogueTrader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ZoomMapPlus: {{ \n{ZoomMapPlus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ZoomMapMinus: {{ \n{ZoomMapMinus.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UICredits (10 fields) */
public record class UICredits (
    LocalizedString PlayRoles,
    LocalizedString PreviousPage,
    LocalizedString NextPage,
    LocalizedString PreviousGroup,
    LocalizedString NextGroup,
    LocalizedString TheEndText,
    LocalizedString SpeedUp,
    LocalizedString EnterSearchNameHere,
    LocalizedString PersonNotFound,
    LocalizedString AreYouSureToSkipTitles) : IUnityStructure
{
    public static UICredits Read(EndianBinaryReader reader)
    {
        LocalizedString PlayRoles_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayRoles */
        LocalizedString PreviousPage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PreviousPage */
        LocalizedString NextPage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextPage */
        LocalizedString PreviousGroup_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PreviousGroup */
        LocalizedString NextGroup_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NextGroup */
        LocalizedString TheEndText_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TheEndText */
        LocalizedString SpeedUp_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpeedUp */
        LocalizedString EnterSearchNameHere_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EnterSearchNameHere */
        LocalizedString PersonNotFound_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PersonNotFound */
        LocalizedString AreYouSureToSkipTitles_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureToSkipTitles */
        
        return new(PlayRoles_,
            PreviousPage_,
            NextPage_,
            PreviousGroup_,
            NextGroup_,
            TheEndText_,
            SpeedUp_,
            EnterSearchNameHere_,
            PersonNotFound_,
            AreYouSureToSkipTitles_);
    }

    public override string ToString() => $"UICredits\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlayRoles: {{ \n{PlayRoles.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PreviousPage: {{ \n{PreviousPage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextPage: {{ \n{NextPage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PreviousGroup: {{ \n{PreviousGroup.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NextGroup: {{ \n{NextGroup.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TheEndText: {{ \n{TheEndText.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpeedUp: {{ \n{SpeedUp.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EnterSearchNameHere: {{ \n{EnterSearchNameHere.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PersonNotFound: {{ \n{PersonNotFound.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureToSkipTitles: {{ \n{AreYouSureToSkipTitles.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIEscapeMenu (13 fields) */
public record class UIEscapeMenu (
    LocalizedString EscMenuSaveGame,
    LocalizedString EscMenuLoadGame,
    LocalizedString EscMenuMultiplayer,
    LocalizedString EscMenuRoles,
    LocalizedString EscMenuFormation,
    LocalizedString EscMenuOptions,
    LocalizedString EscMenuBugReport,
    LocalizedString EscMenuMainMenu,
    LocalizedString EscMenuExit,
    LocalizedString EscMenuQuickSave,
    LocalizedString EscMenuQuickLoad,
    LocalizedString CoopIsNotPossibleInIronMan,
    LocalizedString ModsAndDlc) : IUnityStructure
{
    public static UIEscapeMenu Read(EndianBinaryReader reader)
    {
        LocalizedString EscMenuSaveGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuSaveGame */
        LocalizedString EscMenuLoadGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuLoadGame */
        LocalizedString EscMenuMultiplayer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuMultiplayer */
        LocalizedString EscMenuRoles_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuRoles */
        LocalizedString EscMenuFormation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuFormation */
        LocalizedString EscMenuOptions_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuOptions */
        LocalizedString EscMenuBugReport_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuBugReport */
        LocalizedString EscMenuMainMenu_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuMainMenu */
        LocalizedString EscMenuExit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuExit */
        LocalizedString EscMenuQuickSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuQuickSave */
        LocalizedString EscMenuQuickLoad_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EscMenuQuickLoad */
        LocalizedString CoopIsNotPossibleInIronMan_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoopIsNotPossibleInIronMan */
        LocalizedString ModsAndDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ModsAndDlc */
        
        return new(EscMenuSaveGame_,
            EscMenuLoadGame_,
            EscMenuMultiplayer_,
            EscMenuRoles_,
            EscMenuFormation_,
            EscMenuOptions_,
            EscMenuBugReport_,
            EscMenuMainMenu_,
            EscMenuExit_,
            EscMenuQuickSave_,
            EscMenuQuickLoad_,
            CoopIsNotPossibleInIronMan_,
            ModsAndDlc_);
    }

    public override string ToString() => $"UIEscapeMenu\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuSaveGame: {{ \n{EscMenuSaveGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuLoadGame: {{ \n{EscMenuLoadGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuMultiplayer: {{ \n{EscMenuMultiplayer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuRoles: {{ \n{EscMenuRoles.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuFormation: {{ \n{EscMenuFormation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuOptions: {{ \n{EscMenuOptions.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuBugReport: {{ \n{EscMenuBugReport.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuMainMenu: {{ \n{EscMenuMainMenu.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuExit: {{ \n{EscMenuExit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuQuickSave: {{ \n{EscMenuQuickSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EscMenuQuickLoad: {{ \n{EscMenuQuickLoad.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoopIsNotPossibleInIronMan: {{ \n{CoopIsNotPossibleInIronMan.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ModsAndDlc: {{ \n{ModsAndDlc.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIEpilogues (1 fields) */
public record class UIEpilogues (
    LocalizedString EpiloguesPortraitTitle) : IUnityStructure
{
    public static UIEpilogues Read(EndianBinaryReader reader)
    {
        LocalizedString EpiloguesPortraitTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EpiloguesPortraitTitle */
        
        return new(EpiloguesPortraitTitle_);
    }

    public override string ToString() => $"UIEpilogues\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EpiloguesPortraitTitle: {{ \n{EpiloguesPortraitTitle.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIDlcManager (45 fields) */
public record class UIDlcManager (
    LocalizedString DlcManagerLabel,
    LocalizedString ModsLabel,
    LocalizedString AvailableForPurchase,
    LocalizedString Purchase,
    LocalizedString Purchased,
    LocalizedString ComingSoon,
    LocalizedString DlcDownloading,
    LocalizedString DlcBoughtAndNotInstalled,
    LocalizedString Install,
    LocalizedString YouDontHaveThisDlc,
    LocalizedString YouDontHaveThisStory,
    LocalizedString StoryCompanyIs,
    LocalizedString StoryDlc,
    LocalizedString AdditionalContentDlc,
    LocalizedString CosmeticDlc,
    LocalizedString PromotionalDlc,
    LocalizedString DlcStatus,
    LocalizedString DlcSwitchOnOffHint,
    LocalizedString CannotChangeModSwitchState,
    LocalizedString RestartChangeModConfirmation,
    LocalizedString RestartGame,
    LocalizedString NeedToUpdateThisMod,
    LocalizedString ModChangedNeedToReloadGame,
    LocalizedString InstalledMods,
    LocalizedString YouDontHaveAnyMods,
    LocalizedString DiscoverMoreMods,
    LocalizedString NexusMods,
    LocalizedString SteamWorkshop,
    LocalizedString ResetAllModsToPreviousState,
    LocalizedString ModSettings,
    LocalizedString NeedRestartAfterPurchase,
    LocalizedString NeedWaitAllDlcsDownload,
    LocalizedString DeleteDlc,
    LocalizedString AreYouSureDeleteDlc,
    LocalizedString PlayVideo,
    LocalizedString PauseVideo,
    LocalizedString StopVideo,
    LocalizedString CannotChangeDlcSwitchState,
    LocalizedString CannotChangeDlcSwitchStateRightNowBecauseSaveNotAllowed,
    LocalizedString YouSwitchDlcOnAndCantDoItBack,
    LocalizedString ResetAllDlcsToPreviousState,
    LocalizedString InstalledDlcs,
    LocalizedString YouDontHaveAnyInstalledDlcs,
    LocalizedString ThisSettingWillAffectCurrentSave,
    LocalizedString NewDlcAfterLoadingMessageBoxHint) : IUnityStructure
{
    public static UIDlcManager Read(EndianBinaryReader reader)
    {
        LocalizedString DlcManagerLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcManagerLabel */
        LocalizedString ModsLabel_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ModsLabel */
        LocalizedString AvailableForPurchase_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AvailableForPurchase */
        LocalizedString Purchase_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Purchase */
        LocalizedString Purchased_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Purchased */
        LocalizedString ComingSoon_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ComingSoon */
        LocalizedString DlcDownloading_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcDownloading */
        LocalizedString DlcBoughtAndNotInstalled_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcBoughtAndNotInstalled */
        LocalizedString Install_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Install */
        LocalizedString YouDontHaveThisDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouDontHaveThisDlc */
        LocalizedString YouDontHaveThisStory_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouDontHaveThisStory */
        LocalizedString StoryCompanyIs_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StoryCompanyIs */
        LocalizedString StoryDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StoryDlc */
        LocalizedString AdditionalContentDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AdditionalContentDlc */
        LocalizedString CosmeticDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CosmeticDlc */
        LocalizedString PromotionalDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PromotionalDlc */
        LocalizedString DlcStatus_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcStatus */
        LocalizedString DlcSwitchOnOffHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DlcSwitchOnOffHint */
        LocalizedString CannotChangeModSwitchState_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeModSwitchState */
        LocalizedString RestartChangeModConfirmation_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestartChangeModConfirmation */
        LocalizedString RestartGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* RestartGame */
        LocalizedString NeedToUpdateThisMod_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedToUpdateThisMod */
        LocalizedString ModChangedNeedToReloadGame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ModChangedNeedToReloadGame */
        LocalizedString InstalledMods_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InstalledMods */
        LocalizedString YouDontHaveAnyMods_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouDontHaveAnyMods */
        LocalizedString DiscoverMoreMods_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DiscoverMoreMods */
        LocalizedString NexusMods_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NexusMods */
        LocalizedString SteamWorkshop_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SteamWorkshop */
        LocalizedString ResetAllModsToPreviousState_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetAllModsToPreviousState */
        LocalizedString ModSettings_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ModSettings */
        LocalizedString NeedRestartAfterPurchase_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedRestartAfterPurchase */
        LocalizedString NeedWaitAllDlcsDownload_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NeedWaitAllDlcsDownload */
        LocalizedString DeleteDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DeleteDlc */
        LocalizedString AreYouSureDeleteDlc_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AreYouSureDeleteDlc */
        LocalizedString PlayVideo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PlayVideo */
        LocalizedString PauseVideo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PauseVideo */
        LocalizedString StopVideo_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* StopVideo */
        LocalizedString CannotChangeDlcSwitchState_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeDlcSwitchState */
        LocalizedString CannotChangeDlcSwitchStateRightNowBecauseSaveNotAllowed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CannotChangeDlcSwitchStateRightNowBecauseSaveNotAllowed */
        LocalizedString YouSwitchDlcOnAndCantDoItBack_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouSwitchDlcOnAndCantDoItBack */
        LocalizedString ResetAllDlcsToPreviousState_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResetAllDlcsToPreviousState */
        LocalizedString InstalledDlcs_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InstalledDlcs */
        LocalizedString YouDontHaveAnyInstalledDlcs_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* YouDontHaveAnyInstalledDlcs */
        LocalizedString ThisSettingWillAffectCurrentSave_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThisSettingWillAffectCurrentSave */
        LocalizedString NewDlcAfterLoadingMessageBoxHint_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NewDlcAfterLoadingMessageBoxHint */
        
        return new(DlcManagerLabel_,
            ModsLabel_,
            AvailableForPurchase_,
            Purchase_,
            Purchased_,
            ComingSoon_,
            DlcDownloading_,
            DlcBoughtAndNotInstalled_,
            Install_,
            YouDontHaveThisDlc_,
            YouDontHaveThisStory_,
            StoryCompanyIs_,
            StoryDlc_,
            AdditionalContentDlc_,
            CosmeticDlc_,
            PromotionalDlc_,
            DlcStatus_,
            DlcSwitchOnOffHint_,
            CannotChangeModSwitchState_,
            RestartChangeModConfirmation_,
            RestartGame_,
            NeedToUpdateThisMod_,
            ModChangedNeedToReloadGame_,
            InstalledMods_,
            YouDontHaveAnyMods_,
            DiscoverMoreMods_,
            NexusMods_,
            SteamWorkshop_,
            ResetAllModsToPreviousState_,
            ModSettings_,
            NeedRestartAfterPurchase_,
            NeedWaitAllDlcsDownload_,
            DeleteDlc_,
            AreYouSureDeleteDlc_,
            PlayVideo_,
            PauseVideo_,
            StopVideo_,
            CannotChangeDlcSwitchState_,
            CannotChangeDlcSwitchStateRightNowBecauseSaveNotAllowed_,
            YouSwitchDlcOnAndCantDoItBack_,
            ResetAllDlcsToPreviousState_,
            InstalledDlcs_,
            YouDontHaveAnyInstalledDlcs_,
            ThisSettingWillAffectCurrentSave_,
            NewDlcAfterLoadingMessageBoxHint_);
    }

    public override string ToString() => $"UIDlcManager\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcManagerLabel: {{ \n{DlcManagerLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ModsLabel: {{ \n{ModsLabel.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AvailableForPurchase: {{ \n{AvailableForPurchase.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Purchase: {{ \n{Purchase.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Purchased: {{ \n{Purchased.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ComingSoon: {{ \n{ComingSoon.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcDownloading: {{ \n{DlcDownloading.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcBoughtAndNotInstalled: {{ \n{DlcBoughtAndNotInstalled.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Install: {{ \n{Install.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouDontHaveThisDlc: {{ \n{YouDontHaveThisDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouDontHaveThisStory: {{ \n{YouDontHaveThisStory.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StoryCompanyIs: {{ \n{StoryCompanyIs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StoryDlc: {{ \n{StoryDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AdditionalContentDlc: {{ \n{AdditionalContentDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CosmeticDlc: {{ \n{CosmeticDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PromotionalDlc: {{ \n{PromotionalDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcStatus: {{ \n{DlcStatus.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DlcSwitchOnOffHint: {{ \n{DlcSwitchOnOffHint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeModSwitchState: {{ \n{CannotChangeModSwitchState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RestartChangeModConfirmation: {{ \n{RestartChangeModConfirmation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RestartGame: {{ \n{RestartGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedToUpdateThisMod: {{ \n{NeedToUpdateThisMod.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ModChangedNeedToReloadGame: {{ \n{ModChangedNeedToReloadGame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InstalledMods: {{ \n{InstalledMods.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouDontHaveAnyMods: {{ \n{YouDontHaveAnyMods.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DiscoverMoreMods: {{ \n{DiscoverMoreMods.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NexusMods: {{ \n{NexusMods.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SteamWorkshop: {{ \n{SteamWorkshop.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResetAllModsToPreviousState: {{ \n{ResetAllModsToPreviousState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ModSettings: {{ \n{ModSettings.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedRestartAfterPurchase: {{ \n{NeedRestartAfterPurchase.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NeedWaitAllDlcsDownload: {{ \n{NeedWaitAllDlcsDownload.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DeleteDlc: {{ \n{DeleteDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AreYouSureDeleteDlc: {{ \n{AreYouSureDeleteDlc.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PlayVideo: {{ \n{PlayVideo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PauseVideo: {{ \n{PauseVideo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}StopVideo: {{ \n{StopVideo.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeDlcSwitchState: {{ \n{CannotChangeDlcSwitchState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CannotChangeDlcSwitchStateRightNowBecauseSaveNotAllowed: {{ \n{CannotChangeDlcSwitchStateRightNowBecauseSaveNotAllowed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouSwitchDlcOnAndCantDoItBack: {{ \n{YouSwitchDlcOnAndCantDoItBack.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResetAllDlcsToPreviousState: {{ \n{ResetAllDlcsToPreviousState.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InstalledDlcs: {{ \n{InstalledDlcs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}YouDontHaveAnyInstalledDlcs: {{ \n{YouDontHaveAnyInstalledDlcs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ThisSettingWillAffectCurrentSave: {{ \n{ThisSettingWillAffectCurrentSave.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewDlcAfterLoadingMessageBoxHint: {{ \n{NewDlcAfterLoadingMessageBoxHint.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIPopupWindows (4 fields) */
public record class UIPopupWindows (
    LocalizedString SoulMarkRewardTitle,
    LocalizedString SeeOtherRanks,
    LocalizedString LinkAccount,
    LocalizedString GetRewards) : IUnityStructure
{
    public static UIPopupWindows Read(EndianBinaryReader reader)
    {
        LocalizedString SoulMarkRewardTitle_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SoulMarkRewardTitle */
        LocalizedString SeeOtherRanks_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SeeOtherRanks */
        LocalizedString LinkAccount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LinkAccount */
        LocalizedString GetRewards_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* GetRewards */
        
        return new(SoulMarkRewardTitle_,
            SeeOtherRanks_,
            LinkAccount_,
            GetRewards_);
    }

    public override string ToString() => $"UIPopupWindows\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SoulMarkRewardTitle: {{ \n{SoulMarkRewardTitle.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SeeOtherRanks: {{ \n{SeeOtherRanks.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LinkAccount: {{ \n{LinkAccount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GetRewards: {{ \n{GetRewards.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $UIWeaponCategories (47 fields) */
public record class UIWeaponCategories (
    LocalizedString WeaponCategoryMelee,
    LocalizedString WeaponCategoryThrown,
    LocalizedString WeaponCategoryPistol,
    LocalizedString WeaponCategoryBasic,
    LocalizedString WeaponCategoryHeavy,
    LocalizedString WeaponFamilyLaser,
    LocalizedString WeaponFamilySolid,
    LocalizedString WeaponFamilyBolt,
    LocalizedString WeaponFamilyMelta,
    LocalizedString WeaponFamilyPlasma,
    LocalizedString WeaponFamilyFlame,
    LocalizedString WeaponFamilyExotic,
    LocalizedString WeaponFamilyChain,
    LocalizedString WeaponFamilyPower,
    LocalizedString WeaponFamilyPrimitive,
    LocalizedString WeaponFamilyForce,
    LocalizedString WeaponFamilyBlade,
    LocalizedString WeaponFamilyChainSaw,
    LocalizedString WeaponClassificationSword,
    LocalizedString WeaponClassificationAxe,
    LocalizedString WeaponClassificationStaff,
    LocalizedString WeaponClassificationChainsaw,
    LocalizedString WeaponClassificationKnife,
    LocalizedString WeaponClassificationMaul,
    LocalizedString WeaponClassificationHammer,
    LocalizedString WeaponHoldingTypeOneHanded,
    LocalizedString WeaponHoldingTypeTwoHanded,
    LocalizedString WeaponRangeRanged,
    LocalizedString WeaponRangeMelee,
    LocalizedString WeaponHeavinessHeavy,
    LocalizedString WeaponHeavinessNotHeavy,
    LocalizedString WeaponSubCategoryRanged,
    LocalizedString WeaponSubCategoryMelee,
    LocalizedString WeaponSubCategoryFinessable,
    LocalizedString WeaponSubCategoryThrown,
    LocalizedString WeaponSubCategoryNatural,
    LocalizedString WeaponSubCategoryKnives,
    LocalizedString WeaponSubCategoryMonk,
    LocalizedString WeaponSubCategoryTwoHanded,
    LocalizedString WeaponSubCategoryLight,
    LocalizedString WeaponSubCategorySimple,
    LocalizedString WeaponSubCategoryMartial,
    LocalizedString WeaponSubCategoryExotic,
    LocalizedString WeaponSubCategoryOneHandedPiercing,
    LocalizedString WeaponSubCategoryDisabled,
    LocalizedString WeaponSubCategoryOneHandedSlashing,
    LocalizedString WeaponSubCategoryMetal) : IUnityStructure
{
    public static UIWeaponCategories Read(EndianBinaryReader reader)
    {
        LocalizedString WeaponCategoryMelee_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponCategoryMelee */
        LocalizedString WeaponCategoryThrown_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponCategoryThrown */
        LocalizedString WeaponCategoryPistol_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponCategoryPistol */
        LocalizedString WeaponCategoryBasic_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponCategoryBasic */
        LocalizedString WeaponCategoryHeavy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponCategoryHeavy */
        LocalizedString WeaponFamilyLaser_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyLaser */
        LocalizedString WeaponFamilySolid_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilySolid */
        LocalizedString WeaponFamilyBolt_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyBolt */
        LocalizedString WeaponFamilyMelta_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyMelta */
        LocalizedString WeaponFamilyPlasma_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyPlasma */
        LocalizedString WeaponFamilyFlame_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyFlame */
        LocalizedString WeaponFamilyExotic_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyExotic */
        LocalizedString WeaponFamilyChain_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyChain */
        LocalizedString WeaponFamilyPower_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyPower */
        LocalizedString WeaponFamilyPrimitive_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyPrimitive */
        LocalizedString WeaponFamilyForce_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyForce */
        LocalizedString WeaponFamilyBlade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyBlade */
        LocalizedString WeaponFamilyChainSaw_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponFamilyChainSaw */
        LocalizedString WeaponClassificationSword_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationSword */
        LocalizedString WeaponClassificationAxe_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationAxe */
        LocalizedString WeaponClassificationStaff_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationStaff */
        LocalizedString WeaponClassificationChainsaw_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationChainsaw */
        LocalizedString WeaponClassificationKnife_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationKnife */
        LocalizedString WeaponClassificationMaul_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationMaul */
        LocalizedString WeaponClassificationHammer_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponClassificationHammer */
        LocalizedString WeaponHoldingTypeOneHanded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponHoldingTypeOneHanded */
        LocalizedString WeaponHoldingTypeTwoHanded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponHoldingTypeTwoHanded */
        LocalizedString WeaponRangeRanged_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponRangeRanged */
        LocalizedString WeaponRangeMelee_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponRangeMelee */
        LocalizedString WeaponHeavinessHeavy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponHeavinessHeavy */
        LocalizedString WeaponHeavinessNotHeavy_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponHeavinessNotHeavy */
        LocalizedString WeaponSubCategoryRanged_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryRanged */
        LocalizedString WeaponSubCategoryMelee_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryMelee */
        LocalizedString WeaponSubCategoryFinessable_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryFinessable */
        LocalizedString WeaponSubCategoryThrown_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryThrown */
        LocalizedString WeaponSubCategoryNatural_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryNatural */
        LocalizedString WeaponSubCategoryKnives_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryKnives */
        LocalizedString WeaponSubCategoryMonk_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryMonk */
        LocalizedString WeaponSubCategoryTwoHanded_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryTwoHanded */
        LocalizedString WeaponSubCategoryLight_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryLight */
        LocalizedString WeaponSubCategorySimple_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategorySimple */
        LocalizedString WeaponSubCategoryMartial_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryMartial */
        LocalizedString WeaponSubCategoryExotic_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryExotic */
        LocalizedString WeaponSubCategoryOneHandedPiercing_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryOneHandedPiercing */
        LocalizedString WeaponSubCategoryDisabled_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryDisabled */
        LocalizedString WeaponSubCategoryOneHandedSlashing_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryOneHandedSlashing */
        LocalizedString WeaponSubCategoryMetal_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSubCategoryMetal */
        
        return new(WeaponCategoryMelee_,
            WeaponCategoryThrown_,
            WeaponCategoryPistol_,
            WeaponCategoryBasic_,
            WeaponCategoryHeavy_,
            WeaponFamilyLaser_,
            WeaponFamilySolid_,
            WeaponFamilyBolt_,
            WeaponFamilyMelta_,
            WeaponFamilyPlasma_,
            WeaponFamilyFlame_,
            WeaponFamilyExotic_,
            WeaponFamilyChain_,
            WeaponFamilyPower_,
            WeaponFamilyPrimitive_,
            WeaponFamilyForce_,
            WeaponFamilyBlade_,
            WeaponFamilyChainSaw_,
            WeaponClassificationSword_,
            WeaponClassificationAxe_,
            WeaponClassificationStaff_,
            WeaponClassificationChainsaw_,
            WeaponClassificationKnife_,
            WeaponClassificationMaul_,
            WeaponClassificationHammer_,
            WeaponHoldingTypeOneHanded_,
            WeaponHoldingTypeTwoHanded_,
            WeaponRangeRanged_,
            WeaponRangeMelee_,
            WeaponHeavinessHeavy_,
            WeaponHeavinessNotHeavy_,
            WeaponSubCategoryRanged_,
            WeaponSubCategoryMelee_,
            WeaponSubCategoryFinessable_,
            WeaponSubCategoryThrown_,
            WeaponSubCategoryNatural_,
            WeaponSubCategoryKnives_,
            WeaponSubCategoryMonk_,
            WeaponSubCategoryTwoHanded_,
            WeaponSubCategoryLight_,
            WeaponSubCategorySimple_,
            WeaponSubCategoryMartial_,
            WeaponSubCategoryExotic_,
            WeaponSubCategoryOneHandedPiercing_,
            WeaponSubCategoryDisabled_,
            WeaponSubCategoryOneHandedSlashing_,
            WeaponSubCategoryMetal_);
    }

    public override string ToString() => $"UIWeaponCategories\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponCategoryMelee: {{ \n{WeaponCategoryMelee.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponCategoryThrown: {{ \n{WeaponCategoryThrown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponCategoryPistol: {{ \n{WeaponCategoryPistol.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponCategoryBasic: {{ \n{WeaponCategoryBasic.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponCategoryHeavy: {{ \n{WeaponCategoryHeavy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyLaser: {{ \n{WeaponFamilyLaser.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilySolid: {{ \n{WeaponFamilySolid.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyBolt: {{ \n{WeaponFamilyBolt.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyMelta: {{ \n{WeaponFamilyMelta.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyPlasma: {{ \n{WeaponFamilyPlasma.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyFlame: {{ \n{WeaponFamilyFlame.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyExotic: {{ \n{WeaponFamilyExotic.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyChain: {{ \n{WeaponFamilyChain.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyPower: {{ \n{WeaponFamilyPower.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyPrimitive: {{ \n{WeaponFamilyPrimitive.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyForce: {{ \n{WeaponFamilyForce.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyBlade: {{ \n{WeaponFamilyBlade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponFamilyChainSaw: {{ \n{WeaponFamilyChainSaw.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationSword: {{ \n{WeaponClassificationSword.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationAxe: {{ \n{WeaponClassificationAxe.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationStaff: {{ \n{WeaponClassificationStaff.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationChainsaw: {{ \n{WeaponClassificationChainsaw.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationKnife: {{ \n{WeaponClassificationKnife.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationMaul: {{ \n{WeaponClassificationMaul.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponClassificationHammer: {{ \n{WeaponClassificationHammer.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponHoldingTypeOneHanded: {{ \n{WeaponHoldingTypeOneHanded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponHoldingTypeTwoHanded: {{ \n{WeaponHoldingTypeTwoHanded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponRangeRanged: {{ \n{WeaponRangeRanged.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponRangeMelee: {{ \n{WeaponRangeMelee.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponHeavinessHeavy: {{ \n{WeaponHeavinessHeavy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponHeavinessNotHeavy: {{ \n{WeaponHeavinessNotHeavy.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryRanged: {{ \n{WeaponSubCategoryRanged.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryMelee: {{ \n{WeaponSubCategoryMelee.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryFinessable: {{ \n{WeaponSubCategoryFinessable.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryThrown: {{ \n{WeaponSubCategoryThrown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryNatural: {{ \n{WeaponSubCategoryNatural.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryKnives: {{ \n{WeaponSubCategoryKnives.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryMonk: {{ \n{WeaponSubCategoryMonk.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryTwoHanded: {{ \n{WeaponSubCategoryTwoHanded.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryLight: {{ \n{WeaponSubCategoryLight.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategorySimple: {{ \n{WeaponSubCategorySimple.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryMartial: {{ \n{WeaponSubCategoryMartial.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryExotic: {{ \n{WeaponSubCategoryExotic.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryOneHandedPiercing: {{ \n{WeaponSubCategoryOneHandedPiercing.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryDisabled: {{ \n{WeaponSubCategoryDisabled.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryOneHandedSlashing: {{ \n{WeaponSubCategoryOneHandedSlashing.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSubCategoryMetal: {{ \n{WeaponSubCategoryMetal.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BoneImpulseMultiplier (2 fields) */
public record class BoneImpulseMultiplier (
    PPtr<Rigidbody> bone,
    float multiplier) : IUnityStructure
{
    public static BoneImpulseMultiplier Read(EndianBinaryReader reader)
    {
        PPtr<Rigidbody> bone_ = PPtr<Rigidbody>.Read(reader);
        float multiplier_ = reader.ReadF32();
        
        return new(bone_,
            multiplier_);
    }

    public override string ToString() => $"BoneImpulseMultiplier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}bone: {bone}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}multiplier: {multiplier}");
    }
}

/* $AspectRatioPreset (3 fields) */
public record class AspectRatioPreset (
    int WidthProportion,
    int HeightProportion,
    PPtr<Transform> Anchor) : IUnityStructure
{
    public static AspectRatioPreset Read(EndianBinaryReader reader)
    {
        int WidthProportion_ = reader.ReadS32();
        int HeightProportion_ = reader.ReadS32();
        PPtr<Transform> Anchor_ = PPtr<Transform>.Read(reader);
        
        return new(WidthProportion_,
            HeightProportion_,
            Anchor_);
    }

    public override string ToString() => $"AspectRatioPreset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WidthProportion: {WidthProportion}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HeightProportion: {HeightProportion}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Anchor: {Anchor}");
    }
}

/* $ObjectKeyboardRotationSettingsView (6 fields) */
public record class ObjectKeyboardRotationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectKeyboardRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectKeyboardRotationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $GPUAnimationClip (2 fields) */
public record class GPUAnimationClip (
    AsciiString Name,
    int FrameCount) : IUnityStructure
{
    public static GPUAnimationClip Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        int FrameCount_ = reader.ReadS32();
        
        return new(Name_,
            FrameCount_);
    }

    public override string ToString() => $"GPUAnimationClip\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameCount: {FrameCount}");
    }
}

/* $RectangleShapeRenderSettingsView (6 fields) */
public record class RectangleShapeRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static RectangleShapeRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"RectangleShapeRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $GroupViewUnit (2 fields) */
public record class GroupViewUnit (
    PPtr<GameObject> Container,
    PPtr<Image>[] Icons) : IUnityStructure
{
    public static GroupViewUnit Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> Container_ = PPtr<GameObject>.Read(reader);
        PPtr<Image>[] Icons_ = BuiltInArray<PPtr<Image>>.Read(reader);
        
        return new(Container_,
            Icons_);
    }

    public override string ToString() => $"GroupViewUnit\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Container: {Container}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Icons[{Icons.Length}] = {{");
        if (Icons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Image> _4 in Icons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Icons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $WeaponStyleOverride (2 fields) */
public record class WeaponStyleOverride (
    int WeaponAnimationStyle,
    PPtr<AnimationClipWrapper> ClipWrapper) : IUnityStructure
{
    public static WeaponStyleOverride Read(EndianBinaryReader reader)
    {
        int WeaponAnimationStyle_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> ClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(WeaponAnimationStyle_,
            ClipWrapper_);
    }

    public override string ToString() => $"WeaponStyleOverride\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WeaponAnimationStyle: {WeaponAnimationStyle}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipWrapper: {ClipWrapper}");
    }
}

/* $PrefabTagCollection (1 fields) */
public record class PrefabTagCollection (
    PPtr<PrefabTag>[] _namedEntities) : IUnityStructure
{
    public static PrefabTagCollection Read(EndianBinaryReader reader)
    {
        PPtr<PrefabTag>[] _namedEntities_ = BuiltInArray<PPtr<PrefabTag>>.Read(reader);
        
        return new(_namedEntities_);
    }

    public override string ToString() => $"PrefabTagCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_namedEntities[{_namedEntities.Length}] = {{");
        if (_namedEntities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<PrefabTag> _4 in _namedEntities)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_namedEntities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PrefabTagDatabaseView (7 fields) */
public record class PrefabTagDatabaseView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<PrefabTagDatabaseViewData> _viewData) : IUnityStructure
{
    public static PrefabTagDatabaseView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<PrefabTagDatabaseViewData> _viewData_ = PPtr<PrefabTagDatabaseViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"PrefabTagDatabaseView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $DismembermentPieceDescriptor (10 fields) */
public record class DismembermentPieceDescriptor (
    PPtr<Transform> Root,
    PPtr<Transform> Skeleton,
    PPtr<Rigidbody>[] ImpulseRigidBodies,
    PPtr<Collider>[] Colliders,
    PPtr<CharacterJoint>[] Joints,
    Vector3f Impulse,
    Vector2f ImpulseMultiplier,
    Vector2f IncomingImpulseMultiplier,
    Vector2f ChildrenImpulseMultiplier,
    float PieceMass) : IUnityStructure
{
    public static DismembermentPieceDescriptor Read(EndianBinaryReader reader)
    {
        PPtr<Transform> Root_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> Skeleton_ = PPtr<Transform>.Read(reader);
        PPtr<Rigidbody>[] ImpulseRigidBodies_ = BuiltInArray<PPtr<Rigidbody>>.Read(reader);
        PPtr<Collider>[] Colliders_ = BuiltInArray<PPtr<Collider>>.Read(reader);
        PPtr<CharacterJoint>[] Joints_ = BuiltInArray<PPtr<CharacterJoint>>.Read(reader);
        Vector3f Impulse_ = Vector3f.Read(reader);
        Vector2f ImpulseMultiplier_ = Vector2f.Read(reader);
        Vector2f IncomingImpulseMultiplier_ = Vector2f.Read(reader);
        Vector2f ChildrenImpulseMultiplier_ = Vector2f.Read(reader);
        float PieceMass_ = reader.ReadF32();
        
        return new(Root_,
            Skeleton_,
            ImpulseRigidBodies_,
            Colliders_,
            Joints_,
            Impulse_,
            ImpulseMultiplier_,
            IncomingImpulseMultiplier_,
            ChildrenImpulseMultiplier_,
            PieceMass_);
    }

    public override string ToString() => $"DismembermentPieceDescriptor\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Root: {Root}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Skeleton: {Skeleton}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ImpulseRigidBodies[{ImpulseRigidBodies.Length}] = {{");
        if (ImpulseRigidBodies.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Rigidbody> _4 in ImpulseRigidBodies)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ImpulseRigidBodies.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Colliders[{Colliders.Length}] = {{");
        if (Colliders.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Collider> _4 in Colliders)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Colliders.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Joints[{Joints.Length}] = {{");
        if (Joints.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<CharacterJoint> _4 in Joints)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Joints.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Impulse: {{ x: {Impulse.x}, y: {Impulse.y}, z: {Impulse.z} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ImpulseMultiplier: {{ x: {ImpulseMultiplier.x}, y: {ImpulseMultiplier.y} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IncomingImpulseMultiplier: {{ x: {IncomingImpulseMultiplier.x}, y: {IncomingImpulseMultiplier.y} }}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChildrenImpulseMultiplier: {{ x: {ChildrenImpulseMultiplier.x}, y: {ChildrenImpulseMultiplier.y} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PieceMass: {PieceMass}");
    }
}

/* $LootEntry (4 fields) */
public record class LootEntry (
    BlueprintItemReference m_Item,
    int Diversity,
    int Count,
    int m_ReputationPointsToUnlock) : IUnityStructure
{
    public static LootEntry Read(EndianBinaryReader reader)
    {
        BlueprintItemReference m_Item_ = BlueprintItemReference.Read(reader);
        reader.AlignTo(4); /* m_Item */
        int Diversity_ = reader.ReadS32();
        int Count_ = reader.ReadS32();
        int m_ReputationPointsToUnlock_ = reader.ReadS32();
        
        return new(m_Item_,
            Diversity_,
            Count_,
            m_ReputationPointsToUnlock_);
    }

    public override string ToString() => $"LootEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Item: {{ \n{m_Item.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Diversity: {Diversity}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Count: {Count}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ReputationPointsToUnlock: {m_ReputationPointsToUnlock}");
    }
}

/* $SpecialPhrasesDict (4 fields) */
public record class SpecialPhrasesDict (
    AsciiString Comment,
    BlueprintUnitReference[] Vendors,
    LocalizedString[] HelloPhrases,
    LocalizedString[] FinishDealPhrases) : IUnityStructure
{
    public static SpecialPhrasesDict Read(EndianBinaryReader reader)
    {
        AsciiString Comment_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Comment */
        BlueprintUnitReference[] Vendors_ = BuiltInArray<BlueprintUnitReference>.Read(reader);
        reader.AlignTo(4); /* Vendors */
        LocalizedString[] HelloPhrases_ = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* HelloPhrases */
        LocalizedString[] FinishDealPhrases_ = BuiltInArray<LocalizedString>.Read(reader);
        reader.AlignTo(4); /* FinishDealPhrases */
        
        return new(Comment_,
            Vendors_,
            HelloPhrases_,
            FinishDealPhrases_);
    }

    public override string ToString() => $"SpecialPhrasesDict\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Comment: \"{Comment}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Vendors[{Vendors.Length}] = {{");
        if (Vendors.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BlueprintUnitReference _4 in Vendors)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Vendors.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HelloPhrases[{HelloPhrases.Length}] = {{");
        if (HelloPhrases.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LocalizedString _4 in HelloPhrases)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (HelloPhrases.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FinishDealPhrases[{FinishDealPhrases.Length}] = {{");
        if (FinishDealPhrases.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (LocalizedString _4 in FinishDealPhrases)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (FinishDealPhrases.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OwlcatMultiLayer (2 fields) */
public record class OwlcatMultiLayer (
    AsciiString LayerName,
    OwlcatSelectableLayerPart[] Parts) : IUnityStructure
{
    public static OwlcatMultiLayer Read(EndianBinaryReader reader)
    {
        AsciiString LayerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* LayerName */
        OwlcatSelectableLayerPart[] Parts_ = BuiltInArray<OwlcatSelectableLayerPart>.Read(reader);
        reader.AlignTo(4); /* Parts */
        
        return new(LayerName_,
            Parts_);
    }

    public override string ToString() => $"OwlcatMultiLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LayerName: \"{LayerName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Parts[{Parts.Length}] = {{");
        if (Parts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OwlcatSelectableLayerPart _4 in Parts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Parts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ShieldDecalColorSet (1 fields) */
public record class ShieldDecalColorSet (
    ColorRGBA ShieldColor) : IUnityStructure
{
    public static ShieldDecalColorSet Read(EndianBinaryReader reader)
    {
        ColorRGBA ShieldColor_ = ColorRGBA.Read(reader);
        
        return new(ShieldColor_);
    }

    public override string ToString() => $"ShieldDecalColorSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ShieldColor: {{ rgba: {ShieldColor.rgba} }}\n");
    }
}

/* $WeatherProfileExtended (2 fields) */
public record class WeatherProfileExtended (
    PPtr<WeatherProfile> m_WeatherProfile,
    PPtr<WeatherLayer>[] m_Layers) : IUnityStructure
{
    public static WeatherProfileExtended Read(EndianBinaryReader reader)
    {
        PPtr<WeatherProfile> m_WeatherProfile_ = PPtr<WeatherProfile>.Read(reader);
        PPtr<WeatherLayer>[] m_Layers_ = BuiltInArray<PPtr<WeatherLayer>>.Read(reader);
        reader.AlignTo(4); /* m_Layers */
        
        return new(m_WeatherProfile_,
            m_Layers_);
    }

    public override string ToString() => $"WeatherProfileExtended\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_WeatherProfile: {m_WeatherProfile}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Layers[{m_Layers.Length}] = {{");
        if (m_Layers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<WeatherLayer> _4 in m_Layers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Layers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $GraphicsPreset (24 fields) */
public readonly record struct GraphicsPreset (
    int PS5ProGraphicsQuality,
    int GraphicsQuality,
    int VSyncMode,
    byte FrameRateLimitEnabled,
    int FrameRateLimit,
    int ShadowsQuality,
    int TexturesQuality,
    byte DepthOfField,
    byte Bloom,
    int SSAOQuality,
    int SSRQuality,
    int AntialiasingMode,
    int AntialiasingQuality,
    int PBDExecutionPath,
    int FootprintsMode,
    int FsrMode,
    float FsrSharpness,
    int VolumetricLightingQuality,
    byte ParticleSystemsLightingEnabled,
    byte ParticleSystemsShadowsEnabled,
    byte FilmGrainEnabled,
    float UIFrequentTimerInterval,
    float UIInfrequentTimerInterval,
    int CrowdQuality) : IUnityStructure
{
    public static GraphicsPreset Read(EndianBinaryReader reader)
    {
        int PS5ProGraphicsQuality_ = reader.ReadS32();
        int GraphicsQuality_ = reader.ReadS32();
        int VSyncMode_ = reader.ReadS32();
        byte FrameRateLimitEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* FrameRateLimitEnabled */
        int FrameRateLimit_ = reader.ReadS32();
        int ShadowsQuality_ = reader.ReadS32();
        int TexturesQuality_ = reader.ReadS32();
        byte DepthOfField_ = reader.ReadU8();
        reader.AlignTo(4); /* DepthOfField */
        byte Bloom_ = reader.ReadU8();
        reader.AlignTo(4); /* Bloom */
        int SSAOQuality_ = reader.ReadS32();
        int SSRQuality_ = reader.ReadS32();
        int AntialiasingMode_ = reader.ReadS32();
        int AntialiasingQuality_ = reader.ReadS32();
        int PBDExecutionPath_ = reader.ReadS32();
        int FootprintsMode_ = reader.ReadS32();
        int FsrMode_ = reader.ReadS32();
        float FsrSharpness_ = reader.ReadF32();
        int VolumetricLightingQuality_ = reader.ReadS32();
        byte ParticleSystemsLightingEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* ParticleSystemsLightingEnabled */
        byte ParticleSystemsShadowsEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* ParticleSystemsShadowsEnabled */
        byte FilmGrainEnabled_ = reader.ReadU8();
        reader.AlignTo(4); /* FilmGrainEnabled */
        float UIFrequentTimerInterval_ = reader.ReadF32();
        float UIInfrequentTimerInterval_ = reader.ReadF32();
        int CrowdQuality_ = reader.ReadS32();
        
        return new(PS5ProGraphicsQuality_,
            GraphicsQuality_,
            VSyncMode_,
            FrameRateLimitEnabled_,
            FrameRateLimit_,
            ShadowsQuality_,
            TexturesQuality_,
            DepthOfField_,
            Bloom_,
            SSAOQuality_,
            SSRQuality_,
            AntialiasingMode_,
            AntialiasingQuality_,
            PBDExecutionPath_,
            FootprintsMode_,
            FsrMode_,
            FsrSharpness_,
            VolumetricLightingQuality_,
            ParticleSystemsLightingEnabled_,
            ParticleSystemsShadowsEnabled_,
            FilmGrainEnabled_,
            UIFrequentTimerInterval_,
            UIInfrequentTimerInterval_,
            CrowdQuality_);
    }

    public override string ToString() => $"GraphicsPreset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PS5ProGraphicsQuality: {PS5ProGraphicsQuality}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GraphicsQuality: {GraphicsQuality}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VSyncMode: {VSyncMode}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameRateLimitEnabled: {FrameRateLimitEnabled}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FrameRateLimit: {FrameRateLimit}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowsQuality: {ShadowsQuality}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TexturesQuality: {TexturesQuality}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DepthOfField: {DepthOfField}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Bloom: {Bloom}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SSAOQuality: {SSAOQuality}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SSRQuality: {SSRQuality}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AntialiasingMode: {AntialiasingMode}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AntialiasingQuality: {AntialiasingQuality}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PBDExecutionPath: {PBDExecutionPath}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FootprintsMode: {FootprintsMode}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrMode: {FsrMode}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FsrSharpness: {FsrSharpness}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VolumetricLightingQuality: {VolumetricLightingQuality}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSystemsLightingEnabled: {ParticleSystemsLightingEnabled}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSystemsShadowsEnabled: {ParticleSystemsShadowsEnabled}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FilmGrainEnabled: {FilmGrainEnabled}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIFrequentTimerInterval: {UIFrequentTimerInterval}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIInfrequentTimerInterval: {UIInfrequentTimerInterval}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CrowdQuality: {CrowdQuality}");
    }
}

/* $AkBankReference (1 fields) */
public record class AkBankReference (
    AsciiString Value) : IUnityStructure
{
    public static AkBankReference Read(EndianBinaryReader reader)
    {
        AsciiString Value_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Value */
        
        return new(Value_);
    }

    public override string ToString() => $"AkBankReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Value: \"{Value}\"");
    }
}

/* $UIInteractionTypeSprites (4 fields) */
public record class UIInteractionTypeSprites (
    PPtr<Sprite> Main,
    PPtr<Sprite> Active,
    PPtr<Sprite> Hover,
    PPtr<Sprite> Disabled) : IUnityStructure
{
    public static UIInteractionTypeSprites Read(EndianBinaryReader reader)
    {
        PPtr<Sprite> Main_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> Active_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> Hover_ = PPtr<Sprite>.Read(reader);
        PPtr<Sprite> Disabled_ = PPtr<Sprite>.Read(reader);
        
        return new(Main_,
            Active_,
            Hover_,
            Disabled_);
    }

    public override string ToString() => $"UIInteractionTypeSprites\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Main: {Main}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Active: {Active}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Hover: {Hover}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Disabled: {Disabled}");
    }
}

/* $WarningTextElement (2 fields) */
public record class WarningTextElement (
    PPtr<TextMeshProUGUI> m_Label,
    PPtr<CanvasGroup> m_Container) : IUnityStructure
{
    public static WarningTextElement Read(EndianBinaryReader reader)
    {
        PPtr<TextMeshProUGUI> m_Label_ = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<CanvasGroup> m_Container_ = PPtr<CanvasGroup>.Read(reader);
        
        return new(m_Label_,
            m_Container_);
    }

    public override string ToString() => $"WarningTextElement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Label: {m_Label}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Container: {m_Container}");
    }
}

/* $WarningTextWithCountElement (3 fields) */
public record class WarningTextWithCountElement (
    PPtr<TextMeshProUGUI> m_Label,
    PPtr<CanvasGroup> m_Container,
    PPtr<TextMeshProUGUI> m_Count) : IUnityStructure
{
    public static WarningTextWithCountElement Read(EndianBinaryReader reader)
    {
        PPtr<TextMeshProUGUI> m_Label_ = PPtr<TextMeshProUGUI>.Read(reader);
        PPtr<CanvasGroup> m_Container_ = PPtr<CanvasGroup>.Read(reader);
        PPtr<TextMeshProUGUI> m_Count_ = PPtr<TextMeshProUGUI>.Read(reader);
        
        return new(m_Label_,
            m_Container_,
            m_Count_);
    }

    public override string ToString() => $"WarningTextWithCountElement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Label: {m_Label}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Container: {m_Container}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Count: {m_Count}");
    }
}

/* $CursorEntry (3 fields) */
public record class CursorEntry (
    int Type,
    PPtr<Sprite> Sprite,
    PPtr<Texture2D> Texture) : IUnityStructure
{
    public static CursorEntry Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<Sprite> Sprite_ = PPtr<Sprite>.Read(reader);
        PPtr<Texture2D> Texture_ = PPtr<Texture2D>.Read(reader);
        
        return new(Type_,
            Sprite_,
            Texture_);
    }

    public override string ToString() => $"CursorEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Sprite: {Sprite}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Texture: {Texture}");
    }
}

/* $NoiseSettings_1 (2 fields) */
public record class NoiseSettings_1 (
    NoiseOctave m_Octave1,
    NoiseOctave m_Octave2) : IUnityStructure
{
    public static NoiseSettings_1 Read(EndianBinaryReader reader)
    {
        NoiseOctave m_Octave1_ = NoiseOctave.Read(reader);
        NoiseOctave m_Octave2_ = NoiseOctave.Read(reader);
        
        return new(m_Octave1_,
            m_Octave2_);
    }

    public override string ToString() => $"NoiseSettings_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Octave1: {{ Weight: {m_Octave1.Weight}, Scale: {m_Octave1.Scale}, MoveSpeed: {m_Octave1.MoveSpeed} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Octave2: {{ Weight: {m_Octave2.Weight}, Scale: {m_Octave2.Scale}, MoveSpeed: {m_Octave2.MoveSpeed} }}\n");
    }
}

/* $NoiseOctave (3 fields) */
public readonly record struct NoiseOctave (
    float Weight,
    float Scale,
    float MoveSpeed) : IUnityStructure
{
    public static NoiseOctave Read(EndianBinaryReader reader)
    {
        float Weight_ = reader.ReadF32();
        float Scale_ = reader.ReadF32();
        float MoveSpeed_ = reader.ReadF32();
        
        return new(Weight_,
            Scale_,
            MoveSpeed_);
    }

    public override string ToString() => $"NoiseOctave\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Weight: {Weight}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Scale: {Scale}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MoveSpeed: {MoveSpeed}");
    }
}

/* $TextHolder (1 fields) */
public record class TextHolder (
    LocalizedString Name) : IUnityStructure
{
    public static TextHolder Read(EndianBinaryReader reader)
    {
        LocalizedString Name_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Name */
        
        return new(Name_);
    }

    public override string ToString() => $"TextHolder\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Name: {{ \n{Name.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $FormatEntry (2 fields) */
public record class FormatEntry (
    int Type,
    AsciiString Format) : IUnityStructure
{
    public static FormatEntry Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        AsciiString Format_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Format */
        
        return new(Type_,
            Format_);
    }

    public override string ToString() => $"FormatEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Format: \"{Format}\"");
    }
}

/* $TimePeriodStrings (16 fields) */
public record class TimePeriodStrings (
    LocalizedString OneDay,
    LocalizedString TwoDays,
    LocalizedString ThreeDays,
    LocalizedString FourDays,
    LocalizedString Days,
    LocalizedString LessThanAnHour,
    LocalizedString OneHour,
    LocalizedString TwoHours,
    LocalizedString ThreeHours,
    LocalizedString FourHours,
    LocalizedString Hours,
    LocalizedString And,
    LocalizedString CompactDay,
    LocalizedString CompactHour,
    LocalizedString CompactMinute,
    LocalizedString CompactSecond) : IUnityStructure
{
    public static TimePeriodStrings Read(EndianBinaryReader reader)
    {
        LocalizedString OneDay_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneDay */
        LocalizedString TwoDays_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoDays */
        LocalizedString ThreeDays_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThreeDays */
        LocalizedString FourDays_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FourDays */
        LocalizedString Days_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Days */
        LocalizedString LessThanAnHour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* LessThanAnHour */
        LocalizedString OneHour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OneHour */
        LocalizedString TwoHours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TwoHours */
        LocalizedString ThreeHours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ThreeHours */
        LocalizedString FourHours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FourHours */
        LocalizedString Hours_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Hours */
        LocalizedString And_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* And */
        LocalizedString CompactDay_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactDay */
        LocalizedString CompactHour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactHour */
        LocalizedString CompactMinute_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactMinute */
        LocalizedString CompactSecond_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CompactSecond */
        
        return new(OneDay_,
            TwoDays_,
            ThreeDays_,
            FourDays_,
            Days_,
            LessThanAnHour_,
            OneHour_,
            TwoHours_,
            ThreeHours_,
            FourHours_,
            Hours_,
            And_,
            CompactDay_,
            CompactHour_,
            CompactMinute_,
            CompactSecond_);
    }

    public override string ToString() => $"TimePeriodStrings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OneDay: {{ \n{OneDay.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TwoDays: {{ \n{TwoDays.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ThreeDays: {{ \n{ThreeDays.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FourDays: {{ \n{FourDays.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Days: {{ \n{Days.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}LessThanAnHour: {{ \n{LessThanAnHour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OneHour: {{ \n{OneHour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TwoHours: {{ \n{TwoHours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ThreeHours: {{ \n{ThreeHours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FourHours: {{ \n{FourHours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Hours: {{ \n{Hours.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}And: {{ \n{And.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CompactDay: {{ \n{CompactDay.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CompactHour: {{ \n{CompactHour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CompactMinute: {{ \n{CompactMinute.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CompactSecond: {{ \n{CompactSecond.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CustomPostProcessEffectPass (3 fields) */
public record class CustomPostProcessEffectPass (
    AsciiString Name,
    PPtr<Shader> Shader,
    ShaderPropertyDescriptor[] Properties) : IUnityStructure
{
    public static CustomPostProcessEffectPass Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        PPtr<Shader> Shader_ = PPtr<Shader>.Read(reader);
        ShaderPropertyDescriptor[] Properties_ = BuiltInArray<ShaderPropertyDescriptor>.Read(reader);
        reader.AlignTo(4); /* Properties */
        
        return new(Name_,
            Shader_,
            Properties_);
    }

    public override string ToString() => $"CustomPostProcessEffectPass\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Shader: {Shader}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Properties[{Properties.Length}] = {{");
        if (Properties.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ShaderPropertyDescriptor _4 in Properties)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Properties.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ShieldsDecalMaterialSet (3 fields) */
public record class ShieldsDecalMaterialSet (
    PPtr<Material> HighShieldsMaterial,
    PPtr<Material> MediumShieldsMaterial,
    PPtr<Material> LowShieldsMaterial) : IUnityStructure
{
    public static ShieldsDecalMaterialSet Read(EndianBinaryReader reader)
    {
        PPtr<Material> HighShieldsMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> MediumShieldsMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> LowShieldsMaterial_ = PPtr<Material>.Read(reader);
        
        return new(HighShieldsMaterial_,
            MediumShieldsMaterial_,
            LowShieldsMaterial_);
    }

    public override string ToString() => $"ShieldsDecalMaterialSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HighShieldsMaterial: {HighShieldsMaterial}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MediumShieldsMaterial: {MediumShieldsMaterial}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LowShieldsMaterial: {LowShieldsMaterial}");
    }
}

/* $VirtualListScrollSettings (4 fields) */
public readonly record struct VirtualListScrollSettings (
    byte UseScrollWheel,
    float ScrollWheelSpeed,
    float ConsoleNavigationScrollSpeed,
    float ScrollZoneReduction) : IUnityStructure
{
    public static VirtualListScrollSettings Read(EndianBinaryReader reader)
    {
        byte UseScrollWheel_ = reader.ReadU8();
        reader.AlignTo(4); /* UseScrollWheel */
        float ScrollWheelSpeed_ = reader.ReadF32();
        float ConsoleNavigationScrollSpeed_ = reader.ReadF32();
        float ScrollZoneReduction_ = reader.ReadF32();
        
        return new(UseScrollWheel_,
            ScrollWheelSpeed_,
            ConsoleNavigationScrollSpeed_,
            ScrollZoneReduction_);
    }

    public override string ToString() => $"VirtualListScrollSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseScrollWheel: {UseScrollWheel}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScrollWheelSpeed: {ScrollWheelSpeed}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ConsoleNavigationScrollSpeed: {ConsoleNavigationScrollSpeed}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScrollZoneReduction: {ScrollZoneReduction}");
    }
}

/* $VirtualListLayoutSettingsGrid (6 fields) */
public record class VirtualListLayoutSettingsGrid (
    VirtualListLayoutPadding Padding,
    Vector2f Spacing,
    int ElementsInRow,
    float Width,
    float Height,
    float VisibleZoneExpansion) : IUnityStructure
{
    public static VirtualListLayoutSettingsGrid Read(EndianBinaryReader reader)
    {
        VirtualListLayoutPadding Padding_ = VirtualListLayoutPadding.Read(reader);
        Vector2f Spacing_ = Vector2f.Read(reader);
        int ElementsInRow_ = reader.ReadS32();
        float Width_ = reader.ReadF32();
        float Height_ = reader.ReadF32();
        float VisibleZoneExpansion_ = reader.ReadF32();
        
        return new(Padding_,
            Spacing_,
            ElementsInRow_,
            Width_,
            Height_,
            VisibleZoneExpansion_);
    }

    public override string ToString() => $"VirtualListLayoutSettingsGrid\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Padding: {{ Top: {Padding.Top}, Bottom: {Padding.Bottom}, Left: {Padding.Left}, Right: {Padding.Right} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Spacing: {{ x: {Spacing.x}, y: {Spacing.y} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ElementsInRow: {ElementsInRow}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Width: {Width}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Height: {Height}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VisibleZoneExpansion: {VisibleZoneExpansion}");
    }
}

/* $XZOrientedEllipseShapeRenderSettingsView (7 fields) */
public record class XZOrientedEllipseShapeRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<XZOrientedEllipseShapeRenderSettings> _settings) : IUnityStructure
{
    public static XZOrientedEllipseShapeRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<XZOrientedEllipseShapeRenderSettings> _settings_ = PPtr<XZOrientedEllipseShapeRenderSettings>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _settings_);
    }

    public override string ToString() => $"XZOrientedEllipseShapeRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_settings: {_settings}");
    }
}

/* $VertexGradient (4 fields) */
public record class VertexGradient (
    ColorRGBA_1 topLeft,
    ColorRGBA_1 topRight,
    ColorRGBA_1 bottomLeft,
    ColorRGBA_1 bottomRight) : IUnityStructure
{
    public static VertexGradient Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 topLeft_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 topRight_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 bottomLeft_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 bottomRight_ = ColorRGBA_1.Read(reader);
        
        return new(topLeft_,
            topRight_,
            bottomLeft_,
            bottomRight_);
    }

    public override string ToString() => $"VertexGradient\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}topLeft: {{ r: {topLeft.r}, g: {topLeft.g}, b: {topLeft.b}, a: {topLeft.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}topRight: {{ r: {topRight.r}, g: {topRight.g}, b: {topRight.b}, a: {topRight.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}bottomLeft: {{ r: {bottomLeft.r}, g: {bottomLeft.g}, b: {bottomLeft.b}, a: {bottomLeft.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}bottomRight: {{ r: {bottomRight.r}, g: {bottomRight.g}, b: {bottomRight.b}, a: {bottomRight.a} }}\n");
    }
}

/* $Mapping (1 fields) */
public record class Mapping (
    AsciiString[] Values) : IUnityStructure
{
    public static Mapping Read(EndianBinaryReader reader)
    {
        AsciiString[] Values_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* Values */
        
        return new(Values_);
    }

    public override string ToString() => $"Mapping\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Values[{Values.Length}] = {{");
        if (Values.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in Values)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (Values.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Config (3 fields) */
public record class Config (
    PPtr<Material> normalMaterial,
    PPtr<Material> unableMaterial,
    PathLineSettings lineSettings) : IUnityStructure
{
    public static Config Read(EndianBinaryReader reader)
    {
        PPtr<Material> normalMaterial_ = PPtr<Material>.Read(reader);
        PPtr<Material> unableMaterial_ = PPtr<Material>.Read(reader);
        PathLineSettings lineSettings_ = PathLineSettings.Read(reader);
        reader.AlignTo(4); /* lineSettings */
        
        return new(normalMaterial_,
            unableMaterial_,
            lineSettings_);
    }

    public override string ToString() => $"Config\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}normalMaterial: {normalMaterial}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}unableMaterial: {unableMaterial}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}lineSettings: {{ \n{lineSettings.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PathLineSettings (10 fields) */
public readonly record struct PathLineSettings (
    float thickness,
    int smoothSegmentsCount,
    float edgeSmoothDistance,
    float turnSmoothDistance,
    float stepSmoothDistance,
    float hardTurnSmoothDistanceFactor,
    float edgePenetrationThreshold,
    float edgeHoverThreshold,
    float stepHeightDeltaThreshold,
    float stepOffset) : IUnityStructure
{
    public static PathLineSettings Read(EndianBinaryReader reader)
    {
        float thickness_ = reader.ReadF32();
        int smoothSegmentsCount_ = reader.ReadS32();
        float edgeSmoothDistance_ = reader.ReadF32();
        float turnSmoothDistance_ = reader.ReadF32();
        float stepSmoothDistance_ = reader.ReadF32();
        float hardTurnSmoothDistanceFactor_ = reader.ReadF32();
        float edgePenetrationThreshold_ = reader.ReadF32();
        float edgeHoverThreshold_ = reader.ReadF32();
        float stepHeightDeltaThreshold_ = reader.ReadF32();
        float stepOffset_ = reader.ReadF32();
        
        return new(thickness_,
            smoothSegmentsCount_,
            edgeSmoothDistance_,
            turnSmoothDistance_,
            stepSmoothDistance_,
            hardTurnSmoothDistanceFactor_,
            edgePenetrationThreshold_,
            edgeHoverThreshold_,
            stepHeightDeltaThreshold_,
            stepOffset_);
    }

    public override string ToString() => $"PathLineSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}thickness: {thickness}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}smoothSegmentsCount: {smoothSegmentsCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}edgeSmoothDistance: {edgeSmoothDistance}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}turnSmoothDistance: {turnSmoothDistance}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stepSmoothDistance: {stepSmoothDistance}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hardTurnSmoothDistanceFactor: {hardTurnSmoothDistanceFactor}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}edgePenetrationThreshold: {edgePenetrationThreshold}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}edgeHoverThreshold: {edgeHoverThreshold}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stepHeightDeltaThreshold: {stepHeightDeltaThreshold}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}stepOffset: {stepOffset}");
    }
}

/* $PrefabCategoryCollection (2 fields) */
public record class PrefabCategoryCollection (
    PPtr<PrefabCategory>[] _namedEntities,
    int _indexOfMarkedEntity) : IUnityStructure
{
    public static PrefabCategoryCollection Read(EndianBinaryReader reader)
    {
        PPtr<PrefabCategory>[] _namedEntities_ = BuiltInArray<PPtr<PrefabCategory>>.Read(reader);
        int _indexOfMarkedEntity_ = reader.ReadS32();
        
        return new(_namedEntities_,
            _indexOfMarkedEntity_);
    }

    public override string ToString() => $"PrefabCategoryCollection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_namedEntities[{_namedEntities.Length}] = {{");
        if (_namedEntities.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<PrefabCategory> _4 in _namedEntities)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (_namedEntities.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indexOfMarkedEntity: {_indexOfMarkedEntity}");
    }
}

/* $SingleModeDecorPaintStroke (1 fields) */
public record class SingleModeDecorPaintStroke (
    DecorPaintStrokeSurface _strokeSurface) : IUnityStructure
{
    public static SingleModeDecorPaintStroke Read(EndianBinaryReader reader)
    {
        DecorPaintStrokeSurface _strokeSurface_ = DecorPaintStrokeSurface.Read(reader);
        reader.AlignTo(4); /* _strokeSurface */
        
        return new(_strokeSurface_);
    }

    public override string ToString() => $"SingleModeDecorPaintStroke\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_strokeSurface: {{ \n{_strokeSurface.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DecorPaintStrokeSurface (5 fields) */
public record class DecorPaintStrokeSurface (
    byte _isValid,
    Vector3f _mouseCursorPickPoint,
    Vector3f _normal,
    int _type,
    PPtr<GameObject> _surfaceObject) : IUnityStructure
{
    public static DecorPaintStrokeSurface Read(EndianBinaryReader reader)
    {
        byte _isValid_ = reader.ReadU8();
        reader.AlignTo(4); /* _isValid */
        Vector3f _mouseCursorPickPoint_ = Vector3f.Read(reader);
        Vector3f _normal_ = Vector3f.Read(reader);
        int _type_ = reader.ReadS32();
        PPtr<GameObject> _surfaceObject_ = PPtr<GameObject>.Read(reader);
        
        return new(_isValid_,
            _mouseCursorPickPoint_,
            _normal_,
            _type_,
            _surfaceObject_);
    }

    public override string ToString() => $"DecorPaintStrokeSurface\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isValid: {_isValid}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_mouseCursorPickPoint: {{ x: {_mouseCursorPickPoint.x}, y: {_mouseCursorPickPoint.y}, z: {_mouseCursorPickPoint.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_normal: {{ x: {_normal.x}, y: {_normal.y}, z: {_normal.z} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_type: {_type}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surfaceObject: {_surfaceObject}");
    }
}

/* $BrushModeDecorPaintStroke (2 fields) */
public record class BrushModeDecorPaintStroke (
    DecorPaintStrokeSurface _strokeSurface,
    DecorPaintObjectPlacementBrushCircle _brushCircle) : IUnityStructure
{
    public static BrushModeDecorPaintStroke Read(EndianBinaryReader reader)
    {
        DecorPaintStrokeSurface _strokeSurface_ = DecorPaintStrokeSurface.Read(reader);
        reader.AlignTo(4); /* _strokeSurface */
        DecorPaintObjectPlacementBrushCircle _brushCircle_ = DecorPaintObjectPlacementBrushCircle.Read(reader);
        
        return new(_strokeSurface_,
            _brushCircle_);
    }

    public override string ToString() => $"BrushModeDecorPaintStroke\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_strokeSurface: {{ \n{_strokeSurface.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_brushCircle: {{ \n{_brushCircle.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DecorPaintObjectPlacementBrushCircle (1 fields) */
public record class DecorPaintObjectPlacementBrushCircle (
    XZOrientedEllipseObjectInteractionShape _circleShape) : IUnityStructure
{
    public static DecorPaintObjectPlacementBrushCircle Read(EndianBinaryReader reader)
    {
        XZOrientedEllipseObjectInteractionShape _circleShape_ = XZOrientedEllipseObjectInteractionShape.Read(reader);
        
        return new(_circleShape_);
    }

    public override string ToString() => $"DecorPaintObjectPlacementBrushCircle\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_circleShape: {{ \n{_circleShape.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $XZOrientedEllipseObjectInteractionShape (1 fields) */
public record class XZOrientedEllipseObjectInteractionShape (
    PPtr<XZOrientedEllipseShapeRenderSettings> _renderSettings) : IUnityStructure
{
    public static XZOrientedEllipseObjectInteractionShape Read(EndianBinaryReader reader)
    {
        PPtr<XZOrientedEllipseShapeRenderSettings> _renderSettings_ = PPtr<XZOrientedEllipseShapeRenderSettings>.Read(reader);
        
        return new(_renderSettings_);
    }

    public override string ToString() => $"XZOrientedEllipseObjectInteractionShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_renderSettings: {_renderSettings}");
    }
}

/* $AABB_1 (2 fields) */
public record class AABB_1 (
    Vector3f m_Center,
    Vector3f m_Extent) : IUnityStructure
{
    public static AABB_1 Read(EndianBinaryReader reader)
    {
        Vector3f m_Center_ = Vector3f.Read(reader);
        reader.AlignTo(4); /* m_Center */
        Vector3f m_Extent_ = Vector3f.Read(reader);
        reader.AlignTo(4); /* m_Extent */
        
        return new(m_Center_,
            m_Extent_);
    }

    public override string ToString() => $"AABB_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Center: {{ x: {m_Center.x}, y: {m_Center.y}, z: {m_Center.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Extent: {{ x: {m_Extent.x}, y: {m_Extent.y}, z: {m_Extent.z} }}\n");
    }
}

/* $ObjectPlacementGuideSettingsView (6 fields) */
public record class ObjectPlacementGuideSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementGuideSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementGuideSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectColliderSnapSurfaceGridSettingsView (6 fields) */
public record class ObjectColliderSnapSurfaceGridSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectColliderSnapSurfaceGridSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectColliderSnapSurfaceGridSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $Entry_4 (3 fields) */
public record class Entry_4 (
    AsciiString AssetId,
    long FileId,
    PPtr<Object> Asset) : IUnityStructure
{
    public static Entry_4 Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        long FileId_ = reader.ReadS64();
        PPtr<Object> Asset_ = PPtr<Object>.Read(reader);
        
        return new(AssetId_,
            FileId_,
            Asset_);
    }

    public override string ToString() => $"Entry_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FileId: {FileId}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Asset: {Asset}");
    }
}

/* $UnitMarkDecal (4 fields) */
public record class UnitMarkDecal (
    PPtr<GameObject> GameObject,
    PPtr<MeshRenderer> DecalMeshRenderer,
    PPtr<Material> MaterialSizeStandard,
    PPtr<Material> MaterailSizeBig) : IUnityStructure
{
    public static UnitMarkDecal Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> GameObject_ = PPtr<GameObject>.Read(reader);
        PPtr<MeshRenderer> DecalMeshRenderer_ = PPtr<MeshRenderer>.Read(reader);
        PPtr<Material> MaterialSizeStandard_ = PPtr<Material>.Read(reader);
        PPtr<Material> MaterailSizeBig_ = PPtr<Material>.Read(reader);
        
        return new(GameObject_,
            DecalMeshRenderer_,
            MaterialSizeStandard_,
            MaterailSizeBig_);
    }

    public override string ToString() => $"UnitMarkDecal\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}GameObject: {GameObject}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DecalMeshRenderer: {DecalMeshRenderer}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaterialSizeStandard: {MaterialSizeStandard}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}MaterailSizeBig: {MaterailSizeBig}");
    }
}

/* $ObjectLayerObjectMaskView (7 fields) */
public record class ObjectLayerObjectMaskView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<ObjectLayerObjectMaskViewData> _viewData) : IUnityStructure
{
    public static ObjectLayerObjectMaskView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<ObjectLayerObjectMaskViewData> _viewData_ = PPtr<ObjectLayerObjectMaskViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"ObjectLayerObjectMaskView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $TriggerGroup (4 fields) */
public record class TriggerGroup (
    byte enabled,
    AsciiString name,
    ColorRGBA_1 color,
    SplineTrigger[] triggers) : IUnityStructure
{
    public static TriggerGroup Read(EndianBinaryReader reader)
    {
        byte enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* enabled */
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        SplineTrigger[] triggers_ = BuiltInArray<SplineTrigger>.Read(reader);
        reader.AlignTo(4); /* triggers */
        
        return new(enabled_,
            name_,
            color_,
            triggers_);
    }

    public override string ToString() => $"TriggerGroup\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}triggers[{triggers.Length}] = {{");
        if (triggers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SplineTrigger _4 in triggers)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (triggers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SplineTrigger (7 fields) */
public record class SplineTrigger (
    AsciiString name,
    int type,
    byte workOnce,
    double position,
    byte enabled,
    ColorRGBA_1 color,
    TriggerEvent_1 onCross) : IUnityStructure
{
    public static SplineTrigger Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int type_ = reader.ReadS32();
        byte workOnce_ = reader.ReadU8();
        reader.AlignTo(4); /* workOnce */
        double position_ = reader.ReadF64();
        byte enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* enabled */
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        TriggerEvent_1 onCross_ = TriggerEvent_1.Read(reader);
        reader.AlignTo(4); /* onCross */
        
        return new(name_,
            type_,
            workOnce_,
            position_,
            enabled_,
            color_,
            onCross_);
    }

    public override string ToString() => $"SplineTrigger\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}workOnce: {workOnce}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}position: {position}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}enabled: {enabled}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}onCross: {{ \n{onCross.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TriggerEvent_1 (1 fields) */
public record class TriggerEvent_1 (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static TriggerEvent_1 Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"TriggerEvent_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Spline (8 fields) */
public record class Spline (
    SplinePoint[] points,
    int type,
    byte linearAverageDirection,
    AnimationCurve customValueInterpolation,
    AnimationCurve customNormalInterpolation,
    int sampleRate,
    byte closed,
    float _knotParametrization) : IUnityStructure
{
    public static Spline Read(EndianBinaryReader reader)
    {
        SplinePoint[] points_ = BuiltInArray<SplinePoint>.Read(reader);
        int type_ = reader.ReadS32();
        byte linearAverageDirection_ = reader.ReadU8();
        reader.AlignTo(4); /* linearAverageDirection */
        AnimationCurve customValueInterpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* customValueInterpolation */
        AnimationCurve customNormalInterpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* customNormalInterpolation */
        int sampleRate_ = reader.ReadS32();
        byte closed_ = reader.ReadU8();
        reader.AlignTo(4); /* closed */
        float _knotParametrization_ = reader.ReadF32();
        
        return new(points_,
            type_,
            linearAverageDirection_,
            customValueInterpolation_,
            customNormalInterpolation_,
            sampleRate_,
            closed_,
            _knotParametrization_);
    }

    public override string ToString() => $"Spline\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}points[{points.Length}] = {{");
        if (points.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SplinePoint _4 in points)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (points.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}linearAverageDirection: {linearAverageDirection}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customValueInterpolation: {{ \n{customValueInterpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customNormalInterpolation: {{ \n{customNormalInterpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sampleRate: {sampleRate}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}closed: {closed}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_knotParametrization: {_knotParametrization}");
    }
}

/* $SplinePoint (7 fields) */
public record class SplinePoint (
    int _type,
    Vector3f position,
    ColorRGBA_1 color,
    Vector3f normal,
    float size,
    Vector3f tangent,
    Vector3f tangent2) : IUnityStructure
{
    public static SplinePoint Read(EndianBinaryReader reader)
    {
        int _type_ = reader.ReadS32();
        Vector3f position_ = Vector3f.Read(reader);
        ColorRGBA_1 color_ = ColorRGBA_1.Read(reader);
        Vector3f normal_ = Vector3f.Read(reader);
        float size_ = reader.ReadF32();
        Vector3f tangent_ = Vector3f.Read(reader);
        Vector3f tangent2_ = Vector3f.Read(reader);
        
        return new(_type_,
            position_,
            color_,
            normal_,
            size_,
            tangent_,
            tangent2_);
    }

    public override string ToString() => $"SplinePoint\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_type: {_type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}position: {{ x: {position.x}, y: {position.y}, z: {position.z} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}color: {{ r: {color.r}, g: {color.g}, b: {color.b}, a: {color.a} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}normal: {{ x: {normal.x}, y: {normal.y}, z: {normal.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}size: {size}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}tangent: {{ x: {tangent.x}, y: {tangent.y}, z: {tangent.z} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}tangent2: {{ x: {tangent2.x}, y: {tangent2.y}, z: {tangent2.z} }}\n");
    }
}

/* $NodeLink (2 fields) */
public record class NodeLink (
    PPtr<Node> node,
    int pointIndex) : IUnityStructure
{
    public static NodeLink Read(EndianBinaryReader reader)
    {
        PPtr<Node> node_ = PPtr<Node>.Read(reader);
        int pointIndex_ = reader.ReadS32();
        
        return new(node_,
            pointIndex_);
    }

    public override string ToString() => $"NodeLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}node: {node}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}pointIndex: {pointIndex}");
    }
}

/* $ProjectedBoxFacePivotPointsRenderSettingsView (6 fields) */
public record class ProjectedBoxFacePivotPointsRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ProjectedBoxFacePivotPointsRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ProjectedBoxFacePivotPointsRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $FilterView (2 fields) */
public record class FilterView (
    PPtr<OwlcatToggle> Toggle,
    PPtr<Image> Icon) : IUnityStructure
{
    public static FilterView Read(EndianBinaryReader reader)
    {
        PPtr<OwlcatToggle> Toggle_ = PPtr<OwlcatToggle>.Read(reader);
        PPtr<Image> Icon_ = PPtr<Image>.Read(reader);
        
        return new(Toggle_,
            Icon_);
    }

    public override string ToString() => $"FilterView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Toggle: {Toggle}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }
}

/* $DepthOfFieldModeParameter (2 fields) */
public readonly record struct DepthOfFieldModeParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static DepthOfFieldModeParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"DepthOfFieldModeParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $Offsets (2 fields) */
public record class Offsets (
    Vector3f Position,
    Vector3f Rotation) : IUnityStructure
{
    public static Offsets Read(EndianBinaryReader reader)
    {
        Vector3f Position_ = Vector3f.Read(reader);
        Vector3f Rotation_ = Vector3f.Read(reader);
        
        return new(Position_,
            Rotation_);
    }

    public override string ToString() => $"Offsets\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Position: {{ x: {Position.x}, y: {Position.y}, z: {Position.z} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Rotation: {{ x: {Rotation.x}, y: {Rotation.y}, z: {Rotation.z} }}\n");
    }
}

/* $RaceOffset (2 fields) */
public record class RaceOffset (
    int race,
    Vector3f OffsetLeftIk) : IUnityStructure
{
    public static RaceOffset Read(EndianBinaryReader reader)
    {
        int race_ = reader.ReadS32();
        Vector3f OffsetLeftIk_ = Vector3f.Read(reader);
        
        return new(race_,
            OffsetLeftIk_);
    }

    public override string ToString() => $"RaceOffset\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}race: {race}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OffsetLeftIk: {{ x: {OffsetLeftIk.x}, y: {OffsetLeftIk.y}, z: {OffsetLeftIk.z} }}\n");
    }
}

/* $RaceScale (2 fields) */
public readonly record struct RaceScale (
    int race,
    float WeaponScale) : IUnityStructure
{
    public static RaceScale Read(EndianBinaryReader reader)
    {
        int race_ = reader.ReadS32();
        float WeaponScale_ = reader.ReadF32();
        
        return new(race_,
            WeaponScale_);
    }

    public override string ToString() => $"RaceScale\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}race: {race}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WeaponScale: {WeaponScale}");
    }
}

/* $AxisMouseRotationSettingsView (6 fields) */
public record class AxisMouseRotationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static AxisMouseRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"AxisMouseRotationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $InteractionSettings (19 fields) */
public record class InteractionSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection) : IUnityStructure
{
    public static InteractionSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_);
    }

    public override string ToString() => $"InteractionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }
}

/* $InteractionDoorSettings (27 fields) */
public record class InteractionDoorSettings (
    int UIType,
    byte NotInCombat,
    byte AlwaysDisabled,
    byte ShowOvertip,
    byte ShowHighlight,
    int ProximityRadius,
    int Type,
    int UseAnimationState,
    BlueprintDialogReference m_Dialog,
    AsciiString InteractionSound,
    AsciiString InteractionDisabledSound,
    AsciiString InteractionStopSound,
    PPtr<TrapObjectView> Trap,
    byte DoNotNeedCollider,
    byte UnlimitedInteractionsPerRound,
    byte OverrideActionPointsCost,
    int ActionPointsCost,
    InteractWithToolFXData InteractWithMeltaChargeFXData,
    float OvertipVerticalCorrection,
    PPtr<AnimationClip> ObstacleAnimation,
    byte DisableOnOpen,
    byte OpenByDefault,
    int NavmeshCutAction,
    PPtr<StaticRendererLink> HideWhenOpen,
    AsciiString OpenSound,
    AsciiString CloseSound,
    byte DonNotNeedNavmeshCut) : IUnityStructure
{
    public static InteractionDoorSettings Read(EndianBinaryReader reader)
    {
        int UIType_ = reader.ReadS32();
        byte NotInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* NotInCombat */
        byte AlwaysDisabled_ = reader.ReadU8();
        reader.AlignTo(4); /* AlwaysDisabled */
        byte ShowOvertip_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowOvertip */
        byte ShowHighlight_ = reader.ReadU8();
        reader.AlignTo(4); /* ShowHighlight */
        int ProximityRadius_ = reader.ReadS32();
        int Type_ = reader.ReadS32();
        int UseAnimationState_ = reader.ReadS32();
        BlueprintDialogReference m_Dialog_ = BlueprintDialogReference.Read(reader);
        reader.AlignTo(4); /* m_Dialog */
        AsciiString InteractionSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionSound */
        AsciiString InteractionDisabledSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionDisabledSound */
        AsciiString InteractionStopSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* InteractionStopSound */
        PPtr<TrapObjectView> Trap_ = PPtr<TrapObjectView>.Read(reader);
        byte DoNotNeedCollider_ = reader.ReadU8();
        reader.AlignTo(4); /* DoNotNeedCollider */
        byte UnlimitedInteractionsPerRound_ = reader.ReadU8();
        reader.AlignTo(4); /* UnlimitedInteractionsPerRound */
        byte OverrideActionPointsCost_ = reader.ReadU8();
        reader.AlignTo(4); /* OverrideActionPointsCost */
        int ActionPointsCost_ = reader.ReadS32();
        InteractWithToolFXData InteractWithMeltaChargeFXData_ = InteractWithToolFXData.Read(reader);
        reader.AlignTo(4); /* InteractWithMeltaChargeFXData */
        float OvertipVerticalCorrection_ = reader.ReadF32();
        PPtr<AnimationClip> ObstacleAnimation_ = PPtr<AnimationClip>.Read(reader);
        byte DisableOnOpen_ = reader.ReadU8();
        reader.AlignTo(4); /* DisableOnOpen */
        byte OpenByDefault_ = reader.ReadU8();
        reader.AlignTo(4); /* OpenByDefault */
        int NavmeshCutAction_ = reader.ReadS32();
        PPtr<StaticRendererLink> HideWhenOpen_ = PPtr<StaticRendererLink>.Read(reader);
        AsciiString OpenSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* OpenSound */
        AsciiString CloseSound_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* CloseSound */
        byte DonNotNeedNavmeshCut_ = reader.ReadU8();
        reader.AlignTo(4); /* DonNotNeedNavmeshCut */
        
        return new(UIType_,
            NotInCombat_,
            AlwaysDisabled_,
            ShowOvertip_,
            ShowHighlight_,
            ProximityRadius_,
            Type_,
            UseAnimationState_,
            m_Dialog_,
            InteractionSound_,
            InteractionDisabledSound_,
            InteractionStopSound_,
            Trap_,
            DoNotNeedCollider_,
            UnlimitedInteractionsPerRound_,
            OverrideActionPointsCost_,
            ActionPointsCost_,
            InteractWithMeltaChargeFXData_,
            OvertipVerticalCorrection_,
            ObstacleAnimation_,
            DisableOnOpen_,
            OpenByDefault_,
            NavmeshCutAction_,
            HideWhenOpen_,
            OpenSound_,
            CloseSound_,
            DonNotNeedNavmeshCut_);
    }

    public override string ToString() => $"InteractionDoorSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UIType: {UIType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NotInCombat: {NotInCombat}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AlwaysDisabled: {AlwaysDisabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowOvertip: {ShowOvertip}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowHighlight: {ShowHighlight}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ProximityRadius: {ProximityRadius}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseAnimationState: {UseAnimationState}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Dialog: {{ \n{m_Dialog.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionSound: \"{InteractionSound}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionDisabledSound: \"{InteractionDisabledSound}\"");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InteractionStopSound: \"{InteractionStopSound}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Trap: {Trap}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DoNotNeedCollider: {DoNotNeedCollider}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UnlimitedInteractionsPerRound: {UnlimitedInteractionsPerRound}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OverrideActionPointsCost: {OverrideActionPointsCost}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionPointsCost: {ActionPointsCost}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InteractWithMeltaChargeFXData: {{ \n{InteractWithMeltaChargeFXData.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OvertipVerticalCorrection: {OvertipVerticalCorrection}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ObstacleAnimation: {ObstacleAnimation}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DisableOnOpen: {DisableOnOpen}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenByDefault: {OpenByDefault}");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NavmeshCutAction: {NavmeshCutAction}");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HideWhenOpen: {HideWhenOpen}");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OpenSound: \"{OpenSound}\"");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CloseSound: \"{CloseSound}\"");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DonNotNeedNavmeshCut: {DonNotNeedNavmeshCut}");
    }
}

/* $ObjectCollectionMaskView (7 fields) */
public record class ObjectCollectionMaskView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<ObjectCollectionMaskViewData> _viewData) : IUnityStructure
{
    public static ObjectCollectionMaskView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<ObjectCollectionMaskViewData> _viewData_ = PPtr<ObjectCollectionMaskViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"ObjectCollectionMaskView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $IKChain2D (6 fields) */
public record class IKChain2D (
    PPtr<Transform> m_EffectorTransform,
    PPtr<Transform> m_TargetTransform,
    int m_TransformCount,
    PPtr<Transform>[] m_Transforms,
    Quaternionf[] m_DefaultLocalRotations,
    Quaternionf[] m_StoredLocalRotations) : IUnityStructure
{
    public static IKChain2D Read(EndianBinaryReader reader)
    {
        PPtr<Transform> m_EffectorTransform_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> m_TargetTransform_ = PPtr<Transform>.Read(reader);
        int m_TransformCount_ = reader.ReadS32();
        PPtr<Transform>[] m_Transforms_ = BuiltInArray<PPtr<Transform>>.Read(reader);
        Quaternionf[] m_DefaultLocalRotations_ = BuiltInArray<Quaternionf>.Read(reader);
        reader.AlignTo(4); /* m_DefaultLocalRotations */
        Quaternionf[] m_StoredLocalRotations_ = BuiltInArray<Quaternionf>.Read(reader);
        reader.AlignTo(4); /* m_StoredLocalRotations */
        
        return new(m_EffectorTransform_,
            m_TargetTransform_,
            m_TransformCount_,
            m_Transforms_,
            m_DefaultLocalRotations_,
            m_StoredLocalRotations_);
    }

    public override string ToString() => $"IKChain2D\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_EffectorTransform: {m_EffectorTransform}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TargetTransform: {m_TargetTransform}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TransformCount: {m_TransformCount}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Transforms[{m_Transforms.Length}] = {{");
        if (m_Transforms.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Transform> _4 in m_Transforms)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (m_Transforms.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DefaultLocalRotations[{m_DefaultLocalRotations.Length}] = {{");
        if (m_DefaultLocalRotations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Quaternionf _4 in m_DefaultLocalRotations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z}, w: {_4.w} }}\n");
            ++_4i;
        }
        if (m_DefaultLocalRotations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_StoredLocalRotations[{m_StoredLocalRotations.Length}] = {{");
        if (m_StoredLocalRotations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Quaternionf _4 in m_StoredLocalRotations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y}, z: {_4.z}, w: {_4.w} }}\n");
            ++_4i;
        }
        if (m_StoredLocalRotations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Setting (2 fields) */
public record class Setting (
    int Type,
    PPtr<AnimationClipWrapper> ClipWrapper) : IUnityStructure
{
    public static Setting Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> ClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Type_,
            ClipWrapper_);
    }

    public override string ToString() => $"Setting\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipWrapper: {ClipWrapper}");
    }
}

/* $ShaderResources_6 (7 fields) */
public record class ShaderResources_6 (
    PPtr<ComputeShader> LocalVolumetricFogCullingCS,
    PPtr<Shader> DebugLocalVolumetricFogPS,
    PPtr<Shader> ShadowmapDownsampleShader,
    PPtr<ComputeShader> VoxelizationShader,
    PPtr<ComputeShader> LightingShader,
    PPtr<ComputeShader> ScatterShader,
    PPtr<Shader> ApplyOpaqueShader) : IUnityStructure
{
    public static ShaderResources_6 Read(EndianBinaryReader reader)
    {
        PPtr<ComputeShader> LocalVolumetricFogCullingCS_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> DebugLocalVolumetricFogPS_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ShadowmapDownsampleShader_ = PPtr<Shader>.Read(reader);
        PPtr<ComputeShader> VoxelizationShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> LightingShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<ComputeShader> ScatterShader_ = PPtr<ComputeShader>.Read(reader);
        PPtr<Shader> ApplyOpaqueShader_ = PPtr<Shader>.Read(reader);
        
        return new(LocalVolumetricFogCullingCS_,
            DebugLocalVolumetricFogPS_,
            ShadowmapDownsampleShader_,
            VoxelizationShader_,
            LightingShader_,
            ScatterShader_,
            ApplyOpaqueShader_);
    }

    public override string ToString() => $"ShaderResources_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LocalVolumetricFogCullingCS: {LocalVolumetricFogCullingCS}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugLocalVolumetricFogPS: {DebugLocalVolumetricFogPS}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShadowmapDownsampleShader: {ShadowmapDownsampleShader}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VoxelizationShader: {VoxelizationShader}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LightingShader: {LightingShader}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScatterShader: {ScatterShader}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ApplyOpaqueShader: {ApplyOpaqueShader}");
    }
}

/* $TextureResources (1 fields) */
public record class TextureResources (
    PPtr<Texture2D>[] BlueNoise16LTex) : IUnityStructure
{
    public static TextureResources Read(EndianBinaryReader reader)
    {
        PPtr<Texture2D>[] BlueNoise16LTex_ = BuiltInArray<PPtr<Texture2D>>.Read(reader);
        reader.AlignTo(4); /* BlueNoise16LTex */
        
        return new(BlueNoise16LTex_);
    }

    public override string ToString() => $"TextureResources\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BlueNoise16LTex[{BlueNoise16LTex.Length}] = {{");
        if (BlueNoise16LTex.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Texture2D> _4 in BlueNoise16LTex)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (BlueNoise16LTex.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $VolumetricLightingSettings (11 fields) */
public readonly record struct VolumetricLightingSettings (
    int Slices,
    float FarClip,
    bool TemporalAccumulation,
    float TemporalFeedback,
    bool LocalVolumesEnabled,
    bool TricubicFilteringDeferred,
    bool TricubicFilteringForward,
    bool UseDownsampledShadowmap,
    int DownsampledShadowmapSize,
    bool DebugLocalVolumetricFog,
    int LightShadows) : IUnityStructure
{
    public static VolumetricLightingSettings Read(EndianBinaryReader reader)
    {
        int Slices_ = reader.ReadS32();
        float FarClip_ = reader.ReadF32();
        bool TemporalAccumulation_ = reader.ReadBool();
        reader.AlignTo(4); /* TemporalAccumulation */
        float TemporalFeedback_ = reader.ReadF32();
        bool LocalVolumesEnabled_ = reader.ReadBool();
        reader.AlignTo(4); /* LocalVolumesEnabled */
        bool TricubicFilteringDeferred_ = reader.ReadBool();
        reader.AlignTo(4); /* TricubicFilteringDeferred */
        bool TricubicFilteringForward_ = reader.ReadBool();
        reader.AlignTo(4); /* TricubicFilteringForward */
        bool UseDownsampledShadowmap_ = reader.ReadBool();
        reader.AlignTo(4); /* UseDownsampledShadowmap */
        int DownsampledShadowmapSize_ = reader.ReadS32();
        bool DebugLocalVolumetricFog_ = reader.ReadBool();
        reader.AlignTo(4); /* DebugLocalVolumetricFog */
        int LightShadows_ = reader.ReadS32();
        
        return new(Slices_,
            FarClip_,
            TemporalAccumulation_,
            TemporalFeedback_,
            LocalVolumesEnabled_,
            TricubicFilteringDeferred_,
            TricubicFilteringForward_,
            UseDownsampledShadowmap_,
            DownsampledShadowmapSize_,
            DebugLocalVolumetricFog_,
            LightShadows_);
    }

    public override string ToString() => $"VolumetricLightingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Slices: {Slices}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FarClip: {FarClip}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TemporalAccumulation: {TemporalAccumulation}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TemporalFeedback: {TemporalFeedback}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LocalVolumesEnabled: {LocalVolumesEnabled}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TricubicFilteringDeferred: {TricubicFilteringDeferred}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TricubicFilteringForward: {TricubicFilteringForward}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}UseDownsampledShadowmap: {UseDownsampledShadowmap}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DownsampledShadowmapSize: {DownsampledShadowmapSize}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DebugLocalVolumetricFog: {DebugLocalVolumetricFog}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LightShadows: {LightShadows}");
    }
}

/* $AxisRotationRandomizationSettingsView (6 fields) */
public record class AxisRotationRandomizationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static AxisRotationRandomizationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"AxisRotationRandomizationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $RendererFeatureFlag (2 fields) */
public record class RendererFeatureFlag (
    AsciiString FeatureIdentifier,
    byte Enabled) : IUnityStructure
{
    public static RendererFeatureFlag Read(EndianBinaryReader reader)
    {
        AsciiString FeatureIdentifier_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* FeatureIdentifier */
        byte Enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* Enabled */
        
        return new(FeatureIdentifier_,
            Enabled_);
    }

    public override string ToString() => $"RendererFeatureFlag\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FeatureIdentifier: \"{FeatureIdentifier}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }
}

/* $PositionBaseDynamicsDebugSettings (15 fields) */
public record class PositionBaseDynamicsDebugSettings (
    bool Enabled,
    bool ShowBoundingBoxes,
    bool ShowBroadphaseStructure,
    bool m_UpdateEveryFrame,
    float ParticleSize,
    ColorRGBA_1 ParticleColor,
    ColorRGBA_1 ConstraintColor,
    bool ShowNormals,
    ColorRGBA_1 NormalsColor,
    ColorRGBA_1 ColliderColor,
    ColorRGBA_1 ForceVolumeColor,
    ColorRGBA_1 BodyColor,
    ColorRGBA_1 BodyColliderPairColor,
    ColorRGBA_1 BodyForceVolumePairColor,
    ColorRGBA_1 BroadphaseStructureColor) : IUnityStructure
{
    public static PositionBaseDynamicsDebugSettings Read(EndianBinaryReader reader)
    {
        bool Enabled_ = reader.ReadBool();
        reader.AlignTo(4); /* Enabled */
        bool ShowBoundingBoxes_ = reader.ReadBool();
        reader.AlignTo(4); /* ShowBoundingBoxes */
        bool ShowBroadphaseStructure_ = reader.ReadBool();
        reader.AlignTo(4); /* ShowBroadphaseStructure */
        bool m_UpdateEveryFrame_ = reader.ReadBool();
        reader.AlignTo(4); /* m_UpdateEveryFrame */
        float ParticleSize_ = reader.ReadF32();
        ColorRGBA_1 ParticleColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* ParticleColor */
        ColorRGBA_1 ConstraintColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* ConstraintColor */
        bool ShowNormals_ = reader.ReadBool();
        reader.AlignTo(4); /* ShowNormals */
        ColorRGBA_1 NormalsColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* NormalsColor */
        ColorRGBA_1 ColliderColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* ColliderColor */
        ColorRGBA_1 ForceVolumeColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* ForceVolumeColor */
        ColorRGBA_1 BodyColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* BodyColor */
        ColorRGBA_1 BodyColliderPairColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* BodyColliderPairColor */
        ColorRGBA_1 BodyForceVolumePairColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* BodyForceVolumePairColor */
        ColorRGBA_1 BroadphaseStructureColor_ = ColorRGBA_1.Read(reader);
        reader.AlignTo(4); /* BroadphaseStructureColor */
        
        return new(Enabled_,
            ShowBoundingBoxes_,
            ShowBroadphaseStructure_,
            m_UpdateEveryFrame_,
            ParticleSize_,
            ParticleColor_,
            ConstraintColor_,
            ShowNormals_,
            NormalsColor_,
            ColliderColor_,
            ForceVolumeColor_,
            BodyColor_,
            BodyColliderPairColor_,
            BodyForceVolumePairColor_,
            BroadphaseStructureColor_);
    }

    public override string ToString() => $"PositionBaseDynamicsDebugSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Enabled: {Enabled}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowBoundingBoxes: {ShowBoundingBoxes}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowBroadphaseStructure: {ShowBroadphaseStructure}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_UpdateEveryFrame: {m_UpdateEveryFrame}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ParticleSize: {ParticleSize}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ParticleColor: {{ r: {ParticleColor.r}, g: {ParticleColor.g}, b: {ParticleColor.b}, a: {ParticleColor.a} }}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ConstraintColor: {{ r: {ConstraintColor.r}, g: {ConstraintColor.g}, b: {ConstraintColor.b}, a: {ConstraintColor.a} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ShowNormals: {ShowNormals}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalsColor: {{ r: {NormalsColor.r}, g: {NormalsColor.g}, b: {NormalsColor.b}, a: {NormalsColor.a} }}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ColliderColor: {{ r: {ColliderColor.r}, g: {ColliderColor.g}, b: {ColliderColor.b}, a: {ColliderColor.a} }}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ForceVolumeColor: {{ r: {ForceVolumeColor.r}, g: {ForceVolumeColor.g}, b: {ForceVolumeColor.b}, a: {ForceVolumeColor.a} }}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BodyColor: {{ r: {BodyColor.r}, g: {BodyColor.g}, b: {BodyColor.b}, a: {BodyColor.a} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BodyColliderPairColor: {{ r: {BodyColliderPairColor.r}, g: {BodyColliderPairColor.g}, b: {BodyColliderPairColor.b}, a: {BodyColliderPairColor.a} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BodyForceVolumePairColor: {{ r: {BodyForceVolumePairColor.r}, g: {BodyForceVolumePairColor.g}, b: {BodyForceVolumePairColor.b}, a: {BodyForceVolumePairColor.a} }}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BroadphaseStructureColor: {{ r: {BroadphaseStructureColor.r}, g: {BroadphaseStructureColor.g}, b: {BroadphaseStructureColor.b}, a: {BroadphaseStructureColor.a} }}\n");
    }
}

/* $BroadphaseSettings (4 fields) */
public record class BroadphaseSettings (
    int m_Type,
    SimpleGridSettings m_SimpleGridSettings,
    MultilevelGridSettings m_MultilevelGridSettings,
    OptimizedSpatialHashingSettings m_OptimizedSpatialHashingSettings) : IUnityStructure
{
    public static BroadphaseSettings Read(EndianBinaryReader reader)
    {
        int m_Type_ = reader.ReadS32();
        SimpleGridSettings m_SimpleGridSettings_ = default! /* ?SimpleGridSettings */;
        reader.AlignTo(4); /* m_SimpleGridSettings */
        MultilevelGridSettings m_MultilevelGridSettings_ = MultilevelGridSettings.Read(reader);
        reader.AlignTo(4); /* m_MultilevelGridSettings */
        OptimizedSpatialHashingSettings m_OptimizedSpatialHashingSettings_ = OptimizedSpatialHashingSettings.Read(reader);
        reader.AlignTo(4); /* m_OptimizedSpatialHashingSettings */
        
        return new(m_Type_,
            m_SimpleGridSettings_,
            m_MultilevelGridSettings_,
            m_OptimizedSpatialHashingSettings_);
    }

    public override string ToString() => $"BroadphaseSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Type: {m_Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_SimpleGridSettings: [[unimplemented]]");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_MultilevelGridSettings: {{ m_Dimemsion: {m_MultilevelGridSettings.m_Dimemsion}, m_CellSize: {m_MultilevelGridSettings.m_CellSize} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OptimizedSpatialHashingSettings: {{ m_CellSize: {m_OptimizedSpatialHashingSettings.m_CellSize} }}\n");
    }
}

/* $MultilevelGridSettings (2 fields) */
public readonly record struct MultilevelGridSettings (
    int m_Dimemsion,
    float m_CellSize) : IUnityStructure
{
    public static MultilevelGridSettings Read(EndianBinaryReader reader)
    {
        int m_Dimemsion_ = reader.ReadS32();
        float m_CellSize_ = reader.ReadF32();
        
        return new(m_Dimemsion_,
            m_CellSize_);
    }

    public override string ToString() => $"MultilevelGridSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Dimemsion: {m_Dimemsion}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CellSize: {m_CellSize}");
    }
}

/* $OptimizedSpatialHashingSettings (1 fields) */
public readonly record struct OptimizedSpatialHashingSettings (
    float m_CellSize) : IUnityStructure
{
    public static OptimizedSpatialHashingSettings Read(EndianBinaryReader reader)
    {
        float m_CellSize_ = reader.ReadF32();
        
        return new(m_CellSize_);
    }

    public override string ToString() => $"OptimizedSpatialHashingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_CellSize: {m_CellSize}");
    }
}

/* $ObjectPivotPointsRenderSettingsView (6 fields) */
public record class ObjectPivotPointsRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPivotPointsRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPivotPointsRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $Connection (4 fields) */
public record class Connection (
    byte invertTangents,
    int _pointIndex,
    PPtr<SplineComputer> _computer,
    SplinePoint point) : IUnityStructure
{
    public static Connection Read(EndianBinaryReader reader)
    {
        byte invertTangents_ = reader.ReadU8();
        reader.AlignTo(4); /* invertTangents */
        int _pointIndex_ = reader.ReadS32();
        PPtr<SplineComputer> _computer_ = PPtr<SplineComputer>.Read(reader);
        SplinePoint point_ = SplinePoint.Read(reader);
        
        return new(invertTangents_,
            _pointIndex_,
            _computer_,
            point_);
    }

    public override string ToString() => $"Connection\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invertTangents: {invertTangents}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_pointIndex: {_pointIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_computer: {_computer}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}point: {{ \n{point.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $MapObjectFxSettings (3 fields) */
public record class MapObjectFxSettings (
    PPtr<GameObject> FxPrefab,
    byte StartActive,
    PPtr<Transform> FxRoot) : IUnityStructure
{
    public static MapObjectFxSettings Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> FxPrefab_ = PPtr<GameObject>.Read(reader);
        byte StartActive_ = reader.ReadU8();
        reader.AlignTo(4); /* StartActive */
        PPtr<Transform> FxRoot_ = PPtr<Transform>.Read(reader);
        
        return new(FxPrefab_,
            StartActive_,
            FxRoot_);
    }

    public override string ToString() => $"MapObjectFxSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FxPrefab: {FxPrefab}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StartActive: {StartActive}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FxRoot: {FxRoot}");
    }
}

/* $SingleDecorPaintModeObjectPlacementSettingsView (6 fields) */
public record class SingleDecorPaintModeObjectPlacementSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static SingleDecorPaintModeObjectPlacementSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"SingleDecorPaintModeObjectPlacementSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $EntityFilterProperty (2 fields) */
public record class EntityFilterProperty (
    byte _isActive,
    AsciiString _name) : IUnityStructure
{
    public static EntityFilterProperty Read(EndianBinaryReader reader)
    {
        byte _isActive_ = reader.ReadU8();
        reader.AlignTo(4); /* _isActive */
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        
        return new(_isActive_,
            _name_);
    }

    public override string ToString() => $"EntityFilterProperty\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isActive: {_isActive}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }
}

/* $PrefabFilterView (6 fields) */
public record class PrefabFilterView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static PrefabFilterView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"PrefabFilterView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $VisualTransitionSettings (8 fields) */
public record class VisualTransitionSettings (
    float OldPrefabVisibilityTime,
    PPtr<GameObject> OldPrefabFX,
    PPtr<GameObject> NewPrefabFX,
    float ScaleTime,
    byte ScaleOldPrefab,
    AnimationCurve OldScaleCurve,
    byte ScaleNewPrefab,
    AnimationCurve NewScaleCurve) : IUnityStructure
{
    public static VisualTransitionSettings Read(EndianBinaryReader reader)
    {
        float OldPrefabVisibilityTime_ = reader.ReadF32();
        PPtr<GameObject> OldPrefabFX_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> NewPrefabFX_ = PPtr<GameObject>.Read(reader);
        float ScaleTime_ = reader.ReadF32();
        byte ScaleOldPrefab_ = reader.ReadU8();
        reader.AlignTo(4); /* ScaleOldPrefab */
        AnimationCurve OldScaleCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* OldScaleCurve */
        byte ScaleNewPrefab_ = reader.ReadU8();
        reader.AlignTo(4); /* ScaleNewPrefab */
        AnimationCurve NewScaleCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* NewScaleCurve */
        
        return new(OldPrefabVisibilityTime_,
            OldPrefabFX_,
            NewPrefabFX_,
            ScaleTime_,
            ScaleOldPrefab_,
            OldScaleCurve_,
            ScaleNewPrefab_,
            NewScaleCurve_);
    }

    public override string ToString() => $"VisualTransitionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OldPrefabVisibilityTime: {OldPrefabVisibilityTime}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OldPrefabFX: {OldPrefabFX}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}NewPrefabFX: {NewPrefabFX}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScaleTime: {ScaleTime}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScaleOldPrefab: {ScaleOldPrefab}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OldScaleCurve: {{ \n{OldScaleCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScaleNewPrefab: {ScaleNewPrefab}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NewScaleCurve: {{ \n{NewScaleCurve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DestructionStagesActionsSettings (2 fields) */
public record class DestructionStagesActionsSettings (
    ActionsReference m_OnBecameDamaged,
    ActionsReference m_OnBecameDestroyed) : IUnityStructure
{
    public static DestructionStagesActionsSettings Read(EndianBinaryReader reader)
    {
        ActionsReference m_OnBecameDamaged_ = ActionsReference.Read(reader);
        reader.AlignTo(4); /* m_OnBecameDamaged */
        ActionsReference m_OnBecameDestroyed_ = ActionsReference.Read(reader);
        reader.AlignTo(4); /* m_OnBecameDestroyed */
        
        return new(m_OnBecameDamaged_,
            m_OnBecameDestroyed_);
    }

    public override string ToString() => $"DestructionStagesActionsSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OnBecameDamaged: {{ \n{m_OnBecameDamaged.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_OnBecameDestroyed: {{ \n{m_OnBecameDestroyed.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $CustomMaterialPropertyData (2 fields) */
public record class CustomMaterialPropertyData (
    AsciiString PropertyName,
    float FadeOutValue) : IUnityStructure
{
    public static CustomMaterialPropertyData Read(EndianBinaryReader reader)
    {
        AsciiString PropertyName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* PropertyName */
        float FadeOutValue_ = reader.ReadF32();
        
        return new(PropertyName_,
            FadeOutValue_);
    }

    public override string ToString() => $"CustomMaterialPropertyData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PropertyName: \"{PropertyName}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FadeOutValue: {FadeOutValue}");
    }
}

/* $AxisKeyboardRotationSettingsView (6 fields) */
public record class AxisKeyboardRotationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static AxisKeyboardRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"AxisKeyboardRotationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $DamageColorSet (3 fields) */
public record class DamageColorSet (
    ColorRGBA_1 NormalColor,
    ColorRGBA_1 DamageColor,
    ColorRGBA_1 NearDeathColor) : IUnityStructure
{
    public static DamageColorSet Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 NormalColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 DamageColor_ = ColorRGBA_1.Read(reader);
        ColorRGBA_1 NearDeathColor_ = ColorRGBA_1.Read(reader);
        
        return new(NormalColor_,
            DamageColor_,
            NearDeathColor_);
    }

    public override string ToString() => $"DamageColorSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NormalColor: {{ r: {NormalColor.r}, g: {NormalColor.g}, b: {NormalColor.b}, a: {NormalColor.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageColor: {{ r: {DamageColor.r}, g: {DamageColor.g}, b: {DamageColor.b}, a: {DamageColor.a} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NearDeathColor: {{ r: {NearDeathColor.r}, g: {NearDeathColor.g}, b: {NearDeathColor.b}, a: {NearDeathColor.a} }}\n");
    }
}

/* $EffectSettings (5 fields) */
public readonly record struct EffectSettings (
    float FirstDelay,
    float SecondDelay,
    float FirstStay,
    float FadeInTime,
    float FadeOutTime) : IUnityStructure
{
    public static EffectSettings Read(EndianBinaryReader reader)
    {
        float FirstDelay_ = reader.ReadF32();
        float SecondDelay_ = reader.ReadF32();
        float FirstStay_ = reader.ReadF32();
        float FadeInTime_ = reader.ReadF32();
        float FadeOutTime_ = reader.ReadF32();
        
        return new(FirstDelay_,
            SecondDelay_,
            FirstStay_,
            FadeInTime_,
            FadeOutTime_);
    }

    public override string ToString() => $"EffectSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FirstDelay: {FirstDelay}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondDelay: {SecondDelay}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FirstStay: {FirstStay}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FadeInTime: {FadeInTime}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FadeOutTime: {FadeOutTime}");
    }
}

/* $BlueprintBuffReference (1 fields) */
public record class BlueprintBuffReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintBuffReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintBuffReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $InspectorGUISelectionToolbar (6 fields) */
public record class InspectorGUISelectionToolbar (
    AsciiString[] _normalStateButtonTexturePaths,
    AsciiString[] _activeStateButtonTexturePaths,
    AsciiString[] _buttonTooltips,
    float _buttonScale,
    byte _allowActiveStateForButtons,
    byte _useBoxStyleForButtons) : IUnityStructure
{
    public static InspectorGUISelectionToolbar Read(EndianBinaryReader reader)
    {
        AsciiString[] _normalStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] _activeStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] _buttonTooltips_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        float _buttonScale_ = reader.ReadF32();
        byte _allowActiveStateForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _allowActiveStateForButtons */
        byte _useBoxStyleForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        
        return new(_normalStateButtonTexturePaths_,
            _activeStateButtonTexturePaths_,
            _buttonTooltips_,
            _buttonScale_,
            _allowActiveStateForButtons_,
            _useBoxStyleForButtons_);
    }

    public override string ToString() => $"InspectorGUISelectionToolbar\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_normalStateButtonTexturePaths[{_normalStateButtonTexturePaths.Length}] = {{");
        if (_normalStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _normalStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_normalStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_activeStateButtonTexturePaths[{_activeStateButtonTexturePaths.Length}] = {{");
        if (_activeStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _activeStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_activeStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_buttonTooltips[{_buttonTooltips.Length}] = {{");
        if (_buttonTooltips.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _buttonTooltips)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_buttonTooltips.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonScale: {_buttonScale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_allowActiveStateForButtons: {_allowActiveStateForButtons}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_useBoxStyleForButtons: {_useBoxStyleForButtons}");
    }
}

/* $ObjectPlacementInspectorGUI (1 fields) */
public record class ObjectPlacementInspectorGUI (
    ObjectPlacementLookAndFeelSettingsView _objectPlacementLookAndFeelSettingsView) : IUnityStructure
{
    public static ObjectPlacementInspectorGUI Read(EndianBinaryReader reader)
    {
        ObjectPlacementLookAndFeelSettingsView _objectPlacementLookAndFeelSettingsView_ = ObjectPlacementLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _objectPlacementLookAndFeelSettingsView */
        
        return new(_objectPlacementLookAndFeelSettingsView_);
    }

    public override string ToString() => $"ObjectPlacementInspectorGUI\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectPlacementLookAndFeelSettingsView: {{ \n{_objectPlacementLookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementLookAndFeelSettingsView (9 fields) */
public record class ObjectPlacementLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    DecorPaintObjectPlacementLookAndFeelSettingsView _decorPaintLookAndFeelSettingsView,
    PathObjectPlacementLookAndFeelSettingsView _pathObjectPlacementLookAndFeelSettingsView,
    BlockObjectPlacementLookAndFeelSettingsView _blockObjectPlacementLookAndFeelSettingsView) : IUnityStructure
{
    public static ObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        DecorPaintObjectPlacementLookAndFeelSettingsView _decorPaintLookAndFeelSettingsView_ = DecorPaintObjectPlacementLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _decorPaintLookAndFeelSettingsView */
        PathObjectPlacementLookAndFeelSettingsView _pathObjectPlacementLookAndFeelSettingsView_ = PathObjectPlacementLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _pathObjectPlacementLookAndFeelSettingsView */
        BlockObjectPlacementLookAndFeelSettingsView _blockObjectPlacementLookAndFeelSettingsView_ = BlockObjectPlacementLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _blockObjectPlacementLookAndFeelSettingsView */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _decorPaintLookAndFeelSettingsView_,
            _pathObjectPlacementLookAndFeelSettingsView_,
            _blockObjectPlacementLookAndFeelSettingsView_);
    }

    public override string ToString() => $"ObjectPlacementLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_decorPaintLookAndFeelSettingsView: {{ \n{_decorPaintLookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_pathObjectPlacementLookAndFeelSettingsView: {{ \n{_pathObjectPlacementLookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_blockObjectPlacementLookAndFeelSettingsView: {{ \n{_blockObjectPlacementLookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DecorPaintObjectPlacementLookAndFeelSettingsView (6 fields) */
public record class DecorPaintObjectPlacementLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static DecorPaintObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"DecorPaintObjectPlacementLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $PathObjectPlacementLookAndFeelSettingsView (6 fields) */
public record class PathObjectPlacementLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static PathObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"PathObjectPlacementLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $BlockObjectPlacementLookAndFeelSettingsView (6 fields) */
public record class BlockObjectPlacementLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static BlockObjectPlacementLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"BlockObjectPlacementLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectEraseInspectorGUI (1 fields) */
public record class ObjectEraseInspectorGUI (
    ObjectEraserLookAndFeelSettingsView _lookAndFeelSettingsView) : IUnityStructure
{
    public static ObjectEraseInspectorGUI Read(EndianBinaryReader reader)
    {
        ObjectEraserLookAndFeelSettingsView _lookAndFeelSettingsView_ = ObjectEraserLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _lookAndFeelSettingsView */
        
        return new(_lookAndFeelSettingsView_);
    }

    public override string ToString() => $"ObjectEraseInspectorGUI\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_lookAndFeelSettingsView: {{ \n{_lookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectEraserLookAndFeelSettingsView (6 fields) */
public record class ObjectEraserLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectEraserLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectEraserLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectSnappingInspectorGUI (1 fields) */
public record class ObjectSnappingInspectorGUI (
    ObjectSnappingLookAndFeelSettingsView _objectSnappingLookAndFeelSettingsView) : IUnityStructure
{
    public static ObjectSnappingInspectorGUI Read(EndianBinaryReader reader)
    {
        ObjectSnappingLookAndFeelSettingsView _objectSnappingLookAndFeelSettingsView_ = ObjectSnappingLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _objectSnappingLookAndFeelSettingsView */
        
        return new(_objectSnappingLookAndFeelSettingsView_);
    }

    public override string ToString() => $"ObjectSnappingInspectorGUI\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectSnappingLookAndFeelSettingsView: {{ \n{_objectSnappingLookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectSnappingLookAndFeelSettingsView (6 fields) */
public record class ObjectSnappingLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSnappingLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSnappingLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectSelectionInspectorGUI (4 fields) */
public record class ObjectSelectionInspectorGUI (
    ObjectSelectionTransformGizmoSelectionToolbar _objectSelectionTransformGizmoSelectionToolbar,
    ObjectSelectionActionToolbar _objectSelectionActionsToolbar,
    ObjectSelectionActionsView _objectSelectionActionsView,
    ObjectSelectionLookAndFeelSettingsView _lookAndFeelSettingsView) : IUnityStructure
{
    public static ObjectSelectionInspectorGUI Read(EndianBinaryReader reader)
    {
        ObjectSelectionTransformGizmoSelectionToolbar _objectSelectionTransformGizmoSelectionToolbar_ = ObjectSelectionTransformGizmoSelectionToolbar.Read(reader);
        reader.AlignTo(4); /* _objectSelectionTransformGizmoSelectionToolbar */
        ObjectSelectionActionToolbar _objectSelectionActionsToolbar_ = ObjectSelectionActionToolbar.Read(reader);
        reader.AlignTo(4); /* _objectSelectionActionsToolbar */
        ObjectSelectionActionsView _objectSelectionActionsView_ = ObjectSelectionActionsView.Read(reader);
        reader.AlignTo(4); /* _objectSelectionActionsView */
        ObjectSelectionLookAndFeelSettingsView _lookAndFeelSettingsView_ = ObjectSelectionLookAndFeelSettingsView.Read(reader);
        reader.AlignTo(4); /* _lookAndFeelSettingsView */
        
        return new(_objectSelectionTransformGizmoSelectionToolbar_,
            _objectSelectionActionsToolbar_,
            _objectSelectionActionsView_,
            _lookAndFeelSettingsView_);
    }

    public override string ToString() => $"ObjectSelectionInspectorGUI\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectSelectionTransformGizmoSelectionToolbar: {{ \n{_objectSelectionTransformGizmoSelectionToolbar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectSelectionActionsToolbar: {{ \n{_objectSelectionActionsToolbar.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_objectSelectionActionsView: {{ \n{_objectSelectionActionsView.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_lookAndFeelSettingsView: {{ \n{_lookAndFeelSettingsView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectSelectionTransformGizmoSelectionToolbar (6 fields) */
public record class ObjectSelectionTransformGizmoSelectionToolbar (
    AsciiString[] _normalStateButtonTexturePaths,
    AsciiString[] _activeStateButtonTexturePaths,
    AsciiString[] _buttonTooltips,
    float _buttonScale,
    byte _allowActiveStateForButtons,
    byte _useBoxStyleForButtons) : IUnityStructure
{
    public static ObjectSelectionTransformGizmoSelectionToolbar Read(EndianBinaryReader reader)
    {
        AsciiString[] _normalStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] _activeStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] _buttonTooltips_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        float _buttonScale_ = reader.ReadF32();
        byte _allowActiveStateForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _allowActiveStateForButtons */
        byte _useBoxStyleForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        
        return new(_normalStateButtonTexturePaths_,
            _activeStateButtonTexturePaths_,
            _buttonTooltips_,
            _buttonScale_,
            _allowActiveStateForButtons_,
            _useBoxStyleForButtons_);
    }

    public override string ToString() => $"ObjectSelectionTransformGizmoSelectionToolbar\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_normalStateButtonTexturePaths[{_normalStateButtonTexturePaths.Length}] = {{");
        if (_normalStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _normalStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_normalStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_activeStateButtonTexturePaths[{_activeStateButtonTexturePaths.Length}] = {{");
        if (_activeStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _activeStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_activeStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_buttonTooltips[{_buttonTooltips.Length}] = {{");
        if (_buttonTooltips.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _buttonTooltips)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_buttonTooltips.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonScale: {_buttonScale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_allowActiveStateForButtons: {_allowActiveStateForButtons}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_useBoxStyleForButtons: {_useBoxStyleForButtons}");
    }
}

/* $ObjectSelectionActionToolbar (6 fields) */
public record class ObjectSelectionActionToolbar (
    AsciiString[] _normalStateButtonTexturePaths,
    AsciiString[] _activeStateButtonTexturePaths,
    AsciiString[] _buttonTooltips,
    float _buttonScale,
    byte _allowActiveStateForButtons,
    byte _useBoxStyleForButtons) : IUnityStructure
{
    public static ObjectSelectionActionToolbar Read(EndianBinaryReader reader)
    {
        AsciiString[] _normalStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _normalStateButtonTexturePaths */
        AsciiString[] _activeStateButtonTexturePaths_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _activeStateButtonTexturePaths */
        AsciiString[] _buttonTooltips_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* _buttonTooltips */
        float _buttonScale_ = reader.ReadF32();
        byte _allowActiveStateForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _allowActiveStateForButtons */
        byte _useBoxStyleForButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* _useBoxStyleForButtons */
        
        return new(_normalStateButtonTexturePaths_,
            _activeStateButtonTexturePaths_,
            _buttonTooltips_,
            _buttonScale_,
            _allowActiveStateForButtons_,
            _useBoxStyleForButtons_);
    }

    public override string ToString() => $"ObjectSelectionActionToolbar\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_normalStateButtonTexturePaths[{_normalStateButtonTexturePaths.Length}] = {{");
        if (_normalStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _normalStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_normalStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_activeStateButtonTexturePaths[{_activeStateButtonTexturePaths.Length}] = {{");
        if (_activeStateButtonTexturePaths.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _activeStateButtonTexturePaths)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_activeStateButtonTexturePaths.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_buttonTooltips[{_buttonTooltips.Length}] = {{");
        if (_buttonTooltips.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in _buttonTooltips)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (_buttonTooltips.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_buttonScale: {_buttonScale}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_allowActiveStateForButtons: {_allowActiveStateForButtons}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_useBoxStyleForButtons: {_useBoxStyleForButtons}");
    }
}

/* $ObjectSelectionActionsView (7 fields) */
public record class ObjectSelectionActionsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PPtr<ObjectSelectionActionsViewData> _viewData) : IUnityStructure
{
    public static ObjectSelectionActionsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PPtr<ObjectSelectionActionsViewData> _viewData_ = PPtr<ObjectSelectionActionsViewData>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _viewData_);
    }

    public override string ToString() => $"ObjectSelectionActionsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_viewData: {_viewData}");
    }
}

/* $ObjectSelectionLookAndFeelSettingsView (6 fields) */
public record class ObjectSelectionLookAndFeelSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectSelectionLookAndFeelSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectSelectionLookAndFeelSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $BlueprintSummonPoolReference (1 fields) */
public record class BlueprintSummonPoolReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintSummonPoolReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintSummonPoolReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintDlcReference (1 fields) */
public record class BlueprintDlcReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintDlcReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintDlcReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $VirtualListLayoutSettingsVertical (5 fields) */
public record class VirtualListLayoutSettingsVertical (
    VirtualListLayoutPadding Padding,
    float Spacing,
    float Width,
    float Height,
    float VisibleZoneExpansion) : IUnityStructure
{
    public static VirtualListLayoutSettingsVertical Read(EndianBinaryReader reader)
    {
        VirtualListLayoutPadding Padding_ = VirtualListLayoutPadding.Read(reader);
        float Spacing_ = reader.ReadF32();
        float Width_ = reader.ReadF32();
        float Height_ = reader.ReadF32();
        float VisibleZoneExpansion_ = reader.ReadF32();
        
        return new(Padding_,
            Spacing_,
            Width_,
            Height_,
            VisibleZoneExpansion_);
    }

    public override string ToString() => $"VirtualListLayoutSettingsVertical\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Padding: {{ Top: {Padding.Top}, Bottom: {Padding.Bottom}, Left: {Padding.Left}, Right: {Padding.Right} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Spacing: {Spacing}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Width: {Width}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Height: {Height}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}VisibleZoneExpansion: {VisibleZoneExpansion}");
    }
}

/* $CoordinateSystemAxisRenderSettingsView (6 fields) */
public record class CoordinateSystemAxisRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static CoordinateSystemAxisRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"CoordinateSystemAxisRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $PrefabInPair (2 fields) */
public record class PrefabInPair (
    PPtr<GameObject> PrefabPairGo,
    int PrefabPairInt) : IUnityStructure
{
    public static PrefabInPair Read(EndianBinaryReader reader)
    {
        PPtr<GameObject> PrefabPairGo_ = PPtr<GameObject>.Read(reader);
        int PrefabPairInt_ = reader.ReadS32();
        
        return new(PrefabPairGo_,
            PrefabPairInt_);
    }

    public override string ToString() => $"PrefabInPair\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrefabPairGo: {PrefabPairGo}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrefabPairInt: {PrefabPairInt}");
    }
}

/* $SorterTypeEntry (2 fields) */
public record class SorterTypeEntry (
    int SorterType,
    LocalizedString Text) : IUnityStructure
{
    public static SorterTypeEntry Read(EndianBinaryReader reader)
    {
        int SorterType_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(SorterType_,
            Text_);
    }

    public override string ToString() => $"SorterTypeEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SorterType: {SorterType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $FilterTypeEntry (2 fields) */
public record class FilterTypeEntry (
    int FilterType,
    LocalizedString Text) : IUnityStructure
{
    public static FilterTypeEntry Read(EndianBinaryReader reader)
    {
        int FilterType_ = reader.ReadS32();
        LocalizedString Text_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Text */
        
        return new(FilterType_,
            Text_);
    }

    public override string ToString() => $"FilterTypeEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FilterType: {FilterType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Text: {{ \n{Text.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectGroupView (6 fields) */
public record class ObjectGroupView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectGroupView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectGroupView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $StatDamageEntry (3 fields) */
public record class StatDamageEntry (
    int Attribute,
    BlueprintBuffReference m_DamageBuff,
    BlueprintBuffReference m_DrainBuff) : IUnityStructure
{
    public static StatDamageEntry Read(EndianBinaryReader reader)
    {
        int Attribute_ = reader.ReadS32();
        BlueprintBuffReference m_DamageBuff_ = BlueprintBuffReference.Read(reader);
        reader.AlignTo(4); /* m_DamageBuff */
        BlueprintBuffReference m_DrainBuff_ = BlueprintBuffReference.Read(reader);
        reader.AlignTo(4); /* m_DrainBuff */
        
        return new(Attribute_,
            m_DamageBuff_,
            m_DrainBuff_);
    }

    public override string ToString() => $"StatDamageEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Attribute: {Attribute}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DamageBuff: {{ \n{m_DamageBuff.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DrainBuff: {{ \n{m_DrainBuff.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementBlockProjectionSettings (7 fields) */
public readonly record struct ObjectPlacementBlockProjectionSettings (
    byte _projectOnSurface,
    byte _rejectNonProjectables,
    int _projectionDirection,
    byte _canProjectOnTerrain,
    byte _canProjectOnMesh,
    byte _alignToSurfaceNormal,
    int _alignmentAxis) : IUnityStructure
{
    public static ObjectPlacementBlockProjectionSettings Read(EndianBinaryReader reader)
    {
        byte _projectOnSurface_ = reader.ReadU8();
        reader.AlignTo(4); /* _projectOnSurface */
        byte _rejectNonProjectables_ = reader.ReadU8();
        reader.AlignTo(4); /* _rejectNonProjectables */
        int _projectionDirection_ = reader.ReadS32();
        byte _canProjectOnTerrain_ = reader.ReadU8();
        reader.AlignTo(4); /* _canProjectOnTerrain */
        byte _canProjectOnMesh_ = reader.ReadU8();
        reader.AlignTo(4); /* _canProjectOnMesh */
        byte _alignToSurfaceNormal_ = reader.ReadU8();
        reader.AlignTo(4); /* _alignToSurfaceNormal */
        int _alignmentAxis_ = reader.ReadS32();
        
        return new(_projectOnSurface_,
            _rejectNonProjectables_,
            _projectionDirection_,
            _canProjectOnTerrain_,
            _canProjectOnMesh_,
            _alignToSurfaceNormal_,
            _alignmentAxis_);
    }

    public override string ToString() => $"ObjectPlacementBlockProjectionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_projectOnSurface: {_projectOnSurface}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_rejectNonProjectables: {_rejectNonProjectables}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_projectionDirection: {_projectionDirection}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_canProjectOnTerrain: {_canProjectOnTerrain}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_canProjectOnMesh: {_canProjectOnMesh}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_alignToSurfaceNormal: {_alignToSurfaceNormal}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_alignmentAxis: {_alignmentAxis}");
    }
}

/* $ObjectPlacementBlockSettingsView (6 fields) */
public record class ObjectPlacementBlockSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementBlockSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementBlockSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $StellarOrbit (3 fields) */
public record class StellarOrbit (
    PPtr<Transform> PositionForObjectOnOrbit,
    PPtr<Transform> OrbitAxis,
    PPtr<SolarSystemStellarBodyVisual> SettledStellarBody) : IUnityStructure
{
    public static StellarOrbit Read(EndianBinaryReader reader)
    {
        PPtr<Transform> PositionForObjectOnOrbit_ = PPtr<Transform>.Read(reader);
        PPtr<Transform> OrbitAxis_ = PPtr<Transform>.Read(reader);
        PPtr<SolarSystemStellarBodyVisual> SettledStellarBody_ = PPtr<SolarSystemStellarBodyVisual>.Read(reader);
        
        return new(PositionForObjectOnOrbit_,
            OrbitAxis_,
            SettledStellarBody_);
    }

    public override string ToString() => $"StellarOrbit\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PositionForObjectOnOrbit: {PositionForObjectOnOrbit}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}OrbitAxis: {OrbitAxis}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SettledStellarBody: {SettledStellarBody}");
    }
}

/* $TooltipViewData (2 fields) */
public record class TooltipViewData (
    PPtr<RectTransform> m_TooltipPlace,
    Vector2f[] m_Pivots) : IUnityStructure
{
    public static TooltipViewData Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> m_TooltipPlace_ = PPtr<RectTransform>.Read(reader);
        Vector2f[] m_Pivots_ = BuiltInArray<Vector2f>.Read(reader);
        reader.AlignTo(4); /* m_Pivots */
        
        return new(m_TooltipPlace_,
            m_Pivots_);
    }

    public override string ToString() => $"TooltipViewData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_TooltipPlace: {m_TooltipPlace}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Pivots[{m_Pivots.Length}] = {{");
        if (m_Pivots.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Vector2f _4 in m_Pivots)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ x: {_4.x}, y: {_4.y} }}\n");
            ++_4i;
        }
        if (m_Pivots.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $EventRelationTypeParams (3 fields) */
public record class EventRelationTypeParams (
    int Type,
    PPtr<Sprite> Icon,
    ColorRGBA TypeColor) : IUnityStructure
{
    public static EventRelationTypeParams Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<Sprite> Icon_ = PPtr<Sprite>.Read(reader);
        ColorRGBA TypeColor_ = ColorRGBA.Read(reader);
        
        return new(Type_,
            Icon_,
            TypeColor_);
    }

    public override string ToString() => $"EventRelationTypeParams\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TypeColor: {{ rgba: {TypeColor.rgba} }}\n");
    }
}

/* $PrefabToCategoryDropSettingsView (8 fields) */
public record class PrefabToCategoryDropSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    PrefabTagSelectionView _tagSelectionForDroppedPrefabs,
    PPtr<PrefabTagFilter> _prefabTagFilterForTagSelection) : IUnityStructure
{
    public static PrefabToCategoryDropSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        PrefabTagSelectionView _tagSelectionForDroppedPrefabs_ = PrefabTagSelectionView.Read(reader);
        reader.AlignTo(4); /* _tagSelectionForDroppedPrefabs */
        PPtr<PrefabTagFilter> _prefabTagFilterForTagSelection_ = PPtr<PrefabTagFilter>.Read(reader);
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _tagSelectionForDroppedPrefabs_,
            _prefabTagFilterForTagSelection_);
    }

    public override string ToString() => $"PrefabToCategoryDropSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_tagSelectionForDroppedPrefabs: {{ \n{_tagSelectionForDroppedPrefabs.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_prefabTagFilterForTagSelection: {_prefabTagFilterForTagSelection}");
    }
}

/* $BlueprintScriptableObject (8 fields) */
public record class BlueprintScriptableObject (
    AsciiString name,
    AsciiString AssetGuid,
    Element[] m_AllElements,
    AsciiString m_PrototypeId,
    AsciiString[] m_Overrides,
    BlueprintComponent[] Components,
    int Author,
    AsciiString Comment) : IUnityStructure
{
    public static BlueprintScriptableObject Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString AssetGuid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetGuid */
        Element[] m_AllElements_ = BuiltInArray<Element>.Read(reader);
        reader.AlignTo(4); /* m_AllElements */
        AsciiString m_PrototypeId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PrototypeId */
        AsciiString[] m_Overrides_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_Overrides */
        BlueprintComponent[] Components_ = BuiltInArray<BlueprintComponent>.Read(reader);
        reader.AlignTo(4); /* Components */
        int Author_ = reader.ReadS32();
        AsciiString Comment_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Comment */
        
        return new(name_,
            AssetGuid_,
            m_AllElements_,
            m_PrototypeId_,
            m_Overrides_,
            Components_,
            Author_,
            Comment_);
    }

    public override string ToString() => $"BlueprintScriptableObject\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetGuid: \"{AssetGuid}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AllElements[{m_AllElements.Length}] = {{");
        if (m_AllElements.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Element _4 in m_AllElements)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_AllElements.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PrototypeId: \"{m_PrototypeId}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Overrides[{m_Overrides.Length}] = {{");
        if (m_Overrides.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in m_Overrides)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (m_Overrides.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Components[{Components.Length}] = {{");
        if (Components.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BlueprintComponent _4 in Components)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Components.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Author: {Author}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Comment: \"{Comment}\"");
    }
}

/* $Element (1 fields) */
public record class Element (
    AsciiString name) : IUnityStructure
{
    public static Element Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        
        return new(name_);
    }

    public override string ToString() => $"Element\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }
}

/* $BlueprintComponent (3 fields) */
public record class BlueprintComponent (
    AsciiString name,
    int m_Flags,
    PrototypeLinkData m_PrototypeLink) : IUnityStructure
{
    public static BlueprintComponent Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        int m_Flags_ = reader.ReadS32();
        PrototypeLinkData m_PrototypeLink_ = PrototypeLinkData.Read(reader);
        reader.AlignTo(4); /* m_PrototypeLink */
        
        return new(name_,
            m_Flags_,
            m_PrototypeLink_);
    }

    public override string ToString() => $"BlueprintComponent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Flags: {m_Flags}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PrototypeLink: {{ \n{m_PrototypeLink.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $PrototypeLinkData (2 fields) */
public record class PrototypeLinkData (
    AsciiString BlueprintId,
    AsciiString ComponentName) : IUnityStructure
{
    public static PrototypeLinkData Read(EndianBinaryReader reader)
    {
        AsciiString BlueprintId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* BlueprintId */
        AsciiString ComponentName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* ComponentName */
        
        return new(BlueprintId_,
            ComponentName_);
    }

    public override string ToString() => $"PrototypeLinkData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlueprintId: \"{BlueprintId}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ComponentName: \"{ComponentName}\"");
    }
}

/* $ElementsScriptableObject (8 fields) */
public record class ElementsScriptableObject (
    AsciiString name,
    AsciiString AssetGuid,
    Element[] m_AllElements,
    AsciiString m_PrototypeId,
    AsciiString[] m_Overrides,
    BlueprintComponent[] Components,
    int Author,
    AsciiString Comment) : IUnityStructure
{
    public static ElementsScriptableObject Read(EndianBinaryReader reader)
    {
        AsciiString name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* name */
        AsciiString AssetGuid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetGuid */
        Element[] m_AllElements_ = BuiltInArray<Element>.Read(reader);
        reader.AlignTo(4); /* m_AllElements */
        AsciiString m_PrototypeId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_PrototypeId */
        AsciiString[] m_Overrides_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* m_Overrides */
        BlueprintComponent[] Components_ = BuiltInArray<BlueprintComponent>.Read(reader);
        reader.AlignTo(4); /* Components */
        int Author_ = reader.ReadS32();
        AsciiString Comment_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Comment */
        
        return new(name_,
            AssetGuid_,
            m_AllElements_,
            m_PrototypeId_,
            m_Overrides_,
            Components_,
            Author_,
            Comment_);
    }

    public override string ToString() => $"ElementsScriptableObject\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}name: \"{name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetGuid: \"{AssetGuid}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AllElements[{m_AllElements.Length}] = {{");
        if (m_AllElements.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Element _4 in m_AllElements)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_AllElements.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_PrototypeId: \"{m_PrototypeId}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Overrides[{m_Overrides.Length}] = {{");
        if (m_Overrides.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in m_Overrides)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (m_Overrides.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Components[{Components.Length}] = {{");
        if (Components.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (BlueprintComponent _4 in Components)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Components.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Author: {Author}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Comment: \"{Comment}\"");
    }
}

/* $BlueprintEncyclopediaChapterReference (1 fields) */
public record class BlueprintEncyclopediaChapterReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintEncyclopediaChapterReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintEncyclopediaChapterReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $QualityParameter (2 fields) */
public readonly record struct QualityParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static QualityParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"QualityParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $DeinterleavingParameter (2 fields) */
public readonly record struct DeinterleavingParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static DeinterleavingParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"DeinterleavingParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $ResolutionParameter (2 fields) */
public readonly record struct ResolutionParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static ResolutionParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"ResolutionParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $NoiseTypeParameter (2 fields) */
public readonly record struct NoiseTypeParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static NoiseTypeParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"NoiseTypeParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $BlurParameter (2 fields) */
public readonly record struct BlurParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static BlurParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"BlurParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $CustomAxisMouseRotationSettingsView (6 fields) */
public record class CustomAxisMouseRotationSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static CustomAxisMouseRotationSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"CustomAxisMouseRotationSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $ObjectPlacementPathTileConnectionSettingsView (6 fields) */
public record class ObjectPlacementPathTileConnectionSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementPathTileConnectionSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementPathTileConnectionSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $Texture2DLink (1 fields) */
public record class Texture2DLink (
    AsciiString AssetId) : IUnityStructure
{
    public static Texture2DLink Read(EndianBinaryReader reader)
    {
        AsciiString AssetId_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* AssetId */
        
        return new(AssetId_);
    }

    public override string ToString() => $"Texture2DLink\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AssetId: \"{AssetId}\"");
    }
}

/* $FilmGrainLookupParameter (2 fields) */
public readonly record struct FilmGrainLookupParameter (
    byte m_OverrideState,
    int m_Value) : IUnityStructure
{
    public static FilmGrainLookupParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        int m_Value_ = reader.ReadS32();
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"FilmGrainLookupParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $NoInterpTextureParameter (2 fields) */
public record class NoInterpTextureParameter (
    byte m_OverrideState,
    PPtr<Texture> m_Value) : IUnityStructure
{
    public static NoInterpTextureParameter Read(EndianBinaryReader reader)
    {
        byte m_OverrideState_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideState */
        PPtr<Texture> m_Value_ = PPtr<Texture>.Read(reader);
        
        return new(m_OverrideState_,
            m_Value_);
    }

    public override string ToString() => $"NoInterpTextureParameter\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideState: {m_OverrideState}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Value: {m_Value}");
    }
}

/* $OptionDataList (1 fields) */
public record class OptionDataList (
    OptionData[] m_Options) : IUnityStructure
{
    public static OptionDataList Read(EndianBinaryReader reader)
    {
        OptionData[] m_Options_ = BuiltInArray<OptionData>.Read(reader);
        reader.AlignTo(4); /* m_Options */
        
        return new(m_Options_);
    }

    public override string ToString() => $"OptionDataList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Options[{m_Options.Length}] = {{");
        if (m_Options.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (OptionData _4 in m_Options)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Options.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $OptionData (2 fields) */
public record class OptionData (
    AsciiString m_Text,
    PPtr<Sprite> m_Image) : IUnityStructure
{
    public static OptionData Read(EndianBinaryReader reader)
    {
        AsciiString m_Text_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* m_Text */
        PPtr<Sprite> m_Image_ = PPtr<Sprite>.Read(reader);
        
        return new(m_Text_,
            m_Image_);
    }

    public override string ToString() => $"OptionData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Text: \"{m_Text}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Image: {m_Image}");
    }
}

/* $DropdownEvent (1 fields) */
public record class DropdownEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static DropdownEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"DropdownEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ObjectPlacementPathTileConnectionTypeSettingsView (6 fields) */
public record class ObjectPlacementPathTileConnectionTypeSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectPlacementPathTileConnectionTypeSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectPlacementPathTileConnectionTypeSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $AkGameObjListenerList (2 fields) */
public record class AkGameObjListenerList (
    PPtr<AkAudioListener>[] initialListenerList,
    byte useDefaultListeners) : IUnityStructure
{
    public static AkGameObjListenerList Read(EndianBinaryReader reader)
    {
        PPtr<AkAudioListener>[] initialListenerList_ = BuiltInArray<PPtr<AkAudioListener>>.Read(reader);
        byte useDefaultListeners_ = reader.ReadU8();
        reader.AlignTo(4); /* useDefaultListeners */
        
        return new(initialListenerList_,
            useDefaultListeners_);
    }

    public override string ToString() => $"AkGameObjListenerList\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}initialListenerList[{initialListenerList.Length}] = {{");
        if (initialListenerList.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AkAudioListener> _4 in initialListenerList)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (initialListenerList.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useDefaultListeners: {useDefaultListeners}");
    }
}

/* $AkGameObjPositionOffsetData (2 fields) */
public record class AkGameObjPositionOffsetData (
    byte KeepMe,
    Vector3f positionOffset) : IUnityStructure
{
    public static AkGameObjPositionOffsetData Read(EndianBinaryReader reader)
    {
        byte KeepMe_ = reader.ReadU8();
        reader.AlignTo(4); /* KeepMe */
        Vector3f positionOffset_ = Vector3f.Read(reader);
        
        return new(KeepMe_,
            positionOffset_);
    }

    public override string ToString() => $"AkGameObjPositionOffsetData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}KeepMe: {KeepMe}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}positionOffset: {{ x: {positionOffset.x}, y: {positionOffset.y}, z: {positionOffset.z} }}\n");
    }
}

/* $TransformNoiseParams (3 fields) */
public record class TransformNoiseParams (
    NoiseParams X,
    NoiseParams Y,
    NoiseParams Z) : IUnityStructure
{
    public static TransformNoiseParams Read(EndianBinaryReader reader)
    {
        NoiseParams X_ = NoiseParams.Read(reader);
        reader.AlignTo(4); /* X */
        NoiseParams Y_ = NoiseParams.Read(reader);
        reader.AlignTo(4); /* Y */
        NoiseParams Z_ = NoiseParams.Read(reader);
        reader.AlignTo(4); /* Z */
        
        return new(X_,
            Y_,
            Z_);
    }

    public override string ToString() => $"TransformNoiseParams\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}X: {{ Frequency: {X.Frequency}, Amplitude: {X.Amplitude}, Constant: {X.Constant} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Y: {{ Frequency: {Y.Frequency}, Amplitude: {Y.Amplitude}, Constant: {Y.Constant} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Z: {{ Frequency: {Z.Frequency}, Amplitude: {Z.Amplitude}, Constant: {Z.Constant} }}\n");
    }
}

/* $NoiseParams (3 fields) */
public readonly record struct NoiseParams (
    float Frequency,
    float Amplitude,
    byte Constant) : IUnityStructure
{
    public static NoiseParams Read(EndianBinaryReader reader)
    {
        float Frequency_ = reader.ReadF32();
        float Amplitude_ = reader.ReadF32();
        byte Constant_ = reader.ReadU8();
        reader.AlignTo(4); /* Constant */
        
        return new(Frequency_,
            Amplitude_,
            Constant_);
    }

    public override string ToString() => $"NoiseParams\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Frequency: {Frequency}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Amplitude: {Amplitude}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Constant: {Constant}");
    }
}

/* $ObjectPlacementPathSettingsView (7 fields) */
public record class ObjectPlacementPathSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    ActiveObjectPlacementPathTileConnectionConfigurationView _activeObjectPlacementPathTileConnectionConfigurationView) : IUnityStructure
{
    public static ObjectPlacementPathSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        ActiveObjectPlacementPathTileConnectionConfigurationView _activeObjectPlacementPathTileConnectionConfigurationView_ = ActiveObjectPlacementPathTileConnectionConfigurationView.Read(reader);
        reader.AlignTo(4); /* _activeObjectPlacementPathTileConnectionConfigurationView */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _activeObjectPlacementPathTileConnectionConfigurationView_);
    }

    public override string ToString() => $"ObjectPlacementPathSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_activeObjectPlacementPathTileConnectionConfigurationView: {{ \n{_activeObjectPlacementPathTileConnectionConfigurationView.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ActiveObjectPlacementPathTileConnectionConfigurationView (6 fields) */
public record class ActiveObjectPlacementPathTileConnectionConfigurationView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ActiveObjectPlacementPathTileConnectionConfigurationView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ActiveObjectPlacementPathTileConnectionConfigurationView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $BlueprintQuestObjectiveReference (1 fields) */
public record class BlueprintQuestObjectiveReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintQuestObjectiveReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintQuestObjectiveReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $float2 (2 fields) */
public readonly record struct float2 (
    float x,
    float y) : IUnityStructure
{
    public static float2 Read(EndianBinaryReader reader)
    {
        float x_ = reader.ReadF32();
        float y_ = reader.ReadF32();
        
        return new(x_,
            y_);
    }

    public override string ToString() => $"float2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}x: {x}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}y: {y}");
    }
}

/* $Entry_3 (2 fields) */
public record class Entry_3 (
    AsciiString SoundSwitch,
    AsciiString[] MaskNames) : IUnityStructure
{
    public static Entry_3 Read(EndianBinaryReader reader)
    {
        AsciiString SoundSwitch_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* SoundSwitch */
        AsciiString[] MaskNames_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* MaskNames */
        
        return new(SoundSwitch_,
            MaskNames_);
    }

    public override string ToString() => $"Entry_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SoundSwitch: \"{SoundSwitch}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaskNames[{MaskNames.Length}] = {{");
        if (MaskNames.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in MaskNames)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (MaskNames.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Setting_1 (2 fields) */
public record class Setting_1 (
    int Type,
    AsciiString[] SortedMaskNames) : IUnityStructure
{
    public static Setting_1 Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        AsciiString[] SortedMaskNames_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* SortedMaskNames */
        
        return new(Type_,
            SortedMaskNames_);
    }

    public override string ToString() => $"Setting_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SortedMaskNames[{SortedMaskNames.Length}] = {{");
        if (SortedMaskNames.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in SortedMaskNames)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (SortedMaskNames.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SurfaceDebugInfo (2 fields) */
public record class SurfaceDebugInfo (
    int SoundSwitch,
    ColorRGBA_1 GizmoColor) : IUnityStructure
{
    public static SurfaceDebugInfo Read(EndianBinaryReader reader)
    {
        int SoundSwitch_ = reader.ReadS32();
        ColorRGBA_1 GizmoColor_ = ColorRGBA_1.Read(reader);
        
        return new(SoundSwitch_,
            GizmoColor_);
    }

    public override string ToString() => $"SurfaceDebugInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SoundSwitch: {SoundSwitch}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}GizmoColor: {{ r: {GizmoColor.r}, g: {GizmoColor.g}, b: {GizmoColor.b}, a: {GizmoColor.a} }}\n");
    }
}

/* $SquadSettings (2 fields) */
public record class SquadSettings (
    PPtr<UnitSpawner>[] Spawners,
    PPtr<UnitSpawner> Leader) : IUnityStructure
{
    public static SquadSettings Read(EndianBinaryReader reader)
    {
        PPtr<UnitSpawner>[] Spawners_ = BuiltInArray<PPtr<UnitSpawner>>.Read(reader);
        PPtr<UnitSpawner> Leader_ = PPtr<UnitSpawner>.Read(reader);
        
        return new(Spawners_,
            Leader_);
    }

    public override string ToString() => $"SquadSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Spawners[{Spawners.Length}] = {{");
        if (Spawners.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<UnitSpawner> _4 in Spawners)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (Spawners.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Leader: {Leader}");
    }
}

/* $TechUseRestrictionSettings (4 fields) */
public readonly record struct TechUseRestrictionSettings (
    int Difficulty,
    int DC,
    byte StartUnlocked,
    byte IsPartyCheck) : IUnityStructure
{
    public static TechUseRestrictionSettings Read(EndianBinaryReader reader)
    {
        int Difficulty_ = reader.ReadS32();
        int DC_ = reader.ReadS32();
        byte StartUnlocked_ = reader.ReadU8();
        reader.AlignTo(4); /* StartUnlocked */
        byte IsPartyCheck_ = reader.ReadU8();
        reader.AlignTo(4); /* IsPartyCheck */
        
        return new(Difficulty_,
            DC_,
            StartUnlocked_,
            IsPartyCheck_);
    }

    public override string ToString() => $"TechUseRestrictionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Difficulty: {Difficulty}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DC: {DC}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StartUnlocked: {StartUnlocked}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsPartyCheck: {IsPartyCheck}");
    }
}

/* $ShaderResources_3 (4 fields) */
public record class ShaderResources_3 (
    PPtr<Shader> FogOfWarShader,
    PPtr<Shader> ScreenSpaceFogOfWarShader,
    PPtr<Shader> BlurShader,
    PPtr<Shader> BlitShader) : IUnityStructure
{
    public static ShaderResources_3 Read(EndianBinaryReader reader)
    {
        PPtr<Shader> FogOfWarShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> ScreenSpaceFogOfWarShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BlurShader_ = PPtr<Shader>.Read(reader);
        PPtr<Shader> BlitShader_ = PPtr<Shader>.Read(reader);
        
        return new(FogOfWarShader_,
            ScreenSpaceFogOfWarShader_,
            BlurShader_,
            BlitShader_);
    }

    public override string ToString() => $"ShaderResources_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FogOfWarShader: {FogOfWarShader}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ScreenSpaceFogOfWarShader: {ScreenSpaceFogOfWarShader}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlurShader: {BlurShader}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlitShader: {BlitShader}");
    }
}

/* $SubmitEvent (1 fields) */
public record class SubmitEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static SubmitEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"SubmitEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SelectionEvent (1 fields) */
public record class SelectionEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static SelectionEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"SelectionEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TextSelectionEvent (1 fields) */
public record class TextSelectionEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static TextSelectionEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"TextSelectionEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $OnChangeEvent (1 fields) */
public record class OnChangeEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static OnChangeEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"OnChangeEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TouchScreenKeyboardEvent (1 fields) */
public record class TouchScreenKeyboardEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static TouchScreenKeyboardEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"TouchScreenKeyboardEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $BlueprintSectorMapPointReference (1 fields) */
public record class BlueprintSectorMapPointReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintSectorMapPointReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintSectorMapPointReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $Object2DMassEraseShape (1 fields) */
public record class Object2DMassEraseShape (
    EllipseObjectInteractionShape _circleShape) : IUnityStructure
{
    public static Object2DMassEraseShape Read(EndianBinaryReader reader)
    {
        EllipseObjectInteractionShape _circleShape_ = EllipseObjectInteractionShape.Read(reader);
        
        return new(_circleShape_);
    }

    public override string ToString() => $"Object2DMassEraseShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_circleShape: {{ \n{_circleShape.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Object3DMassEraseShape (1 fields) */
public record class Object3DMassEraseShape (
    XZOrientedEllipseObjectInteractionShape _circleShape) : IUnityStructure
{
    public static Object3DMassEraseShape Read(EndianBinaryReader reader)
    {
        XZOrientedEllipseObjectInteractionShape _circleShape_ = XZOrientedEllipseObjectInteractionShape.Read(reader);
        
        return new(_circleShape_);
    }

    public override string ToString() => $"Object3DMassEraseShape\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_circleShape: {{ \n{_circleShape.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StartEndModifier (8 fields) */
public record class StartEndModifier (
    byte addPoints,
    byte addStartPoint,
    byte addEndPoint,
    int exactStartPoint,
    int exactEndPoint,
    byte useRaycasting,
    BitField mask,
    byte useGraphRaycasting) : IUnityStructure
{
    public static StartEndModifier Read(EndianBinaryReader reader)
    {
        byte addPoints_ = reader.ReadU8();
        reader.AlignTo(4); /* addPoints */
        byte addStartPoint_ = reader.ReadU8();
        reader.AlignTo(4); /* addStartPoint */
        byte addEndPoint_ = reader.ReadU8();
        reader.AlignTo(4); /* addEndPoint */
        int exactStartPoint_ = reader.ReadS32();
        int exactEndPoint_ = reader.ReadS32();
        byte useRaycasting_ = reader.ReadU8();
        reader.AlignTo(4); /* useRaycasting */
        BitField mask_ = BitField.Read(reader);
        byte useGraphRaycasting_ = reader.ReadU8();
        reader.AlignTo(4); /* useGraphRaycasting */
        
        return new(addPoints_,
            addStartPoint_,
            addEndPoint_,
            exactStartPoint_,
            exactEndPoint_,
            useRaycasting_,
            mask_,
            useGraphRaycasting_);
    }

    public override string ToString() => $"StartEndModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}addPoints: {addPoints}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}addStartPoint: {addStartPoint}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}addEndPoint: {addEndPoint}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exactStartPoint: {exactStartPoint}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}exactEndPoint: {exactEndPoint}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useRaycasting: {useRaycasting}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mask: {{ m_Bits: {mask.m_Bits} }}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useGraphRaycasting: {useGraphRaycasting}");
    }
}

/* $GraphMask (1 fields) */
public readonly record struct GraphMask (
    int @value) : IUnityStructure
{
    public static GraphMask Read(EndianBinaryReader reader)
    {
        int @value_ = reader.ReadS32();
        
        return new(@value_);
    }

    public override string ToString() => $"GraphMask\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }
}

/* $CellDecalDecorator (1 fields) */
public record class CellDecalDecorator (
    CellDecalSetEntry[] m_DecorationSet) : IUnityStructure
{
    public static CellDecalDecorator Read(EndianBinaryReader reader)
    {
        CellDecalSetEntry[] m_DecorationSet_ = BuiltInArray<CellDecalSetEntry>.Read(reader);
        reader.AlignTo(4); /* m_DecorationSet */
        
        return new(m_DecorationSet_);
    }

    public override string ToString() => $"CellDecalDecorator\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_DecorationSet[{m_DecorationSet.Length}] = {{");
        if (m_DecorationSet.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CellDecalSetEntry _4 in m_DecorationSet)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_DecorationSet.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CellDecalSetEntry (2 fields) */
public record class CellDecalSetEntry (
    int ActionType,
    PPtr<Material> Material) : IUnityStructure
{
    public static CellDecalSetEntry Read(EndianBinaryReader reader)
    {
        int ActionType_ = reader.ReadS32();
        PPtr<Material> Material_ = PPtr<Material>.Read(reader);
        
        return new(ActionType_,
            Material_);
    }

    public override string ToString() => $"CellDecalSetEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ActionType: {ActionType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Material: {Material}");
    }
}

/* $LoreXenosRestrictionSettings (4 fields) */
public readonly record struct LoreXenosRestrictionSettings (
    int Difficulty,
    int DC,
    byte StartUnlocked,
    byte IsPartyCheck) : IUnityStructure
{
    public static LoreXenosRestrictionSettings Read(EndianBinaryReader reader)
    {
        int Difficulty_ = reader.ReadS32();
        int DC_ = reader.ReadS32();
        byte StartUnlocked_ = reader.ReadU8();
        reader.AlignTo(4); /* StartUnlocked */
        byte IsPartyCheck_ = reader.ReadU8();
        reader.AlignTo(4); /* IsPartyCheck */
        
        return new(Difficulty_,
            DC_,
            StartUnlocked_,
            IsPartyCheck_);
    }

    public override string ToString() => $"LoreXenosRestrictionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Difficulty: {Difficulty}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}DC: {DC}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StartUnlocked: {StartUnlocked}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsPartyCheck: {IsPartyCheck}");
    }
}

/* $ElementInfo (4 fields) */
public record class ElementInfo (
    AsciiString _name,
    int _elementType,
    byte _enabled,
    ElementWithSourceInfo[] _elements) : IUnityStructure
{
    public static ElementInfo Read(EndianBinaryReader reader)
    {
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        int _elementType_ = reader.ReadS32();
        byte _enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* _enabled */
        ElementWithSourceInfo[] _elements_ = BuiltInArray<ElementWithSourceInfo>.Read(reader);
        reader.AlignTo(4); /* _elements */
        
        return new(_name_,
            _elementType_,
            _enabled_,
            _elements_);
    }

    public override string ToString() => $"ElementInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementType: {_elementType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enabled: {_enabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_elements[{_elements.Length}] = {{");
        if (_elements.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementWithSourceInfo _4 in _elements)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (_elements.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ElementWithSourceInfo (7 fields) */
public record class ElementWithSourceInfo (
    AsciiString _name,
    int _elementType,
    byte _enabled,
    int _actionId,
    int _coordinateMode,
    float _absoluteToRelativeSensitivity,
    float _repeatRate) : IUnityStructure
{
    public static ElementWithSourceInfo Read(EndianBinaryReader reader)
    {
        AsciiString _name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _name */
        int _elementType_ = reader.ReadS32();
        byte _enabled_ = reader.ReadU8();
        reader.AlignTo(4); /* _enabled */
        int _actionId_ = reader.ReadS32();
        int _coordinateMode_ = reader.ReadS32();
        float _absoluteToRelativeSensitivity_ = reader.ReadF32();
        float _repeatRate_ = reader.ReadF32();
        
        return new(_name_,
            _elementType_,
            _enabled_,
            _actionId_,
            _coordinateMode_,
            _absoluteToRelativeSensitivity_,
            _repeatRate_);
    }

    public override string ToString() => $"ElementWithSourceInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_name: \"{_name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_elementType: {_elementType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_enabled: {_enabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_actionId: {_actionId}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_coordinateMode: {_coordinateMode}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_absoluteToRelativeSensitivity: {_absoluteToRelativeSensitivity}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_repeatRate: {_repeatRate}");
    }
}

/* $ButtonStateChangedHandler (1 fields) */
public record class ButtonStateChangedHandler (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ButtonStateChangedHandler Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ButtonStateChangedHandler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AxisValueChangedHandler (1 fields) */
public record class AxisValueChangedHandler (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static AxisValueChangedHandler Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"AxisValueChangedHandler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $EnabledStateChangedHandler (1 fields) */
public record class EnabledStateChangedHandler (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static EnabledStateChangedHandler Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"EnabledStateChangedHandler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $ScreenPositionChangedHandler (1 fields) */
public record class ScreenPositionChangedHandler (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static ScreenPositionChangedHandler Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"ScreenPositionChangedHandler\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AnimationStyleEntry (3 fields) */
public record class AnimationStyleEntry (
    int Style,
    AnimationEntry_1 Default,
    AnimationEntryWeaponOverride[] Overrides) : IUnityStructure
{
    public static AnimationStyleEntry Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        AnimationEntry_1 Default_ = AnimationEntry_1.Read(reader);
        AnimationEntryWeaponOverride[] Overrides_ = BuiltInArray<AnimationEntryWeaponOverride>.Read(reader);
        
        return new(Style_,
            Default_,
            Overrides_);
    }

    public override string ToString() => $"AnimationStyleEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Default: {{ \n{Default.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Overrides[{Overrides.Length}] = {{");
        if (Overrides.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AnimationEntryWeaponOverride _4 in Overrides)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (Overrides.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $AnimationEntry_1 (3 fields) */
public record class AnimationEntry_1 (
    float BlendToLoopedTime,
    float BlendToCastTime,
    PPtr<AnimationClipWrapper> CastClip) : IUnityStructure
{
    public static AnimationEntry_1 Read(EndianBinaryReader reader)
    {
        float BlendToLoopedTime_ = reader.ReadF32();
        float BlendToCastTime_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> CastClip_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(BlendToLoopedTime_,
            BlendToCastTime_,
            CastClip_);
    }

    public override string ToString() => $"AnimationEntry_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlendToLoopedTime: {BlendToLoopedTime}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}BlendToCastTime: {BlendToCastTime}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CastClip: {CastClip}");
    }
}

/* $AnimationEntryWeaponOverride (2 fields) */
public record class AnimationEntryWeaponOverride (
    int Weapon,
    AnimationEntry_1 Entry) : IUnityStructure
{
    public static AnimationEntryWeaponOverride Read(EndianBinaryReader reader)
    {
        int Weapon_ = reader.ReadS32();
        AnimationEntry_1 Entry_ = AnimationEntry_1.Read(reader);
        
        return new(Weapon_,
            Entry_);
    }

    public override string ToString() => $"AnimationEntryWeaponOverride\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Weapon: {Weapon}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Entry: {{ \n{Entry.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SpineEffector (3 fields) */
public readonly record struct SpineEffector (
    int effectorType,
    float horizontalWeight,
    float verticalWeight) : IUnityStructure
{
    public static SpineEffector Read(EndianBinaryReader reader)
    {
        int effectorType_ = reader.ReadS32();
        float horizontalWeight_ = reader.ReadF32();
        float verticalWeight_ = reader.ReadF32();
        
        return new(effectorType_,
            horizontalWeight_,
            verticalWeight_);
    }

    public override string ToString() => $"SpineEffector\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}effectorType: {effectorType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}horizontalWeight: {horizontalWeight}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}verticalWeight: {verticalWeight}");
    }
}

/* $StageSettings (4 fields) */
public record class StageSettings (
    int Type,
    PPtr<GameObject> StaticPrefab,
    PPtr<GameObject> FXOnEnter,
    AsciiString SFXOnEnter) : IUnityStructure
{
    public static StageSettings Read(EndianBinaryReader reader)
    {
        int Type_ = reader.ReadS32();
        PPtr<GameObject> StaticPrefab_ = PPtr<GameObject>.Read(reader);
        PPtr<GameObject> FXOnEnter_ = PPtr<GameObject>.Read(reader);
        AsciiString SFXOnEnter_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* SFXOnEnter */
        
        return new(Type_,
            StaticPrefab_,
            FXOnEnter_,
            SFXOnEnter_);
    }

    public override string ToString() => $"StageSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Type: {Type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}StaticPrefab: {StaticPrefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}FXOnEnter: {FXOnEnter}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SFXOnEnter: \"{SFXOnEnter}\"");
    }
}

/* $AreaTransitionSettings (14 fields) */
public record class AreaTransitionSettings (
    BlueprintAreaEnterPointReference m_AreaEnterPoint,
    BlueprintAreaTransitionReference m_Blueprint,
    BlueprintUnlockableFlagReference m_VisibilityFlag,
    BlueprintEtudeReference m_VisibilityEtude,
    int TooltipIndex,
    byte m_OverrideProximityDistance,
    float m_ProximityDistance,
    byte ReturnToNearestEnterPoint,
    byte ReturnToSpecificEnterPoint,
    BlueprintAreaEnterPointReference m_ReturnToEnterPoint,
    byte AddMapMarker,
    int AutoSaveMode,
    byte SuppressLoot,
    byte EnableInCombat) : IUnityStructure
{
    public static AreaTransitionSettings Read(EndianBinaryReader reader)
    {
        BlueprintAreaEnterPointReference m_AreaEnterPoint_ = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* m_AreaEnterPoint */
        BlueprintAreaTransitionReference m_Blueprint_ = BlueprintAreaTransitionReference.Read(reader);
        reader.AlignTo(4); /* m_Blueprint */
        BlueprintUnlockableFlagReference m_VisibilityFlag_ = BlueprintUnlockableFlagReference.Read(reader);
        reader.AlignTo(4); /* m_VisibilityFlag */
        BlueprintEtudeReference m_VisibilityEtude_ = BlueprintEtudeReference.Read(reader);
        reader.AlignTo(4); /* m_VisibilityEtude */
        int TooltipIndex_ = reader.ReadS32();
        byte m_OverrideProximityDistance_ = reader.ReadU8();
        reader.AlignTo(4); /* m_OverrideProximityDistance */
        float m_ProximityDistance_ = reader.ReadF32();
        byte ReturnToNearestEnterPoint_ = reader.ReadU8();
        reader.AlignTo(4); /* ReturnToNearestEnterPoint */
        byte ReturnToSpecificEnterPoint_ = reader.ReadU8();
        reader.AlignTo(4); /* ReturnToSpecificEnterPoint */
        BlueprintAreaEnterPointReference m_ReturnToEnterPoint_ = BlueprintAreaEnterPointReference.Read(reader);
        reader.AlignTo(4); /* m_ReturnToEnterPoint */
        byte AddMapMarker_ = reader.ReadU8();
        reader.AlignTo(4); /* AddMapMarker */
        int AutoSaveMode_ = reader.ReadS32();
        byte SuppressLoot_ = reader.ReadU8();
        reader.AlignTo(4); /* SuppressLoot */
        byte EnableInCombat_ = reader.ReadU8();
        reader.AlignTo(4); /* EnableInCombat */
        
        return new(m_AreaEnterPoint_,
            m_Blueprint_,
            m_VisibilityFlag_,
            m_VisibilityEtude_,
            TooltipIndex_,
            m_OverrideProximityDistance_,
            m_ProximityDistance_,
            ReturnToNearestEnterPoint_,
            ReturnToSpecificEnterPoint_,
            m_ReturnToEnterPoint_,
            AddMapMarker_,
            AutoSaveMode_,
            SuppressLoot_,
            EnableInCombat_);
    }

    public override string ToString() => $"AreaTransitionSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_AreaEnterPoint: {{ \n{m_AreaEnterPoint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Blueprint: {{ \n{m_Blueprint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_VisibilityFlag: {{ \n{m_VisibilityFlag.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_VisibilityEtude: {{ \n{m_VisibilityEtude.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}TooltipIndex: {TooltipIndex}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_OverrideProximityDistance: {m_OverrideProximityDistance}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_ProximityDistance: {m_ProximityDistance}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ReturnToNearestEnterPoint: {ReturnToNearestEnterPoint}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ReturnToSpecificEnterPoint: {ReturnToSpecificEnterPoint}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_ReturnToEnterPoint: {{ \n{m_ReturnToEnterPoint.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AddMapMarker: {AddMapMarker}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}AutoSaveMode: {AutoSaveMode}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SuppressLoot: {SuppressLoot}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnableInCombat: {EnableInCombat}");
    }
}

/* $BlueprintAreaTransitionReference (1 fields) */
public record class BlueprintAreaTransitionReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintAreaTransitionReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintAreaTransitionReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintUnlockableFlagReference (1 fields) */
public record class BlueprintUnlockableFlagReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintUnlockableFlagReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintUnlockableFlagReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $BlueprintEtudeReference (1 fields) */
public record class BlueprintEtudeReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintEtudeReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintEtudeReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $EquipmentStyleSetting (2 fields) */
public record class EquipmentStyleSetting (
    int Style,
    EquipmentSlotSetting_1[] m_Slots) : IUnityStructure
{
    public static EquipmentStyleSetting Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        EquipmentSlotSetting_1[] m_Slots_ = BuiltInArray<EquipmentSlotSetting_1>.Read(reader);
        
        return new(Style_,
            m_Slots_);
    }

    public override string ToString() => $"EquipmentStyleSetting\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Slots[{m_Slots.Length}] = {{");
        if (m_Slots.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (EquipmentSlotSetting_1 _4 in m_Slots)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (m_Slots.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $EquipmentSlotSetting_1 (6 fields) */
public record class EquipmentSlotSetting_1 (
    int Slot,
    PPtr<AnimationClipWrapper> ClipWrapper,
    PPtr<AnimationClipWrapper> IdleToCombatClipWrapper,
    PPtr<AnimationClipWrapper> InCombatClipWrapper,
    PPtr<AnimationClipWrapper> CombatToIdleClipWrapper,
    PPtr<AnimationClipWrapper> HalfAnimationClipWrapper) : IUnityStructure
{
    public static EquipmentSlotSetting_1 Read(EndianBinaryReader reader)
    {
        int Slot_ = reader.ReadS32();
        PPtr<AnimationClipWrapper> ClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> IdleToCombatClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> InCombatClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> CombatToIdleClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> HalfAnimationClipWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        
        return new(Slot_,
            ClipWrapper_,
            IdleToCombatClipWrapper_,
            InCombatClipWrapper_,
            CombatToIdleClipWrapper_,
            HalfAnimationClipWrapper_);
    }

    public override string ToString() => $"EquipmentSlotSetting_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Slot: {Slot}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ClipWrapper: {ClipWrapper}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IdleToCombatClipWrapper: {IdleToCombatClipWrapper}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}InCombatClipWrapper: {InCombatClipWrapper}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CombatToIdleClipWrapper: {CombatToIdleClipWrapper}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}HalfAnimationClipWrapper: {HalfAnimationClipWrapper}");
    }
}

/* $StarshipSlotDescription (3 fields) */
public record class StarshipSlotDescription (
    int Priority,
    PPtr<GameObject> Prefab,
    RequiredSlotVariant[] RequiredSlots) : IUnityStructure
{
    public static StarshipSlotDescription Read(EndianBinaryReader reader)
    {
        int Priority_ = reader.ReadS32();
        PPtr<GameObject> Prefab_ = PPtr<GameObject>.Read(reader);
        RequiredSlotVariant[] RequiredSlots_ = BuiltInArray<RequiredSlotVariant>.Read(reader);
        
        return new(Priority_,
            Prefab_,
            RequiredSlots_);
    }

    public override string ToString() => $"StarshipSlotDescription\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Priority: {Priority}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Prefab: {Prefab}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RequiredSlots[{RequiredSlots.Length}] = {{");
        if (RequiredSlots.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (RequiredSlotVariant _4 in RequiredSlots)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ SlotType: {_4.SlotType} }}\n");
            ++_4i;
        }
        if (RequiredSlots.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $RequiredSlotVariant (1 fields) */
public readonly record struct RequiredSlotVariant (
    int SlotType) : IUnityStructure
{
    public static RequiredSlotVariant Read(EndianBinaryReader reader)
    {
        int SlotType_ = reader.ReadS32();
        
        return new(SlotType_);
    }

    public override string ToString() => $"RequiredSlotVariant\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SlotType: {SlotType}");
    }
}

/* $ClassOverrideData (3 fields) */
public record class ClassOverrideData (
    BlueprintCharacterClassReference m_Class,
    float Chance,
    PPtr<AnimationClipWrapper>[] ClipWrappers) : IUnityStructure
{
    public static ClassOverrideData Read(EndianBinaryReader reader)
    {
        BlueprintCharacterClassReference m_Class_ = BlueprintCharacterClassReference.Read(reader);
        reader.AlignTo(4); /* m_Class */
        float Chance_ = reader.ReadF32();
        PPtr<AnimationClipWrapper>[] ClipWrappers_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(m_Class_,
            Chance_,
            ClipWrappers_);
    }

    public override string ToString() => $"ClassOverrideData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Class: {{ \n{m_Class.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Chance: {Chance}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClipWrappers[{ClipWrappers.Length}] = {{");
        if (ClipWrappers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in ClipWrappers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ClipWrappers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $BlueprintCharacterClassReference (1 fields) */
public record class BlueprintCharacterClassReference (
    AsciiString guid) : IUnityStructure
{
    public static BlueprintCharacterClassReference Read(EndianBinaryReader reader)
    {
        AsciiString guid_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* guid */
        
        return new(guid_);
    }

    public override string ToString() => $"BlueprintCharacterClassReference\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}guid: \"{guid}\"");
    }
}

/* $RaceOverrideData (3 fields) */
public record class RaceOverrideData (
    BlueprintRaceReference m_Race,
    float Chance,
    PPtr<AnimationClipWrapper>[] ClipWrappers) : IUnityStructure
{
    public static RaceOverrideData Read(EndianBinaryReader reader)
    {
        BlueprintRaceReference m_Race_ = BlueprintRaceReference.Read(reader);
        reader.AlignTo(4); /* m_Race */
        float Chance_ = reader.ReadF32();
        PPtr<AnimationClipWrapper>[] ClipWrappers_ = BuiltInArray<PPtr<AnimationClipWrapper>>.Read(reader);
        
        return new(m_Race_,
            Chance_,
            ClipWrappers_);
    }

    public override string ToString() => $"RaceOverrideData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_Race: {{ \n{m_Race.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Chance: {Chance}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ClipWrappers[{ClipWrappers.Length}] = {{");
        if (ClipWrappers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<AnimationClipWrapper> _4 in ClipWrappers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ClipWrappers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $CompassAnimationElement (3 fields) */
public record class CompassAnimationElement (
    PPtr<RectTransform> m_Transform,
    int m_RotationFramesCount,
    int m_DelayFramesCount) : IUnityStructure
{
    public static CompassAnimationElement Read(EndianBinaryReader reader)
    {
        PPtr<RectTransform> m_Transform_ = PPtr<RectTransform>.Read(reader);
        int m_RotationFramesCount_ = reader.ReadS32();
        int m_DelayFramesCount_ = reader.ReadS32();
        
        return new(m_Transform_,
            m_RotationFramesCount_,
            m_DelayFramesCount_);
    }

    public override string ToString() => $"CompassAnimationElement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_Transform: {m_Transform}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_RotationFramesCount: {m_RotationFramesCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}m_DelayFramesCount: {m_DelayFramesCount}");
    }
}

/* $AnimationEntry_2 (5 fields) */
public record class AnimationEntry_2 (
    PPtr<AnimationClipWrapper> LoopWrapper,
    PPtr<AnimationClipWrapper> EnterWrapper,
    PPtr<AnimationClipWrapper> ExitWrapper,
    int Style,
    byte IsOffHand) : IUnityStructure
{
    public static AnimationEntry_2 Read(EndianBinaryReader reader)
    {
        PPtr<AnimationClipWrapper> LoopWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> EnterWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> ExitWrapper_ = PPtr<AnimationClipWrapper>.Read(reader);
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        
        return new(LoopWrapper_,
            EnterWrapper_,
            ExitWrapper_,
            Style_,
            IsOffHand_);
    }

    public override string ToString() => $"AnimationEntry_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}LoopWrapper: {LoopWrapper}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}EnterWrapper: {EnterWrapper}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ExitWrapper: {ExitWrapper}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }
}

/* $WalkingStyleLayer (13 fields) */
public record class WalkingStyleLayer (
    AnimationCurve RunInCurve,
    AnimationCurve RunOutCurve,
    float RunOutDistance,
    PPtr<AnimationClipWrapper> RunIn,
    PPtr<AnimationClipWrapper> RunOut,
    PPtr<AnimationClipWrapper> Crouch,
    float CrouchSpeed,
    PPtr<AnimationClipWrapper> Walking,
    float WalkingSpeed,
    PPtr<AnimationClipWrapper> Run,
    float RunSpeed,
    PPtr<AnimationClipWrapper> Sprint,
    float SprintSpeed) : IUnityStructure
{
    public static WalkingStyleLayer Read(EndianBinaryReader reader)
    {
        AnimationCurve RunInCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* RunInCurve */
        AnimationCurve RunOutCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* RunOutCurve */
        float RunOutDistance_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> RunIn_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> RunOut_ = PPtr<AnimationClipWrapper>.Read(reader);
        PPtr<AnimationClipWrapper> Crouch_ = PPtr<AnimationClipWrapper>.Read(reader);
        float CrouchSpeed_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> Walking_ = PPtr<AnimationClipWrapper>.Read(reader);
        float WalkingSpeed_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> Run_ = PPtr<AnimationClipWrapper>.Read(reader);
        float RunSpeed_ = reader.ReadF32();
        PPtr<AnimationClipWrapper> Sprint_ = PPtr<AnimationClipWrapper>.Read(reader);
        float SprintSpeed_ = reader.ReadF32();
        
        return new(RunInCurve_,
            RunOutCurve_,
            RunOutDistance_,
            RunIn_,
            RunOut_,
            Crouch_,
            CrouchSpeed_,
            Walking_,
            WalkingSpeed_,
            Run_,
            RunSpeed_,
            Sprint_,
            SprintSpeed_);
    }

    public override string ToString() => $"WalkingStyleLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RunInCurve: {{ \n{RunInCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RunOutCurve: {{ \n{RunOutCurve.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RunOutDistance: {RunOutDistance}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RunIn: {RunIn}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RunOut: {RunOut}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Crouch: {Crouch}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}CrouchSpeed: {CrouchSpeed}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Walking: {Walking}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}WalkingSpeed: {WalkingSpeed}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Run: {Run}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RunSpeed: {RunSpeed}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Sprint: {Sprint}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SprintSpeed: {SprintSpeed}");
    }
}

/* $WeaponStyleWalkingLayer (3 fields) */
public record class WeaponStyleWalkingLayer (
    int Style,
    byte IsOffHand,
    WalkingStyleLayer WalkingStyleLayer_) : IUnityStructure
{
    public static WeaponStyleWalkingLayer Read(EndianBinaryReader reader)
    {
        int Style_ = reader.ReadS32();
        byte IsOffHand_ = reader.ReadU8();
        reader.AlignTo(4); /* IsOffHand */
        WalkingStyleLayer WalkingStyleLayer__ = WalkingStyleLayer.Read(reader);
        reader.AlignTo(4); /* WalkingStyleLayer_ */
        
        return new(Style_,
            IsOffHand_,
            WalkingStyleLayer__);
    }

    public override string ToString() => $"WeaponStyleWalkingLayer\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Style: {Style}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}IsOffHand: {IsOffHand}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WalkingStyleLayer_: {{ \n{WalkingStyleLayer_.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TransformModule (22 fields) */
public record class TransformModule (
    byte _hasOffset,
    byte _hasRotationOffset,
    Vector2f _offset,
    Vector3f _rotationOffset,
    Vector3f _baseScale,
    byte _2dMode,
    int velocityHandleMode,
    byte applyPositionX,
    byte applyPositionY,
    byte applyPositionZ,
    byte applyPosition2D,
    byte retainLocalPosition,
    int direction,
    byte applyRotationX,
    byte applyRotationY,
    byte applyRotationZ,
    byte applyRotation2D,
    byte retainLocalRotation,
    byte applyScaleX,
    byte applyScaleY,
    byte applyScaleZ,
    PPtr<SplineUser> targetUser) : IUnityStructure
{
    public static TransformModule Read(EndianBinaryReader reader)
    {
        byte _hasOffset_ = reader.ReadU8();
        reader.AlignTo(4); /* _hasOffset */
        byte _hasRotationOffset_ = reader.ReadU8();
        reader.AlignTo(4); /* _hasRotationOffset */
        Vector2f _offset_ = Vector2f.Read(reader);
        Vector3f _rotationOffset_ = Vector3f.Read(reader);
        Vector3f _baseScale_ = Vector3f.Read(reader);
        byte _2dMode_ = reader.ReadU8();
        reader.AlignTo(4); /* _2dMode */
        int velocityHandleMode_ = reader.ReadS32();
        byte applyPositionX_ = reader.ReadU8();
        reader.AlignTo(4); /* applyPositionX */
        byte applyPositionY_ = reader.ReadU8();
        reader.AlignTo(4); /* applyPositionY */
        byte applyPositionZ_ = reader.ReadU8();
        reader.AlignTo(4); /* applyPositionZ */
        byte applyPosition2D_ = reader.ReadU8();
        reader.AlignTo(4); /* applyPosition2D */
        byte retainLocalPosition_ = reader.ReadU8();
        reader.AlignTo(4); /* retainLocalPosition */
        int direction_ = reader.ReadS32();
        byte applyRotationX_ = reader.ReadU8();
        reader.AlignTo(4); /* applyRotationX */
        byte applyRotationY_ = reader.ReadU8();
        reader.AlignTo(4); /* applyRotationY */
        byte applyRotationZ_ = reader.ReadU8();
        reader.AlignTo(4); /* applyRotationZ */
        byte applyRotation2D_ = reader.ReadU8();
        reader.AlignTo(4); /* applyRotation2D */
        byte retainLocalRotation_ = reader.ReadU8();
        reader.AlignTo(4); /* retainLocalRotation */
        byte applyScaleX_ = reader.ReadU8();
        reader.AlignTo(4); /* applyScaleX */
        byte applyScaleY_ = reader.ReadU8();
        reader.AlignTo(4); /* applyScaleY */
        byte applyScaleZ_ = reader.ReadU8();
        reader.AlignTo(4); /* applyScaleZ */
        PPtr<SplineUser> targetUser_ = PPtr<SplineUser>.Read(reader);
        
        return new(_hasOffset_,
            _hasRotationOffset_,
            _offset_,
            _rotationOffset_,
            _baseScale_,
            _2dMode_,
            velocityHandleMode_,
            applyPositionX_,
            applyPositionY_,
            applyPositionZ_,
            applyPosition2D_,
            retainLocalPosition_,
            direction_,
            applyRotationX_,
            applyRotationY_,
            applyRotationZ_,
            applyRotation2D_,
            retainLocalRotation_,
            applyScaleX_,
            applyScaleY_,
            applyScaleZ_,
            targetUser_);
    }

    public override string ToString() => $"TransformModule\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_hasOffset: {_hasOffset}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_hasRotationOffset: {_hasRotationOffset}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_offset: {{ x: {_offset.x}, y: {_offset.y} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_rotationOffset: {{ x: {_rotationOffset.x}, y: {_rotationOffset.y}, z: {_rotationOffset.z} }}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_baseScale: {{ x: {_baseScale.x}, y: {_baseScale.y}, z: {_baseScale.z} }}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_2dMode: {_2dMode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}velocityHandleMode: {velocityHandleMode}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyPositionX: {applyPositionX}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyPositionY: {applyPositionY}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyPositionZ: {applyPositionZ}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyPosition2D: {applyPosition2D}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}retainLocalPosition: {retainLocalPosition}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}direction: {direction}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyRotationX: {applyRotationX}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyRotationY: {applyRotationY}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyRotationZ: {applyRotationZ}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyRotation2D: {applyRotation2D}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}retainLocalRotation: {retainLocalRotation}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyScaleX: {applyScaleX}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyScaleY: {applyScaleY}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}applyScaleZ: {applyScaleZ}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}targetUser: {targetUser}");
    }
}

/* $FollowerSpeedModifier (3 fields) */
public record class FollowerSpeedModifier (
    float blend,
    byte useClippedPercent,
    SpeedKey[] keys) : IUnityStructure
{
    public static FollowerSpeedModifier Read(EndianBinaryReader reader)
    {
        float blend_ = reader.ReadF32();
        byte useClippedPercent_ = reader.ReadU8();
        reader.AlignTo(4); /* useClippedPercent */
        SpeedKey[] keys_ = BuiltInArray<SpeedKey>.Read(reader);
        reader.AlignTo(4); /* keys */
        
        return new(blend_,
            useClippedPercent_,
            keys_);
    }

    public override string ToString() => $"FollowerSpeedModifier\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}useClippedPercent: {useClippedPercent}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}keys[{keys.Length}] = {{");
        if (keys.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (SpeedKey _4 in keys)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (keys.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $SpeedKey (8 fields) */
public record class SpeedKey (
    double _featherStart,
    double _featherEnd,
    double _centerStart,
    double _centerEnd,
    AnimationCurve interpolation,
    float blend,
    float speed,
    int mode) : IUnityStructure
{
    public static SpeedKey Read(EndianBinaryReader reader)
    {
        double _featherStart_ = reader.ReadF64();
        double _featherEnd_ = reader.ReadF64();
        double _centerStart_ = reader.ReadF64();
        double _centerEnd_ = reader.ReadF64();
        AnimationCurve interpolation_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* interpolation */
        float blend_ = reader.ReadF32();
        float speed_ = reader.ReadF32();
        int mode_ = reader.ReadS32();
        
        return new(_featherStart_,
            _featherEnd_,
            _centerStart_,
            _centerEnd_,
            interpolation_,
            blend_,
            speed_,
            mode_);
    }

    public override string ToString() => $"SpeedKey\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherStart: {_featherStart}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_featherEnd: {_featherEnd}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerStart: {_centerStart}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_centerEnd: {_centerEnd}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}interpolation: {{ \n{interpolation.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}blend: {blend}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}speed: {speed}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}mode: {mode}");
    }
}

/* $FloatEvent (1 fields) */
public record class FloatEvent (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static FloatEvent Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"FloatEvent\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $XZGridCellSizeSettingsView (8 fields) */
public record class XZGridCellSizeSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox,
    AsciiString _xAxisName,
    AsciiString _zAxisName) : IUnityStructure
{
    public static XZGridCellSizeSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        AsciiString _xAxisName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _xAxisName */
        AsciiString _zAxisName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _zAxisName */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_,
            _xAxisName_,
            _zAxisName_);
    }

    public override string ToString() => $"XZGridCellSizeSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_xAxisName: \"{_xAxisName}\"");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_zAxisName: \"{_zAxisName}\"");
    }
}

/* $IndexSet (3 fields) */
public record class IndexSet (
    AsciiString Name,
    int PrimaryIndex,
    int SecondaryIndex) : IUnityStructure
{
    public static IndexSet Read(EndianBinaryReader reader)
    {
        AsciiString Name_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* Name */
        int PrimaryIndex_ = reader.ReadS32();
        int SecondaryIndex_ = reader.ReadS32();
        
        return new(Name_,
            PrimaryIndex_,
            SecondaryIndex_);
    }

    public override string ToString() => $"IndexSet\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Name: \"{Name}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}PrimaryIndex: {PrimaryIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}SecondaryIndex: {SecondaryIndex}");
    }
}

/* $ObjectVertexSnapSessionRenderSettingsView (6 fields) */
public record class ObjectVertexSnapSessionRenderSettingsView (
    byte _isVisible,
    byte _toggleVisibilityBeforeRender,
    AsciiString _visibilityToggleLabel,
    int _visibilityToggleIndent,
    byte _indentContent,
    byte _surroundWithBox) : IUnityStructure
{
    public static ObjectVertexSnapSessionRenderSettingsView Read(EndianBinaryReader reader)
    {
        byte _isVisible_ = reader.ReadU8();
        reader.AlignTo(4); /* _isVisible */
        byte _toggleVisibilityBeforeRender_ = reader.ReadU8();
        reader.AlignTo(4); /* _toggleVisibilityBeforeRender */
        AsciiString _visibilityToggleLabel_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* _visibilityToggleLabel */
        int _visibilityToggleIndent_ = reader.ReadS32();
        byte _indentContent_ = reader.ReadU8();
        reader.AlignTo(4); /* _indentContent */
        byte _surroundWithBox_ = reader.ReadU8();
        reader.AlignTo(4); /* _surroundWithBox */
        
        return new(_isVisible_,
            _toggleVisibilityBeforeRender_,
            _visibilityToggleLabel_,
            _visibilityToggleIndent_,
            _indentContent_,
            _surroundWithBox_);
    }

    public override string ToString() => $"ObjectVertexSnapSessionRenderSettingsView\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isVisible: {_isVisible}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_toggleVisibilityBeforeRender: {_toggleVisibilityBeforeRender}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleLabel: \"{_visibilityToggleLabel}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_visibilityToggleIndent: {_visibilityToggleIndent}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_indentContent: {_indentContent}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_surroundWithBox: {_surroundWithBox}");
    }
}

/* $LinkEventData (1 fields) */
public record class LinkEventData (
    PersistentCallGroup m_PersistentCalls) : IUnityStructure
{
    public static LinkEventData Read(EndianBinaryReader reader)
    {
        PersistentCallGroup m_PersistentCalls_ = PersistentCallGroup.Read(reader);
        reader.AlignTo(4); /* m_PersistentCalls */
        
        return new(m_PersistentCalls_);
    }

    public override string ToString() => $"LinkEventData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}m_PersistentCalls: {{ \n{m_PersistentCalls.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $RimLightingSettings (2 fields) */
public record class RimLightingSettings (
    ColorRGBA_1 RimGlobalColor,
    float RimGlobalIntensity) : IUnityStructure
{
    public static RimLightingSettings Read(EndianBinaryReader reader)
    {
        ColorRGBA_1 RimGlobalColor_ = ColorRGBA_1.Read(reader);
        float RimGlobalIntensity_ = reader.ReadF32();
        
        return new(RimGlobalColor_,
            RimGlobalIntensity_);
    }

    public override string ToString() => $"RimLightingSettings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}RimGlobalColor: {{ r: {RimGlobalColor.r}, g: {RimGlobalColor.g}, b: {RimGlobalColor.b}, a: {RimGlobalColor.a} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}RimGlobalIntensity: {RimGlobalIntensity}");
    }
}

/* $CompoundElement (3 fields) */
public record class CompoundElement (
    int type,
    int elementIdentifier,
    int[] componentElementIdentifiers) : IUnityStructure
{
    public static CompoundElement Read(EndianBinaryReader reader)
    {
        int type_ = reader.ReadS32();
        int elementIdentifier_ = reader.ReadS32();
        int[] componentElementIdentifiers_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* componentElementIdentifiers */
        
        return new(type_,
            elementIdentifier_,
            componentElementIdentifiers_);
    }

    public override string ToString() => $"CompoundElement\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}type: {type}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}componentElementIdentifiers[{componentElementIdentifiers.Length}] = {{");
        if (componentElementIdentifiers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in componentElementIdentifiers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (componentElementIdentifiers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_DirectInput (4 fields) */
public record class Platform_DirectInput (
    AsciiString description,
    MatchingCriteria_4 matchingCriteria,
    Elements elements,
    Platform_DirectInput_Base[] variants) : IUnityStructure
{
    public static Platform_DirectInput Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_4 matchingCriteria_ = MatchingCriteria_4.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements elements_ = Elements.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_DirectInput_Base[] variants_ = BuiltInArray<Platform_DirectInput_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_DirectInput\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_DirectInput_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_4 (11 fields) */
public record class MatchingCriteria_4 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    int hatCount,
    ElementCount[] alternateElementCounts,
    byte productName_useRegex,
    AsciiString[] productName,
    AsciiString[] productGUID,
    int[] productId,
    int deviceType) : IUnityStructure
{
    public static MatchingCriteria_4 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        int hatCount_ = reader.ReadS32();
        ElementCount[] alternateElementCounts_ = BuiltInArray<ElementCount>.Read(reader);
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        AsciiString[] productGUID_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productGUID */
        int[] productId_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* productId */
        int deviceType_ = reader.ReadS32();
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            hatCount_,
            alternateElementCounts_,
            productName_useRegex_,
            productName_,
            productGUID_,
            productId_,
            deviceType_);
    }

    public override string ToString() => $"MatchingCriteria_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateElementCounts[{alternateElementCounts.Length}] = {{");
        if (alternateElementCounts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementCount _4 in alternateElementCounts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ axisCount: {_4.axisCount}, buttonCount: {_4.buttonCount}, hatCount: {_4.hatCount} }}\n");
            ++_4i;
        }
        if (alternateElementCounts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productGUID[{productGUID.Length}] = {{");
        if (productGUID.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productGUID)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productGUID.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productId[{productId.Length}] = {{");
        if (productId.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in productId)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (productId.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}deviceType: {deviceType}");
    }
}

/* $ElementCount (3 fields) */
public readonly record struct ElementCount (
    int axisCount,
    int buttonCount,
    int hatCount) : IUnityStructure
{
    public static ElementCount Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        int hatCount_ = reader.ReadS32();
        
        return new(axisCount_,
            buttonCount_,
            hatCount_);
    }

    public override string ToString() => $"ElementCount\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }
}

/* $Elements (2 fields) */
public record class Elements (
    Axis_6[] axes,
    Button_6[] buttons) : IUnityStructure
{
    public static Elements Read(EndianBinaryReader reader)
    {
        Axis_6[] axes_ = BuiltInArray<Axis_6>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_6[] buttons_ = BuiltInArray<Button_6>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_6 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_6 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_6 (19 fields) */
public record class Axis_6 (
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    int sourceAxisRange,
    byte invert,
    float axisDeadZone,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    HardwareAxisInfo axisInfo,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    int sourceButton,
    int buttonAxisContribution,
    int sourceHat,
    int sourceHatDirection,
    int sourceHatRange) : IUnityStructure
{
    public static Axis_6 Read(EndianBinaryReader reader)
    {
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        float axisDeadZone_ = reader.ReadF32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        int sourceButton_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        int sourceHatRange_ = reader.ReadS32();
        
        return new(customCalculation_,
            customCalculationSourceData_,
            elementIdentifier_,
            sourceType_,
            sourceAxis_,
            sourceAxisRange_,
            invert_,
            axisDeadZone_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            axisInfo_,
            alternateCalibrations_,
            sourceButton_,
            buttonAxisContribution_,
            sourceHat_,
            sourceHatDirection_,
            sourceHatRange_);
    }

    public override string ToString() => $"Axis_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatRange: {sourceHatRange}");
    }
}

/* $CustomCalculationSourceData_1 (11 fields) */
public readonly record struct CustomCalculationSourceData_1 (
    int sourceType,
    int sourceAxis,
    int sourceButton,
    int sourceOtherAxis,
    int sourceAxisRange,
    float axisDeadZone,
    byte invert,
    int axisCalibrationType,
    float axisZero,
    float axisMin,
    float axisMax) : IUnityStructure
{
    public static CustomCalculationSourceData_1 Read(EndianBinaryReader reader)
    {
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceOtherAxis_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        int axisCalibrationType_ = reader.ReadS32();
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        
        return new(sourceType_,
            sourceAxis_,
            sourceButton_,
            sourceOtherAxis_,
            sourceAxisRange_,
            axisDeadZone_,
            invert_,
            axisCalibrationType_,
            axisZero_,
            axisMin_,
            axisMax_);
    }

    public override string ToString() => $"CustomCalculationSourceData_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceOtherAxis: {sourceOtherAxis}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCalibrationType: {axisCalibrationType}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }
}

/* $AxisCalibrationInfoEntry (2 fields) */
public record class AxisCalibrationInfoEntry (
    int key,
    AxisCalibrationInfo calibration) : IUnityStructure
{
    public static AxisCalibrationInfoEntry Read(EndianBinaryReader reader)
    {
        int key_ = reader.ReadS32();
        AxisCalibrationInfo calibration_ = AxisCalibrationInfo.Read(reader);
        reader.AlignTo(4); /* calibration */
        
        return new(key_,
            calibration_);
    }

    public override string ToString() => $"AxisCalibrationInfoEntry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}key: {key}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}calibration: {{ \n{calibration.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $AxisCalibrationInfo (9 fields) */
public record class AxisCalibrationInfo (
    byte _applyRangeCalibration,
    byte _invert,
    float _deadZone,
    float _zero,
    float _min,
    float _max,
    int _sensitivityType,
    float _sensitivity,
    AnimationCurve _sensitivityCurve) : IUnityStructure
{
    public static AxisCalibrationInfo Read(EndianBinaryReader reader)
    {
        byte _applyRangeCalibration_ = reader.ReadU8();
        reader.AlignTo(4); /* _applyRangeCalibration */
        byte _invert_ = reader.ReadU8();
        reader.AlignTo(4); /* _invert */
        float _deadZone_ = reader.ReadF32();
        float _zero_ = reader.ReadF32();
        float _min_ = reader.ReadF32();
        float _max_ = reader.ReadF32();
        int _sensitivityType_ = reader.ReadS32();
        float _sensitivity_ = reader.ReadF32();
        AnimationCurve _sensitivityCurve_ = AnimationCurve.Read(reader);
        reader.AlignTo(4); /* _sensitivityCurve */
        
        return new(_applyRangeCalibration_,
            _invert_,
            _deadZone_,
            _zero_,
            _min_,
            _max_,
            _sensitivityType_,
            _sensitivity_,
            _sensitivityCurve_);
    }

    public override string ToString() => $"AxisCalibrationInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_applyRangeCalibration: {_applyRangeCalibration}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_invert: {_invert}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_deadZone: {_deadZone}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_zero: {_zero}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_min: {_min}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_max: {_max}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_sensitivityType: {_sensitivityType}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_sensitivity: {_sensitivity}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}_sensitivityCurve: {{ \n{_sensitivityCurve.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Button_6 (16 fields) */
public record class Button_6 (
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int elementIdentifier,
    int sourceType,
    int sourceButton,
    int sourceAxis,
    int sourceAxisPole,
    float axisDeadZone,
    int sourceHat,
    int sourceHatType,
    int sourceHatDirection,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo) : IUnityStructure
{
    public static Button_6 Read(EndianBinaryReader reader)
    {
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceAxisPole_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatType_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        
        return new(customCalculation_,
            customCalculationSourceData_,
            elementIdentifier_,
            sourceType_,
            sourceButton_,
            sourceAxis_,
            sourceAxisPole_,
            axisDeadZone_,
            sourceHat_,
            sourceHatType_,
            sourceHatDirection_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_);
    }

    public override string ToString() => $"Button_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatType: {sourceHatType}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }
}

/* $HardwareButtonInfo (2 fields) */
public readonly record struct HardwareButtonInfo (
    byte _excludeFromPolling,
    byte _isPressureSensitive) : IUnityStructure
{
    public static HardwareButtonInfo Read(EndianBinaryReader reader)
    {
        byte _excludeFromPolling_ = reader.ReadU8();
        reader.AlignTo(4); /* _excludeFromPolling */
        byte _isPressureSensitive_ = reader.ReadU8();
        reader.AlignTo(4); /* _isPressureSensitive */
        
        return new(_excludeFromPolling_,
            _isPressureSensitive_);
    }

    public override string ToString() => $"HardwareButtonInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_excludeFromPolling: {_excludeFromPolling}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}_isPressureSensitive: {_isPressureSensitive}");
    }
}

/* $Platform_DirectInput_Base (3 fields) */
public record class Platform_DirectInput_Base (
    AsciiString description,
    MatchingCriteria_4 matchingCriteria,
    Elements elements) : IUnityStructure
{
    public static Platform_DirectInput_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_4 matchingCriteria_ = MatchingCriteria_4.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements elements_ = Elements.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_DirectInput_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_RawInput (4 fields) */
public record class Platform_RawInput (
    AsciiString description,
    MatchingCriteria_4 matchingCriteria,
    Elements_1 elements,
    Platform_RawInput_Base[] variants) : IUnityStructure
{
    public static Platform_RawInput Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_4 matchingCriteria_ = MatchingCriteria_4.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_1 elements_ = Elements_1.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_RawInput_Base[] variants_ = BuiltInArray<Platform_RawInput_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_RawInput\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_RawInput_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Elements_1 (2 fields) */
public record class Elements_1 (
    Axis_8[] axes,
    Button_9[] buttons) : IUnityStructure
{
    public static Elements_1 Read(EndianBinaryReader reader)
    {
        Axis_8[] axes_ = BuiltInArray<Axis_8>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_9[] buttons_ = BuiltInArray<Button_9>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_8 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_9 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_8 (20 fields) */
public record class Axis_8 (
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    int sourceAxisRange,
    byte invert,
    float axisDeadZone,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    HardwareAxisInfo axisInfo,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    int sourceButton,
    int buttonAxisContribution,
    int sourceHat,
    int sourceHatDirection,
    int sourceHatRange,
    int sourceOtherAxis) : IUnityStructure
{
    public static Axis_8 Read(EndianBinaryReader reader)
    {
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        float axisDeadZone_ = reader.ReadF32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        int sourceButton_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        int sourceHatRange_ = reader.ReadS32();
        int sourceOtherAxis_ = reader.ReadS32();
        
        return new(customCalculation_,
            customCalculationSourceData_,
            elementIdentifier_,
            sourceType_,
            sourceAxis_,
            sourceAxisRange_,
            invert_,
            axisDeadZone_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            axisInfo_,
            alternateCalibrations_,
            sourceButton_,
            buttonAxisContribution_,
            sourceHat_,
            sourceHatDirection_,
            sourceHatRange_,
            sourceOtherAxis_);
    }

    public override string ToString() => $"Axis_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatRange: {sourceHatRange}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceOtherAxis: {sourceOtherAxis}");
    }
}

/* $Button_9 (17 fields) */
public record class Button_9 (
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int elementIdentifier,
    int sourceType,
    int sourceButton,
    int sourceAxis,
    int sourceAxisPole,
    float axisDeadZone,
    int sourceHat,
    int sourceHatType,
    int sourceHatDirection,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo,
    int sourceOtherAxis) : IUnityStructure
{
    public static Button_9 Read(EndianBinaryReader reader)
    {
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceAxisPole_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatType_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        int sourceOtherAxis_ = reader.ReadS32();
        
        return new(customCalculation_,
            customCalculationSourceData_,
            elementIdentifier_,
            sourceType_,
            sourceButton_,
            sourceAxis_,
            sourceAxisPole_,
            axisDeadZone_,
            sourceHat_,
            sourceHatType_,
            sourceHatDirection_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_,
            sourceOtherAxis_);
    }

    public override string ToString() => $"Button_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatType: {sourceHatType}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceOtherAxis: {sourceOtherAxis}");
    }
}

/* $Platform_RawInput_Base (3 fields) */
public record class Platform_RawInput_Base (
    AsciiString description,
    MatchingCriteria_4 matchingCriteria,
    Elements_1 elements) : IUnityStructure
{
    public static Platform_RawInput_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_4 matchingCriteria_ = MatchingCriteria_4.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_1 elements_ = Elements_1.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_RawInput_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_XInput (4 fields) */
public record class Platform_XInput (
    AsciiString description,
    MatchingCriteria matchingCriteria,
    Elements_2 elements,
    Platform_XInput_Base[] variants) : IUnityStructure
{
    public static Platform_XInput Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria matchingCriteria_ = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_2 elements_ = Elements_2.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_XInput_Base[] variants_ = BuiltInArray<Platform_XInput_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_XInput\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_XInput_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria (5 fields) */
public record class MatchingCriteria (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    int[] subType) : IUnityStructure
{
    public static MatchingCriteria Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        int[] subType_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* subType */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            subType_);
    }

    public override string ToString() => $"MatchingCriteria\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}subType[{subType.Length}] = {{");
        if (subType.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in subType)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (subType.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Elements_2 (2 fields) */
public record class Elements_2 (
    Axis_1[] axes,
    Button_2[] buttons) : IUnityStructure
{
    public static Elements_2 Read(EndianBinaryReader reader)
    {
        Axis_1[] axes_ = BuiltInArray<Axis_1>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_2[] buttons_ = BuiltInArray<Button_2>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_1 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_2 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_1 (14 fields) */
public record class Axis_1 (
    int elementIdentifier,
    int sourceType,
    int sourceButton,
    int sourceAxis,
    float axisDeadZone,
    byte invert,
    int buttonAxisContribution,
    int sourceAxisRange,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo) : IUnityStructure
{
    public static Axis_1 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        int buttonAxisContribution_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceButton_,
            sourceAxis_,
            axisDeadZone_,
            invert_,
            buttonAxisContribution_,
            sourceAxisRange_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_);
    }

    public override string ToString() => $"Axis_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }
}

/* $Button_2 (7 fields) */
public record class Button_2 (
    int elementIdentifier,
    int sourceType,
    int sourceButton,
    int sourceAxis,
    float axisDeadZone,
    int sourceAxisPole,
    HardwareButtonInfo buttonInfo) : IUnityStructure
{
    public static Button_2 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceAxisPole_ = reader.ReadS32();
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceButton_,
            sourceAxis_,
            axisDeadZone_,
            sourceAxisPole_,
            buttonInfo_);
    }

    public override string ToString() => $"Button_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }
}

/* $Platform_XInput_Base (3 fields) */
public record class Platform_XInput_Base (
    AsciiString description,
    MatchingCriteria matchingCriteria,
    Elements_2 elements) : IUnityStructure
{
    public static Platform_XInput_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria matchingCriteria_ = MatchingCriteria.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_2 elements_ = Elements_2.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_XInput_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_OSX (4 fields) */
public record class Platform_OSX (
    AsciiString description,
    MatchingCriteria_5 matchingCriteria,
    Elements_3 elements,
    Platform_OSX_Base[] variants) : IUnityStructure
{
    public static Platform_OSX Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_5 matchingCriteria_ = MatchingCriteria_5.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_3 elements_ = Elements_3.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_OSX_Base[] variants_ = BuiltInArray<Platform_OSX_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_OSX\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_OSX_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_5 (11 fields) */
public record class MatchingCriteria_5 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    int hatCount,
    ElementCount[] alternateElementCounts,
    byte productName_useRegex,
    AsciiString[] productName,
    AsciiString[] manufacturer,
    int[] productId,
    int[] vendorId) : IUnityStructure
{
    public static MatchingCriteria_5 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        int hatCount_ = reader.ReadS32();
        ElementCount[] alternateElementCounts_ = BuiltInArray<ElementCount>.Read(reader);
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        AsciiString[] manufacturer_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* manufacturer */
        int[] productId_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* productId */
        int[] vendorId_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* vendorId */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            hatCount_,
            alternateElementCounts_,
            productName_useRegex_,
            productName_,
            manufacturer_,
            productId_,
            vendorId_);
    }

    public override string ToString() => $"MatchingCriteria_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateElementCounts[{alternateElementCounts.Length}] = {{");
        if (alternateElementCounts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementCount _4 in alternateElementCounts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ axisCount: {_4.axisCount}, buttonCount: {_4.buttonCount}, hatCount: {_4.hatCount} }}\n");
            ++_4i;
        }
        if (alternateElementCounts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}manufacturer[{manufacturer.Length}] = {{");
        if (manufacturer.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in manufacturer)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (manufacturer.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productId[{productId.Length}] = {{");
        if (productId.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in productId)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (productId.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vendorId[{vendorId.Length}] = {{");
        if (vendorId.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in vendorId)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (vendorId.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Elements_3 (2 fields) */
public record class Elements_3 (
    Axis_7[] axes,
    Button_7[] buttons) : IUnityStructure
{
    public static Elements_3 Read(EndianBinaryReader reader)
    {
        Axis_7[] axes_ = BuiltInArray<Axis_7>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_7[] buttons_ = BuiltInArray<Button_7>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_7 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_7 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_7 (19 fields) */
public record class Axis_7 (
    int elementIdentifier,
    int sourceType,
    int sourceStick,
    int sourceAxis,
    int sourceOtherAxis,
    int sourceAxisRange,
    byte invert,
    float axisDeadZone,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo,
    int sourceButton,
    int buttonAxisContribution,
    int sourceHat,
    int sourceHatDirection,
    int sourceHatRange) : IUnityStructure
{
    public static Axis_7 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceStick_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceOtherAxis_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        float axisDeadZone_ = reader.ReadF32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        int sourceButton_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        int sourceHatRange_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceType_,
            sourceStick_,
            sourceAxis_,
            sourceOtherAxis_,
            sourceAxisRange_,
            invert_,
            axisDeadZone_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_,
            sourceButton_,
            buttonAxisContribution_,
            sourceHat_,
            sourceHatDirection_,
            sourceHatRange_);
    }

    public override string ToString() => $"Axis_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceStick: {sourceStick}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceOtherAxis: {sourceOtherAxis}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatRange: {sourceHatRange}");
    }
}

/* $Button_7 (16 fields) */
public record class Button_7 (
    int elementIdentifier,
    int sourceType,
    int sourceButton,
    int sourceStick,
    int sourceAxis,
    int sourceOtherAxis,
    int sourceAxisPole,
    float axisDeadZone,
    int sourceHat,
    int sourceHatType,
    int sourceHatDirection,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo) : IUnityStructure
{
    public static Button_7 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceStick_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceOtherAxis_ = reader.ReadS32();
        int sourceAxisPole_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatType_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceButton_,
            sourceStick_,
            sourceAxis_,
            sourceOtherAxis_,
            sourceAxisPole_,
            axisDeadZone_,
            sourceHat_,
            sourceHatType_,
            sourceHatDirection_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_);
    }

    public override string ToString() => $"Button_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceStick: {sourceStick}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceOtherAxis: {sourceOtherAxis}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatType: {sourceHatType}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }
}

/* $Platform_OSX_Base (3 fields) */
public record class Platform_OSX_Base (
    AsciiString description,
    MatchingCriteria_5 matchingCriteria,
    Elements_3 elements) : IUnityStructure
{
    public static Platform_OSX_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_5 matchingCriteria_ = MatchingCriteria_5.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_3 elements_ = Elements_3.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_OSX_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_Linux (4 fields) */
public record class Platform_Linux (
    AsciiString description,
    MatchingCriteria_10 matchingCriteria,
    Elements_4 elements,
    Platform_Linux_Base[] variants) : IUnityStructure
{
    public static Platform_Linux Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_10 matchingCriteria_ = MatchingCriteria_10.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_4 elements_ = Elements_4.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_Linux_Base[] variants_ = BuiltInArray<Platform_Linux_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_Linux\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_Linux_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_10 (13 fields) */
public record class MatchingCriteria_10 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    int hatCount,
    ElementCount[] alternateElementCounts,
    byte manufacturer_useRegex,
    byte productName_useRegex,
    byte systemName_useRegex,
    AsciiString[] manufacturer,
    AsciiString[] productName,
    AsciiString[] systemName,
    AsciiString[] productGUID) : IUnityStructure
{
    public static MatchingCriteria_10 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        int hatCount_ = reader.ReadS32();
        ElementCount[] alternateElementCounts_ = BuiltInArray<ElementCount>.Read(reader);
        byte manufacturer_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* manufacturer_useRegex */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        byte systemName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* systemName_useRegex */
        AsciiString[] manufacturer_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* manufacturer */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        AsciiString[] systemName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* systemName */
        AsciiString[] productGUID_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productGUID */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            hatCount_,
            alternateElementCounts_,
            manufacturer_useRegex_,
            productName_useRegex_,
            systemName_useRegex_,
            manufacturer_,
            productName_,
            systemName_,
            productGUID_);
    }

    public override string ToString() => $"MatchingCriteria_10\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateElementCounts[{alternateElementCounts.Length}] = {{");
        if (alternateElementCounts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementCount _4 in alternateElementCounts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ axisCount: {_4.axisCount}, buttonCount: {_4.buttonCount}, hatCount: {_4.hatCount} }}\n");
            ++_4i;
        }
        if (alternateElementCounts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}manufacturer_useRegex: {manufacturer_useRegex}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}systemName_useRegex: {systemName_useRegex}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}manufacturer[{manufacturer.Length}] = {{");
        if (manufacturer.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in manufacturer)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (manufacturer.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}systemName[{systemName.Length}] = {{");
        if (systemName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in systemName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (systemName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productGUID[{productGUID.Length}] = {{");
        if (productGUID.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productGUID)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productGUID.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Elements_4 (2 fields) */
public record class Elements_4 (
    Axis_3[] axes,
    Button_4[] buttons) : IUnityStructure
{
    public static Elements_4 Read(EndianBinaryReader reader)
    {
        Axis_3[] axes_ = BuiltInArray<Axis_3>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_4[] buttons_ = BuiltInArray<Button_4>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_3 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_4 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_3 (17 fields) */
public record class Axis_3 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    int sourceAxisRange,
    byte invert,
    float axisDeadZone,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo,
    int sourceButton,
    int buttonAxisContribution,
    int sourceHat,
    int sourceHatDirection,
    int sourceHatRange) : IUnityStructure
{
    public static Axis_3 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        float axisDeadZone_ = reader.ReadF32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        int sourceButton_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        int sourceHatRange_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            sourceAxisRange_,
            invert_,
            axisDeadZone_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_,
            sourceButton_,
            buttonAxisContribution_,
            sourceHat_,
            sourceHatDirection_,
            sourceHatRange_);
    }

    public override string ToString() => $"Axis_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatRange: {sourceHatRange}");
    }
}

/* $Button_4 (14 fields) */
public record class Button_4 (
    int elementIdentifier,
    int sourceType,
    int sourceButton,
    int sourceAxis,
    int sourceAxisPole,
    float axisDeadZone,
    int sourceHat,
    int sourceHatType,
    int sourceHatDirection,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo) : IUnityStructure
{
    public static Button_4 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceButton_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        int sourceAxisPole_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceHat_ = reader.ReadS32();
        int sourceHatType_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceButton_,
            sourceAxis_,
            sourceAxisPole_,
            axisDeadZone_,
            sourceHat_,
            sourceHatType_,
            sourceHatDirection_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_);
    }

    public override string ToString() => $"Button_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatType: {sourceHatType}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }
}

/* $Platform_Linux_Base (3 fields) */
public record class Platform_Linux_Base (
    AsciiString description,
    MatchingCriteria_10 matchingCriteria,
    Elements_4 elements) : IUnityStructure
{
    public static Platform_Linux_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_10 matchingCriteria_ = MatchingCriteria_10.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_4 elements_ = Elements_4.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_Linux_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_WindowsUWP (4 fields) */
public record class Platform_WindowsUWP (
    AsciiString description,
    MatchingCriteria_6 matchingCriteria,
    Elements_4 elements,
    Platform_WindowsUWP_Base[] variants) : IUnityStructure
{
    public static Platform_WindowsUWP Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_6 matchingCriteria_ = MatchingCriteria_6.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_4 elements_ = Elements_4.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_WindowsUWP_Base[] variants_ = BuiltInArray<Platform_WindowsUWP_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_WindowsUWP\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_WindowsUWP_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_6 (11 fields) */
public record class MatchingCriteria_6 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    int hatCount,
    ElementCount[] alternateElementCounts,
    byte manufacturer_useRegex,
    byte productName_useRegex,
    AsciiString[] manufacturer,
    AsciiString[] productName,
    AsciiString[] productGUID) : IUnityStructure
{
    public static MatchingCriteria_6 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        int hatCount_ = reader.ReadS32();
        ElementCount[] alternateElementCounts_ = BuiltInArray<ElementCount>.Read(reader);
        byte manufacturer_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* manufacturer_useRegex */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] manufacturer_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* manufacturer */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        AsciiString[] productGUID_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productGUID */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            hatCount_,
            alternateElementCounts_,
            manufacturer_useRegex_,
            productName_useRegex_,
            manufacturer_,
            productName_,
            productGUID_);
    }

    public override string ToString() => $"MatchingCriteria_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateElementCounts[{alternateElementCounts.Length}] = {{");
        if (alternateElementCounts.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementCount _4 in alternateElementCounts)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ axisCount: {_4.axisCount}, buttonCount: {_4.buttonCount}, hatCount: {_4.hatCount} }}\n");
            ++_4i;
        }
        if (alternateElementCounts.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}manufacturer_useRegex: {manufacturer_useRegex}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}manufacturer[{manufacturer.Length}] = {{");
        if (manufacturer.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in manufacturer)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (manufacturer.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productGUID[{productGUID.Length}] = {{");
        if (productGUID.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productGUID)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productGUID.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_WindowsUWP_Base (3 fields) */
public record class Platform_WindowsUWP_Base (
    AsciiString description,
    MatchingCriteria_6 matchingCriteria,
    Elements_4 elements) : IUnityStructure
{
    public static Platform_WindowsUWP_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_6 matchingCriteria_ = MatchingCriteria_6.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_4 elements_ = Elements_4.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_WindowsUWP_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_Fallback (4 fields) */
public record class Platform_Fallback (
    AsciiString description,
    MatchingCriteria_11 matchingCriteria,
    Elements_5 elements,
    Platform_Fallback_Base[] variants) : IUnityStructure
{
    public static Platform_Fallback Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_11 matchingCriteria_ = MatchingCriteria_11.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_5 elements_ = Elements_5.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_Fallback_Base[] variants_ = BuiltInArray<Platform_Fallback_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_Fallback\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_Fallback_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_11 (13 fields) */
public record class MatchingCriteria_11 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    byte alwaysMatch,
    byte productName_useRegex,
    AsciiString[] productName,
    byte matchUnityVersion,
    AsciiString matchUnityVersion_min,
    AsciiString matchUnityVersion_max,
    byte matchSysVersion,
    AsciiString matchSysVersion_min,
    AsciiString matchSysVersion_max) : IUnityStructure
{
    public static MatchingCriteria_11 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        byte alwaysMatch_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysMatch */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        byte matchUnityVersion_ = reader.ReadU8();
        reader.AlignTo(4); /* matchUnityVersion */
        AsciiString matchUnityVersion_min_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchUnityVersion_min */
        AsciiString matchUnityVersion_max_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchUnityVersion_max */
        byte matchSysVersion_ = reader.ReadU8();
        reader.AlignTo(4); /* matchSysVersion */
        AsciiString matchSysVersion_min_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchSysVersion_min */
        AsciiString matchSysVersion_max_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* matchSysVersion_max */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            alwaysMatch_,
            productName_useRegex_,
            productName_,
            matchUnityVersion_,
            matchUnityVersion_min_,
            matchUnityVersion_max_,
            matchSysVersion_,
            matchSysVersion_min_,
            matchSysVersion_max_);
    }

    public override string ToString() => $"MatchingCriteria_11\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysMatch: {alwaysMatch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}matchUnityVersion: {matchUnityVersion}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}matchUnityVersion_min: \"{matchUnityVersion_min}\"");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}matchUnityVersion_max: \"{matchUnityVersion_max}\"");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}matchSysVersion: {matchSysVersion}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}matchSysVersion_min: \"{matchSysVersion_min}\"");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}matchSysVersion_max: \"{matchSysVersion_max}\"");
    }
}

/* $Elements_5 (2 fields) */
public record class Elements_5 (
    Axis_4[] axes,
    Button_10[] buttons) : IUnityStructure
{
    public static Elements_5 Read(EndianBinaryReader reader)
    {
        Axis_4[] axes_ = BuiltInArray<Axis_4>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_10[] buttons_ = BuiltInArray<Button_10>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_4 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_10 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_4 (17 fields) */
public record class Axis_4 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    int sourceKeyCode,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData[] customCalculationSourceData,
    byte invert,
    int sourceAxisRange,
    int buttonAxisContribution,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo) : IUnityStructure
{
    public static Axis_4 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        int sourceKeyCode_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        int sourceAxisRange_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            sourceKeyCode_,
            customCalculation_,
            customCalculationSourceData_,
            invert_,
            sourceAxisRange_,
            buttonAxisContribution_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_);
    }

    public override string ToString() => $"Axis_4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceKeyCode: {sourceKeyCode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }
}

/* $CustomCalculationSourceData (5 fields) */
public readonly record struct CustomCalculationSourceData (
    int sourceType,
    int sourceElement,
    int sourceAxisRange,
    float deadzone,
    byte invert) : IUnityStructure
{
    public static CustomCalculationSourceData Read(EndianBinaryReader reader)
    {
        int sourceType_ = reader.ReadS32();
        int sourceElement_ = reader.ReadS32();
        int sourceAxisRange_ = reader.ReadS32();
        float deadzone_ = reader.ReadF32();
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        
        return new(sourceType_,
            sourceElement_,
            sourceAxisRange_,
            deadzone_,
            invert_);
    }

    public override string ToString() => $"CustomCalculationSourceData\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceElement: {sourceElement}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}deadzone: {deadzone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }
}

/* $Button_10 (22 fields) */
public record class Button_10 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    int sourceKeyCode,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData[] customCalculationSourceData,
    int sourceAxisPole,
    int unityHat_sourceAxis1,
    int unityHat_sourceAxis2,
    Vector2f unityHat_isActiveAxisValues1,
    Vector2f unityHat_isActiveAxisValues2,
    Vector2f unityHat_isActiveAxisValues3,
    Vector2f unityHat_zeroValues,
    byte unityHat_checkNeverPressed,
    Vector2f unityHat_neverPressedZeroValues,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo) : IUnityStructure
{
    public static Button_10 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        int sourceKeyCode_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int sourceAxisPole_ = reader.ReadS32();
        int unityHat_sourceAxis1_ = reader.ReadS32();
        int unityHat_sourceAxis2_ = reader.ReadS32();
        Vector2f unityHat_isActiveAxisValues1_ = Vector2f.Read(reader);
        Vector2f unityHat_isActiveAxisValues2_ = Vector2f.Read(reader);
        Vector2f unityHat_isActiveAxisValues3_ = Vector2f.Read(reader);
        Vector2f unityHat_zeroValues_ = Vector2f.Read(reader);
        byte unityHat_checkNeverPressed_ = reader.ReadU8();
        reader.AlignTo(4); /* unityHat_checkNeverPressed */
        Vector2f unityHat_neverPressedZeroValues_ = Vector2f.Read(reader);
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            sourceKeyCode_,
            customCalculation_,
            customCalculationSourceData_,
            sourceAxisPole_,
            unityHat_sourceAxis1_,
            unityHat_sourceAxis2_,
            unityHat_isActiveAxisValues1_,
            unityHat_isActiveAxisValues2_,
            unityHat_isActiveAxisValues3_,
            unityHat_zeroValues_,
            unityHat_checkNeverPressed_,
            unityHat_neverPressedZeroValues_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_);
    }

    public override string ToString() => $"Button_10\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceKeyCode: {sourceKeyCode}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}unityHat_sourceAxis1: {unityHat_sourceAxis1}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}unityHat_sourceAxis2: {unityHat_sourceAxis2}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}unityHat_isActiveAxisValues1: {{ x: {unityHat_isActiveAxisValues1.x}, y: {unityHat_isActiveAxisValues1.y} }}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}unityHat_isActiveAxisValues2: {{ x: {unityHat_isActiveAxisValues2.x}, y: {unityHat_isActiveAxisValues2.y} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}unityHat_isActiveAxisValues3: {{ x: {unityHat_isActiveAxisValues3.x}, y: {unityHat_isActiveAxisValues3.y} }}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}unityHat_zeroValues: {{ x: {unityHat_zeroValues.x}, y: {unityHat_zeroValues.y} }}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}unityHat_checkNeverPressed: {unityHat_checkNeverPressed}");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}unityHat_neverPressedZeroValues: {{ x: {unityHat_neverPressedZeroValues.x}, y: {unityHat_neverPressedZeroValues.y} }}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }
}

/* $Platform_Fallback_Base (3 fields) */
public record class Platform_Fallback_Base (
    AsciiString description,
    MatchingCriteria_11 matchingCriteria,
    Elements_5 elements) : IUnityStructure
{
    public static Platform_Fallback_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_11 matchingCriteria_ = MatchingCriteria_11.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_5 elements_ = Elements_5.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_Fallback_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_PS5 (5 fields) */
public record class Platform_PS5 (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    AsciiString controllerName,
    Platform_PS5_Base[] variants) : IUnityStructure
{
    public static Platform_PS5 Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        Platform_PS5_Base[] variants_ = BuiltInArray<Platform_PS5_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_,
            variants_);
    }

    public override string ToString() => $"Platform_PS5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_PS5_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_1 (7 fields) */
public record class MatchingCriteria_1 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    byte alwaysMatch,
    byte productName_useRegex,
    AsciiString[] productName) : IUnityStructure
{
    public static MatchingCriteria_1 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        byte alwaysMatch_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysMatch */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            alwaysMatch_,
            productName_useRegex_,
            productName_);
    }

    public override string ToString() => $"MatchingCriteria_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysMatch: {alwaysMatch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Elements_6 (2 fields) */
public record class Elements_6 (
    Axis_2[] axes,
    Button_3[] buttons) : IUnityStructure
{
    public static Elements_6 Read(EndianBinaryReader reader)
    {
        Axis_2[] axes_ = BuiltInArray<Axis_2>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_3[] buttons_ = BuiltInArray<Button_3>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_6\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_2 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_3 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_2 (16 fields) */
public record class Axis_2 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    byte invert,
    int sourceAxisRange,
    int buttonAxisContribution,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo) : IUnityStructure
{
    public static Axis_2 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        int sourceAxisRange_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            customCalculation_,
            customCalculationSourceData_,
            invert_,
            sourceAxisRange_,
            buttonAxisContribution_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_);
    }

    public override string ToString() => $"Axis_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }
}

/* $Button_3 (13 fields) */
public record class Button_3 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int sourceAxisPole,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo) : IUnityStructure
{
    public static Button_3 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int sourceAxisPole_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            customCalculation_,
            customCalculationSourceData_,
            sourceAxisPole_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_);
    }

    public override string ToString() => $"Button_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }
}

/* $Platform_PS5_Base (4 fields) */
public record class Platform_PS5_Base (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    AsciiString controllerName) : IUnityStructure
{
    public static Platform_PS5_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_);
    }

    public override string ToString() => $"Platform_PS5_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }
}

/* $Platform_WebGL (4 fields) */
public record class Platform_WebGL (
    AsciiString description,
    MatchingCriteria_7 matchingCriteria,
    Elements_6 elements,
    Platform_WebGL_Base[] variants) : IUnityStructure
{
    public static Platform_WebGL Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_7 matchingCriteria_ = MatchingCriteria_7.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_WebGL_Base[] variants_ = BuiltInArray<Platform_WebGL_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_WebGL\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_WebGL_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_7 (11 fields) */
public record class MatchingCriteria_7 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    byte alwaysMatch,
    byte productName_useRegex,
    AsciiString[] productName,
    AsciiString[] productGUID,
    int[] mapping,
    ElementCount_Base[] elementCount,
    ClientInfo[] clientInfo) : IUnityStructure
{
    public static MatchingCriteria_7 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        byte alwaysMatch_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysMatch */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        AsciiString[] productGUID_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productGUID */
        int[] mapping_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* mapping */
        ElementCount_Base[] elementCount_ = BuiltInArray<ElementCount_Base>.Read(reader);
        ClientInfo[] clientInfo_ = BuiltInArray<ClientInfo>.Read(reader);
        reader.AlignTo(4); /* clientInfo */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            alwaysMatch_,
            productName_useRegex_,
            productName_,
            productGUID_,
            mapping_,
            elementCount_,
            clientInfo_);
    }

    public override string ToString() => $"MatchingCriteria_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysMatch: {alwaysMatch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productGUID[{productGUID.Length}] = {{");
        if (productGUID.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productGUID)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productGUID.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}mapping[{mapping.Length}] = {{");
        if (mapping.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in mapping)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (mapping.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elementCount[{elementCount.Length}] = {{");
        if (elementCount.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ElementCount_Base _4 in elementCount)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ axisCount: {_4.axisCount}, buttonCount: {_4.buttonCount} }}\n");
            ++_4i;
        }
        if (elementCount.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}clientInfo[{clientInfo.Length}] = {{");
        if (clientInfo.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ClientInfo _4 in clientInfo)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (clientInfo.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $ElementCount_Base (2 fields) */
public readonly record struct ElementCount_Base (
    int axisCount,
    int buttonCount) : IUnityStructure
{
    public static ElementCount_Base Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        
        return new(axisCount_,
            buttonCount_);
    }

    public override string ToString() => $"ElementCount_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }
}

/* $ClientInfo (6 fields) */
public record class ClientInfo (
    int browser,
    AsciiString browserVersionMin,
    AsciiString browserVersionMax,
    int os,
    AsciiString osVersionMin,
    AsciiString osVersionMax) : IUnityStructure
{
    public static ClientInfo Read(EndianBinaryReader reader)
    {
        int browser_ = reader.ReadS32();
        AsciiString browserVersionMin_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* browserVersionMin */
        AsciiString browserVersionMax_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* browserVersionMax */
        int os_ = reader.ReadS32();
        AsciiString osVersionMin_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* osVersionMin */
        AsciiString osVersionMax_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* osVersionMax */
        
        return new(browser_,
            browserVersionMin_,
            browserVersionMax_,
            os_,
            osVersionMin_,
            osVersionMax_);
    }

    public override string ToString() => $"ClientInfo\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}browser: {browser}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}browserVersionMin: \"{browserVersionMin}\"");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}browserVersionMax: \"{browserVersionMax}\"");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}os: {os}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}osVersionMin: \"{osVersionMin}\"");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}osVersionMax: \"{osVersionMax}\"");
    }
}

/* $Platform_WebGL_Base (3 fields) */
public record class Platform_WebGL_Base (
    AsciiString description,
    MatchingCriteria_7 matchingCriteria,
    Elements_6 elements) : IUnityStructure
{
    public static Platform_WebGL_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_7 matchingCriteria_ = MatchingCriteria_7.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_WebGL_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_XboxOne (4 fields) */
public record class Platform_XboxOne (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    Platform_XboxOne_Base[] variants) : IUnityStructure
{
    public static Platform_XboxOne Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_XboxOne_Base[] variants_ = BuiltInArray<Platform_XboxOne_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_XboxOne\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_XboxOne_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_XboxOne_Base (3 fields) */
public record class Platform_XboxOne_Base (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements) : IUnityStructure
{
    public static Platform_XboxOne_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_XboxOne_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_GameCore (5 fields) */
public record class Platform_GameCore (
    AsciiString description,
    MatchingCriteria_8 matchingCriteria,
    Elements_7 elements,
    AsciiString controllerName,
    Platform_GameCore_Base[] variants) : IUnityStructure
{
    public static Platform_GameCore Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_8 matchingCriteria_ = MatchingCriteria_8.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_7 elements_ = Elements_7.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        Platform_GameCore_Base[] variants_ = BuiltInArray<Platform_GameCore_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_,
            variants_);
    }

    public override string ToString() => $"Platform_GameCore\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_GameCore_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_8 (11 fields) */
public record class MatchingCriteria_8 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    byte alwaysMatch,
    byte productName_useRegex,
    AsciiString[] productName,
    VidPid[] vidPid,
    int deviceType,
    int gamepadSubType,
    int hatCount) : IUnityStructure
{
    public static MatchingCriteria_8 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        byte alwaysMatch_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysMatch */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        VidPid[] vidPid_ = BuiltInArray<VidPid>.Read(reader);
        int deviceType_ = reader.ReadS32();
        int gamepadSubType_ = reader.ReadS32();
        int hatCount_ = reader.ReadS32();
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            alwaysMatch_,
            productName_useRegex_,
            productName_,
            vidPid_,
            deviceType_,
            gamepadSubType_,
            hatCount_);
    }

    public override string ToString() => $"MatchingCriteria_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysMatch: {alwaysMatch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vidPid[{vidPid.Length}] = {{");
        if (vidPid.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VidPid _4 in vidPid)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ vendorId: {_4.vendorId}, productId: {_4.productId} }}\n");
            ++_4i;
        }
        if (vidPid.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}deviceType: {deviceType}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}gamepadSubType: {gamepadSubType}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }
}

/* $VidPid (2 fields) */
public readonly record struct VidPid (
    int vendorId,
    int productId) : IUnityStructure
{
    public static VidPid Read(EndianBinaryReader reader)
    {
        int vendorId_ = reader.ReadS32();
        int productId_ = reader.ReadS32();
        
        return new(vendorId_,
            productId_);
    }

    public override string ToString() => $"VidPid\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}vendorId: {vendorId}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productId: {productId}");
    }
}

/* $Elements_7 (2 fields) */
public record class Elements_7 (
    Axis_9[] axes,
    Button_8[] buttons) : IUnityStructure
{
    public static Elements_7 Read(EndianBinaryReader reader)
    {
        Axis_9[] axes_ = BuiltInArray<Axis_9>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_8[] buttons_ = BuiltInArray<Button_8>.Read(reader);
        reader.AlignTo(4); /* buttons */
        
        return new(axes_,
            buttons_);
    }

    public override string ToString() => $"Elements_7\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_9 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_8 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_9 (20 fields) */
public record class Axis_9 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    byte invert,
    int sourceAxisRange,
    int buttonAxisContribution,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo,
    int sourceHat,
    int sourceHatDirection,
    int sourceHatType,
    int sourceHatRange) : IUnityStructure
{
    public static Axis_9 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        int sourceAxisRange_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        int sourceHat_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        int sourceHatType_ = reader.ReadS32();
        int sourceHatRange_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            customCalculation_,
            customCalculationSourceData_,
            invert_,
            sourceAxisRange_,
            buttonAxisContribution_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_,
            sourceHat_,
            sourceHatDirection_,
            sourceHatType_,
            sourceHatRange_);
    }

    public override string ToString() => $"Axis_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatType: {sourceHatType}");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatRange: {sourceHatRange}");
    }
}

/* $Button_8 (16 fields) */
public record class Button_8 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int sourceAxisPole,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo,
    int sourceHat,
    int sourceHatDirection,
    int sourceHatType) : IUnityStructure
{
    public static Button_8 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int sourceAxisPole_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        int sourceHat_ = reader.ReadS32();
        int sourceHatDirection_ = reader.ReadS32();
        int sourceHatType_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            customCalculation_,
            customCalculationSourceData_,
            sourceAxisPole_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_,
            sourceHat_,
            sourceHatDirection_,
            sourceHatType_);
    }

    public override string ToString() => $"Button_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHat: {sourceHat}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatDirection: {sourceHatDirection}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceHatType: {sourceHatType}");
    }
}

/* $Platform_GameCore_Base (4 fields) */
public record class Platform_GameCore_Base (
    AsciiString description,
    MatchingCriteria_8 matchingCriteria,
    Elements_7 elements,
    AsciiString controllerName) : IUnityStructure
{
    public static Platform_GameCore_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_8 matchingCriteria_ = MatchingCriteria_8.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_7 elements_ = Elements_7.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_);
    }

    public override string ToString() => $"Platform_GameCore_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }
}

/* $Platform_PS4 (4 fields) */
public record class Platform_PS4 (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    Platform_PS4_Base[] variants) : IUnityStructure
{
    public static Platform_PS4 Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_PS4_Base[] variants_ = BuiltInArray<Platform_PS4_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_PS4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_PS4_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_PS4_Base (3 fields) */
public record class Platform_PS4_Base (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements) : IUnityStructure
{
    public static Platform_PS4_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_PS4_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_NintendoSwitch (4 fields) */
public record class Platform_NintendoSwitch (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    Platform_NintendoSwitch_Base[] variants) : IUnityStructure
{
    public static Platform_NintendoSwitch Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_NintendoSwitch_Base[] variants_ = BuiltInArray<Platform_NintendoSwitch_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_NintendoSwitch\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_NintendoSwitch_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_NintendoSwitch_Base (3 fields) */
public record class Platform_NintendoSwitch_Base (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements) : IUnityStructure
{
    public static Platform_NintendoSwitch_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_NintendoSwitch_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_Stadia (5 fields) */
public record class Platform_Stadia (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    AsciiString controllerName,
    Platform_Stadia_Base[] variants) : IUnityStructure
{
    public static Platform_Stadia Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        Platform_Stadia_Base[] variants_ = BuiltInArray<Platform_Stadia_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_,
            variants_);
    }

    public override string ToString() => $"Platform_Stadia\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_Stadia_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_Stadia_Base (4 fields) */
public record class Platform_Stadia_Base (
    AsciiString description,
    MatchingCriteria_1 matchingCriteria,
    Elements_6 elements,
    AsciiString controllerName) : IUnityStructure
{
    public static Platform_Stadia_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_1 matchingCriteria_ = MatchingCriteria_1.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_6 elements_ = Elements_6.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_);
    }

    public override string ToString() => $"Platform_Stadia_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }
}

/* $Platform_InternalDriver (4 fields) */
public record class Platform_InternalDriver (
    AsciiString description,
    MatchingCriteria_2 matchingCriteria,
    Elements_7 elements,
    Platform_InternalDriver_Base[] variants) : IUnityStructure
{
    public static Platform_InternalDriver Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_2 matchingCriteria_ = MatchingCriteria_2.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_7 elements_ = Elements_7.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_InternalDriver_Base[] variants_ = BuiltInArray<Platform_InternalDriver_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_InternalDriver\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_InternalDriver_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_2 (9 fields) */
public record class MatchingCriteria_2 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    byte alwaysMatch,
    byte productName_useRegex,
    AsciiString[] productName,
    VidPid[] vidPid,
    int hatCount) : IUnityStructure
{
    public static MatchingCriteria_2 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        byte alwaysMatch_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysMatch */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        VidPid[] vidPid_ = BuiltInArray<VidPid>.Read(reader);
        int hatCount_ = reader.ReadS32();
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            alwaysMatch_,
            productName_useRegex_,
            productName_,
            vidPid_,
            hatCount_);
    }

    public override string ToString() => $"MatchingCriteria_2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysMatch: {alwaysMatch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}vidPid[{vidPid.Length}] = {{");
        if (vidPid.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (VidPid _4 in vidPid)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ vendorId: {_4.vendorId}, productId: {_4.productId} }}\n");
            ++_4i;
        }
        if (vidPid.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }
}

/* $Platform_InternalDriver_Base (3 fields) */
public record class Platform_InternalDriver_Base (
    AsciiString description,
    MatchingCriteria_2 matchingCriteria,
    Elements_7 elements) : IUnityStructure
{
    public static Platform_InternalDriver_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_2 matchingCriteria_ = MatchingCriteria_2.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_7 elements_ = Elements_7.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_InternalDriver_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_SDL2 (4 fields) */
public record class Platform_SDL2 (
    AsciiString description,
    MatchingCriteria_9 matchingCriteria,
    Elements_4 elements,
    Platform_SDL2_Base[] variants) : IUnityStructure
{
    public static Platform_SDL2 Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_9 matchingCriteria_ = MatchingCriteria_9.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_4 elements_ = Elements_4.Read(reader);
        reader.AlignTo(4); /* elements */
        Platform_SDL2_Base[] variants_ = BuiltInArray<Platform_SDL2_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            variants_);
    }

    public override string ToString() => $"Platform_SDL2\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_SDL2_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_9 (12 fields) */
public record class MatchingCriteria_9 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    int hatCount,
    byte manufacturer_useRegex,
    byte productName_useRegex,
    byte systemName_useRegex,
    AsciiString[] manufacturer,
    AsciiString[] productName,
    AsciiString[] systemName,
    AsciiString[] productGUID) : IUnityStructure
{
    public static MatchingCriteria_9 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        int hatCount_ = reader.ReadS32();
        byte manufacturer_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* manufacturer_useRegex */
        byte productName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productName_useRegex */
        byte systemName_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* systemName_useRegex */
        AsciiString[] manufacturer_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* manufacturer */
        AsciiString[] productName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productName */
        AsciiString[] systemName_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* systemName */
        AsciiString[] productGUID_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productGUID */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            hatCount_,
            manufacturer_useRegex_,
            productName_useRegex_,
            systemName_useRegex_,
            manufacturer_,
            productName_,
            systemName_,
            productGUID_);
    }

    public override string ToString() => $"MatchingCriteria_9\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}hatCount: {hatCount}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}manufacturer_useRegex: {manufacturer_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productName_useRegex: {productName_useRegex}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}systemName_useRegex: {systemName_useRegex}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}manufacturer[{manufacturer.Length}] = {{");
        if (manufacturer.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in manufacturer)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (manufacturer.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productName[{productName.Length}] = {{");
        if (productName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}systemName[{systemName.Length}] = {{");
        if (systemName.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in systemName)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (systemName.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productGUID[{productGUID.Length}] = {{");
        if (productGUID.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productGUID)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productGUID.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Platform_SDL2_Base (3 fields) */
public record class Platform_SDL2_Base (
    AsciiString description,
    MatchingCriteria_9 matchingCriteria,
    Elements_4 elements) : IUnityStructure
{
    public static Platform_SDL2_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_9 matchingCriteria_ = MatchingCriteria_9.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_4 elements_ = Elements_4.Read(reader);
        reader.AlignTo(4); /* elements */
        
        return new(description_,
            matchingCriteria_,
            elements_);
    }

    public override string ToString() => $"Platform_SDL2_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $Platform_AppleGCController (5 fields) */
public record class Platform_AppleGCController (
    AsciiString description,
    MatchingCriteria_3 matchingCriteria,
    Elements_8 elements,
    AsciiString controllerName,
    Platform_AppleGCController_Base[] variants) : IUnityStructure
{
    public static Platform_AppleGCController Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_3 matchingCriteria_ = MatchingCriteria_3.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_8 elements_ = Elements_8.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        Platform_AppleGCController_Base[] variants_ = BuiltInArray<Platform_AppleGCController_Base>.Read(reader);
        reader.AlignTo(4); /* variants */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_,
            variants_);
    }

    public override string ToString() => $"Platform_AppleGCController\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}variants[{variants.Length}] = {{");
        if (variants.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Platform_AppleGCController_Base _4 in variants)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (variants.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $MatchingCriteria_3 (9 fields) */
public record class MatchingCriteria_3 (
    int axisCount,
    int buttonCount,
    byte disabled,
    AsciiString tag,
    byte alwaysMatch,
    byte productCategory_useRegex,
    AsciiString[] productCategory,
    int primaryProfileType,
    int[] profileSubTypes) : IUnityStructure
{
    public static MatchingCriteria_3 Read(EndianBinaryReader reader)
    {
        int axisCount_ = reader.ReadS32();
        int buttonCount_ = reader.ReadS32();
        byte disabled_ = reader.ReadU8();
        reader.AlignTo(4); /* disabled */
        AsciiString tag_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* tag */
        byte alwaysMatch_ = reader.ReadU8();
        reader.AlignTo(4); /* alwaysMatch */
        byte productCategory_useRegex_ = reader.ReadU8();
        reader.AlignTo(4); /* productCategory_useRegex */
        AsciiString[] productCategory_ = BuiltInArray<AsciiString>.Read(reader);
        reader.AlignTo(4); /* productCategory */
        int primaryProfileType_ = reader.ReadS32();
        int[] profileSubTypes_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* profileSubTypes */
        
        return new(axisCount_,
            buttonCount_,
            disabled_,
            tag_,
            alwaysMatch_,
            productCategory_useRegex_,
            productCategory_,
            primaryProfileType_,
            profileSubTypes_);
    }

    public override string ToString() => $"MatchingCriteria_3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisCount: {axisCount}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonCount: {buttonCount}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}disabled: {disabled}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}tag: \"{tag}\"");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}alwaysMatch: {alwaysMatch}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}productCategory_useRegex: {productCategory_useRegex}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}productCategory[{productCategory.Length}] = {{");
        if (productCategory.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AsciiString _4 in productCategory)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = \"{_4}\"");
            ++_4i;
        }
        if (productCategory.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}primaryProfileType: {primaryProfileType}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}profileSubTypes[{profileSubTypes.Length}] = {{");
        if (profileSubTypes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in profileSubTypes)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (profileSubTypes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Elements_8 (3 fields) */
public record class Elements_8 (
    Axis_5[] axes,
    Button_5[] buttons,
    CompoundElement_1[] compoundElements) : IUnityStructure
{
    public static Elements_8 Read(EndianBinaryReader reader)
    {
        Axis_5[] axes_ = BuiltInArray<Axis_5>.Read(reader);
        reader.AlignTo(4); /* axes */
        Button_5[] buttons_ = BuiltInArray<Button_5>.Read(reader);
        reader.AlignTo(4); /* buttons */
        CompoundElement_1[] compoundElements_ = BuiltInArray<CompoundElement_1>.Read(reader);
        
        return new(axes_,
            buttons_,
            compoundElements_);
    }

    public override string ToString() => $"Elements_8\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axes[{axes.Length}] = {{");
        if (axes.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Axis_5 _4 in axes)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (axes.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttons[{buttons.Length}] = {{");
        if (buttons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (Button_5 _4 in buttons)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (buttons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}compoundElements[{compoundElements.Length}] = {{");
        if (compoundElements.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CompoundElement_1 _4 in compoundElements)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ elementIdentifier: {_4.elementIdentifier}, sourceElementIndex: {_4.sourceElementIndex}, sourceElementId: {_4.sourceElementId} }}\n");
            ++_4i;
        }
        if (compoundElements.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $Axis_5 (17 fields) */
public record class Axis_5 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    byte invert,
    int sourceAxisRange,
    int buttonAxisContribution,
    byte calibrateAxis,
    float axisZero,
    float axisMin,
    float axisMax,
    AxisCalibrationInfoEntry[] alternateCalibrations,
    HardwareAxisInfo axisInfo,
    int sourceElementId) : IUnityStructure
{
    public static Axis_5 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        byte invert_ = reader.ReadU8();
        reader.AlignTo(4); /* invert */
        int sourceAxisRange_ = reader.ReadS32();
        int buttonAxisContribution_ = reader.ReadS32();
        byte calibrateAxis_ = reader.ReadU8();
        reader.AlignTo(4); /* calibrateAxis */
        float axisZero_ = reader.ReadF32();
        float axisMin_ = reader.ReadF32();
        float axisMax_ = reader.ReadF32();
        AxisCalibrationInfoEntry[] alternateCalibrations_ = BuiltInArray<AxisCalibrationInfoEntry>.Read(reader);
        reader.AlignTo(4); /* alternateCalibrations */
        HardwareAxisInfo axisInfo_ = HardwareAxisInfo.Read(reader);
        reader.AlignTo(4); /* axisInfo */
        int sourceElementId_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            customCalculation_,
            customCalculationSourceData_,
            invert_,
            sourceAxisRange_,
            buttonAxisContribution_,
            calibrateAxis_,
            axisZero_,
            axisMin_,
            axisMax_,
            alternateCalibrations_,
            axisInfo_,
            sourceElementId_);
    }

    public override string ToString() => $"Axis_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}invert: {invert}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisRange: {sourceAxisRange}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}buttonAxisContribution: {buttonAxisContribution}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}calibrateAxis: {calibrateAxis}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisZero: {axisZero}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMin: {axisMin}");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisMax: {axisMax}");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}alternateCalibrations[{alternateCalibrations.Length}] = {{");
        if (alternateCalibrations.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (AxisCalibrationInfoEntry _4 in alternateCalibrations)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (alternateCalibrations.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}axisInfo: {{ _dataFormat: {axisInfo._dataFormat}, _excludeFromPolling: {axisInfo._excludeFromPolling}, _specialAxisType: {axisInfo._specialAxisType}, _pollingDeadZone: {axisInfo._pollingDeadZone} }}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceElementId: {sourceElementId}");
    }
}

/* $Button_5 (14 fields) */
public record class Button_5 (
    int elementIdentifier,
    int sourceType,
    int sourceAxis,
    float axisDeadZone,
    int sourceButton,
    PPtr<CustomCalculation> customCalculation,
    CustomCalculationSourceData_1[] customCalculationSourceData,
    int sourceAxisPole,
    byte requireMultipleButtons,
    int[] requiredButtons,
    byte ignoreIfButtonsActive,
    int[] ignoreIfButtonsActiveButtons,
    HardwareButtonInfo buttonInfo,
    int sourceElementId) : IUnityStructure
{
    public static Button_5 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceType_ = reader.ReadS32();
        int sourceAxis_ = reader.ReadS32();
        float axisDeadZone_ = reader.ReadF32();
        int sourceButton_ = reader.ReadS32();
        PPtr<CustomCalculation> customCalculation_ = PPtr<CustomCalculation>.Read(reader);
        CustomCalculationSourceData_1[] customCalculationSourceData_ = BuiltInArray<CustomCalculationSourceData_1>.Read(reader);
        reader.AlignTo(4); /* customCalculationSourceData */
        int sourceAxisPole_ = reader.ReadS32();
        byte requireMultipleButtons_ = reader.ReadU8();
        reader.AlignTo(4); /* requireMultipleButtons */
        int[] requiredButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* requiredButtons */
        byte ignoreIfButtonsActive_ = reader.ReadU8();
        reader.AlignTo(4); /* ignoreIfButtonsActive */
        int[] ignoreIfButtonsActiveButtons_ = BuiltInArray<int>.Read(reader);
        reader.AlignTo(4); /* ignoreIfButtonsActiveButtons */
        HardwareButtonInfo buttonInfo_ = HardwareButtonInfo.Read(reader);
        reader.AlignTo(4); /* buttonInfo */
        int sourceElementId_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceType_,
            sourceAxis_,
            axisDeadZone_,
            sourceButton_,
            customCalculation_,
            customCalculationSourceData_,
            sourceAxisPole_,
            requireMultipleButtons_,
            requiredButtons_,
            ignoreIfButtonsActive_,
            ignoreIfButtonsActiveButtons_,
            buttonInfo_,
            sourceElementId_);
    }

    public override string ToString() => $"Button_5\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceType: {sourceType}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxis: {sourceAxis}");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}axisDeadZone: {axisDeadZone}");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceButton: {sourceButton}");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}customCalculation: {customCalculation}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}customCalculationSourceData[{customCalculationSourceData.Length}] = {{");
        if (customCalculationSourceData.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (CustomCalculationSourceData_1 _4 in customCalculationSourceData)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (customCalculationSourceData.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceAxisPole: {sourceAxisPole}");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}requireMultipleButtons: {requireMultipleButtons}");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}requiredButtons[{requiredButtons.Length}] = {{");
        if (requiredButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in requiredButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (requiredButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ignoreIfButtonsActive: {ignoreIfButtonsActive}");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ignoreIfButtonsActiveButtons[{ignoreIfButtonsActiveButtons.Length}] = {{");
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (int _4 in ignoreIfButtonsActiveButtons)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (ignoreIfButtonsActiveButtons.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}buttonInfo: {{ _excludeFromPolling: {buttonInfo._excludeFromPolling}, _isPressureSensitive: {buttonInfo._isPressureSensitive} }}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceElementId: {sourceElementId}");
    }
}

/* $CompoundElement_1 (3 fields) */
public readonly record struct CompoundElement_1 (
    int elementIdentifier,
    int sourceElementIndex,
    int sourceElementId) : IUnityStructure
{
    public static CompoundElement_1 Read(EndianBinaryReader reader)
    {
        int elementIdentifier_ = reader.ReadS32();
        int sourceElementIndex_ = reader.ReadS32();
        int sourceElementId_ = reader.ReadS32();
        
        return new(elementIdentifier_,
            sourceElementIndex_,
            sourceElementId_);
    }

    public override string ToString() => $"CompoundElement_1\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}elementIdentifier: {elementIdentifier}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceElementIndex: {sourceElementIndex}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}sourceElementId: {sourceElementId}");
    }
}

/* $Platform_AppleGCController_Base (4 fields) */
public record class Platform_AppleGCController_Base (
    AsciiString description,
    MatchingCriteria_3 matchingCriteria,
    Elements_8 elements,
    AsciiString controllerName) : IUnityStructure
{
    public static Platform_AppleGCController_Base Read(EndianBinaryReader reader)
    {
        AsciiString description_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* description */
        MatchingCriteria_3 matchingCriteria_ = MatchingCriteria_3.Read(reader);
        reader.AlignTo(4); /* matchingCriteria */
        Elements_8 elements_ = Elements_8.Read(reader);
        reader.AlignTo(4); /* elements */
        AsciiString controllerName_ = BuiltInString.Read(reader);
        reader.AlignTo(4); /* controllerName */
        
        return new(description_,
            matchingCriteria_,
            elements_,
            controllerName_);
    }

    public override string ToString() => $"Platform_AppleGCController_Base\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}description: \"{description}\"");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}matchingCriteria: {{ \n{matchingCriteria.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}elements: {{ \n{elements.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}controllerName: \"{controllerName}\"");
    }
}

/* $ColorTextString (2 fields) */
public record class ColorTextString (
    LocalizedString String,
    ColorRGBA Color) : IUnityStructure
{
    public static ColorTextString Read(EndianBinaryReader reader)
    {
        LocalizedString String_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* String */
        ColorRGBA Color_ = ColorRGBA.Read(reader);
        
        return new(String_,
            Color_);
    }

    public override string ToString() => $"ColorTextString\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}String: {{ \n{String.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ rgba: {Color.rgba} }}\n");
    }
}

/* $GameLogMessage (4 fields) */
public record class GameLogMessage (
    ColorRGBA Color,
    int Icon,
    LocalizedString Message,
    LocalizedString Tooltip) : IUnityStructure
{
    public static GameLogMessage Read(EndianBinaryReader reader)
    {
        ColorRGBA Color_ = ColorRGBA.Read(reader);
        int Icon_ = reader.ReadS32();
        LocalizedString Message_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Message */
        LocalizedString Tooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tooltip */
        
        return new(Color_,
            Icon_,
            Message_,
            Tooltip_);
    }

    public override string ToString() => $"GameLogMessage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ rgba: {Color.rgba} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Message: {{ \n{Message.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tooltip: {{ \n{Tooltip.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TooltipBrickAttackResultStrings (8 fields) */
public record class TooltipBrickAttackResultStrings (
    LocalizedString AttackResultUnknown,
    LocalizedString AttackResultHit,
    LocalizedString AttackResultCoverHit,
    LocalizedString AttackResultMiss,
    LocalizedString AttackResultDodge,
    LocalizedString AttackResultRighteousFury,
    LocalizedString AttackResultParried,
    LocalizedString AttackResultDodgeParried) : IUnityStructure
{
    public static TooltipBrickAttackResultStrings Read(EndianBinaryReader reader)
    {
        LocalizedString AttackResultUnknown_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultUnknown */
        LocalizedString AttackResultHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultHit */
        LocalizedString AttackResultCoverHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultCoverHit */
        LocalizedString AttackResultMiss_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultMiss */
        LocalizedString AttackResultDodge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultDodge */
        LocalizedString AttackResultRighteousFury_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultRighteousFury */
        LocalizedString AttackResultParried_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultParried */
        LocalizedString AttackResultDodgeParried_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackResultDodgeParried */
        
        return new(AttackResultUnknown_,
            AttackResultHit_,
            AttackResultCoverHit_,
            AttackResultMiss_,
            AttackResultDodge_,
            AttackResultRighteousFury_,
            AttackResultParried_,
            AttackResultDodgeParried_);
    }

    public override string ToString() => $"TooltipBrickAttackResultStrings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultUnknown: {{ \n{AttackResultUnknown.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultHit: {{ \n{AttackResultHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultCoverHit: {{ \n{AttackResultCoverHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultMiss: {{ \n{AttackResultMiss.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultDodge: {{ \n{AttackResultDodge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultRighteousFury: {{ \n{AttackResultRighteousFury.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultParried: {{ \n{AttackResultParried.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackResultDodgeParried: {{ \n{AttackResultDodgeParried.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $TooltipBrickStrings (84 fields) */
public record class TooltipBrickStrings (
    LocalizedString TriggersOverpenetration,
    LocalizedString TriggersPush,
    LocalizedString HitChance,
    LocalizedString HitChanceSignature,
    LocalizedString HitRoll,
    LocalizedString InitialRoll,
    LocalizedString CoverHit,
    LocalizedString Parry,
    LocalizedString Dodge,
    LocalizedString Result,
    LocalizedString CriticalDamageModifier,
    LocalizedString CriticalHit,
    LocalizedString Damage,
    LocalizedString BaseDamage,
    LocalizedString InitialDamage,
    LocalizedString AdditionalDamage,
    LocalizedString ValAdd,
    LocalizedString PctAdd,
    LocalizedString PctMul,
    LocalizedString ValAddExtra,
    LocalizedString PctMulExtra,
    LocalizedString DamageDeflection,
    LocalizedString Armor,
    LocalizedString Penetration,
    LocalizedString EffectiveArmour,
    LocalizedString IncomingDamageNullifier,
    LocalizedString NullifierResultSuccess,
    LocalizedString NullifierResultFailed,
    LocalizedString BaseModifier,
    LocalizedString DefenderWeaponSkill,
    LocalizedString AttackerWeaponSkill,
    LocalizedString WeaponSkillPenalty,
    LocalizedString Superiority,
    LocalizedString FeaturesAndEquipmentsModifiers,
    LocalizedString BaseMultiplier,
    LocalizedString MinDamage,
    LocalizedString MaxDamage,
    LocalizedString Reasons,
    LocalizedString MinimalAdmissibleDamageHeader,
    LocalizedString MinimalAdmissibleDamage,
    LocalizedString MinimalAdmissibleDamageReason,
    LocalizedString MinimalAdmissibleDamageReasonValue,
    LocalizedString DamageSource,
    LocalizedString DamageReason,
    LocalizedString CheckRoll,
    LocalizedString Success,
    LocalizedString Failure,
    LocalizedString AutoHit,
    LocalizedString AutoMiss,
    LocalizedString AutoDodge,
    LocalizedString AutoParry,
    LocalizedString AutoHitMelee,
    LocalizedString AutoHitDestructible,
    LocalizedString AutoHitScatter,
    LocalizedString AutoHitGrenade,
    LocalizedString BallisticSkillPenalty,
    LocalizedString DistanceFactor,
    LocalizedString OverpenetrationModifier,
    LocalizedString Overpenetration,
    LocalizedString ChanceBorder,
    LocalizedString MaxValue,
    LocalizedString ChanceBorderMin,
    LocalizedString MinValue,
    LocalizedString TriggeredReroll,
    LocalizedString ScatterAttackNoTarget,
    LocalizedString ScatterAttackHit,
    LocalizedString ScatterAttackMiss,
    LocalizedString AssassinLethality,
    LocalizedString AutoCrit,
    LocalizedString Initiator,
    LocalizedString HealsWounds,
    LocalizedString SpaceHitChance,
    LocalizedString AutoHitAoE,
    LocalizedString BonusHit,
    LocalizedString EffectiveEvasion,
    LocalizedString Evasion,
    LocalizedString BonusDamage,
    LocalizedString ExtraDamage,
    LocalizedString Shield,
    LocalizedString ResultHit,
    LocalizedString CriticalResultHit,
    LocalizedString ResultAbsorbedDamage,
    LocalizedString DamageDifficultyModifier,
    LocalizedString ResultDeflection) : IUnityStructure
{
    public static TooltipBrickStrings Read(EndianBinaryReader reader)
    {
        LocalizedString TriggersOverpenetration_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TriggersOverpenetration */
        LocalizedString TriggersPush_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TriggersPush */
        LocalizedString HitChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChance */
        LocalizedString HitChanceSignature_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitChanceSignature */
        LocalizedString HitRoll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HitRoll */
        LocalizedString InitialRoll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialRoll */
        LocalizedString CoverHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CoverHit */
        LocalizedString Parry_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Parry */
        LocalizedString Dodge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Dodge */
        LocalizedString Result_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Result */
        LocalizedString CriticalDamageModifier_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalDamageModifier */
        LocalizedString CriticalHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalHit */
        LocalizedString Damage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Damage */
        LocalizedString BaseDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseDamage */
        LocalizedString InitialDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* InitialDamage */
        LocalizedString AdditionalDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AdditionalDamage */
        LocalizedString ValAdd_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ValAdd */
        LocalizedString PctAdd_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PctAdd */
        LocalizedString PctMul_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PctMul */
        LocalizedString ValAddExtra_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ValAddExtra */
        LocalizedString PctMulExtra_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* PctMulExtra */
        LocalizedString DamageDeflection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDeflection */
        LocalizedString Armor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Armor */
        LocalizedString Penetration_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Penetration */
        LocalizedString EffectiveArmour_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectiveArmour */
        LocalizedString IncomingDamageNullifier_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* IncomingDamageNullifier */
        LocalizedString NullifierResultSuccess_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NullifierResultSuccess */
        LocalizedString NullifierResultFailed_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* NullifierResultFailed */
        LocalizedString BaseModifier_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseModifier */
        LocalizedString DefenderWeaponSkill_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DefenderWeaponSkill */
        LocalizedString AttackerWeaponSkill_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AttackerWeaponSkill */
        LocalizedString WeaponSkillPenalty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* WeaponSkillPenalty */
        LocalizedString Superiority_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Superiority */
        LocalizedString FeaturesAndEquipmentsModifiers_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* FeaturesAndEquipmentsModifiers */
        LocalizedString BaseMultiplier_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BaseMultiplier */
        LocalizedString MinDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinDamage */
        LocalizedString MaxDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxDamage */
        LocalizedString Reasons_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Reasons */
        LocalizedString MinimalAdmissibleDamageHeader_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamageHeader */
        LocalizedString MinimalAdmissibleDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamage */
        LocalizedString MinimalAdmissibleDamageReason_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamageReason */
        LocalizedString MinimalAdmissibleDamageReasonValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinimalAdmissibleDamageReasonValue */
        LocalizedString DamageSource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageSource */
        LocalizedString DamageReason_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageReason */
        LocalizedString CheckRoll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CheckRoll */
        LocalizedString Success_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Success */
        LocalizedString Failure_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Failure */
        LocalizedString AutoHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHit */
        LocalizedString AutoMiss_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoMiss */
        LocalizedString AutoDodge_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoDodge */
        LocalizedString AutoParry_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoParry */
        LocalizedString AutoHitMelee_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitMelee */
        LocalizedString AutoHitDestructible_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitDestructible */
        LocalizedString AutoHitScatter_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitScatter */
        LocalizedString AutoHitGrenade_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitGrenade */
        LocalizedString BallisticSkillPenalty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BallisticSkillPenalty */
        LocalizedString DistanceFactor_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DistanceFactor */
        LocalizedString OverpenetrationModifier_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* OverpenetrationModifier */
        LocalizedString Overpenetration_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Overpenetration */
        LocalizedString ChanceBorder_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChanceBorder */
        LocalizedString MaxValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MaxValue */
        LocalizedString ChanceBorderMin_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ChanceBorderMin */
        LocalizedString MinValue_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MinValue */
        LocalizedString TriggeredReroll_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TriggeredReroll */
        LocalizedString ScatterAttackNoTarget_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterAttackNoTarget */
        LocalizedString ScatterAttackHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterAttackHit */
        LocalizedString ScatterAttackMiss_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ScatterAttackMiss */
        LocalizedString AssassinLethality_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AssassinLethality */
        LocalizedString AutoCrit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoCrit */
        LocalizedString Initiator_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Initiator */
        LocalizedString HealsWounds_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HealsWounds */
        LocalizedString SpaceHitChance_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* SpaceHitChance */
        LocalizedString AutoHitAoE_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* AutoHitAoE */
        LocalizedString BonusHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusHit */
        LocalizedString EffectiveEvasion_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* EffectiveEvasion */
        LocalizedString Evasion_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Evasion */
        LocalizedString BonusDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* BonusDamage */
        LocalizedString ExtraDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ExtraDamage */
        LocalizedString Shield_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Shield */
        LocalizedString ResultHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResultHit */
        LocalizedString CriticalResultHit_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* CriticalResultHit */
        LocalizedString ResultAbsorbedDamage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResultAbsorbedDamage */
        LocalizedString DamageDifficultyModifier_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageDifficultyModifier */
        LocalizedString ResultDeflection_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* ResultDeflection */
        
        return new(TriggersOverpenetration_,
            TriggersPush_,
            HitChance_,
            HitChanceSignature_,
            HitRoll_,
            InitialRoll_,
            CoverHit_,
            Parry_,
            Dodge_,
            Result_,
            CriticalDamageModifier_,
            CriticalHit_,
            Damage_,
            BaseDamage_,
            InitialDamage_,
            AdditionalDamage_,
            ValAdd_,
            PctAdd_,
            PctMul_,
            ValAddExtra_,
            PctMulExtra_,
            DamageDeflection_,
            Armor_,
            Penetration_,
            EffectiveArmour_,
            IncomingDamageNullifier_,
            NullifierResultSuccess_,
            NullifierResultFailed_,
            BaseModifier_,
            DefenderWeaponSkill_,
            AttackerWeaponSkill_,
            WeaponSkillPenalty_,
            Superiority_,
            FeaturesAndEquipmentsModifiers_,
            BaseMultiplier_,
            MinDamage_,
            MaxDamage_,
            Reasons_,
            MinimalAdmissibleDamageHeader_,
            MinimalAdmissibleDamage_,
            MinimalAdmissibleDamageReason_,
            MinimalAdmissibleDamageReasonValue_,
            DamageSource_,
            DamageReason_,
            CheckRoll_,
            Success_,
            Failure_,
            AutoHit_,
            AutoMiss_,
            AutoDodge_,
            AutoParry_,
            AutoHitMelee_,
            AutoHitDestructible_,
            AutoHitScatter_,
            AutoHitGrenade_,
            BallisticSkillPenalty_,
            DistanceFactor_,
            OverpenetrationModifier_,
            Overpenetration_,
            ChanceBorder_,
            MaxValue_,
            ChanceBorderMin_,
            MinValue_,
            TriggeredReroll_,
            ScatterAttackNoTarget_,
            ScatterAttackHit_,
            ScatterAttackMiss_,
            AssassinLethality_,
            AutoCrit_,
            Initiator_,
            HealsWounds_,
            SpaceHitChance_,
            AutoHitAoE_,
            BonusHit_,
            EffectiveEvasion_,
            Evasion_,
            BonusDamage_,
            ExtraDamage_,
            Shield_,
            ResultHit_,
            CriticalResultHit_,
            ResultAbsorbedDamage_,
            DamageDifficultyModifier_,
            ResultDeflection_);
    }

    public override string ToString() => $"TooltipBrickStrings\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);
        ToString_Field10(sb, indent, indent_);
        ToString_Field11(sb, indent, indent_);
        ToString_Field12(sb, indent, indent_);
        ToString_Field13(sb, indent, indent_);
        ToString_Field14(sb, indent, indent_);
        ToString_Field15(sb, indent, indent_);
        ToString_Field16(sb, indent, indent_);
        ToString_Field17(sb, indent, indent_);
        ToString_Field18(sb, indent, indent_);
        ToString_Field19(sb, indent, indent_);
        ToString_Field20(sb, indent, indent_);
        ToString_Field21(sb, indent, indent_);
        ToString_Field22(sb, indent, indent_);
        ToString_Field23(sb, indent, indent_);
        ToString_Field24(sb, indent, indent_);
        ToString_Field25(sb, indent, indent_);
        ToString_Field26(sb, indent, indent_);
        ToString_Field27(sb, indent, indent_);
        ToString_Field28(sb, indent, indent_);
        ToString_Field29(sb, indent, indent_);
        ToString_Field30(sb, indent, indent_);
        ToString_Field31(sb, indent, indent_);
        ToString_Field32(sb, indent, indent_);
        ToString_Field33(sb, indent, indent_);
        ToString_Field34(sb, indent, indent_);
        ToString_Field35(sb, indent, indent_);
        ToString_Field36(sb, indent, indent_);
        ToString_Field37(sb, indent, indent_);
        ToString_Field38(sb, indent, indent_);
        ToString_Field39(sb, indent, indent_);
        ToString_Field40(sb, indent, indent_);
        ToString_Field41(sb, indent, indent_);
        ToString_Field42(sb, indent, indent_);
        ToString_Field43(sb, indent, indent_);
        ToString_Field44(sb, indent, indent_);
        ToString_Field45(sb, indent, indent_);
        ToString_Field46(sb, indent, indent_);
        ToString_Field47(sb, indent, indent_);
        ToString_Field48(sb, indent, indent_);
        ToString_Field49(sb, indent, indent_);
        ToString_Field50(sb, indent, indent_);
        ToString_Field51(sb, indent, indent_);
        ToString_Field52(sb, indent, indent_);
        ToString_Field53(sb, indent, indent_);
        ToString_Field54(sb, indent, indent_);
        ToString_Field55(sb, indent, indent_);
        ToString_Field56(sb, indent, indent_);
        ToString_Field57(sb, indent, indent_);
        ToString_Field58(sb, indent, indent_);
        ToString_Field59(sb, indent, indent_);
        ToString_Field60(sb, indent, indent_);
        ToString_Field61(sb, indent, indent_);
        ToString_Field62(sb, indent, indent_);
        ToString_Field63(sb, indent, indent_);
        ToString_Field64(sb, indent, indent_);
        ToString_Field65(sb, indent, indent_);
        ToString_Field66(sb, indent, indent_);
        ToString_Field67(sb, indent, indent_);
        ToString_Field68(sb, indent, indent_);
        ToString_Field69(sb, indent, indent_);
        ToString_Field70(sb, indent, indent_);
        ToString_Field71(sb, indent, indent_);
        ToString_Field72(sb, indent, indent_);
        ToString_Field73(sb, indent, indent_);
        ToString_Field74(sb, indent, indent_);
        ToString_Field75(sb, indent, indent_);
        ToString_Field76(sb, indent, indent_);
        ToString_Field77(sb, indent, indent_);
        ToString_Field78(sb, indent, indent_);
        ToString_Field79(sb, indent, indent_);
        ToString_Field80(sb, indent, indent_);
        ToString_Field81(sb, indent, indent_);
        ToString_Field82(sb, indent, indent_);
        ToString_Field83(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TriggersOverpenetration: {{ \n{TriggersOverpenetration.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TriggersPush: {{ \n{TriggersPush.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChance: {{ \n{HitChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitChanceSignature: {{ \n{HitChanceSignature.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HitRoll: {{ \n{HitRoll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InitialRoll: {{ \n{InitialRoll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CoverHit: {{ \n{CoverHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Parry: {{ \n{Parry.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Dodge: {{ \n{Dodge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Result: {{ \n{Result.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field10(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CriticalDamageModifier: {{ \n{CriticalDamageModifier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field11(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CriticalHit: {{ \n{CriticalHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field12(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Damage: {{ \n{Damage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field13(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BaseDamage: {{ \n{BaseDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field14(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}InitialDamage: {{ \n{InitialDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field15(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AdditionalDamage: {{ \n{AdditionalDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field16(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ValAdd: {{ \n{ValAdd.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field17(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PctAdd: {{ \n{PctAdd.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field18(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PctMul: {{ \n{PctMul.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field19(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ValAddExtra: {{ \n{ValAddExtra.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field20(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}PctMulExtra: {{ \n{PctMulExtra.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field21(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageDeflection: {{ \n{DamageDeflection.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field22(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Armor: {{ \n{Armor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field23(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Penetration: {{ \n{Penetration.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field24(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectiveArmour: {{ \n{EffectiveArmour.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field25(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}IncomingDamageNullifier: {{ \n{IncomingDamageNullifier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field26(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NullifierResultSuccess: {{ \n{NullifierResultSuccess.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field27(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}NullifierResultFailed: {{ \n{NullifierResultFailed.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field28(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BaseModifier: {{ \n{BaseModifier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field29(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DefenderWeaponSkill: {{ \n{DefenderWeaponSkill.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field30(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AttackerWeaponSkill: {{ \n{AttackerWeaponSkill.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field31(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}WeaponSkillPenalty: {{ \n{WeaponSkillPenalty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field32(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Superiority: {{ \n{Superiority.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field33(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}FeaturesAndEquipmentsModifiers: {{ \n{FeaturesAndEquipmentsModifiers.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field34(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BaseMultiplier: {{ \n{BaseMultiplier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field35(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinDamage: {{ \n{MinDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field36(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaxDamage: {{ \n{MaxDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field37(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Reasons: {{ \n{Reasons.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field38(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinimalAdmissibleDamageHeader: {{ \n{MinimalAdmissibleDamageHeader.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field39(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinimalAdmissibleDamage: {{ \n{MinimalAdmissibleDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field40(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinimalAdmissibleDamageReason: {{ \n{MinimalAdmissibleDamageReason.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field41(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinimalAdmissibleDamageReasonValue: {{ \n{MinimalAdmissibleDamageReasonValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field42(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageSource: {{ \n{DamageSource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field43(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageReason: {{ \n{DamageReason.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field44(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CheckRoll: {{ \n{CheckRoll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field45(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Success: {{ \n{Success.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field46(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Failure: {{ \n{Failure.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field47(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoHit: {{ \n{AutoHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field48(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoMiss: {{ \n{AutoMiss.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field49(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoDodge: {{ \n{AutoDodge.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field50(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoParry: {{ \n{AutoParry.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field51(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoHitMelee: {{ \n{AutoHitMelee.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field52(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoHitDestructible: {{ \n{AutoHitDestructible.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field53(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoHitScatter: {{ \n{AutoHitScatter.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field54(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoHitGrenade: {{ \n{AutoHitGrenade.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field55(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BallisticSkillPenalty: {{ \n{BallisticSkillPenalty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field56(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DistanceFactor: {{ \n{DistanceFactor.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field57(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}OverpenetrationModifier: {{ \n{OverpenetrationModifier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field58(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Overpenetration: {{ \n{Overpenetration.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field59(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChanceBorder: {{ \n{ChanceBorder.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field60(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MaxValue: {{ \n{MaxValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field61(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ChanceBorderMin: {{ \n{ChanceBorderMin.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field62(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MinValue: {{ \n{MinValue.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field63(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TriggeredReroll: {{ \n{TriggeredReroll.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field64(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterAttackNoTarget: {{ \n{ScatterAttackNoTarget.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field65(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterAttackHit: {{ \n{ScatterAttackHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field66(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ScatterAttackMiss: {{ \n{ScatterAttackMiss.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field67(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AssassinLethality: {{ \n{AssassinLethality.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field68(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoCrit: {{ \n{AutoCrit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field69(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Initiator: {{ \n{Initiator.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field70(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HealsWounds: {{ \n{HealsWounds.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field71(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}SpaceHitChance: {{ \n{SpaceHitChance.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field72(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}AutoHitAoE: {{ \n{AutoHitAoE.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field73(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BonusHit: {{ \n{BonusHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field74(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}EffectiveEvasion: {{ \n{EffectiveEvasion.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field75(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Evasion: {{ \n{Evasion.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field76(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}BonusDamage: {{ \n{BonusDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field77(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ExtraDamage: {{ \n{ExtraDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field78(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Shield: {{ \n{Shield.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field79(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResultHit: {{ \n{ResultHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field80(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}CriticalResultHit: {{ \n{CriticalResultHit.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field81(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResultAbsorbedDamage: {{ \n{ResultAbsorbedDamage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field82(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageDifficultyModifier: {{ \n{DamageDifficultyModifier.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field83(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}ResultDeflection: {{ \n{ResultDeflection.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $SavingThrowMessage (5 fields) */
public record class SavingThrowMessage (
    ColorRGBA Color,
    int Icon,
    LocalizedString Message,
    LocalizedString Effect,
    LocalizedString Tooltip) : IUnityStructure
{
    public static SavingThrowMessage Read(EndianBinaryReader reader)
    {
        ColorRGBA Color_ = ColorRGBA.Read(reader);
        int Icon_ = reader.ReadS32();
        LocalizedString Message_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Message */
        LocalizedString Effect_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Effect */
        LocalizedString Tooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tooltip */
        
        return new(Color_,
            Icon_,
            Message_,
            Effect_,
            Tooltip_);
    }

    public override string ToString() => $"SavingThrowMessage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ rgba: {Color.rgba} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}Icon: {Icon}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Message: {{ \n{Message.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Effect: {{ \n{Effect.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tooltip: {{ \n{Tooltip.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $DamageLogMessage (10 fields) */
public record class DamageLogMessage (
    ColorRGBA Color,
    LocalizedString Message,
    LocalizedString MessageFailedCheck,
    LocalizedString MessageUnknownSource,
    LocalizedString MessageCollision,
    LocalizedString Tooltip,
    LocalizedString TooltipSource,
    LocalizedString TooltipSneak,
    LocalizedString TooltipDifficulty,
    LocalizedString DamageImmune) : IUnityStructure
{
    public static DamageLogMessage Read(EndianBinaryReader reader)
    {
        ColorRGBA Color_ = ColorRGBA.Read(reader);
        LocalizedString Message_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Message */
        LocalizedString MessageFailedCheck_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageFailedCheck */
        LocalizedString MessageUnknownSource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageUnknownSource */
        LocalizedString MessageCollision_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageCollision */
        LocalizedString Tooltip_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* Tooltip */
        LocalizedString TooltipSource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipSource */
        LocalizedString TooltipSneak_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipSneak */
        LocalizedString TooltipDifficulty_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipDifficulty */
        LocalizedString DamageImmune_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* DamageImmune */
        
        return new(Color_,
            Message_,
            MessageFailedCheck_,
            MessageUnknownSource_,
            MessageCollision_,
            Tooltip_,
            TooltipSource_,
            TooltipSneak_,
            TooltipDifficulty_,
            DamageImmune_);
    }

    public override string ToString() => $"DamageLogMessage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);
        ToString_Field7(sb, indent, indent_);
        ToString_Field8(sb, indent, indent_);
        ToString_Field9(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ rgba: {Color.rgba} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Message: {{ \n{Message.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MessageFailedCheck: {{ \n{MessageFailedCheck.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MessageUnknownSource: {{ \n{MessageUnknownSource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MessageCollision: {{ \n{MessageCollision.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Tooltip: {{ \n{Tooltip.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipSource: {{ \n{TooltipSource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field7(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipSneak: {{ \n{TooltipSneak.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field8(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipDifficulty: {{ \n{TooltipDifficulty.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field9(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}DamageImmune: {{ \n{DamageImmune.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $StatDamageLogMessage (5 fields) */
public record class StatDamageLogMessage (
    ColorRGBA Color,
    LocalizedString MessageWithSource,
    LocalizedString MessageWithUnknownSource,
    LocalizedString TooltipCount,
    LocalizedString TooltipSource) : IUnityStructure
{
    public static StatDamageLogMessage Read(EndianBinaryReader reader)
    {
        ColorRGBA Color_ = ColorRGBA.Read(reader);
        LocalizedString MessageWithSource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageWithSource */
        LocalizedString MessageWithUnknownSource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* MessageWithUnknownSource */
        LocalizedString TooltipCount_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipCount */
        LocalizedString TooltipSource_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* TooltipSource */
        
        return new(Color_,
            MessageWithSource_,
            MessageWithUnknownSource_,
            TooltipCount_,
            TooltipSource_);
    }

    public override string ToString() => $"StatDamageLogMessage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ rgba: {Color.rgba} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MessageWithSource: {{ \n{MessageWithSource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}MessageWithUnknownSource: {{ \n{MessageWithUnknownSource.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipCount: {{ \n{TooltipCount.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}TooltipSource: {{ \n{TooltipSource.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $HealLogMessage (3 fields) */
public record class HealLogMessage (
    ColorRGBA Color,
    LocalizedString HealMessage,
    LocalizedString HealSelfMessage) : IUnityStructure
{
    public static HealLogMessage Read(EndianBinaryReader reader)
    {
        ColorRGBA Color_ = ColorRGBA.Read(reader);
        LocalizedString HealMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HealMessage */
        LocalizedString HealSelfMessage_ = LocalizedString.Read(reader);
        reader.AlignTo(4); /* HealSelfMessage */
        
        return new(Color_,
            HealMessage_,
            HealSelfMessage_);
    }

    public override string ToString() => $"HealLogMessage\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}Color: {{ rgba: {Color.rgba} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HealMessage: {{ \n{HealMessage.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}HealSelfMessage: {{ \n{HealSelfMessage.ToString(indent+4)}{indent_}}}\n");
    }
}

/* $OcclusionGeometry (3 fields) */
public record class OcclusionGeometry (
    PackedBounds[] bounds,
    PPtr<Renderer>[] renderers,
    ushort[] indices) : IUnityStructure
{
    public static OcclusionGeometry Read(EndianBinaryReader reader)
    {
        PackedBounds[] bounds_ = BuiltInArray<PackedBounds>.Read(reader);
        reader.AlignTo(4); /* bounds */
        PPtr<Renderer>[] renderers_ = BuiltInArray<PPtr<Renderer>>.Read(reader);
        ushort[] indices_ = BuiltInArray<ushort>.Read(reader);
        reader.AlignTo(4); /* indices */
        
        return new(bounds_,
            renderers_,
            indices_);
    }

    public override string ToString() => $"OcclusionGeometry\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}bounds[{bounds.Length}] = {{");
        if (bounds.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PackedBounds _4 in bounds)
        {
            sb.Append($"{indent_ + ' '.Repeat(4)}[{_4i}] = {{ \n{_4.ToString(indent+8)}{indent_ + ' '.Repeat(4)}}}\n");
            ++_4i;
        }
        if (bounds.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}renderers[{renderers.Length}] = {{");
        if (renderers.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (PPtr<Renderer> _4 in renderers)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (renderers.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}indices[{indices.Length}] = {{");
        if (indices.Length > 0) sb.AppendLine();
        int _4i = 0;
        foreach (ushort _4 in indices)
        {
            sb.AppendLine($"{indent_ + ' '.Repeat(4)}[{_4i}] = {_4}");
            ++_4i;
        }
        if (indices.Length > 0) sb.Append(indent_);
        sb.AppendLine("}");
    }
}

/* $PackedBounds (7 fields) */
public record class PackedBounds (
    half3 a,
    half3 b,
    half3 c,
    half3 e,
    half4 q,
    int ib,
    int ie) : IUnityStructure
{
    public static PackedBounds Read(EndianBinaryReader reader)
    {
        half3 a_ = half3.Read(reader);
        reader.AlignTo(4); /* a */
        half3 b_ = half3.Read(reader);
        reader.AlignTo(4); /* b */
        half3 c_ = half3.Read(reader);
        reader.AlignTo(4); /* c */
        half3 e_ = half3.Read(reader);
        reader.AlignTo(4); /* e */
        half4 q_ = half4.Read(reader);
        reader.AlignTo(4); /* q */
        int ib_ = reader.ReadS32();
        int ie_ = reader.ReadS32();
        
        return new(a_,
            b_,
            c_,
            e_,
            q_,
            ib_,
            ie_);
    }

    public override string ToString() => $"PackedBounds\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);
        ToString_Field4(sb, indent, indent_);
        ToString_Field5(sb, indent, indent_);
        ToString_Field6(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}a: {{ \n{a.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}b: {{ \n{b.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}c: {{ \n{c.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}e: {{ \n{e.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field4(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}q: {{ \n{q.ToString(indent+4)}{indent_}}}\n");
    }

    public void ToString_Field5(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ib: {ib}");
    }

    public void ToString_Field6(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}ie: {ie}");
    }
}

/* $half3 (3 fields) */
public record class half3 (
    half x,
    half y,
    half z) : IUnityStructure
{
    public static half3 Read(EndianBinaryReader reader)
    {
        half x_ = half.Read(reader);
        reader.AlignTo(4); /* x */
        half y_ = half.Read(reader);
        reader.AlignTo(4); /* y */
        half z_ = half.Read(reader);
        reader.AlignTo(4); /* z */
        
        return new(x_,
            y_,
            z_);
    }

    public override string ToString() => $"half3\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ @value: {x.@value} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ @value: {y.@value} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ @value: {z.@value} }}\n");
    }
}

/* $half (1 fields) */
public readonly record struct half (
    ushort @value) : IUnityStructure
{
    public static half Read(EndianBinaryReader reader)
    {
        ushort @value_ = reader.ReadU16();
        reader.AlignTo(4); /* @value */
        
        return new(@value_);
    }

    public override string ToString() => $"half\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.AppendLine($"{indent_}@value: {@value}");
    }
}

/* $half4 (4 fields) */
public record class half4 (
    half x,
    half y,
    half z,
    half w) : IUnityStructure
{
    public static half4 Read(EndianBinaryReader reader)
    {
        half x_ = half.Read(reader);
        reader.AlignTo(4); /* x */
        half y_ = half.Read(reader);
        reader.AlignTo(4); /* y */
        half z_ = half.Read(reader);
        reader.AlignTo(4); /* z */
        half w_ = half.Read(reader);
        reader.AlignTo(4); /* w */
        
        return new(x_,
            y_,
            z_,
            w_);
    }

    public override string ToString() => $"half4\n{ToString(4)}";

    public string ToString(int indent)
    {
        StringBuilder sb = new();
        string indent_ = ' '.Repeat(indent);

        ToString_Field0(sb, indent, indent_);
        ToString_Field1(sb, indent, indent_);
        ToString_Field2(sb, indent, indent_);
        ToString_Field3(sb, indent, indent_);

        return sb.ToString();
    }

    public void ToString_Field0(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}x: {{ @value: {x.@value} }}\n");
    }

    public void ToString_Field1(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}y: {{ @value: {y.@value} }}\n");
    }

    public void ToString_Field2(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}z: {{ @value: {z.@value} }}\n");
    }

    public void ToString_Field3(StringBuilder sb, int indent, string indent_)
    {
        sb.Append($"{indent_}w: {{ @value: {w.@value} }}\n");
    }
}

/* forward decl ?Object (no type info) */
public record struct Object;
/* forward decl ?RuntimeAnimatorController (no type info) */
public record struct RuntimeAnimatorController;
/* forward decl ?Renderer (no type info) */
public record struct Renderer;
/* forward decl ?Texture (no type info) */
public record struct Texture;
/* forward decl ?NavMeshData (no type info) */
public record struct NavMeshData;
/* forward decl ?PhysicsMaterial2D (no type info) */
public record struct PhysicsMaterial2D;
/* forward decl ?ShaderVariantCollection (no type info) */
public record struct ShaderVariantCollection;
/* forward decl ?ArticulationBody (no type info) */
public record struct ArticulationBody;
/* forward decl ?NamedObject (no type info) */
public record struct NamedObject;
/* forward decl ?Component (no type info) */
public record struct Component;
/* forward decl ?Flare (no type info) */
public record struct Flare;
/* forward decl ?ParticleSystemForceField (no type info) */
public record struct ParticleSystemForceField;
/* forward decl ?Selectable (no type info) */
public record struct Selectable;
/* forward decl ?Graphic (no type info) */
public record struct Graphic;
/* forward decl ?ScriptableRendererFeature (no type info) */
public record struct ScriptableRendererFeature;
/* forward decl ?CharGenBackgroundBasePhaseSelectorItemView`1 (no type info) */
public record struct CharGenBackgroundBasePhaseSelectorItemView_1;
/* forward decl ?CharInfoSkillsBlockCommonView (no type info) */
public record struct CharInfoSkillsBlockCommonView;
/* forward decl ?InventorySlotView (no type info) */
public record struct InventorySlotView;
/* forward decl ?InsertableLootSlotView (no type info) */
public record struct InsertableLootSlotView;
/* forward decl ?TrapObjectView (no type info) */
public record struct TrapObjectView;
/* forward decl ?ColorAnimator (no type info) */
public record struct ColorAnimator;
/* forward decl ?DisintegrationAnimator (no type info) */
public record struct DisintegrationAnimator;
/* forward decl ?CharInfoAbilityScoresBlockBaseView (no type info) */
public record struct CharInfoAbilityScoresBlockBaseView;
/* forward decl ?VirtualListComponent (no type info) */
public record struct VirtualListComponent;
/* forward decl ?NonConvexColliderAsset (no type info) */
public record struct NonConvexColliderAsset;
/* forward decl ?SaveLoadMenuEntityBaseView (no type info) */
public record struct SaveLoadMenuEntityBaseView;
/* forward decl ?TMP_Text (no type info) */
public record struct TMP_Text;
/* forward decl ?BrushDecorPaintModeObjectPlacementSettings (no type info) */
public record struct BrushDecorPaintModeObjectPlacementSettings;
/* forward decl ?ContextButtonFx (no type info) */
public record struct ContextButtonFx;
/* forward decl ?ActionBarBaseSlotView (no type info) */
public record struct ActionBarBaseSlotView;
/* forward decl ?CombatLogItemBaseView (no type info) */
public record struct CombatLogItemBaseView;
/* forward decl ?WeaponSetBaseView (no type info) */
public record struct WeaponSetBaseView;
/* forward decl ?CharacterBakedTextures (no type info) */
public record struct CharacterBakedTextures;
/* forward decl ?PlayableAsset (no type info) */
public record struct PlayableAsset;
/* forward decl ?ScriptableObject (no type info) */
public record struct ScriptableObject;
/* forward decl ?TrackAsset (no type info) */
public record struct TrackAsset;
/* forward decl ?VirtualListElementViewBase`1 (no type info) */
public record struct VirtualListElementViewBase_1;
/* forward decl ?CargoDetailedZoneBaseView (no type info) */
public record struct CargoDetailedZoneBaseView;
/* forward decl ?LootSlotView (no type info) */
public record struct LootSlotView;
/* forward decl ?ObjectRotationGizmo (no type info) */
public record struct ObjectRotationGizmo;
/* forward decl ?ObjectScaleGizmo (no type info) */
public record struct ObjectScaleGizmo;
/* forward decl ?ObjectSelectionExtrudeGizmo (no type info) */
public record struct ObjectSelectionExtrudeGizmo;
/* forward decl ?PrefabCategoryScrollViewLookAndFeelWindow (no type info) */
public record struct PrefabCategoryScrollViewLookAndFeelWindow;
/* forward decl ?BakedAnimationParameters (no type info) */
public record struct BakedAnimationParameters;
/* forward decl ?SurfaceCombatUnitOrderView (no type info) */
public record struct SurfaceCombatUnitOrderView;
/* forward decl ?SurfaceCombatUnitOrderVerticalView (no type info) */
public record struct SurfaceCombatUnitOrderVerticalView;
/* forward decl ?StatusEffectBaseView (no type info) */
public record struct StatusEffectBaseView;
/* forward decl ?LayoutGroup (no type info) */
public record struct LayoutGroup;
/* forward decl ?ObjectGrabSettings (no type info) */
public record struct ObjectGrabSettings;
/* forward decl ?ShadowProxy (no type info) */
public record struct ShadowProxy;
/* forward decl ?BookEventAnswerView (no type info) */
public record struct BookEventAnswerView;
/* forward decl ?TooltipBaseView (no type info) */
public record struct TooltipBaseView;
/* forward decl ?WwiseEventReference (no type info) */
public record struct WwiseEventReference;
/* forward decl ?PBDColliderBase (no type info) */
public record struct PBDColliderBase;
/* forward decl ?LootInventorySlotView (no type info) */
public record struct LootInventorySlotView;
/* forward decl ?SurfaceMomentumEntityView (no type info) */
public record struct SurfaceMomentumEntityView;
/* forward decl ?SurfaceActionBarSlotAbilityView (no type info) */
public record struct SurfaceActionBarSlotAbilityView;
/* forward decl ?CharInfoProfitFactorItemBaseView (no type info) */
public record struct CharInfoProfitFactorItemBaseView;
/* forward decl ?ItemsFilterSearchBaseView (no type info) */
public record struct ItemsFilterSearchBaseView;
/* forward decl ?InitiativeTrackerView (no type info) */
public record struct InitiativeTrackerView;
/* forward decl ?SnapControllerBase (no type info) */
public record struct SnapControllerBase;
/* forward decl ?SnapMapBase (no type info) */
public record struct SnapMapBase;
/* forward decl ?CargoDetailedBaseView (no type info) */
public record struct CargoDetailedBaseView;
/* forward decl ?SurfaceActionBarPartAbilitiesBaseView (no type info) */
public record struct SurfaceActionBarPartAbilitiesBaseView;
/* forward decl ?ObjectSelectionPaintModeSettings (no type info) */
public record struct ObjectSelectionPaintModeSettings;
/* forward decl ?Octave3DEditorWindow (no type info) */
public record struct Octave3DEditorWindow;
/* forward decl ?PrefabManagementWindow (no type info) */
public record struct PrefabManagementWindow;
/* forward decl ?ObjectPlacementSettingsWindow (no type info) */
public record struct ObjectPlacementSettingsWindow;
/* forward decl ?PrefabsToCategoryDropSettingsWindow (no type info) */
public record struct PrefabsToCategoryDropSettingsWindow;
/* forward decl ?PrefabTagsWindow (no type info) */
public record struct PrefabTagsWindow;
/* forward decl ?ObjectLayersWindow (no type info) */
public record struct ObjectLayersWindow;
/* forward decl ?ObjectGrabSettingsWindow (no type info) */
public record struct ObjectGrabSettingsWindow;
/* forward decl ?Octave3DConfigSaveWindow (no type info) */
public record struct Octave3DConfigSaveWindow;
/* forward decl ?Octave3DConfigLoadWindow (no type info) */
public record struct Octave3DConfigLoadWindow;
/* forward decl ?DecorPaintBrushViewLookAndFeelWindow (no type info) */
public record struct DecorPaintBrushViewLookAndFeelWindow;
/* forward decl ?CharGenCareerPhaseDetailedView (no type info) */
public record struct CharGenCareerPhaseDetailedView;
/* forward decl ?CharGenAttributesPhaseDetailedView (no type info) */
public record struct CharGenAttributesPhaseDetailedView;
/* forward decl ?CharGenSummaryPhaseDetailedView (no type info) */
public record struct CharGenSummaryPhaseDetailedView;
/* forward decl ?CharGenShipPhaseDetailedView (no type info) */
public record struct CharGenShipPhaseDetailedView;
/* forward decl ?PlatformSettings (no type info) */
public record struct PlatformSettings;
/* forward decl ?IK (no type info) */
public record struct IK;
/* forward decl ?OvertipUnitView (no type info) */
public record struct OvertipUnitView;
/* forward decl ?VendorTradePartView`3 (no type info) */
public record struct VendorTradePartView_3;
/* forward decl ?VendorReputationPartView`2 (no type info) */
public record struct VendorReputationPartView_2;
/* forward decl ?CareerPathSelectionTabsCommonView (no type info) */
public record struct CareerPathSelectionTabsCommonView;
/* forward decl ?ExitLocationWindowBaseView (no type info) */
public record struct ExitLocationWindowBaseView;
/* forward decl ?ScriptableRendererData (no type info) */
public record struct ScriptableRendererData;
/* forward decl ?AnimationActionBase (no type info) */
public record struct AnimationActionBase;
/* forward decl ?ObjectPlacementPathTileConnectionConfiguration (no type info) */
public record struct ObjectPlacementPathTileConnectionConfiguration;
/* forward decl ?ObjectPlacementPathTileConnectionConfigurationDatabaseViewData (no type info) */
public record struct ObjectPlacementPathTileConnectionConfigurationDatabaseViewData;
/* forward decl ?FactionVendorInformationBaseView (no type info) */
public record struct FactionVendorInformationBaseView;
/* forward decl ?WeatherCustomEntitySettings (no type info) */
public record struct WeatherCustomEntitySettings;
/* forward decl ?ItemSlotBaseView (no type info) */
public record struct ItemSlotBaseView;
/* forward decl ?PointAndClickObjectPlacement (no type info) */
public record struct PointAndClickObjectPlacement;
/* forward decl ?ObjectPlacementPathRenderSettings (no type info) */
public record struct ObjectPlacementPathRenderSettings;
/* forward decl ?ObjectPlacementExtensionPlaneRenderSettings (no type info) */
public record struct ObjectPlacementExtensionPlaneRenderSettings;
/* forward decl ?UnitProgressionCommonView (no type info) */
public record struct UnitProgressionCommonView;
/* forward decl ?CreditsBaseView (no type info) */
public record struct CreditsBaseView;
/* forward decl ?PrefabTagSelectionViewData (no type info) */
public record struct PrefabTagSelectionViewData;
/* forward decl ?PrefabTagFilter (no type info) */
public record struct PrefabTagFilter;
/* forward decl ?VendorSlotView (no type info) */
public record struct VendorSlotView;
/* forward decl ?GameObjectSphereTree (no type info) */
public record struct GameObjectSphereTree;
/* forward decl ?ObjectLayerDatabase (no type info) */
public record struct ObjectLayerDatabase;
/* forward decl ?ObjectPlacementPathHeightPatternDatabase (no type info) */
public record struct ObjectPlacementPathHeightPatternDatabase;
/* forward decl ?PrefabsToPathTileConectionButtonDropSettings (no type info) */
public record struct PrefabsToPathTileConectionButtonDropSettings;
/* forward decl ?PrefabsToDecorPaintBrushEventHandler (no type info) */
public record struct PrefabsToDecorPaintBrushEventHandler;
/* forward decl ?MeshCombineSettings (no type info) */
public record struct MeshCombineSettings;
/* forward decl ?AkEventCallbackData (no type info) */
public record struct AkEventCallbackData;
/* forward decl ?Collider (no type info) */
public record struct Collider;
/* forward decl ?CharInfoSkillsAndWeaponsBaseView (no type info) */
public record struct CharInfoSkillsAndWeaponsBaseView;
/* forward decl ?CharInfoAbilitiesBaseView (no type info) */
public record struct CharInfoAbilitiesBaseView;
/* forward decl ?UnitSpawnerBase (no type info) */
public record struct UnitSpawnerBase;
/* forward decl ?SignalAsset (no type info) */
public record struct SignalAsset;
/* forward decl ?ObjectUniformScaleRandomizationSettings (no type info) */
public record struct ObjectUniformScaleRandomizationSettings;
/* forward decl ?AxisRotationRandomizationModeSettings (no type info) */
public record struct AxisRotationRandomizationModeSettings;
/* forward decl ?ConvictionBarBaseView (no type info) */
public record struct ConvictionBarBaseView;
/* forward decl ?LocalMapMarkerPCView (no type info) */
public record struct LocalMapMarkerPCView;
/* forward decl ?InventoryEquipSlotView (no type info) */
public record struct InventoryEquipSlotView;
/* forward decl ?DecorPaintObjectPlacementBrush (no type info) */
public record struct DecorPaintObjectPlacementBrush;
/* forward decl ?DecorPaintObjectPlacementBrushDatabaseViewData (no type info) */
public record struct DecorPaintObjectPlacementBrushDatabaseViewData;
/* forward decl ?BaseUnitMark (no type info) */
public record struct BaseUnitMark;
/* forward decl ?ShadowProxyCombinerBox (no type info) */
public record struct ShadowProxyCombinerBox;
/* forward decl ?GroupChangerCharacterBaseView (no type info) */
public record struct GroupChangerCharacterBaseView;
/* forward decl ?PrefabInstantiationSettings (no type info) */
public record struct PrefabInstantiationSettings;
/* forward decl ?PrefabActivationSettings (no type info) */
public record struct PrefabActivationSettings;
/* forward decl ?PrefabTagAssociations (no type info) */
public record struct PrefabTagAssociations;
/* forward decl ?GUISkin (no type info) */
public record struct GUISkin;
/* forward decl ?SaveLoadMenuBaseView (no type info) */
public record struct SaveLoadMenuBaseView;
/* forward decl ?SaveSlotBaseView (no type info) */
public record struct SaveSlotBaseView;
/* forward decl ?SaveSlotCollectionVirtualBaseView (no type info) */
public record struct SaveSlotCollectionVirtualBaseView;
/* forward decl ?SaveFullScreenshotBaseView (no type info) */
public record struct SaveFullScreenshotBaseView;
/* forward decl ?ObjectPlacementBlockPaddingSettings (no type info) */
public record struct ObjectPlacementBlockPaddingSettings;
/* forward decl ?ObjectPlacementBlockHeightAdjustmentSettings (no type info) */
public record struct ObjectPlacementBlockHeightAdjustmentSettings;
/* forward decl ?ObjectPlacementBlockSubdivisionSettings (no type info) */
public record struct ObjectPlacementBlockSubdivisionSettings;
/* forward decl ?CharGenAttributesPhasePantographItemView (no type info) */
public record struct CharGenAttributesPhasePantographItemView;
/* forward decl ?LimbIK (no type info) */
public record struct LimbIK;
/* forward decl ?GrounderBipedIK (no type info) */
public record struct GrounderBipedIK;
/* forward decl ?AbstractUnitEntityView (no type info) */
public record struct AbstractUnitEntityView;
/* forward decl ?RagdollPostEventWithSurface (no type info) */
public record struct RagdollPostEventWithSurface;
/* forward decl ?DecalGeometryHolder (no type info) */
public record struct DecalGeometryHolder;
/* forward decl ?PrefabTag (no type info) */
public record struct PrefabTag;
/* forward decl ?PrefabTagDatabaseViewData (no type info) */
public record struct PrefabTagDatabaseViewData;
/* forward decl ?CareerPathsListsCommonView (no type info) */
public record struct CareerPathsListsCommonView;
/* forward decl ?CareerPathProgressionCommonView (no type info) */
public record struct CareerPathProgressionCommonView;
/* forward decl ?ReactiveProperty`1 (no type info) */
public record struct ReactiveProperty_1;
/* forward decl ?TooltipBrickOtherObjectsInfoView (no type info) */
public record struct TooltipBrickOtherObjectsInfoView;
/* forward decl ?Solver2D (no type info) */
public record struct Solver2D;
/* forward decl ?VolumeComponent (no type info) */
public record struct VolumeComponent;
/* forward decl ?ObjectLayerObjectMaskViewData (no type info) */
public record struct ObjectLayerObjectMaskViewData;
/* forward decl ?SplineUser (no type info) */
public record struct SplineUser;
/* forward decl ?UISettingsEntityBase (no type info) */
public record struct UISettingsEntityBase;
/* forward decl ?SaveLoadMenuSelectorBaseView (no type info) */
public record struct SaveLoadMenuSelectorBaseView;
/* forward decl ?StaticRendererLink (no type info) */
public record struct StaticRendererLink;
/* forward decl ?ObjectCollectionMaskViewData (no type info) */
public record struct ObjectCollectionMaskViewData;
/* forward decl ?MessageBoxBaseView (no type info) */
public record struct MessageBoxBaseView;
/* forward decl ?SimpleGridSettings (no type info) */
public record struct SimpleGridSettings;
/* forward decl ?PostAbilityDetailedBaseView (no type info) */
public record struct PostAbilityDetailedBaseView;
/* forward decl ?Editor (no type info) */
public record struct Editor;
/* forward decl ?BugReportDuplicatesBaseView (no type info) */
public record struct BugReportDuplicatesBaseView;
/* forward decl ?AkAudioListener (no type info) */
public record struct AkAudioListener;
/* forward decl ?AkGameObjPosOffsetData (no type info) */
public record struct AkGameObjPosOffsetData;
/* forward decl ?ObjectPlacementPathManualConstructionSettings (no type info) */
public record struct ObjectPlacementPathManualConstructionSettings;
/* forward decl ?CharGenNameBaseView (no type info) */
public record struct CharGenNameBaseView;
/* forward decl ?CharInfoClassesListPCView (no type info) */
public record struct CharInfoClassesListPCView;
/* forward decl ?InputManager_Base (no type info) */
public record struct InputManager_Base;
/* forward decl ?TMP_ScrollbarEventHandler (no type info) */
public record struct TMP_ScrollbarEventHandler;
/* forward decl ?TMP_InputValidator (no type info) */
public record struct TMP_InputValidator;
/* forward decl ?VFXBinderBase (no type info) */
public record struct VFXBinderBase;
/* forward decl ?ObjectEraserSettings (no type info) */
public record struct ObjectEraserSettings;
/* forward decl ?CharGenCustomPortraitCreatorView (no type info) */
public record struct CharGenCustomPortraitCreatorView;
/* forward decl ?BugReportBaseView (no type info) */
public record struct BugReportBaseView;
/* forward decl ?Rigidbody2D (no type info) */
public record struct Rigidbody2D;
/* forward decl ?CustomCalculation (no type info) */
public record struct CustomCalculation;
/* forward decl ?ContextMenuEntityView (no type info) */
public record struct ContextMenuEntityView;
